/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class MemberInformationService {

  public interface Iface extends com.froad.thrift.monitor.service.BizMonitorService.Iface {

    /**
     * 通过会员编号查询会员信息，包含VIP信息
     * Common.ResultVo.Data MemberInfo
     * 
     * @param memberCode
     * @param clientId
     */
    public com.froad.thrift.vo.member.MemberInfoVo selectUserByMemberCode(long memberCode, String clientId) throws org.apache.thrift.TException;

    /**
     * 通过手机号码、账号、Email查询会员信息，包含VIP信息
     * Common.ResultVo.Data MemberInfo
     * 
     * @param loginID
     * @param clientId
     */
    public com.froad.thrift.vo.member.MemberInfoVo selectUserByLoginID(String loginID, String clientId) throws org.apache.thrift.TException;

    /**
     * 通过账号(用户名)查询会员积分信息
     * Common.ResultVo
     * 
     * @param clientId
     * @param loginID
     */
    public com.froad.thrift.vo.member.UserEnginePointsVo selectMemberPointsInfoByLoginID(String clientId, String loginID) throws org.apache.thrift.TException;

    /**
     *  * 修改用户手机号
     * * Common.ResultVo
     * 
     * @param memberCode
     * @param mobile
     */
    public com.froad.thrift.vo.ResultVo updateUserMobile(long memberCode, String mobile) throws org.apache.thrift.TException;

    /**
     * 发送签约验证短信（银行发送）
     * Common.ResultVo
     * 
     * @param clientId
     * @param phone
     * @param cardNo
     */
    public com.froad.thrift.vo.member.PeAcctVo sendSignBankCardPhoneToken(String clientId, String phone, String cardNo) throws org.apache.thrift.TException;

    /**
     * 发送快捷银行手机验证码
     * 
     * Common.ResultVo
     * 
     * @param clientId
     * @param bankCardNo
     * @param phone
     * @param remark
     */
    public com.froad.thrift.vo.member.PeAcctVo fastPayMoblieToken(String clientId, String bankCardNo, String phone, String remark) throws org.apache.thrift.TException;

    /**
     * 检验手机号是否为有效的贴膜卡用户
     * Common.ResultVo
     * 
     * @param clientId
     * @param filmMobile
     */
    public com.froad.thrift.vo.ResultVo validateFilmMobile(String clientId, String filmMobile) throws org.apache.thrift.TException;

    /**
     * 用户消费积分查询
     * Common.ResultVo<br>
     * protocolType=com.froad.thirdparty.enums.ProtocolType<br>
     * pointType=com.froad.enums.PointsType
     * 
     * @param clientId
     * @param userName
     * @param fromTime
     * @param toTime
     * @param protocolType
     * @param pointType
     * @param pageSize
     * @param pageNum
     */
    public com.froad.thrift.vo.member.QueryProtocolVo getPointTransBypage(String clientId, String userName, long fromTime, long toTime, String protocolType, String pointType, int pageSize, int pageNum) throws org.apache.thrift.TException;

    /**
     * 方法描述：发送验证码（由积分平台发送）
     * 
     * @param clientId
     * @param mobile
     * @param points
     */
    public com.froad.thrift.vo.ResultVo sendCheckCode(String clientId, String mobile, String points) throws org.apache.thrift.TException;

    /**
     * 方法描述：按手机号查询银行积分
     * 
     * @param clientId
     * @param mobile
     */
    public com.froad.thrift.vo.ResultVo findBankPointsByMobile(String clientId, String mobile) throws org.apache.thrift.TException;

    /**
     * 通过银行卡号查询银行积分（安徽）
     * 
     * @param clientId
     * @param bankNo
     */
    public com.froad.thrift.vo.member.PointsAccountVo queryBankPointsByBankNo(String clientId, String bankNo) throws org.apache.thrift.TException;

    /**
     * 通过手机号消费积分
     * 
     * @param clientId
     * @param orderId
     * @param payReason
     * @param remark
     * @param outletOrgNo
     * @param loginId
     * @param points
     */
    public com.froad.thrift.vo.ResultVo payPointsByMobileNo(String clientId, String orderId, String payReason, String remark, String outletOrgNo, String loginId, int points) throws org.apache.thrift.TException;

    public com.froad.thrift.vo.ResultVo employeeCodeVerify(String clientId, String verifyOrg, String employeeCode, String password, String clientNo) throws org.apache.thrift.TException;

  }

  public interface AsyncIface extends com.froad.thrift.monitor.service.BizMonitorService .AsyncIface {

    public void selectUserByMemberCode(long memberCode, String clientId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void selectUserByLoginID(String loginID, String clientId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void selectMemberPointsInfoByLoginID(String clientId, String loginID, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateUserMobile(long memberCode, String mobile, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void sendSignBankCardPhoneToken(String clientId, String phone, String cardNo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void fastPayMoblieToken(String clientId, String bankCardNo, String phone, String remark, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void validateFilmMobile(String clientId, String filmMobile, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getPointTransBypage(String clientId, String userName, long fromTime, long toTime, String protocolType, String pointType, int pageSize, int pageNum, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void sendCheckCode(String clientId, String mobile, String points, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void findBankPointsByMobile(String clientId, String mobile, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryBankPointsByBankNo(String clientId, String bankNo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void payPointsByMobileNo(String clientId, String orderId, String payReason, String remark, String outletOrgNo, String loginId, int points, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void employeeCodeVerify(String clientId, String verifyOrg, String employeeCode, String password, String clientNo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends com.froad.thrift.monitor.service.BizMonitorService.Client implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public com.froad.thrift.vo.member.MemberInfoVo selectUserByMemberCode(long memberCode, String clientId) throws org.apache.thrift.TException
    {
      send_selectUserByMemberCode(memberCode, clientId);
      return recv_selectUserByMemberCode();
    }

    public void send_selectUserByMemberCode(long memberCode, String clientId) throws org.apache.thrift.TException
    {
      selectUserByMemberCode_args args = new selectUserByMemberCode_args();
      args.setMemberCode(memberCode);
      args.setClientId(clientId);
      sendBase("selectUserByMemberCode", args);
    }

    public com.froad.thrift.vo.member.MemberInfoVo recv_selectUserByMemberCode() throws org.apache.thrift.TException
    {
      selectUserByMemberCode_result result = new selectUserByMemberCode_result();
      receiveBase(result, "selectUserByMemberCode");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "selectUserByMemberCode failed: unknown result");
    }

    public com.froad.thrift.vo.member.MemberInfoVo selectUserByLoginID(String loginID, String clientId) throws org.apache.thrift.TException
    {
      send_selectUserByLoginID(loginID, clientId);
      return recv_selectUserByLoginID();
    }

    public void send_selectUserByLoginID(String loginID, String clientId) throws org.apache.thrift.TException
    {
      selectUserByLoginID_args args = new selectUserByLoginID_args();
      args.setLoginID(loginID);
      args.setClientId(clientId);
      sendBase("selectUserByLoginID", args);
    }

    public com.froad.thrift.vo.member.MemberInfoVo recv_selectUserByLoginID() throws org.apache.thrift.TException
    {
      selectUserByLoginID_result result = new selectUserByLoginID_result();
      receiveBase(result, "selectUserByLoginID");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "selectUserByLoginID failed: unknown result");
    }

    public com.froad.thrift.vo.member.UserEnginePointsVo selectMemberPointsInfoByLoginID(String clientId, String loginID) throws org.apache.thrift.TException
    {
      send_selectMemberPointsInfoByLoginID(clientId, loginID);
      return recv_selectMemberPointsInfoByLoginID();
    }

    public void send_selectMemberPointsInfoByLoginID(String clientId, String loginID) throws org.apache.thrift.TException
    {
      selectMemberPointsInfoByLoginID_args args = new selectMemberPointsInfoByLoginID_args();
      args.setClientId(clientId);
      args.setLoginID(loginID);
      sendBase("selectMemberPointsInfoByLoginID", args);
    }

    public com.froad.thrift.vo.member.UserEnginePointsVo recv_selectMemberPointsInfoByLoginID() throws org.apache.thrift.TException
    {
      selectMemberPointsInfoByLoginID_result result = new selectMemberPointsInfoByLoginID_result();
      receiveBase(result, "selectMemberPointsInfoByLoginID");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "selectMemberPointsInfoByLoginID failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo updateUserMobile(long memberCode, String mobile) throws org.apache.thrift.TException
    {
      send_updateUserMobile(memberCode, mobile);
      return recv_updateUserMobile();
    }

    public void send_updateUserMobile(long memberCode, String mobile) throws org.apache.thrift.TException
    {
      updateUserMobile_args args = new updateUserMobile_args();
      args.setMemberCode(memberCode);
      args.setMobile(mobile);
      sendBase("updateUserMobile", args);
    }

    public com.froad.thrift.vo.ResultVo recv_updateUserMobile() throws org.apache.thrift.TException
    {
      updateUserMobile_result result = new updateUserMobile_result();
      receiveBase(result, "updateUserMobile");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateUserMobile failed: unknown result");
    }

    public com.froad.thrift.vo.member.PeAcctVo sendSignBankCardPhoneToken(String clientId, String phone, String cardNo) throws org.apache.thrift.TException
    {
      send_sendSignBankCardPhoneToken(clientId, phone, cardNo);
      return recv_sendSignBankCardPhoneToken();
    }

    public void send_sendSignBankCardPhoneToken(String clientId, String phone, String cardNo) throws org.apache.thrift.TException
    {
      sendSignBankCardPhoneToken_args args = new sendSignBankCardPhoneToken_args();
      args.setClientId(clientId);
      args.setPhone(phone);
      args.setCardNo(cardNo);
      sendBase("sendSignBankCardPhoneToken", args);
    }

    public com.froad.thrift.vo.member.PeAcctVo recv_sendSignBankCardPhoneToken() throws org.apache.thrift.TException
    {
      sendSignBankCardPhoneToken_result result = new sendSignBankCardPhoneToken_result();
      receiveBase(result, "sendSignBankCardPhoneToken");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "sendSignBankCardPhoneToken failed: unknown result");
    }

    public com.froad.thrift.vo.member.PeAcctVo fastPayMoblieToken(String clientId, String bankCardNo, String phone, String remark) throws org.apache.thrift.TException
    {
      send_fastPayMoblieToken(clientId, bankCardNo, phone, remark);
      return recv_fastPayMoblieToken();
    }

    public void send_fastPayMoblieToken(String clientId, String bankCardNo, String phone, String remark) throws org.apache.thrift.TException
    {
      fastPayMoblieToken_args args = new fastPayMoblieToken_args();
      args.setClientId(clientId);
      args.setBankCardNo(bankCardNo);
      args.setPhone(phone);
      args.setRemark(remark);
      sendBase("fastPayMoblieToken", args);
    }

    public com.froad.thrift.vo.member.PeAcctVo recv_fastPayMoblieToken() throws org.apache.thrift.TException
    {
      fastPayMoblieToken_result result = new fastPayMoblieToken_result();
      receiveBase(result, "fastPayMoblieToken");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "fastPayMoblieToken failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo validateFilmMobile(String clientId, String filmMobile) throws org.apache.thrift.TException
    {
      send_validateFilmMobile(clientId, filmMobile);
      return recv_validateFilmMobile();
    }

    public void send_validateFilmMobile(String clientId, String filmMobile) throws org.apache.thrift.TException
    {
      validateFilmMobile_args args = new validateFilmMobile_args();
      args.setClientId(clientId);
      args.setFilmMobile(filmMobile);
      sendBase("validateFilmMobile", args);
    }

    public com.froad.thrift.vo.ResultVo recv_validateFilmMobile() throws org.apache.thrift.TException
    {
      validateFilmMobile_result result = new validateFilmMobile_result();
      receiveBase(result, "validateFilmMobile");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "validateFilmMobile failed: unknown result");
    }

    public com.froad.thrift.vo.member.QueryProtocolVo getPointTransBypage(String clientId, String userName, long fromTime, long toTime, String protocolType, String pointType, int pageSize, int pageNum) throws org.apache.thrift.TException
    {
      send_getPointTransBypage(clientId, userName, fromTime, toTime, protocolType, pointType, pageSize, pageNum);
      return recv_getPointTransBypage();
    }

    public void send_getPointTransBypage(String clientId, String userName, long fromTime, long toTime, String protocolType, String pointType, int pageSize, int pageNum) throws org.apache.thrift.TException
    {
      getPointTransBypage_args args = new getPointTransBypage_args();
      args.setClientId(clientId);
      args.setUserName(userName);
      args.setFromTime(fromTime);
      args.setToTime(toTime);
      args.setProtocolType(protocolType);
      args.setPointType(pointType);
      args.setPageSize(pageSize);
      args.setPageNum(pageNum);
      sendBase("getPointTransBypage", args);
    }

    public com.froad.thrift.vo.member.QueryProtocolVo recv_getPointTransBypage() throws org.apache.thrift.TException
    {
      getPointTransBypage_result result = new getPointTransBypage_result();
      receiveBase(result, "getPointTransBypage");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPointTransBypage failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo sendCheckCode(String clientId, String mobile, String points) throws org.apache.thrift.TException
    {
      send_sendCheckCode(clientId, mobile, points);
      return recv_sendCheckCode();
    }

    public void send_sendCheckCode(String clientId, String mobile, String points) throws org.apache.thrift.TException
    {
      sendCheckCode_args args = new sendCheckCode_args();
      args.setClientId(clientId);
      args.setMobile(mobile);
      args.setPoints(points);
      sendBase("sendCheckCode", args);
    }

    public com.froad.thrift.vo.ResultVo recv_sendCheckCode() throws org.apache.thrift.TException
    {
      sendCheckCode_result result = new sendCheckCode_result();
      receiveBase(result, "sendCheckCode");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "sendCheckCode failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo findBankPointsByMobile(String clientId, String mobile) throws org.apache.thrift.TException
    {
      send_findBankPointsByMobile(clientId, mobile);
      return recv_findBankPointsByMobile();
    }

    public void send_findBankPointsByMobile(String clientId, String mobile) throws org.apache.thrift.TException
    {
      findBankPointsByMobile_args args = new findBankPointsByMobile_args();
      args.setClientId(clientId);
      args.setMobile(mobile);
      sendBase("findBankPointsByMobile", args);
    }

    public com.froad.thrift.vo.ResultVo recv_findBankPointsByMobile() throws org.apache.thrift.TException
    {
      findBankPointsByMobile_result result = new findBankPointsByMobile_result();
      receiveBase(result, "findBankPointsByMobile");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findBankPointsByMobile failed: unknown result");
    }

    public com.froad.thrift.vo.member.PointsAccountVo queryBankPointsByBankNo(String clientId, String bankNo) throws org.apache.thrift.TException
    {
      send_queryBankPointsByBankNo(clientId, bankNo);
      return recv_queryBankPointsByBankNo();
    }

    public void send_queryBankPointsByBankNo(String clientId, String bankNo) throws org.apache.thrift.TException
    {
      queryBankPointsByBankNo_args args = new queryBankPointsByBankNo_args();
      args.setClientId(clientId);
      args.setBankNo(bankNo);
      sendBase("queryBankPointsByBankNo", args);
    }

    public com.froad.thrift.vo.member.PointsAccountVo recv_queryBankPointsByBankNo() throws org.apache.thrift.TException
    {
      queryBankPointsByBankNo_result result = new queryBankPointsByBankNo_result();
      receiveBase(result, "queryBankPointsByBankNo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryBankPointsByBankNo failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo payPointsByMobileNo(String clientId, String orderId, String payReason, String remark, String outletOrgNo, String loginId, int points) throws org.apache.thrift.TException
    {
      send_payPointsByMobileNo(clientId, orderId, payReason, remark, outletOrgNo, loginId, points);
      return recv_payPointsByMobileNo();
    }

    public void send_payPointsByMobileNo(String clientId, String orderId, String payReason, String remark, String outletOrgNo, String loginId, int points) throws org.apache.thrift.TException
    {
      payPointsByMobileNo_args args = new payPointsByMobileNo_args();
      args.setClientId(clientId);
      args.setOrderId(orderId);
      args.setPayReason(payReason);
      args.setRemark(remark);
      args.setOutletOrgNo(outletOrgNo);
      args.setLoginId(loginId);
      args.setPoints(points);
      sendBase("payPointsByMobileNo", args);
    }

    public com.froad.thrift.vo.ResultVo recv_payPointsByMobileNo() throws org.apache.thrift.TException
    {
      payPointsByMobileNo_result result = new payPointsByMobileNo_result();
      receiveBase(result, "payPointsByMobileNo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "payPointsByMobileNo failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo employeeCodeVerify(String clientId, String verifyOrg, String employeeCode, String password, String clientNo) throws org.apache.thrift.TException
    {
      send_employeeCodeVerify(clientId, verifyOrg, employeeCode, password, clientNo);
      return recv_employeeCodeVerify();
    }

    public void send_employeeCodeVerify(String clientId, String verifyOrg, String employeeCode, String password, String clientNo) throws org.apache.thrift.TException
    {
      employeeCodeVerify_args args = new employeeCodeVerify_args();
      args.setClientId(clientId);
      args.setVerifyOrg(verifyOrg);
      args.setEmployeeCode(employeeCode);
      args.setPassword(password);
      args.setClientNo(clientNo);
      sendBase("employeeCodeVerify", args);
    }

    public com.froad.thrift.vo.ResultVo recv_employeeCodeVerify() throws org.apache.thrift.TException
    {
      employeeCodeVerify_result result = new employeeCodeVerify_result();
      receiveBase(result, "employeeCodeVerify");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "employeeCodeVerify failed: unknown result");
    }

  }
  public static class AsyncClient extends com.froad.thrift.monitor.service.BizMonitorService.AsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void selectUserByMemberCode(long memberCode, String clientId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      selectUserByMemberCode_call method_call = new selectUserByMemberCode_call(memberCode, clientId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class selectUserByMemberCode_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long memberCode;
      private String clientId;
      public selectUserByMemberCode_call(long memberCode, String clientId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.memberCode = memberCode;
        this.clientId = clientId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("selectUserByMemberCode", org.apache.thrift.protocol.TMessageType.CALL, 0));
        selectUserByMemberCode_args args = new selectUserByMemberCode_args();
        args.setMemberCode(memberCode);
        args.setClientId(clientId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.member.MemberInfoVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_selectUserByMemberCode();
      }
    }

    public void selectUserByLoginID(String loginID, String clientId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      selectUserByLoginID_call method_call = new selectUserByLoginID_call(loginID, clientId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class selectUserByLoginID_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String loginID;
      private String clientId;
      public selectUserByLoginID_call(String loginID, String clientId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.loginID = loginID;
        this.clientId = clientId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("selectUserByLoginID", org.apache.thrift.protocol.TMessageType.CALL, 0));
        selectUserByLoginID_args args = new selectUserByLoginID_args();
        args.setLoginID(loginID);
        args.setClientId(clientId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.member.MemberInfoVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_selectUserByLoginID();
      }
    }

    public void selectMemberPointsInfoByLoginID(String clientId, String loginID, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      selectMemberPointsInfoByLoginID_call method_call = new selectMemberPointsInfoByLoginID_call(clientId, loginID, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class selectMemberPointsInfoByLoginID_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String clientId;
      private String loginID;
      public selectMemberPointsInfoByLoginID_call(String clientId, String loginID, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.clientId = clientId;
        this.loginID = loginID;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("selectMemberPointsInfoByLoginID", org.apache.thrift.protocol.TMessageType.CALL, 0));
        selectMemberPointsInfoByLoginID_args args = new selectMemberPointsInfoByLoginID_args();
        args.setClientId(clientId);
        args.setLoginID(loginID);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.member.UserEnginePointsVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_selectMemberPointsInfoByLoginID();
      }
    }

    public void updateUserMobile(long memberCode, String mobile, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateUserMobile_call method_call = new updateUserMobile_call(memberCode, mobile, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateUserMobile_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long memberCode;
      private String mobile;
      public updateUserMobile_call(long memberCode, String mobile, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.memberCode = memberCode;
        this.mobile = mobile;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateUserMobile", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateUserMobile_args args = new updateUserMobile_args();
        args.setMemberCode(memberCode);
        args.setMobile(mobile);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateUserMobile();
      }
    }

    public void sendSignBankCardPhoneToken(String clientId, String phone, String cardNo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      sendSignBankCardPhoneToken_call method_call = new sendSignBankCardPhoneToken_call(clientId, phone, cardNo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class sendSignBankCardPhoneToken_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String clientId;
      private String phone;
      private String cardNo;
      public sendSignBankCardPhoneToken_call(String clientId, String phone, String cardNo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.clientId = clientId;
        this.phone = phone;
        this.cardNo = cardNo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("sendSignBankCardPhoneToken", org.apache.thrift.protocol.TMessageType.CALL, 0));
        sendSignBankCardPhoneToken_args args = new sendSignBankCardPhoneToken_args();
        args.setClientId(clientId);
        args.setPhone(phone);
        args.setCardNo(cardNo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.member.PeAcctVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_sendSignBankCardPhoneToken();
      }
    }

    public void fastPayMoblieToken(String clientId, String bankCardNo, String phone, String remark, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      fastPayMoblieToken_call method_call = new fastPayMoblieToken_call(clientId, bankCardNo, phone, remark, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class fastPayMoblieToken_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String clientId;
      private String bankCardNo;
      private String phone;
      private String remark;
      public fastPayMoblieToken_call(String clientId, String bankCardNo, String phone, String remark, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.clientId = clientId;
        this.bankCardNo = bankCardNo;
        this.phone = phone;
        this.remark = remark;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("fastPayMoblieToken", org.apache.thrift.protocol.TMessageType.CALL, 0));
        fastPayMoblieToken_args args = new fastPayMoblieToken_args();
        args.setClientId(clientId);
        args.setBankCardNo(bankCardNo);
        args.setPhone(phone);
        args.setRemark(remark);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.member.PeAcctVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_fastPayMoblieToken();
      }
    }

    public void validateFilmMobile(String clientId, String filmMobile, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      validateFilmMobile_call method_call = new validateFilmMobile_call(clientId, filmMobile, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class validateFilmMobile_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String clientId;
      private String filmMobile;
      public validateFilmMobile_call(String clientId, String filmMobile, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.clientId = clientId;
        this.filmMobile = filmMobile;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("validateFilmMobile", org.apache.thrift.protocol.TMessageType.CALL, 0));
        validateFilmMobile_args args = new validateFilmMobile_args();
        args.setClientId(clientId);
        args.setFilmMobile(filmMobile);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_validateFilmMobile();
      }
    }

    public void getPointTransBypage(String clientId, String userName, long fromTime, long toTime, String protocolType, String pointType, int pageSize, int pageNum, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getPointTransBypage_call method_call = new getPointTransBypage_call(clientId, userName, fromTime, toTime, protocolType, pointType, pageSize, pageNum, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getPointTransBypage_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String clientId;
      private String userName;
      private long fromTime;
      private long toTime;
      private String protocolType;
      private String pointType;
      private int pageSize;
      private int pageNum;
      public getPointTransBypage_call(String clientId, String userName, long fromTime, long toTime, String protocolType, String pointType, int pageSize, int pageNum, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.clientId = clientId;
        this.userName = userName;
        this.fromTime = fromTime;
        this.toTime = toTime;
        this.protocolType = protocolType;
        this.pointType = pointType;
        this.pageSize = pageSize;
        this.pageNum = pageNum;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPointTransBypage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getPointTransBypage_args args = new getPointTransBypage_args();
        args.setClientId(clientId);
        args.setUserName(userName);
        args.setFromTime(fromTime);
        args.setToTime(toTime);
        args.setProtocolType(protocolType);
        args.setPointType(pointType);
        args.setPageSize(pageSize);
        args.setPageNum(pageNum);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.member.QueryProtocolVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getPointTransBypage();
      }
    }

    public void sendCheckCode(String clientId, String mobile, String points, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      sendCheckCode_call method_call = new sendCheckCode_call(clientId, mobile, points, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class sendCheckCode_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String clientId;
      private String mobile;
      private String points;
      public sendCheckCode_call(String clientId, String mobile, String points, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.clientId = clientId;
        this.mobile = mobile;
        this.points = points;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("sendCheckCode", org.apache.thrift.protocol.TMessageType.CALL, 0));
        sendCheckCode_args args = new sendCheckCode_args();
        args.setClientId(clientId);
        args.setMobile(mobile);
        args.setPoints(points);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_sendCheckCode();
      }
    }

    public void findBankPointsByMobile(String clientId, String mobile, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findBankPointsByMobile_call method_call = new findBankPointsByMobile_call(clientId, mobile, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findBankPointsByMobile_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String clientId;
      private String mobile;
      public findBankPointsByMobile_call(String clientId, String mobile, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.clientId = clientId;
        this.mobile = mobile;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findBankPointsByMobile", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findBankPointsByMobile_args args = new findBankPointsByMobile_args();
        args.setClientId(clientId);
        args.setMobile(mobile);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findBankPointsByMobile();
      }
    }

    public void queryBankPointsByBankNo(String clientId, String bankNo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryBankPointsByBankNo_call method_call = new queryBankPointsByBankNo_call(clientId, bankNo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryBankPointsByBankNo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String clientId;
      private String bankNo;
      public queryBankPointsByBankNo_call(String clientId, String bankNo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.clientId = clientId;
        this.bankNo = bankNo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryBankPointsByBankNo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryBankPointsByBankNo_args args = new queryBankPointsByBankNo_args();
        args.setClientId(clientId);
        args.setBankNo(bankNo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.member.PointsAccountVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryBankPointsByBankNo();
      }
    }

    public void payPointsByMobileNo(String clientId, String orderId, String payReason, String remark, String outletOrgNo, String loginId, int points, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      payPointsByMobileNo_call method_call = new payPointsByMobileNo_call(clientId, orderId, payReason, remark, outletOrgNo, loginId, points, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class payPointsByMobileNo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String clientId;
      private String orderId;
      private String payReason;
      private String remark;
      private String outletOrgNo;
      private String loginId;
      private int points;
      public payPointsByMobileNo_call(String clientId, String orderId, String payReason, String remark, String outletOrgNo, String loginId, int points, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.clientId = clientId;
        this.orderId = orderId;
        this.payReason = payReason;
        this.remark = remark;
        this.outletOrgNo = outletOrgNo;
        this.loginId = loginId;
        this.points = points;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("payPointsByMobileNo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        payPointsByMobileNo_args args = new payPointsByMobileNo_args();
        args.setClientId(clientId);
        args.setOrderId(orderId);
        args.setPayReason(payReason);
        args.setRemark(remark);
        args.setOutletOrgNo(outletOrgNo);
        args.setLoginId(loginId);
        args.setPoints(points);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_payPointsByMobileNo();
      }
    }

    public void employeeCodeVerify(String clientId, String verifyOrg, String employeeCode, String password, String clientNo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      employeeCodeVerify_call method_call = new employeeCodeVerify_call(clientId, verifyOrg, employeeCode, password, clientNo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class employeeCodeVerify_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String clientId;
      private String verifyOrg;
      private String employeeCode;
      private String password;
      private String clientNo;
      public employeeCodeVerify_call(String clientId, String verifyOrg, String employeeCode, String password, String clientNo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.clientId = clientId;
        this.verifyOrg = verifyOrg;
        this.employeeCode = employeeCode;
        this.password = password;
        this.clientNo = clientNo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("employeeCodeVerify", org.apache.thrift.protocol.TMessageType.CALL, 0));
        employeeCodeVerify_args args = new employeeCodeVerify_args();
        args.setClientId(clientId);
        args.setVerifyOrg(verifyOrg);
        args.setEmployeeCode(employeeCode);
        args.setPassword(password);
        args.setClientNo(clientNo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_employeeCodeVerify();
      }
    }

  }

  public static class Processor<I extends Iface> extends com.froad.thrift.monitor.service.BizMonitorService.Processor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("selectUserByMemberCode", new selectUserByMemberCode());
      processMap.put("selectUserByLoginID", new selectUserByLoginID());
      processMap.put("selectMemberPointsInfoByLoginID", new selectMemberPointsInfoByLoginID());
      processMap.put("updateUserMobile", new updateUserMobile());
      processMap.put("sendSignBankCardPhoneToken", new sendSignBankCardPhoneToken());
      processMap.put("fastPayMoblieToken", new fastPayMoblieToken());
      processMap.put("validateFilmMobile", new validateFilmMobile());
      processMap.put("getPointTransBypage", new getPointTransBypage());
      processMap.put("sendCheckCode", new sendCheckCode());
      processMap.put("findBankPointsByMobile", new findBankPointsByMobile());
      processMap.put("queryBankPointsByBankNo", new queryBankPointsByBankNo());
      processMap.put("payPointsByMobileNo", new payPointsByMobileNo());
      processMap.put("employeeCodeVerify", new employeeCodeVerify());
      return processMap;
    }

    public static class selectUserByMemberCode<I extends Iface> extends org.apache.thrift.ProcessFunction<I, selectUserByMemberCode_args> {
      public selectUserByMemberCode() {
        super("selectUserByMemberCode");
      }

      public selectUserByMemberCode_args getEmptyArgsInstance() {
        return new selectUserByMemberCode_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public selectUserByMemberCode_result getResult(I iface, selectUserByMemberCode_args args) throws org.apache.thrift.TException {
        selectUserByMemberCode_result result = new selectUserByMemberCode_result();
        result.success = iface.selectUserByMemberCode(args.memberCode, args.clientId);
        return result;
      }
    }

    public static class selectUserByLoginID<I extends Iface> extends org.apache.thrift.ProcessFunction<I, selectUserByLoginID_args> {
      public selectUserByLoginID() {
        super("selectUserByLoginID");
      }

      public selectUserByLoginID_args getEmptyArgsInstance() {
        return new selectUserByLoginID_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public selectUserByLoginID_result getResult(I iface, selectUserByLoginID_args args) throws org.apache.thrift.TException {
        selectUserByLoginID_result result = new selectUserByLoginID_result();
        result.success = iface.selectUserByLoginID(args.loginID, args.clientId);
        return result;
      }
    }

    public static class selectMemberPointsInfoByLoginID<I extends Iface> extends org.apache.thrift.ProcessFunction<I, selectMemberPointsInfoByLoginID_args> {
      public selectMemberPointsInfoByLoginID() {
        super("selectMemberPointsInfoByLoginID");
      }

      public selectMemberPointsInfoByLoginID_args getEmptyArgsInstance() {
        return new selectMemberPointsInfoByLoginID_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public selectMemberPointsInfoByLoginID_result getResult(I iface, selectMemberPointsInfoByLoginID_args args) throws org.apache.thrift.TException {
        selectMemberPointsInfoByLoginID_result result = new selectMemberPointsInfoByLoginID_result();
        result.success = iface.selectMemberPointsInfoByLoginID(args.clientId, args.loginID);
        return result;
      }
    }

    public static class updateUserMobile<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateUserMobile_args> {
      public updateUserMobile() {
        super("updateUserMobile");
      }

      public updateUserMobile_args getEmptyArgsInstance() {
        return new updateUserMobile_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateUserMobile_result getResult(I iface, updateUserMobile_args args) throws org.apache.thrift.TException {
        updateUserMobile_result result = new updateUserMobile_result();
        result.success = iface.updateUserMobile(args.memberCode, args.mobile);
        return result;
      }
    }

    public static class sendSignBankCardPhoneToken<I extends Iface> extends org.apache.thrift.ProcessFunction<I, sendSignBankCardPhoneToken_args> {
      public sendSignBankCardPhoneToken() {
        super("sendSignBankCardPhoneToken");
      }

      public sendSignBankCardPhoneToken_args getEmptyArgsInstance() {
        return new sendSignBankCardPhoneToken_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public sendSignBankCardPhoneToken_result getResult(I iface, sendSignBankCardPhoneToken_args args) throws org.apache.thrift.TException {
        sendSignBankCardPhoneToken_result result = new sendSignBankCardPhoneToken_result();
        result.success = iface.sendSignBankCardPhoneToken(args.clientId, args.phone, args.cardNo);
        return result;
      }
    }

    public static class fastPayMoblieToken<I extends Iface> extends org.apache.thrift.ProcessFunction<I, fastPayMoblieToken_args> {
      public fastPayMoblieToken() {
        super("fastPayMoblieToken");
      }

      public fastPayMoblieToken_args getEmptyArgsInstance() {
        return new fastPayMoblieToken_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public fastPayMoblieToken_result getResult(I iface, fastPayMoblieToken_args args) throws org.apache.thrift.TException {
        fastPayMoblieToken_result result = new fastPayMoblieToken_result();
        result.success = iface.fastPayMoblieToken(args.clientId, args.bankCardNo, args.phone, args.remark);
        return result;
      }
    }

    public static class validateFilmMobile<I extends Iface> extends org.apache.thrift.ProcessFunction<I, validateFilmMobile_args> {
      public validateFilmMobile() {
        super("validateFilmMobile");
      }

      public validateFilmMobile_args getEmptyArgsInstance() {
        return new validateFilmMobile_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public validateFilmMobile_result getResult(I iface, validateFilmMobile_args args) throws org.apache.thrift.TException {
        validateFilmMobile_result result = new validateFilmMobile_result();
        result.success = iface.validateFilmMobile(args.clientId, args.filmMobile);
        return result;
      }
    }

    public static class getPointTransBypage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPointTransBypage_args> {
      public getPointTransBypage() {
        super("getPointTransBypage");
      }

      public getPointTransBypage_args getEmptyArgsInstance() {
        return new getPointTransBypage_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getPointTransBypage_result getResult(I iface, getPointTransBypage_args args) throws org.apache.thrift.TException {
        getPointTransBypage_result result = new getPointTransBypage_result();
        result.success = iface.getPointTransBypage(args.clientId, args.userName, args.fromTime, args.toTime, args.protocolType, args.pointType, args.pageSize, args.pageNum);
        return result;
      }
    }

    public static class sendCheckCode<I extends Iface> extends org.apache.thrift.ProcessFunction<I, sendCheckCode_args> {
      public sendCheckCode() {
        super("sendCheckCode");
      }

      public sendCheckCode_args getEmptyArgsInstance() {
        return new sendCheckCode_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public sendCheckCode_result getResult(I iface, sendCheckCode_args args) throws org.apache.thrift.TException {
        sendCheckCode_result result = new sendCheckCode_result();
        result.success = iface.sendCheckCode(args.clientId, args.mobile, args.points);
        return result;
      }
    }

    public static class findBankPointsByMobile<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findBankPointsByMobile_args> {
      public findBankPointsByMobile() {
        super("findBankPointsByMobile");
      }

      public findBankPointsByMobile_args getEmptyArgsInstance() {
        return new findBankPointsByMobile_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findBankPointsByMobile_result getResult(I iface, findBankPointsByMobile_args args) throws org.apache.thrift.TException {
        findBankPointsByMobile_result result = new findBankPointsByMobile_result();
        result.success = iface.findBankPointsByMobile(args.clientId, args.mobile);
        return result;
      }
    }

    public static class queryBankPointsByBankNo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryBankPointsByBankNo_args> {
      public queryBankPointsByBankNo() {
        super("queryBankPointsByBankNo");
      }

      public queryBankPointsByBankNo_args getEmptyArgsInstance() {
        return new queryBankPointsByBankNo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryBankPointsByBankNo_result getResult(I iface, queryBankPointsByBankNo_args args) throws org.apache.thrift.TException {
        queryBankPointsByBankNo_result result = new queryBankPointsByBankNo_result();
        result.success = iface.queryBankPointsByBankNo(args.clientId, args.bankNo);
        return result;
      }
    }

    public static class payPointsByMobileNo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, payPointsByMobileNo_args> {
      public payPointsByMobileNo() {
        super("payPointsByMobileNo");
      }

      public payPointsByMobileNo_args getEmptyArgsInstance() {
        return new payPointsByMobileNo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public payPointsByMobileNo_result getResult(I iface, payPointsByMobileNo_args args) throws org.apache.thrift.TException {
        payPointsByMobileNo_result result = new payPointsByMobileNo_result();
        result.success = iface.payPointsByMobileNo(args.clientId, args.orderId, args.payReason, args.remark, args.outletOrgNo, args.loginId, args.points);
        return result;
      }
    }

    public static class employeeCodeVerify<I extends Iface> extends org.apache.thrift.ProcessFunction<I, employeeCodeVerify_args> {
      public employeeCodeVerify() {
        super("employeeCodeVerify");
      }

      public employeeCodeVerify_args getEmptyArgsInstance() {
        return new employeeCodeVerify_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public employeeCodeVerify_result getResult(I iface, employeeCodeVerify_args args) throws org.apache.thrift.TException {
        employeeCodeVerify_result result = new employeeCodeVerify_result();
        result.success = iface.employeeCodeVerify(args.clientId, args.verifyOrg, args.employeeCode, args.password, args.clientNo);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends com.froad.thrift.monitor.service.BizMonitorService.AsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("selectUserByMemberCode", new selectUserByMemberCode());
      processMap.put("selectUserByLoginID", new selectUserByLoginID());
      processMap.put("selectMemberPointsInfoByLoginID", new selectMemberPointsInfoByLoginID());
      processMap.put("updateUserMobile", new updateUserMobile());
      processMap.put("sendSignBankCardPhoneToken", new sendSignBankCardPhoneToken());
      processMap.put("fastPayMoblieToken", new fastPayMoblieToken());
      processMap.put("validateFilmMobile", new validateFilmMobile());
      processMap.put("getPointTransBypage", new getPointTransBypage());
      processMap.put("sendCheckCode", new sendCheckCode());
      processMap.put("findBankPointsByMobile", new findBankPointsByMobile());
      processMap.put("queryBankPointsByBankNo", new queryBankPointsByBankNo());
      processMap.put("payPointsByMobileNo", new payPointsByMobileNo());
      processMap.put("employeeCodeVerify", new employeeCodeVerify());
      return processMap;
    }

    public static class selectUserByMemberCode<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, selectUserByMemberCode_args, com.froad.thrift.vo.member.MemberInfoVo> {
      public selectUserByMemberCode() {
        super("selectUserByMemberCode");
      }

      public selectUserByMemberCode_args getEmptyArgsInstance() {
        return new selectUserByMemberCode_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.member.MemberInfoVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.member.MemberInfoVo>() { 
          public void onComplete(com.froad.thrift.vo.member.MemberInfoVo o) {
            selectUserByMemberCode_result result = new selectUserByMemberCode_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            selectUserByMemberCode_result result = new selectUserByMemberCode_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, selectUserByMemberCode_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.member.MemberInfoVo> resultHandler) throws TException {
        iface.selectUserByMemberCode(args.memberCode, args.clientId,resultHandler);
      }
    }

    public static class selectUserByLoginID<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, selectUserByLoginID_args, com.froad.thrift.vo.member.MemberInfoVo> {
      public selectUserByLoginID() {
        super("selectUserByLoginID");
      }

      public selectUserByLoginID_args getEmptyArgsInstance() {
        return new selectUserByLoginID_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.member.MemberInfoVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.member.MemberInfoVo>() { 
          public void onComplete(com.froad.thrift.vo.member.MemberInfoVo o) {
            selectUserByLoginID_result result = new selectUserByLoginID_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            selectUserByLoginID_result result = new selectUserByLoginID_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, selectUserByLoginID_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.member.MemberInfoVo> resultHandler) throws TException {
        iface.selectUserByLoginID(args.loginID, args.clientId,resultHandler);
      }
    }

    public static class selectMemberPointsInfoByLoginID<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, selectMemberPointsInfoByLoginID_args, com.froad.thrift.vo.member.UserEnginePointsVo> {
      public selectMemberPointsInfoByLoginID() {
        super("selectMemberPointsInfoByLoginID");
      }

      public selectMemberPointsInfoByLoginID_args getEmptyArgsInstance() {
        return new selectMemberPointsInfoByLoginID_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.member.UserEnginePointsVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.member.UserEnginePointsVo>() { 
          public void onComplete(com.froad.thrift.vo.member.UserEnginePointsVo o) {
            selectMemberPointsInfoByLoginID_result result = new selectMemberPointsInfoByLoginID_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            selectMemberPointsInfoByLoginID_result result = new selectMemberPointsInfoByLoginID_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, selectMemberPointsInfoByLoginID_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.member.UserEnginePointsVo> resultHandler) throws TException {
        iface.selectMemberPointsInfoByLoginID(args.clientId, args.loginID,resultHandler);
      }
    }

    public static class updateUserMobile<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateUserMobile_args, com.froad.thrift.vo.ResultVo> {
      public updateUserMobile() {
        super("updateUserMobile");
      }

      public updateUserMobile_args getEmptyArgsInstance() {
        return new updateUserMobile_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            updateUserMobile_result result = new updateUserMobile_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateUserMobile_result result = new updateUserMobile_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateUserMobile_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.updateUserMobile(args.memberCode, args.mobile,resultHandler);
      }
    }

    public static class sendSignBankCardPhoneToken<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, sendSignBankCardPhoneToken_args, com.froad.thrift.vo.member.PeAcctVo> {
      public sendSignBankCardPhoneToken() {
        super("sendSignBankCardPhoneToken");
      }

      public sendSignBankCardPhoneToken_args getEmptyArgsInstance() {
        return new sendSignBankCardPhoneToken_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.member.PeAcctVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.member.PeAcctVo>() { 
          public void onComplete(com.froad.thrift.vo.member.PeAcctVo o) {
            sendSignBankCardPhoneToken_result result = new sendSignBankCardPhoneToken_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            sendSignBankCardPhoneToken_result result = new sendSignBankCardPhoneToken_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, sendSignBankCardPhoneToken_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.member.PeAcctVo> resultHandler) throws TException {
        iface.sendSignBankCardPhoneToken(args.clientId, args.phone, args.cardNo,resultHandler);
      }
    }

    public static class fastPayMoblieToken<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, fastPayMoblieToken_args, com.froad.thrift.vo.member.PeAcctVo> {
      public fastPayMoblieToken() {
        super("fastPayMoblieToken");
      }

      public fastPayMoblieToken_args getEmptyArgsInstance() {
        return new fastPayMoblieToken_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.member.PeAcctVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.member.PeAcctVo>() { 
          public void onComplete(com.froad.thrift.vo.member.PeAcctVo o) {
            fastPayMoblieToken_result result = new fastPayMoblieToken_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            fastPayMoblieToken_result result = new fastPayMoblieToken_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, fastPayMoblieToken_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.member.PeAcctVo> resultHandler) throws TException {
        iface.fastPayMoblieToken(args.clientId, args.bankCardNo, args.phone, args.remark,resultHandler);
      }
    }

    public static class validateFilmMobile<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, validateFilmMobile_args, com.froad.thrift.vo.ResultVo> {
      public validateFilmMobile() {
        super("validateFilmMobile");
      }

      public validateFilmMobile_args getEmptyArgsInstance() {
        return new validateFilmMobile_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            validateFilmMobile_result result = new validateFilmMobile_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            validateFilmMobile_result result = new validateFilmMobile_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, validateFilmMobile_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.validateFilmMobile(args.clientId, args.filmMobile,resultHandler);
      }
    }

    public static class getPointTransBypage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getPointTransBypage_args, com.froad.thrift.vo.member.QueryProtocolVo> {
      public getPointTransBypage() {
        super("getPointTransBypage");
      }

      public getPointTransBypage_args getEmptyArgsInstance() {
        return new getPointTransBypage_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.member.QueryProtocolVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.member.QueryProtocolVo>() { 
          public void onComplete(com.froad.thrift.vo.member.QueryProtocolVo o) {
            getPointTransBypage_result result = new getPointTransBypage_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getPointTransBypage_result result = new getPointTransBypage_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getPointTransBypage_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.member.QueryProtocolVo> resultHandler) throws TException {
        iface.getPointTransBypage(args.clientId, args.userName, args.fromTime, args.toTime, args.protocolType, args.pointType, args.pageSize, args.pageNum,resultHandler);
      }
    }

    public static class sendCheckCode<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, sendCheckCode_args, com.froad.thrift.vo.ResultVo> {
      public sendCheckCode() {
        super("sendCheckCode");
      }

      public sendCheckCode_args getEmptyArgsInstance() {
        return new sendCheckCode_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            sendCheckCode_result result = new sendCheckCode_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            sendCheckCode_result result = new sendCheckCode_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, sendCheckCode_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.sendCheckCode(args.clientId, args.mobile, args.points,resultHandler);
      }
    }

    public static class findBankPointsByMobile<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findBankPointsByMobile_args, com.froad.thrift.vo.ResultVo> {
      public findBankPointsByMobile() {
        super("findBankPointsByMobile");
      }

      public findBankPointsByMobile_args getEmptyArgsInstance() {
        return new findBankPointsByMobile_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            findBankPointsByMobile_result result = new findBankPointsByMobile_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            findBankPointsByMobile_result result = new findBankPointsByMobile_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findBankPointsByMobile_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.findBankPointsByMobile(args.clientId, args.mobile,resultHandler);
      }
    }

    public static class queryBankPointsByBankNo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryBankPointsByBankNo_args, com.froad.thrift.vo.member.PointsAccountVo> {
      public queryBankPointsByBankNo() {
        super("queryBankPointsByBankNo");
      }

      public queryBankPointsByBankNo_args getEmptyArgsInstance() {
        return new queryBankPointsByBankNo_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.member.PointsAccountVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.member.PointsAccountVo>() { 
          public void onComplete(com.froad.thrift.vo.member.PointsAccountVo o) {
            queryBankPointsByBankNo_result result = new queryBankPointsByBankNo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryBankPointsByBankNo_result result = new queryBankPointsByBankNo_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryBankPointsByBankNo_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.member.PointsAccountVo> resultHandler) throws TException {
        iface.queryBankPointsByBankNo(args.clientId, args.bankNo,resultHandler);
      }
    }

    public static class payPointsByMobileNo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, payPointsByMobileNo_args, com.froad.thrift.vo.ResultVo> {
      public payPointsByMobileNo() {
        super("payPointsByMobileNo");
      }

      public payPointsByMobileNo_args getEmptyArgsInstance() {
        return new payPointsByMobileNo_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            payPointsByMobileNo_result result = new payPointsByMobileNo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            payPointsByMobileNo_result result = new payPointsByMobileNo_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, payPointsByMobileNo_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.payPointsByMobileNo(args.clientId, args.orderId, args.payReason, args.remark, args.outletOrgNo, args.loginId, args.points,resultHandler);
      }
    }

    public static class employeeCodeVerify<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, employeeCodeVerify_args, com.froad.thrift.vo.ResultVo> {
      public employeeCodeVerify() {
        super("employeeCodeVerify");
      }

      public employeeCodeVerify_args getEmptyArgsInstance() {
        return new employeeCodeVerify_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            employeeCodeVerify_result result = new employeeCodeVerify_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            employeeCodeVerify_result result = new employeeCodeVerify_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, employeeCodeVerify_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.employeeCodeVerify(args.clientId, args.verifyOrg, args.employeeCode, args.password, args.clientNo,resultHandler);
      }
    }

  }

  public static class selectUserByMemberCode_args implements org.apache.thrift.TBase<selectUserByMemberCode_args, selectUserByMemberCode_args._Fields>, java.io.Serializable, Cloneable, Comparable<selectUserByMemberCode_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("selectUserByMemberCode_args");

    private static final org.apache.thrift.protocol.TField MEMBER_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("memberCode", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new selectUserByMemberCode_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new selectUserByMemberCode_argsTupleSchemeFactory());
    }

    public long memberCode; // required
    public String clientId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MEMBER_CODE((short)1, "memberCode"),
      CLIENT_ID((short)2, "clientId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MEMBER_CODE
            return MEMBER_CODE;
          case 2: // CLIENT_ID
            return CLIENT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __MEMBERCODE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MEMBER_CODE, new org.apache.thrift.meta_data.FieldMetaData("memberCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(selectUserByMemberCode_args.class, metaDataMap);
    }

    public selectUserByMemberCode_args() {
    }

    public selectUserByMemberCode_args(
      long memberCode,
      String clientId)
    {
      this();
      this.memberCode = memberCode;
      setMemberCodeIsSet(true);
      this.clientId = clientId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public selectUserByMemberCode_args(selectUserByMemberCode_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.memberCode = other.memberCode;
      if (other.isSetClientId()) {
        this.clientId = other.clientId;
      }
    }

    public selectUserByMemberCode_args deepCopy() {
      return new selectUserByMemberCode_args(this);
    }

    @Override
    public void clear() {
      setMemberCodeIsSet(false);
      this.memberCode = 0;
      this.clientId = null;
    }

    public long getMemberCode() {
      return this.memberCode;
    }

    public selectUserByMemberCode_args setMemberCode(long memberCode) {
      this.memberCode = memberCode;
      setMemberCodeIsSet(true);
      return this;
    }

    public void unsetMemberCode() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MEMBERCODE_ISSET_ID);
    }

    /** Returns true if field memberCode is set (has been assigned a value) and false otherwise */
    public boolean isSetMemberCode() {
      return EncodingUtils.testBit(__isset_bitfield, __MEMBERCODE_ISSET_ID);
    }

    public void setMemberCodeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MEMBERCODE_ISSET_ID, value);
    }

    public String getClientId() {
      return this.clientId;
    }

    public selectUserByMemberCode_args setClientId(String clientId) {
      this.clientId = clientId;
      return this;
    }

    public void unsetClientId() {
      this.clientId = null;
    }

    /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
    public boolean isSetClientId() {
      return this.clientId != null;
    }

    public void setClientIdIsSet(boolean value) {
      if (!value) {
        this.clientId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MEMBER_CODE:
        if (value == null) {
          unsetMemberCode();
        } else {
          setMemberCode((Long)value);
        }
        break;

      case CLIENT_ID:
        if (value == null) {
          unsetClientId();
        } else {
          setClientId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MEMBER_CODE:
        return Long.valueOf(getMemberCode());

      case CLIENT_ID:
        return getClientId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MEMBER_CODE:
        return isSetMemberCode();
      case CLIENT_ID:
        return isSetClientId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof selectUserByMemberCode_args)
        return this.equals((selectUserByMemberCode_args)that);
      return false;
    }

    public boolean equals(selectUserByMemberCode_args that) {
      if (that == null)
        return false;

      boolean this_present_memberCode = true;
      boolean that_present_memberCode = true;
      if (this_present_memberCode || that_present_memberCode) {
        if (!(this_present_memberCode && that_present_memberCode))
          return false;
        if (this.memberCode != that.memberCode)
          return false;
      }

      boolean this_present_clientId = true && this.isSetClientId();
      boolean that_present_clientId = true && that.isSetClientId();
      if (this_present_clientId || that_present_clientId) {
        if (!(this_present_clientId && that_present_clientId))
          return false;
        if (!this.clientId.equals(that.clientId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_memberCode = true;
      list.add(present_memberCode);
      if (present_memberCode)
        list.add(memberCode);

      boolean present_clientId = true && (isSetClientId());
      list.add(present_clientId);
      if (present_clientId)
        list.add(clientId);

      return list.hashCode();
    }

    @Override
    public int compareTo(selectUserByMemberCode_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMemberCode()).compareTo(other.isSetMemberCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMemberCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.memberCode, other.memberCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("selectUserByMemberCode_args(");
      boolean first = true;

      sb.append("memberCode:");
      sb.append(this.memberCode);
      first = false;
      if (!first) sb.append(", ");
      sb.append("clientId:");
      if (this.clientId == null) {
        sb.append("null");
      } else {
        sb.append(this.clientId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class selectUserByMemberCode_argsStandardSchemeFactory implements SchemeFactory {
      public selectUserByMemberCode_argsStandardScheme getScheme() {
        return new selectUserByMemberCode_argsStandardScheme();
      }
    }

    private static class selectUserByMemberCode_argsStandardScheme extends StandardScheme<selectUserByMemberCode_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, selectUserByMemberCode_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MEMBER_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.memberCode = iprot.readI64();
                struct.setMemberCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CLIENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clientId = iprot.readString();
                struct.setClientIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, selectUserByMemberCode_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(MEMBER_CODE_FIELD_DESC);
        oprot.writeI64(struct.memberCode);
        oprot.writeFieldEnd();
        if (struct.clientId != null) {
          oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
          oprot.writeString(struct.clientId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class selectUserByMemberCode_argsTupleSchemeFactory implements SchemeFactory {
      public selectUserByMemberCode_argsTupleScheme getScheme() {
        return new selectUserByMemberCode_argsTupleScheme();
      }
    }

    private static class selectUserByMemberCode_argsTupleScheme extends TupleScheme<selectUserByMemberCode_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, selectUserByMemberCode_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMemberCode()) {
          optionals.set(0);
        }
        if (struct.isSetClientId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetMemberCode()) {
          oprot.writeI64(struct.memberCode);
        }
        if (struct.isSetClientId()) {
          oprot.writeString(struct.clientId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, selectUserByMemberCode_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.memberCode = iprot.readI64();
          struct.setMemberCodeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.clientId = iprot.readString();
          struct.setClientIdIsSet(true);
        }
      }
    }

  }

  public static class selectUserByMemberCode_result implements org.apache.thrift.TBase<selectUserByMemberCode_result, selectUserByMemberCode_result._Fields>, java.io.Serializable, Cloneable, Comparable<selectUserByMemberCode_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("selectUserByMemberCode_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new selectUserByMemberCode_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new selectUserByMemberCode_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.member.MemberInfoVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.member.MemberInfoVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(selectUserByMemberCode_result.class, metaDataMap);
    }

    public selectUserByMemberCode_result() {
    }

    public selectUserByMemberCode_result(
      com.froad.thrift.vo.member.MemberInfoVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public selectUserByMemberCode_result(selectUserByMemberCode_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.member.MemberInfoVo(other.success);
      }
    }

    public selectUserByMemberCode_result deepCopy() {
      return new selectUserByMemberCode_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.member.MemberInfoVo getSuccess() {
      return this.success;
    }

    public selectUserByMemberCode_result setSuccess(com.froad.thrift.vo.member.MemberInfoVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.member.MemberInfoVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof selectUserByMemberCode_result)
        return this.equals((selectUserByMemberCode_result)that);
      return false;
    }

    public boolean equals(selectUserByMemberCode_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(selectUserByMemberCode_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("selectUserByMemberCode_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class selectUserByMemberCode_resultStandardSchemeFactory implements SchemeFactory {
      public selectUserByMemberCode_resultStandardScheme getScheme() {
        return new selectUserByMemberCode_resultStandardScheme();
      }
    }

    private static class selectUserByMemberCode_resultStandardScheme extends StandardScheme<selectUserByMemberCode_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, selectUserByMemberCode_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.member.MemberInfoVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, selectUserByMemberCode_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class selectUserByMemberCode_resultTupleSchemeFactory implements SchemeFactory {
      public selectUserByMemberCode_resultTupleScheme getScheme() {
        return new selectUserByMemberCode_resultTupleScheme();
      }
    }

    private static class selectUserByMemberCode_resultTupleScheme extends TupleScheme<selectUserByMemberCode_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, selectUserByMemberCode_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, selectUserByMemberCode_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.member.MemberInfoVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class selectUserByLoginID_args implements org.apache.thrift.TBase<selectUserByLoginID_args, selectUserByLoginID_args._Fields>, java.io.Serializable, Cloneable, Comparable<selectUserByLoginID_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("selectUserByLoginID_args");

    private static final org.apache.thrift.protocol.TField LOGIN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("loginID", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new selectUserByLoginID_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new selectUserByLoginID_argsTupleSchemeFactory());
    }

    public String loginID; // required
    public String clientId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOGIN_ID((short)1, "loginID"),
      CLIENT_ID((short)2, "clientId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOGIN_ID
            return LOGIN_ID;
          case 2: // CLIENT_ID
            return CLIENT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOGIN_ID, new org.apache.thrift.meta_data.FieldMetaData("loginID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(selectUserByLoginID_args.class, metaDataMap);
    }

    public selectUserByLoginID_args() {
    }

    public selectUserByLoginID_args(
      String loginID,
      String clientId)
    {
      this();
      this.loginID = loginID;
      this.clientId = clientId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public selectUserByLoginID_args(selectUserByLoginID_args other) {
      if (other.isSetLoginID()) {
        this.loginID = other.loginID;
      }
      if (other.isSetClientId()) {
        this.clientId = other.clientId;
      }
    }

    public selectUserByLoginID_args deepCopy() {
      return new selectUserByLoginID_args(this);
    }

    @Override
    public void clear() {
      this.loginID = null;
      this.clientId = null;
    }

    public String getLoginID() {
      return this.loginID;
    }

    public selectUserByLoginID_args setLoginID(String loginID) {
      this.loginID = loginID;
      return this;
    }

    public void unsetLoginID() {
      this.loginID = null;
    }

    /** Returns true if field loginID is set (has been assigned a value) and false otherwise */
    public boolean isSetLoginID() {
      return this.loginID != null;
    }

    public void setLoginIDIsSet(boolean value) {
      if (!value) {
        this.loginID = null;
      }
    }

    public String getClientId() {
      return this.clientId;
    }

    public selectUserByLoginID_args setClientId(String clientId) {
      this.clientId = clientId;
      return this;
    }

    public void unsetClientId() {
      this.clientId = null;
    }

    /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
    public boolean isSetClientId() {
      return this.clientId != null;
    }

    public void setClientIdIsSet(boolean value) {
      if (!value) {
        this.clientId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LOGIN_ID:
        if (value == null) {
          unsetLoginID();
        } else {
          setLoginID((String)value);
        }
        break;

      case CLIENT_ID:
        if (value == null) {
          unsetClientId();
        } else {
          setClientId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LOGIN_ID:
        return getLoginID();

      case CLIENT_ID:
        return getClientId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LOGIN_ID:
        return isSetLoginID();
      case CLIENT_ID:
        return isSetClientId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof selectUserByLoginID_args)
        return this.equals((selectUserByLoginID_args)that);
      return false;
    }

    public boolean equals(selectUserByLoginID_args that) {
      if (that == null)
        return false;

      boolean this_present_loginID = true && this.isSetLoginID();
      boolean that_present_loginID = true && that.isSetLoginID();
      if (this_present_loginID || that_present_loginID) {
        if (!(this_present_loginID && that_present_loginID))
          return false;
        if (!this.loginID.equals(that.loginID))
          return false;
      }

      boolean this_present_clientId = true && this.isSetClientId();
      boolean that_present_clientId = true && that.isSetClientId();
      if (this_present_clientId || that_present_clientId) {
        if (!(this_present_clientId && that_present_clientId))
          return false;
        if (!this.clientId.equals(that.clientId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_loginID = true && (isSetLoginID());
      list.add(present_loginID);
      if (present_loginID)
        list.add(loginID);

      boolean present_clientId = true && (isSetClientId());
      list.add(present_clientId);
      if (present_clientId)
        list.add(clientId);

      return list.hashCode();
    }

    @Override
    public int compareTo(selectUserByLoginID_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLoginID()).compareTo(other.isSetLoginID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLoginID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loginID, other.loginID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("selectUserByLoginID_args(");
      boolean first = true;

      sb.append("loginID:");
      if (this.loginID == null) {
        sb.append("null");
      } else {
        sb.append(this.loginID);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("clientId:");
      if (this.clientId == null) {
        sb.append("null");
      } else {
        sb.append(this.clientId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class selectUserByLoginID_argsStandardSchemeFactory implements SchemeFactory {
      public selectUserByLoginID_argsStandardScheme getScheme() {
        return new selectUserByLoginID_argsStandardScheme();
      }
    }

    private static class selectUserByLoginID_argsStandardScheme extends StandardScheme<selectUserByLoginID_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, selectUserByLoginID_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOGIN_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.loginID = iprot.readString();
                struct.setLoginIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CLIENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clientId = iprot.readString();
                struct.setClientIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, selectUserByLoginID_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.loginID != null) {
          oprot.writeFieldBegin(LOGIN_ID_FIELD_DESC);
          oprot.writeString(struct.loginID);
          oprot.writeFieldEnd();
        }
        if (struct.clientId != null) {
          oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
          oprot.writeString(struct.clientId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class selectUserByLoginID_argsTupleSchemeFactory implements SchemeFactory {
      public selectUserByLoginID_argsTupleScheme getScheme() {
        return new selectUserByLoginID_argsTupleScheme();
      }
    }

    private static class selectUserByLoginID_argsTupleScheme extends TupleScheme<selectUserByLoginID_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, selectUserByLoginID_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLoginID()) {
          optionals.set(0);
        }
        if (struct.isSetClientId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetLoginID()) {
          oprot.writeString(struct.loginID);
        }
        if (struct.isSetClientId()) {
          oprot.writeString(struct.clientId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, selectUserByLoginID_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.loginID = iprot.readString();
          struct.setLoginIDIsSet(true);
        }
        if (incoming.get(1)) {
          struct.clientId = iprot.readString();
          struct.setClientIdIsSet(true);
        }
      }
    }

  }

  public static class selectUserByLoginID_result implements org.apache.thrift.TBase<selectUserByLoginID_result, selectUserByLoginID_result._Fields>, java.io.Serializable, Cloneable, Comparable<selectUserByLoginID_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("selectUserByLoginID_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new selectUserByLoginID_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new selectUserByLoginID_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.member.MemberInfoVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.member.MemberInfoVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(selectUserByLoginID_result.class, metaDataMap);
    }

    public selectUserByLoginID_result() {
    }

    public selectUserByLoginID_result(
      com.froad.thrift.vo.member.MemberInfoVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public selectUserByLoginID_result(selectUserByLoginID_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.member.MemberInfoVo(other.success);
      }
    }

    public selectUserByLoginID_result deepCopy() {
      return new selectUserByLoginID_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.member.MemberInfoVo getSuccess() {
      return this.success;
    }

    public selectUserByLoginID_result setSuccess(com.froad.thrift.vo.member.MemberInfoVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.member.MemberInfoVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof selectUserByLoginID_result)
        return this.equals((selectUserByLoginID_result)that);
      return false;
    }

    public boolean equals(selectUserByLoginID_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(selectUserByLoginID_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("selectUserByLoginID_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class selectUserByLoginID_resultStandardSchemeFactory implements SchemeFactory {
      public selectUserByLoginID_resultStandardScheme getScheme() {
        return new selectUserByLoginID_resultStandardScheme();
      }
    }

    private static class selectUserByLoginID_resultStandardScheme extends StandardScheme<selectUserByLoginID_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, selectUserByLoginID_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.member.MemberInfoVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, selectUserByLoginID_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class selectUserByLoginID_resultTupleSchemeFactory implements SchemeFactory {
      public selectUserByLoginID_resultTupleScheme getScheme() {
        return new selectUserByLoginID_resultTupleScheme();
      }
    }

    private static class selectUserByLoginID_resultTupleScheme extends TupleScheme<selectUserByLoginID_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, selectUserByLoginID_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, selectUserByLoginID_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.member.MemberInfoVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class selectMemberPointsInfoByLoginID_args implements org.apache.thrift.TBase<selectMemberPointsInfoByLoginID_args, selectMemberPointsInfoByLoginID_args._Fields>, java.io.Serializable, Cloneable, Comparable<selectMemberPointsInfoByLoginID_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("selectMemberPointsInfoByLoginID_args");

    private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField LOGIN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("loginID", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new selectMemberPointsInfoByLoginID_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new selectMemberPointsInfoByLoginID_argsTupleSchemeFactory());
    }

    public String clientId; // required
    public String loginID; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CLIENT_ID((short)1, "clientId"),
      LOGIN_ID((short)2, "loginID");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CLIENT_ID
            return CLIENT_ID;
          case 2: // LOGIN_ID
            return LOGIN_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.LOGIN_ID, new org.apache.thrift.meta_data.FieldMetaData("loginID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(selectMemberPointsInfoByLoginID_args.class, metaDataMap);
    }

    public selectMemberPointsInfoByLoginID_args() {
    }

    public selectMemberPointsInfoByLoginID_args(
      String clientId,
      String loginID)
    {
      this();
      this.clientId = clientId;
      this.loginID = loginID;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public selectMemberPointsInfoByLoginID_args(selectMemberPointsInfoByLoginID_args other) {
      if (other.isSetClientId()) {
        this.clientId = other.clientId;
      }
      if (other.isSetLoginID()) {
        this.loginID = other.loginID;
      }
    }

    public selectMemberPointsInfoByLoginID_args deepCopy() {
      return new selectMemberPointsInfoByLoginID_args(this);
    }

    @Override
    public void clear() {
      this.clientId = null;
      this.loginID = null;
    }

    public String getClientId() {
      return this.clientId;
    }

    public selectMemberPointsInfoByLoginID_args setClientId(String clientId) {
      this.clientId = clientId;
      return this;
    }

    public void unsetClientId() {
      this.clientId = null;
    }

    /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
    public boolean isSetClientId() {
      return this.clientId != null;
    }

    public void setClientIdIsSet(boolean value) {
      if (!value) {
        this.clientId = null;
      }
    }

    public String getLoginID() {
      return this.loginID;
    }

    public selectMemberPointsInfoByLoginID_args setLoginID(String loginID) {
      this.loginID = loginID;
      return this;
    }

    public void unsetLoginID() {
      this.loginID = null;
    }

    /** Returns true if field loginID is set (has been assigned a value) and false otherwise */
    public boolean isSetLoginID() {
      return this.loginID != null;
    }

    public void setLoginIDIsSet(boolean value) {
      if (!value) {
        this.loginID = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CLIENT_ID:
        if (value == null) {
          unsetClientId();
        } else {
          setClientId((String)value);
        }
        break;

      case LOGIN_ID:
        if (value == null) {
          unsetLoginID();
        } else {
          setLoginID((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CLIENT_ID:
        return getClientId();

      case LOGIN_ID:
        return getLoginID();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CLIENT_ID:
        return isSetClientId();
      case LOGIN_ID:
        return isSetLoginID();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof selectMemberPointsInfoByLoginID_args)
        return this.equals((selectMemberPointsInfoByLoginID_args)that);
      return false;
    }

    public boolean equals(selectMemberPointsInfoByLoginID_args that) {
      if (that == null)
        return false;

      boolean this_present_clientId = true && this.isSetClientId();
      boolean that_present_clientId = true && that.isSetClientId();
      if (this_present_clientId || that_present_clientId) {
        if (!(this_present_clientId && that_present_clientId))
          return false;
        if (!this.clientId.equals(that.clientId))
          return false;
      }

      boolean this_present_loginID = true && this.isSetLoginID();
      boolean that_present_loginID = true && that.isSetLoginID();
      if (this_present_loginID || that_present_loginID) {
        if (!(this_present_loginID && that_present_loginID))
          return false;
        if (!this.loginID.equals(that.loginID))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_clientId = true && (isSetClientId());
      list.add(present_clientId);
      if (present_clientId)
        list.add(clientId);

      boolean present_loginID = true && (isSetLoginID());
      list.add(present_loginID);
      if (present_loginID)
        list.add(loginID);

      return list.hashCode();
    }

    @Override
    public int compareTo(selectMemberPointsInfoByLoginID_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLoginID()).compareTo(other.isSetLoginID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLoginID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loginID, other.loginID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("selectMemberPointsInfoByLoginID_args(");
      boolean first = true;

      sb.append("clientId:");
      if (this.clientId == null) {
        sb.append("null");
      } else {
        sb.append(this.clientId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("loginID:");
      if (this.loginID == null) {
        sb.append("null");
      } else {
        sb.append(this.loginID);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class selectMemberPointsInfoByLoginID_argsStandardSchemeFactory implements SchemeFactory {
      public selectMemberPointsInfoByLoginID_argsStandardScheme getScheme() {
        return new selectMemberPointsInfoByLoginID_argsStandardScheme();
      }
    }

    private static class selectMemberPointsInfoByLoginID_argsStandardScheme extends StandardScheme<selectMemberPointsInfoByLoginID_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, selectMemberPointsInfoByLoginID_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CLIENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clientId = iprot.readString();
                struct.setClientIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LOGIN_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.loginID = iprot.readString();
                struct.setLoginIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, selectMemberPointsInfoByLoginID_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.clientId != null) {
          oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
          oprot.writeString(struct.clientId);
          oprot.writeFieldEnd();
        }
        if (struct.loginID != null) {
          oprot.writeFieldBegin(LOGIN_ID_FIELD_DESC);
          oprot.writeString(struct.loginID);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class selectMemberPointsInfoByLoginID_argsTupleSchemeFactory implements SchemeFactory {
      public selectMemberPointsInfoByLoginID_argsTupleScheme getScheme() {
        return new selectMemberPointsInfoByLoginID_argsTupleScheme();
      }
    }

    private static class selectMemberPointsInfoByLoginID_argsTupleScheme extends TupleScheme<selectMemberPointsInfoByLoginID_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, selectMemberPointsInfoByLoginID_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetClientId()) {
          optionals.set(0);
        }
        if (struct.isSetLoginID()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetClientId()) {
          oprot.writeString(struct.clientId);
        }
        if (struct.isSetLoginID()) {
          oprot.writeString(struct.loginID);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, selectMemberPointsInfoByLoginID_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.clientId = iprot.readString();
          struct.setClientIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.loginID = iprot.readString();
          struct.setLoginIDIsSet(true);
        }
      }
    }

  }

  public static class selectMemberPointsInfoByLoginID_result implements org.apache.thrift.TBase<selectMemberPointsInfoByLoginID_result, selectMemberPointsInfoByLoginID_result._Fields>, java.io.Serializable, Cloneable, Comparable<selectMemberPointsInfoByLoginID_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("selectMemberPointsInfoByLoginID_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new selectMemberPointsInfoByLoginID_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new selectMemberPointsInfoByLoginID_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.member.UserEnginePointsVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.member.UserEnginePointsVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(selectMemberPointsInfoByLoginID_result.class, metaDataMap);
    }

    public selectMemberPointsInfoByLoginID_result() {
    }

    public selectMemberPointsInfoByLoginID_result(
      com.froad.thrift.vo.member.UserEnginePointsVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public selectMemberPointsInfoByLoginID_result(selectMemberPointsInfoByLoginID_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.member.UserEnginePointsVo(other.success);
      }
    }

    public selectMemberPointsInfoByLoginID_result deepCopy() {
      return new selectMemberPointsInfoByLoginID_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.member.UserEnginePointsVo getSuccess() {
      return this.success;
    }

    public selectMemberPointsInfoByLoginID_result setSuccess(com.froad.thrift.vo.member.UserEnginePointsVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.member.UserEnginePointsVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof selectMemberPointsInfoByLoginID_result)
        return this.equals((selectMemberPointsInfoByLoginID_result)that);
      return false;
    }

    public boolean equals(selectMemberPointsInfoByLoginID_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(selectMemberPointsInfoByLoginID_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("selectMemberPointsInfoByLoginID_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class selectMemberPointsInfoByLoginID_resultStandardSchemeFactory implements SchemeFactory {
      public selectMemberPointsInfoByLoginID_resultStandardScheme getScheme() {
        return new selectMemberPointsInfoByLoginID_resultStandardScheme();
      }
    }

    private static class selectMemberPointsInfoByLoginID_resultStandardScheme extends StandardScheme<selectMemberPointsInfoByLoginID_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, selectMemberPointsInfoByLoginID_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.member.UserEnginePointsVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, selectMemberPointsInfoByLoginID_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class selectMemberPointsInfoByLoginID_resultTupleSchemeFactory implements SchemeFactory {
      public selectMemberPointsInfoByLoginID_resultTupleScheme getScheme() {
        return new selectMemberPointsInfoByLoginID_resultTupleScheme();
      }
    }

    private static class selectMemberPointsInfoByLoginID_resultTupleScheme extends TupleScheme<selectMemberPointsInfoByLoginID_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, selectMemberPointsInfoByLoginID_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, selectMemberPointsInfoByLoginID_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.member.UserEnginePointsVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateUserMobile_args implements org.apache.thrift.TBase<updateUserMobile_args, updateUserMobile_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateUserMobile_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateUserMobile_args");

    private static final org.apache.thrift.protocol.TField MEMBER_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("memberCode", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField MOBILE_FIELD_DESC = new org.apache.thrift.protocol.TField("mobile", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateUserMobile_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateUserMobile_argsTupleSchemeFactory());
    }

    public long memberCode; // required
    public String mobile; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MEMBER_CODE((short)1, "memberCode"),
      MOBILE((short)2, "mobile");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MEMBER_CODE
            return MEMBER_CODE;
          case 2: // MOBILE
            return MOBILE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __MEMBERCODE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MEMBER_CODE, new org.apache.thrift.meta_data.FieldMetaData("memberCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.MOBILE, new org.apache.thrift.meta_data.FieldMetaData("mobile", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateUserMobile_args.class, metaDataMap);
    }

    public updateUserMobile_args() {
    }

    public updateUserMobile_args(
      long memberCode,
      String mobile)
    {
      this();
      this.memberCode = memberCode;
      setMemberCodeIsSet(true);
      this.mobile = mobile;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateUserMobile_args(updateUserMobile_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.memberCode = other.memberCode;
      if (other.isSetMobile()) {
        this.mobile = other.mobile;
      }
    }

    public updateUserMobile_args deepCopy() {
      return new updateUserMobile_args(this);
    }

    @Override
    public void clear() {
      setMemberCodeIsSet(false);
      this.memberCode = 0;
      this.mobile = null;
    }

    public long getMemberCode() {
      return this.memberCode;
    }

    public updateUserMobile_args setMemberCode(long memberCode) {
      this.memberCode = memberCode;
      setMemberCodeIsSet(true);
      return this;
    }

    public void unsetMemberCode() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MEMBERCODE_ISSET_ID);
    }

    /** Returns true if field memberCode is set (has been assigned a value) and false otherwise */
    public boolean isSetMemberCode() {
      return EncodingUtils.testBit(__isset_bitfield, __MEMBERCODE_ISSET_ID);
    }

    public void setMemberCodeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MEMBERCODE_ISSET_ID, value);
    }

    public String getMobile() {
      return this.mobile;
    }

    public updateUserMobile_args setMobile(String mobile) {
      this.mobile = mobile;
      return this;
    }

    public void unsetMobile() {
      this.mobile = null;
    }

    /** Returns true if field mobile is set (has been assigned a value) and false otherwise */
    public boolean isSetMobile() {
      return this.mobile != null;
    }

    public void setMobileIsSet(boolean value) {
      if (!value) {
        this.mobile = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MEMBER_CODE:
        if (value == null) {
          unsetMemberCode();
        } else {
          setMemberCode((Long)value);
        }
        break;

      case MOBILE:
        if (value == null) {
          unsetMobile();
        } else {
          setMobile((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MEMBER_CODE:
        return Long.valueOf(getMemberCode());

      case MOBILE:
        return getMobile();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MEMBER_CODE:
        return isSetMemberCode();
      case MOBILE:
        return isSetMobile();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateUserMobile_args)
        return this.equals((updateUserMobile_args)that);
      return false;
    }

    public boolean equals(updateUserMobile_args that) {
      if (that == null)
        return false;

      boolean this_present_memberCode = true;
      boolean that_present_memberCode = true;
      if (this_present_memberCode || that_present_memberCode) {
        if (!(this_present_memberCode && that_present_memberCode))
          return false;
        if (this.memberCode != that.memberCode)
          return false;
      }

      boolean this_present_mobile = true && this.isSetMobile();
      boolean that_present_mobile = true && that.isSetMobile();
      if (this_present_mobile || that_present_mobile) {
        if (!(this_present_mobile && that_present_mobile))
          return false;
        if (!this.mobile.equals(that.mobile))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_memberCode = true;
      list.add(present_memberCode);
      if (present_memberCode)
        list.add(memberCode);

      boolean present_mobile = true && (isSetMobile());
      list.add(present_mobile);
      if (present_mobile)
        list.add(mobile);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateUserMobile_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMemberCode()).compareTo(other.isSetMemberCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMemberCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.memberCode, other.memberCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMobile()).compareTo(other.isSetMobile());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMobile()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mobile, other.mobile);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateUserMobile_args(");
      boolean first = true;

      sb.append("memberCode:");
      sb.append(this.memberCode);
      first = false;
      if (!first) sb.append(", ");
      sb.append("mobile:");
      if (this.mobile == null) {
        sb.append("null");
      } else {
        sb.append(this.mobile);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateUserMobile_argsStandardSchemeFactory implements SchemeFactory {
      public updateUserMobile_argsStandardScheme getScheme() {
        return new updateUserMobile_argsStandardScheme();
      }
    }

    private static class updateUserMobile_argsStandardScheme extends StandardScheme<updateUserMobile_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateUserMobile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MEMBER_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.memberCode = iprot.readI64();
                struct.setMemberCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // MOBILE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.mobile = iprot.readString();
                struct.setMobileIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateUserMobile_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(MEMBER_CODE_FIELD_DESC);
        oprot.writeI64(struct.memberCode);
        oprot.writeFieldEnd();
        if (struct.mobile != null) {
          oprot.writeFieldBegin(MOBILE_FIELD_DESC);
          oprot.writeString(struct.mobile);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateUserMobile_argsTupleSchemeFactory implements SchemeFactory {
      public updateUserMobile_argsTupleScheme getScheme() {
        return new updateUserMobile_argsTupleScheme();
      }
    }

    private static class updateUserMobile_argsTupleScheme extends TupleScheme<updateUserMobile_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateUserMobile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMemberCode()) {
          optionals.set(0);
        }
        if (struct.isSetMobile()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetMemberCode()) {
          oprot.writeI64(struct.memberCode);
        }
        if (struct.isSetMobile()) {
          oprot.writeString(struct.mobile);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateUserMobile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.memberCode = iprot.readI64();
          struct.setMemberCodeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.mobile = iprot.readString();
          struct.setMobileIsSet(true);
        }
      }
    }

  }

  public static class updateUserMobile_result implements org.apache.thrift.TBase<updateUserMobile_result, updateUserMobile_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateUserMobile_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateUserMobile_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateUserMobile_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateUserMobile_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateUserMobile_result.class, metaDataMap);
    }

    public updateUserMobile_result() {
    }

    public updateUserMobile_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateUserMobile_result(updateUserMobile_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public updateUserMobile_result deepCopy() {
      return new updateUserMobile_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public updateUserMobile_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateUserMobile_result)
        return this.equals((updateUserMobile_result)that);
      return false;
    }

    public boolean equals(updateUserMobile_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateUserMobile_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateUserMobile_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateUserMobile_resultStandardSchemeFactory implements SchemeFactory {
      public updateUserMobile_resultStandardScheme getScheme() {
        return new updateUserMobile_resultStandardScheme();
      }
    }

    private static class updateUserMobile_resultStandardScheme extends StandardScheme<updateUserMobile_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateUserMobile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateUserMobile_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateUserMobile_resultTupleSchemeFactory implements SchemeFactory {
      public updateUserMobile_resultTupleScheme getScheme() {
        return new updateUserMobile_resultTupleScheme();
      }
    }

    private static class updateUserMobile_resultTupleScheme extends TupleScheme<updateUserMobile_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateUserMobile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateUserMobile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class sendSignBankCardPhoneToken_args implements org.apache.thrift.TBase<sendSignBankCardPhoneToken_args, sendSignBankCardPhoneToken_args._Fields>, java.io.Serializable, Cloneable, Comparable<sendSignBankCardPhoneToken_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendSignBankCardPhoneToken_args");

    private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PHONE_FIELD_DESC = new org.apache.thrift.protocol.TField("phone", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField CARD_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("cardNo", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new sendSignBankCardPhoneToken_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new sendSignBankCardPhoneToken_argsTupleSchemeFactory());
    }

    public String clientId; // required
    public String phone; // required
    public String cardNo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CLIENT_ID((short)1, "clientId"),
      PHONE((short)2, "phone"),
      CARD_NO((short)3, "cardNo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CLIENT_ID
            return CLIENT_ID;
          case 2: // PHONE
            return PHONE;
          case 3: // CARD_NO
            return CARD_NO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PHONE, new org.apache.thrift.meta_data.FieldMetaData("phone", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CARD_NO, new org.apache.thrift.meta_data.FieldMetaData("cardNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendSignBankCardPhoneToken_args.class, metaDataMap);
    }

    public sendSignBankCardPhoneToken_args() {
    }

    public sendSignBankCardPhoneToken_args(
      String clientId,
      String phone,
      String cardNo)
    {
      this();
      this.clientId = clientId;
      this.phone = phone;
      this.cardNo = cardNo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendSignBankCardPhoneToken_args(sendSignBankCardPhoneToken_args other) {
      if (other.isSetClientId()) {
        this.clientId = other.clientId;
      }
      if (other.isSetPhone()) {
        this.phone = other.phone;
      }
      if (other.isSetCardNo()) {
        this.cardNo = other.cardNo;
      }
    }

    public sendSignBankCardPhoneToken_args deepCopy() {
      return new sendSignBankCardPhoneToken_args(this);
    }

    @Override
    public void clear() {
      this.clientId = null;
      this.phone = null;
      this.cardNo = null;
    }

    public String getClientId() {
      return this.clientId;
    }

    public sendSignBankCardPhoneToken_args setClientId(String clientId) {
      this.clientId = clientId;
      return this;
    }

    public void unsetClientId() {
      this.clientId = null;
    }

    /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
    public boolean isSetClientId() {
      return this.clientId != null;
    }

    public void setClientIdIsSet(boolean value) {
      if (!value) {
        this.clientId = null;
      }
    }

    public String getPhone() {
      return this.phone;
    }

    public sendSignBankCardPhoneToken_args setPhone(String phone) {
      this.phone = phone;
      return this;
    }

    public void unsetPhone() {
      this.phone = null;
    }

    /** Returns true if field phone is set (has been assigned a value) and false otherwise */
    public boolean isSetPhone() {
      return this.phone != null;
    }

    public void setPhoneIsSet(boolean value) {
      if (!value) {
        this.phone = null;
      }
    }

    public String getCardNo() {
      return this.cardNo;
    }

    public sendSignBankCardPhoneToken_args setCardNo(String cardNo) {
      this.cardNo = cardNo;
      return this;
    }

    public void unsetCardNo() {
      this.cardNo = null;
    }

    /** Returns true if field cardNo is set (has been assigned a value) and false otherwise */
    public boolean isSetCardNo() {
      return this.cardNo != null;
    }

    public void setCardNoIsSet(boolean value) {
      if (!value) {
        this.cardNo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CLIENT_ID:
        if (value == null) {
          unsetClientId();
        } else {
          setClientId((String)value);
        }
        break;

      case PHONE:
        if (value == null) {
          unsetPhone();
        } else {
          setPhone((String)value);
        }
        break;

      case CARD_NO:
        if (value == null) {
          unsetCardNo();
        } else {
          setCardNo((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CLIENT_ID:
        return getClientId();

      case PHONE:
        return getPhone();

      case CARD_NO:
        return getCardNo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CLIENT_ID:
        return isSetClientId();
      case PHONE:
        return isSetPhone();
      case CARD_NO:
        return isSetCardNo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendSignBankCardPhoneToken_args)
        return this.equals((sendSignBankCardPhoneToken_args)that);
      return false;
    }

    public boolean equals(sendSignBankCardPhoneToken_args that) {
      if (that == null)
        return false;

      boolean this_present_clientId = true && this.isSetClientId();
      boolean that_present_clientId = true && that.isSetClientId();
      if (this_present_clientId || that_present_clientId) {
        if (!(this_present_clientId && that_present_clientId))
          return false;
        if (!this.clientId.equals(that.clientId))
          return false;
      }

      boolean this_present_phone = true && this.isSetPhone();
      boolean that_present_phone = true && that.isSetPhone();
      if (this_present_phone || that_present_phone) {
        if (!(this_present_phone && that_present_phone))
          return false;
        if (!this.phone.equals(that.phone))
          return false;
      }

      boolean this_present_cardNo = true && this.isSetCardNo();
      boolean that_present_cardNo = true && that.isSetCardNo();
      if (this_present_cardNo || that_present_cardNo) {
        if (!(this_present_cardNo && that_present_cardNo))
          return false;
        if (!this.cardNo.equals(that.cardNo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_clientId = true && (isSetClientId());
      list.add(present_clientId);
      if (present_clientId)
        list.add(clientId);

      boolean present_phone = true && (isSetPhone());
      list.add(present_phone);
      if (present_phone)
        list.add(phone);

      boolean present_cardNo = true && (isSetCardNo());
      list.add(present_cardNo);
      if (present_cardNo)
        list.add(cardNo);

      return list.hashCode();
    }

    @Override
    public int compareTo(sendSignBankCardPhoneToken_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPhone()).compareTo(other.isSetPhone());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPhone()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.phone, other.phone);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCardNo()).compareTo(other.isSetCardNo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCardNo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cardNo, other.cardNo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sendSignBankCardPhoneToken_args(");
      boolean first = true;

      sb.append("clientId:");
      if (this.clientId == null) {
        sb.append("null");
      } else {
        sb.append(this.clientId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("phone:");
      if (this.phone == null) {
        sb.append("null");
      } else {
        sb.append(this.phone);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("cardNo:");
      if (this.cardNo == null) {
        sb.append("null");
      } else {
        sb.append(this.cardNo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendSignBankCardPhoneToken_argsStandardSchemeFactory implements SchemeFactory {
      public sendSignBankCardPhoneToken_argsStandardScheme getScheme() {
        return new sendSignBankCardPhoneToken_argsStandardScheme();
      }
    }

    private static class sendSignBankCardPhoneToken_argsStandardScheme extends StandardScheme<sendSignBankCardPhoneToken_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendSignBankCardPhoneToken_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CLIENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clientId = iprot.readString();
                struct.setClientIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PHONE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.phone = iprot.readString();
                struct.setPhoneIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CARD_NO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.cardNo = iprot.readString();
                struct.setCardNoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendSignBankCardPhoneToken_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.clientId != null) {
          oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
          oprot.writeString(struct.clientId);
          oprot.writeFieldEnd();
        }
        if (struct.phone != null) {
          oprot.writeFieldBegin(PHONE_FIELD_DESC);
          oprot.writeString(struct.phone);
          oprot.writeFieldEnd();
        }
        if (struct.cardNo != null) {
          oprot.writeFieldBegin(CARD_NO_FIELD_DESC);
          oprot.writeString(struct.cardNo);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendSignBankCardPhoneToken_argsTupleSchemeFactory implements SchemeFactory {
      public sendSignBankCardPhoneToken_argsTupleScheme getScheme() {
        return new sendSignBankCardPhoneToken_argsTupleScheme();
      }
    }

    private static class sendSignBankCardPhoneToken_argsTupleScheme extends TupleScheme<sendSignBankCardPhoneToken_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendSignBankCardPhoneToken_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetClientId()) {
          optionals.set(0);
        }
        if (struct.isSetPhone()) {
          optionals.set(1);
        }
        if (struct.isSetCardNo()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetClientId()) {
          oprot.writeString(struct.clientId);
        }
        if (struct.isSetPhone()) {
          oprot.writeString(struct.phone);
        }
        if (struct.isSetCardNo()) {
          oprot.writeString(struct.cardNo);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendSignBankCardPhoneToken_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.clientId = iprot.readString();
          struct.setClientIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.phone = iprot.readString();
          struct.setPhoneIsSet(true);
        }
        if (incoming.get(2)) {
          struct.cardNo = iprot.readString();
          struct.setCardNoIsSet(true);
        }
      }
    }

  }

  public static class sendSignBankCardPhoneToken_result implements org.apache.thrift.TBase<sendSignBankCardPhoneToken_result, sendSignBankCardPhoneToken_result._Fields>, java.io.Serializable, Cloneable, Comparable<sendSignBankCardPhoneToken_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendSignBankCardPhoneToken_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new sendSignBankCardPhoneToken_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new sendSignBankCardPhoneToken_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.member.PeAcctVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.member.PeAcctVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendSignBankCardPhoneToken_result.class, metaDataMap);
    }

    public sendSignBankCardPhoneToken_result() {
    }

    public sendSignBankCardPhoneToken_result(
      com.froad.thrift.vo.member.PeAcctVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendSignBankCardPhoneToken_result(sendSignBankCardPhoneToken_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.member.PeAcctVo(other.success);
      }
    }

    public sendSignBankCardPhoneToken_result deepCopy() {
      return new sendSignBankCardPhoneToken_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.member.PeAcctVo getSuccess() {
      return this.success;
    }

    public sendSignBankCardPhoneToken_result setSuccess(com.froad.thrift.vo.member.PeAcctVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.member.PeAcctVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendSignBankCardPhoneToken_result)
        return this.equals((sendSignBankCardPhoneToken_result)that);
      return false;
    }

    public boolean equals(sendSignBankCardPhoneToken_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(sendSignBankCardPhoneToken_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sendSignBankCardPhoneToken_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendSignBankCardPhoneToken_resultStandardSchemeFactory implements SchemeFactory {
      public sendSignBankCardPhoneToken_resultStandardScheme getScheme() {
        return new sendSignBankCardPhoneToken_resultStandardScheme();
      }
    }

    private static class sendSignBankCardPhoneToken_resultStandardScheme extends StandardScheme<sendSignBankCardPhoneToken_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendSignBankCardPhoneToken_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.member.PeAcctVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendSignBankCardPhoneToken_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendSignBankCardPhoneToken_resultTupleSchemeFactory implements SchemeFactory {
      public sendSignBankCardPhoneToken_resultTupleScheme getScheme() {
        return new sendSignBankCardPhoneToken_resultTupleScheme();
      }
    }

    private static class sendSignBankCardPhoneToken_resultTupleScheme extends TupleScheme<sendSignBankCardPhoneToken_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendSignBankCardPhoneToken_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendSignBankCardPhoneToken_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.member.PeAcctVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class fastPayMoblieToken_args implements org.apache.thrift.TBase<fastPayMoblieToken_args, fastPayMoblieToken_args._Fields>, java.io.Serializable, Cloneable, Comparable<fastPayMoblieToken_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("fastPayMoblieToken_args");

    private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField BANK_CARD_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("bankCardNo", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField PHONE_FIELD_DESC = new org.apache.thrift.protocol.TField("phone", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField REMARK_FIELD_DESC = new org.apache.thrift.protocol.TField("remark", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new fastPayMoblieToken_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new fastPayMoblieToken_argsTupleSchemeFactory());
    }

    public String clientId; // required
    public String bankCardNo; // required
    public String phone; // required
    public String remark; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CLIENT_ID((short)1, "clientId"),
      BANK_CARD_NO((short)2, "bankCardNo"),
      PHONE((short)3, "phone"),
      REMARK((short)4, "remark");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CLIENT_ID
            return CLIENT_ID;
          case 2: // BANK_CARD_NO
            return BANK_CARD_NO;
          case 3: // PHONE
            return PHONE;
          case 4: // REMARK
            return REMARK;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.BANK_CARD_NO, new org.apache.thrift.meta_data.FieldMetaData("bankCardNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PHONE, new org.apache.thrift.meta_data.FieldMetaData("phone", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.REMARK, new org.apache.thrift.meta_data.FieldMetaData("remark", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(fastPayMoblieToken_args.class, metaDataMap);
    }

    public fastPayMoblieToken_args() {
    }

    public fastPayMoblieToken_args(
      String clientId,
      String bankCardNo,
      String phone,
      String remark)
    {
      this();
      this.clientId = clientId;
      this.bankCardNo = bankCardNo;
      this.phone = phone;
      this.remark = remark;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public fastPayMoblieToken_args(fastPayMoblieToken_args other) {
      if (other.isSetClientId()) {
        this.clientId = other.clientId;
      }
      if (other.isSetBankCardNo()) {
        this.bankCardNo = other.bankCardNo;
      }
      if (other.isSetPhone()) {
        this.phone = other.phone;
      }
      if (other.isSetRemark()) {
        this.remark = other.remark;
      }
    }

    public fastPayMoblieToken_args deepCopy() {
      return new fastPayMoblieToken_args(this);
    }

    @Override
    public void clear() {
      this.clientId = null;
      this.bankCardNo = null;
      this.phone = null;
      this.remark = null;
    }

    public String getClientId() {
      return this.clientId;
    }

    public fastPayMoblieToken_args setClientId(String clientId) {
      this.clientId = clientId;
      return this;
    }

    public void unsetClientId() {
      this.clientId = null;
    }

    /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
    public boolean isSetClientId() {
      return this.clientId != null;
    }

    public void setClientIdIsSet(boolean value) {
      if (!value) {
        this.clientId = null;
      }
    }

    public String getBankCardNo() {
      return this.bankCardNo;
    }

    public fastPayMoblieToken_args setBankCardNo(String bankCardNo) {
      this.bankCardNo = bankCardNo;
      return this;
    }

    public void unsetBankCardNo() {
      this.bankCardNo = null;
    }

    /** Returns true if field bankCardNo is set (has been assigned a value) and false otherwise */
    public boolean isSetBankCardNo() {
      return this.bankCardNo != null;
    }

    public void setBankCardNoIsSet(boolean value) {
      if (!value) {
        this.bankCardNo = null;
      }
    }

    public String getPhone() {
      return this.phone;
    }

    public fastPayMoblieToken_args setPhone(String phone) {
      this.phone = phone;
      return this;
    }

    public void unsetPhone() {
      this.phone = null;
    }

    /** Returns true if field phone is set (has been assigned a value) and false otherwise */
    public boolean isSetPhone() {
      return this.phone != null;
    }

    public void setPhoneIsSet(boolean value) {
      if (!value) {
        this.phone = null;
      }
    }

    public String getRemark() {
      return this.remark;
    }

    public fastPayMoblieToken_args setRemark(String remark) {
      this.remark = remark;
      return this;
    }

    public void unsetRemark() {
      this.remark = null;
    }

    /** Returns true if field remark is set (has been assigned a value) and false otherwise */
    public boolean isSetRemark() {
      return this.remark != null;
    }

    public void setRemarkIsSet(boolean value) {
      if (!value) {
        this.remark = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CLIENT_ID:
        if (value == null) {
          unsetClientId();
        } else {
          setClientId((String)value);
        }
        break;

      case BANK_CARD_NO:
        if (value == null) {
          unsetBankCardNo();
        } else {
          setBankCardNo((String)value);
        }
        break;

      case PHONE:
        if (value == null) {
          unsetPhone();
        } else {
          setPhone((String)value);
        }
        break;

      case REMARK:
        if (value == null) {
          unsetRemark();
        } else {
          setRemark((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CLIENT_ID:
        return getClientId();

      case BANK_CARD_NO:
        return getBankCardNo();

      case PHONE:
        return getPhone();

      case REMARK:
        return getRemark();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CLIENT_ID:
        return isSetClientId();
      case BANK_CARD_NO:
        return isSetBankCardNo();
      case PHONE:
        return isSetPhone();
      case REMARK:
        return isSetRemark();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof fastPayMoblieToken_args)
        return this.equals((fastPayMoblieToken_args)that);
      return false;
    }

    public boolean equals(fastPayMoblieToken_args that) {
      if (that == null)
        return false;

      boolean this_present_clientId = true && this.isSetClientId();
      boolean that_present_clientId = true && that.isSetClientId();
      if (this_present_clientId || that_present_clientId) {
        if (!(this_present_clientId && that_present_clientId))
          return false;
        if (!this.clientId.equals(that.clientId))
          return false;
      }

      boolean this_present_bankCardNo = true && this.isSetBankCardNo();
      boolean that_present_bankCardNo = true && that.isSetBankCardNo();
      if (this_present_bankCardNo || that_present_bankCardNo) {
        if (!(this_present_bankCardNo && that_present_bankCardNo))
          return false;
        if (!this.bankCardNo.equals(that.bankCardNo))
          return false;
      }

      boolean this_present_phone = true && this.isSetPhone();
      boolean that_present_phone = true && that.isSetPhone();
      if (this_present_phone || that_present_phone) {
        if (!(this_present_phone && that_present_phone))
          return false;
        if (!this.phone.equals(that.phone))
          return false;
      }

      boolean this_present_remark = true && this.isSetRemark();
      boolean that_present_remark = true && that.isSetRemark();
      if (this_present_remark || that_present_remark) {
        if (!(this_present_remark && that_present_remark))
          return false;
        if (!this.remark.equals(that.remark))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_clientId = true && (isSetClientId());
      list.add(present_clientId);
      if (present_clientId)
        list.add(clientId);

      boolean present_bankCardNo = true && (isSetBankCardNo());
      list.add(present_bankCardNo);
      if (present_bankCardNo)
        list.add(bankCardNo);

      boolean present_phone = true && (isSetPhone());
      list.add(present_phone);
      if (present_phone)
        list.add(phone);

      boolean present_remark = true && (isSetRemark());
      list.add(present_remark);
      if (present_remark)
        list.add(remark);

      return list.hashCode();
    }

    @Override
    public int compareTo(fastPayMoblieToken_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBankCardNo()).compareTo(other.isSetBankCardNo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBankCardNo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankCardNo, other.bankCardNo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPhone()).compareTo(other.isSetPhone());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPhone()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.phone, other.phone);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRemark()).compareTo(other.isSetRemark());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRemark()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remark, other.remark);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("fastPayMoblieToken_args(");
      boolean first = true;

      sb.append("clientId:");
      if (this.clientId == null) {
        sb.append("null");
      } else {
        sb.append(this.clientId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("bankCardNo:");
      if (this.bankCardNo == null) {
        sb.append("null");
      } else {
        sb.append(this.bankCardNo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("phone:");
      if (this.phone == null) {
        sb.append("null");
      } else {
        sb.append(this.phone);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("remark:");
      if (this.remark == null) {
        sb.append("null");
      } else {
        sb.append(this.remark);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class fastPayMoblieToken_argsStandardSchemeFactory implements SchemeFactory {
      public fastPayMoblieToken_argsStandardScheme getScheme() {
        return new fastPayMoblieToken_argsStandardScheme();
      }
    }

    private static class fastPayMoblieToken_argsStandardScheme extends StandardScheme<fastPayMoblieToken_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, fastPayMoblieToken_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CLIENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clientId = iprot.readString();
                struct.setClientIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BANK_CARD_NO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.bankCardNo = iprot.readString();
                struct.setBankCardNoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PHONE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.phone = iprot.readString();
                struct.setPhoneIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // REMARK
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.remark = iprot.readString();
                struct.setRemarkIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, fastPayMoblieToken_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.clientId != null) {
          oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
          oprot.writeString(struct.clientId);
          oprot.writeFieldEnd();
        }
        if (struct.bankCardNo != null) {
          oprot.writeFieldBegin(BANK_CARD_NO_FIELD_DESC);
          oprot.writeString(struct.bankCardNo);
          oprot.writeFieldEnd();
        }
        if (struct.phone != null) {
          oprot.writeFieldBegin(PHONE_FIELD_DESC);
          oprot.writeString(struct.phone);
          oprot.writeFieldEnd();
        }
        if (struct.remark != null) {
          oprot.writeFieldBegin(REMARK_FIELD_DESC);
          oprot.writeString(struct.remark);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class fastPayMoblieToken_argsTupleSchemeFactory implements SchemeFactory {
      public fastPayMoblieToken_argsTupleScheme getScheme() {
        return new fastPayMoblieToken_argsTupleScheme();
      }
    }

    private static class fastPayMoblieToken_argsTupleScheme extends TupleScheme<fastPayMoblieToken_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, fastPayMoblieToken_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetClientId()) {
          optionals.set(0);
        }
        if (struct.isSetBankCardNo()) {
          optionals.set(1);
        }
        if (struct.isSetPhone()) {
          optionals.set(2);
        }
        if (struct.isSetRemark()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetClientId()) {
          oprot.writeString(struct.clientId);
        }
        if (struct.isSetBankCardNo()) {
          oprot.writeString(struct.bankCardNo);
        }
        if (struct.isSetPhone()) {
          oprot.writeString(struct.phone);
        }
        if (struct.isSetRemark()) {
          oprot.writeString(struct.remark);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, fastPayMoblieToken_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.clientId = iprot.readString();
          struct.setClientIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.bankCardNo = iprot.readString();
          struct.setBankCardNoIsSet(true);
        }
        if (incoming.get(2)) {
          struct.phone = iprot.readString();
          struct.setPhoneIsSet(true);
        }
        if (incoming.get(3)) {
          struct.remark = iprot.readString();
          struct.setRemarkIsSet(true);
        }
      }
    }

  }

  public static class fastPayMoblieToken_result implements org.apache.thrift.TBase<fastPayMoblieToken_result, fastPayMoblieToken_result._Fields>, java.io.Serializable, Cloneable, Comparable<fastPayMoblieToken_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("fastPayMoblieToken_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new fastPayMoblieToken_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new fastPayMoblieToken_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.member.PeAcctVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.member.PeAcctVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(fastPayMoblieToken_result.class, metaDataMap);
    }

    public fastPayMoblieToken_result() {
    }

    public fastPayMoblieToken_result(
      com.froad.thrift.vo.member.PeAcctVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public fastPayMoblieToken_result(fastPayMoblieToken_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.member.PeAcctVo(other.success);
      }
    }

    public fastPayMoblieToken_result deepCopy() {
      return new fastPayMoblieToken_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.member.PeAcctVo getSuccess() {
      return this.success;
    }

    public fastPayMoblieToken_result setSuccess(com.froad.thrift.vo.member.PeAcctVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.member.PeAcctVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof fastPayMoblieToken_result)
        return this.equals((fastPayMoblieToken_result)that);
      return false;
    }

    public boolean equals(fastPayMoblieToken_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(fastPayMoblieToken_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("fastPayMoblieToken_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class fastPayMoblieToken_resultStandardSchemeFactory implements SchemeFactory {
      public fastPayMoblieToken_resultStandardScheme getScheme() {
        return new fastPayMoblieToken_resultStandardScheme();
      }
    }

    private static class fastPayMoblieToken_resultStandardScheme extends StandardScheme<fastPayMoblieToken_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, fastPayMoblieToken_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.member.PeAcctVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, fastPayMoblieToken_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class fastPayMoblieToken_resultTupleSchemeFactory implements SchemeFactory {
      public fastPayMoblieToken_resultTupleScheme getScheme() {
        return new fastPayMoblieToken_resultTupleScheme();
      }
    }

    private static class fastPayMoblieToken_resultTupleScheme extends TupleScheme<fastPayMoblieToken_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, fastPayMoblieToken_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, fastPayMoblieToken_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.member.PeAcctVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class validateFilmMobile_args implements org.apache.thrift.TBase<validateFilmMobile_args, validateFilmMobile_args._Fields>, java.io.Serializable, Cloneable, Comparable<validateFilmMobile_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("validateFilmMobile_args");

    private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField FILM_MOBILE_FIELD_DESC = new org.apache.thrift.protocol.TField("filmMobile", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new validateFilmMobile_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new validateFilmMobile_argsTupleSchemeFactory());
    }

    public String clientId; // required
    public String filmMobile; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CLIENT_ID((short)1, "clientId"),
      FILM_MOBILE((short)2, "filmMobile");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CLIENT_ID
            return CLIENT_ID;
          case 2: // FILM_MOBILE
            return FILM_MOBILE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FILM_MOBILE, new org.apache.thrift.meta_data.FieldMetaData("filmMobile", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(validateFilmMobile_args.class, metaDataMap);
    }

    public validateFilmMobile_args() {
    }

    public validateFilmMobile_args(
      String clientId,
      String filmMobile)
    {
      this();
      this.clientId = clientId;
      this.filmMobile = filmMobile;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public validateFilmMobile_args(validateFilmMobile_args other) {
      if (other.isSetClientId()) {
        this.clientId = other.clientId;
      }
      if (other.isSetFilmMobile()) {
        this.filmMobile = other.filmMobile;
      }
    }

    public validateFilmMobile_args deepCopy() {
      return new validateFilmMobile_args(this);
    }

    @Override
    public void clear() {
      this.clientId = null;
      this.filmMobile = null;
    }

    public String getClientId() {
      return this.clientId;
    }

    public validateFilmMobile_args setClientId(String clientId) {
      this.clientId = clientId;
      return this;
    }

    public void unsetClientId() {
      this.clientId = null;
    }

    /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
    public boolean isSetClientId() {
      return this.clientId != null;
    }

    public void setClientIdIsSet(boolean value) {
      if (!value) {
        this.clientId = null;
      }
    }

    public String getFilmMobile() {
      return this.filmMobile;
    }

    public validateFilmMobile_args setFilmMobile(String filmMobile) {
      this.filmMobile = filmMobile;
      return this;
    }

    public void unsetFilmMobile() {
      this.filmMobile = null;
    }

    /** Returns true if field filmMobile is set (has been assigned a value) and false otherwise */
    public boolean isSetFilmMobile() {
      return this.filmMobile != null;
    }

    public void setFilmMobileIsSet(boolean value) {
      if (!value) {
        this.filmMobile = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CLIENT_ID:
        if (value == null) {
          unsetClientId();
        } else {
          setClientId((String)value);
        }
        break;

      case FILM_MOBILE:
        if (value == null) {
          unsetFilmMobile();
        } else {
          setFilmMobile((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CLIENT_ID:
        return getClientId();

      case FILM_MOBILE:
        return getFilmMobile();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CLIENT_ID:
        return isSetClientId();
      case FILM_MOBILE:
        return isSetFilmMobile();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof validateFilmMobile_args)
        return this.equals((validateFilmMobile_args)that);
      return false;
    }

    public boolean equals(validateFilmMobile_args that) {
      if (that == null)
        return false;

      boolean this_present_clientId = true && this.isSetClientId();
      boolean that_present_clientId = true && that.isSetClientId();
      if (this_present_clientId || that_present_clientId) {
        if (!(this_present_clientId && that_present_clientId))
          return false;
        if (!this.clientId.equals(that.clientId))
          return false;
      }

      boolean this_present_filmMobile = true && this.isSetFilmMobile();
      boolean that_present_filmMobile = true && that.isSetFilmMobile();
      if (this_present_filmMobile || that_present_filmMobile) {
        if (!(this_present_filmMobile && that_present_filmMobile))
          return false;
        if (!this.filmMobile.equals(that.filmMobile))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_clientId = true && (isSetClientId());
      list.add(present_clientId);
      if (present_clientId)
        list.add(clientId);

      boolean present_filmMobile = true && (isSetFilmMobile());
      list.add(present_filmMobile);
      if (present_filmMobile)
        list.add(filmMobile);

      return list.hashCode();
    }

    @Override
    public int compareTo(validateFilmMobile_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFilmMobile()).compareTo(other.isSetFilmMobile());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFilmMobile()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filmMobile, other.filmMobile);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("validateFilmMobile_args(");
      boolean first = true;

      sb.append("clientId:");
      if (this.clientId == null) {
        sb.append("null");
      } else {
        sb.append(this.clientId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("filmMobile:");
      if (this.filmMobile == null) {
        sb.append("null");
      } else {
        sb.append(this.filmMobile);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class validateFilmMobile_argsStandardSchemeFactory implements SchemeFactory {
      public validateFilmMobile_argsStandardScheme getScheme() {
        return new validateFilmMobile_argsStandardScheme();
      }
    }

    private static class validateFilmMobile_argsStandardScheme extends StandardScheme<validateFilmMobile_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, validateFilmMobile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CLIENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clientId = iprot.readString();
                struct.setClientIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FILM_MOBILE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.filmMobile = iprot.readString();
                struct.setFilmMobileIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, validateFilmMobile_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.clientId != null) {
          oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
          oprot.writeString(struct.clientId);
          oprot.writeFieldEnd();
        }
        if (struct.filmMobile != null) {
          oprot.writeFieldBegin(FILM_MOBILE_FIELD_DESC);
          oprot.writeString(struct.filmMobile);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class validateFilmMobile_argsTupleSchemeFactory implements SchemeFactory {
      public validateFilmMobile_argsTupleScheme getScheme() {
        return new validateFilmMobile_argsTupleScheme();
      }
    }

    private static class validateFilmMobile_argsTupleScheme extends TupleScheme<validateFilmMobile_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, validateFilmMobile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetClientId()) {
          optionals.set(0);
        }
        if (struct.isSetFilmMobile()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetClientId()) {
          oprot.writeString(struct.clientId);
        }
        if (struct.isSetFilmMobile()) {
          oprot.writeString(struct.filmMobile);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, validateFilmMobile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.clientId = iprot.readString();
          struct.setClientIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.filmMobile = iprot.readString();
          struct.setFilmMobileIsSet(true);
        }
      }
    }

  }

  public static class validateFilmMobile_result implements org.apache.thrift.TBase<validateFilmMobile_result, validateFilmMobile_result._Fields>, java.io.Serializable, Cloneable, Comparable<validateFilmMobile_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("validateFilmMobile_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new validateFilmMobile_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new validateFilmMobile_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(validateFilmMobile_result.class, metaDataMap);
    }

    public validateFilmMobile_result() {
    }

    public validateFilmMobile_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public validateFilmMobile_result(validateFilmMobile_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public validateFilmMobile_result deepCopy() {
      return new validateFilmMobile_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public validateFilmMobile_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof validateFilmMobile_result)
        return this.equals((validateFilmMobile_result)that);
      return false;
    }

    public boolean equals(validateFilmMobile_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(validateFilmMobile_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("validateFilmMobile_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class validateFilmMobile_resultStandardSchemeFactory implements SchemeFactory {
      public validateFilmMobile_resultStandardScheme getScheme() {
        return new validateFilmMobile_resultStandardScheme();
      }
    }

    private static class validateFilmMobile_resultStandardScheme extends StandardScheme<validateFilmMobile_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, validateFilmMobile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, validateFilmMobile_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class validateFilmMobile_resultTupleSchemeFactory implements SchemeFactory {
      public validateFilmMobile_resultTupleScheme getScheme() {
        return new validateFilmMobile_resultTupleScheme();
      }
    }

    private static class validateFilmMobile_resultTupleScheme extends TupleScheme<validateFilmMobile_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, validateFilmMobile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, validateFilmMobile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getPointTransBypage_args implements org.apache.thrift.TBase<getPointTransBypage_args, getPointTransBypage_args._Fields>, java.io.Serializable, Cloneable, Comparable<getPointTransBypage_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPointTransBypage_args");

    private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("userName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField FROM_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("fromTime", org.apache.thrift.protocol.TType.I64, (short)3);
    private static final org.apache.thrift.protocol.TField TO_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("toTime", org.apache.thrift.protocol.TType.I64, (short)4);
    private static final org.apache.thrift.protocol.TField PROTOCOL_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("protocolType", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField POINT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("pointType", org.apache.thrift.protocol.TType.STRING, (short)6);
    private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("pageSize", org.apache.thrift.protocol.TType.I32, (short)7);
    private static final org.apache.thrift.protocol.TField PAGE_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("pageNum", org.apache.thrift.protocol.TType.I32, (short)8);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPointTransBypage_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPointTransBypage_argsTupleSchemeFactory());
    }

    public String clientId; // required
    public String userName; // required
    public long fromTime; // required
    public long toTime; // required
    public String protocolType; // required
    public String pointType; // required
    public int pageSize; // required
    public int pageNum; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CLIENT_ID((short)1, "clientId"),
      USER_NAME((short)2, "userName"),
      FROM_TIME((short)3, "fromTime"),
      TO_TIME((short)4, "toTime"),
      PROTOCOL_TYPE((short)5, "protocolType"),
      POINT_TYPE((short)6, "pointType"),
      PAGE_SIZE((short)7, "pageSize"),
      PAGE_NUM((short)8, "pageNum");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CLIENT_ID
            return CLIENT_ID;
          case 2: // USER_NAME
            return USER_NAME;
          case 3: // FROM_TIME
            return FROM_TIME;
          case 4: // TO_TIME
            return TO_TIME;
          case 5: // PROTOCOL_TYPE
            return PROTOCOL_TYPE;
          case 6: // POINT_TYPE
            return POINT_TYPE;
          case 7: // PAGE_SIZE
            return PAGE_SIZE;
          case 8: // PAGE_NUM
            return PAGE_NUM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __FROMTIME_ISSET_ID = 0;
    private static final int __TOTIME_ISSET_ID = 1;
    private static final int __PAGESIZE_ISSET_ID = 2;
    private static final int __PAGENUM_ISSET_ID = 3;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("userName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FROM_TIME, new org.apache.thrift.meta_data.FieldMetaData("fromTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.TO_TIME, new org.apache.thrift.meta_data.FieldMetaData("toTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.PROTOCOL_TYPE, new org.apache.thrift.meta_data.FieldMetaData("protocolType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.POINT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("pointType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("pageSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PAGE_NUM, new org.apache.thrift.meta_data.FieldMetaData("pageNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPointTransBypage_args.class, metaDataMap);
    }

    public getPointTransBypage_args() {
    }

    public getPointTransBypage_args(
      String clientId,
      String userName,
      long fromTime,
      long toTime,
      String protocolType,
      String pointType,
      int pageSize,
      int pageNum)
    {
      this();
      this.clientId = clientId;
      this.userName = userName;
      this.fromTime = fromTime;
      setFromTimeIsSet(true);
      this.toTime = toTime;
      setToTimeIsSet(true);
      this.protocolType = protocolType;
      this.pointType = pointType;
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
      this.pageNum = pageNum;
      setPageNumIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPointTransBypage_args(getPointTransBypage_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetClientId()) {
        this.clientId = other.clientId;
      }
      if (other.isSetUserName()) {
        this.userName = other.userName;
      }
      this.fromTime = other.fromTime;
      this.toTime = other.toTime;
      if (other.isSetProtocolType()) {
        this.protocolType = other.protocolType;
      }
      if (other.isSetPointType()) {
        this.pointType = other.pointType;
      }
      this.pageSize = other.pageSize;
      this.pageNum = other.pageNum;
    }

    public getPointTransBypage_args deepCopy() {
      return new getPointTransBypage_args(this);
    }

    @Override
    public void clear() {
      this.clientId = null;
      this.userName = null;
      setFromTimeIsSet(false);
      this.fromTime = 0;
      setToTimeIsSet(false);
      this.toTime = 0;
      this.protocolType = null;
      this.pointType = null;
      setPageSizeIsSet(false);
      this.pageSize = 0;
      setPageNumIsSet(false);
      this.pageNum = 0;
    }

    public String getClientId() {
      return this.clientId;
    }

    public getPointTransBypage_args setClientId(String clientId) {
      this.clientId = clientId;
      return this;
    }

    public void unsetClientId() {
      this.clientId = null;
    }

    /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
    public boolean isSetClientId() {
      return this.clientId != null;
    }

    public void setClientIdIsSet(boolean value) {
      if (!value) {
        this.clientId = null;
      }
    }

    public String getUserName() {
      return this.userName;
    }

    public getPointTransBypage_args setUserName(String userName) {
      this.userName = userName;
      return this;
    }

    public void unsetUserName() {
      this.userName = null;
    }

    /** Returns true if field userName is set (has been assigned a value) and false otherwise */
    public boolean isSetUserName() {
      return this.userName != null;
    }

    public void setUserNameIsSet(boolean value) {
      if (!value) {
        this.userName = null;
      }
    }

    public long getFromTime() {
      return this.fromTime;
    }

    public getPointTransBypage_args setFromTime(long fromTime) {
      this.fromTime = fromTime;
      setFromTimeIsSet(true);
      return this;
    }

    public void unsetFromTime() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FROMTIME_ISSET_ID);
    }

    /** Returns true if field fromTime is set (has been assigned a value) and false otherwise */
    public boolean isSetFromTime() {
      return EncodingUtils.testBit(__isset_bitfield, __FROMTIME_ISSET_ID);
    }

    public void setFromTimeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FROMTIME_ISSET_ID, value);
    }

    public long getToTime() {
      return this.toTime;
    }

    public getPointTransBypage_args setToTime(long toTime) {
      this.toTime = toTime;
      setToTimeIsSet(true);
      return this;
    }

    public void unsetToTime() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTIME_ISSET_ID);
    }

    /** Returns true if field toTime is set (has been assigned a value) and false otherwise */
    public boolean isSetToTime() {
      return EncodingUtils.testBit(__isset_bitfield, __TOTIME_ISSET_ID);
    }

    public void setToTimeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTIME_ISSET_ID, value);
    }

    public String getProtocolType() {
      return this.protocolType;
    }

    public getPointTransBypage_args setProtocolType(String protocolType) {
      this.protocolType = protocolType;
      return this;
    }

    public void unsetProtocolType() {
      this.protocolType = null;
    }

    /** Returns true if field protocolType is set (has been assigned a value) and false otherwise */
    public boolean isSetProtocolType() {
      return this.protocolType != null;
    }

    public void setProtocolTypeIsSet(boolean value) {
      if (!value) {
        this.protocolType = null;
      }
    }

    public String getPointType() {
      return this.pointType;
    }

    public getPointTransBypage_args setPointType(String pointType) {
      this.pointType = pointType;
      return this;
    }

    public void unsetPointType() {
      this.pointType = null;
    }

    /** Returns true if field pointType is set (has been assigned a value) and false otherwise */
    public boolean isSetPointType() {
      return this.pointType != null;
    }

    public void setPointTypeIsSet(boolean value) {
      if (!value) {
        this.pointType = null;
      }
    }

    public int getPageSize() {
      return this.pageSize;
    }

    public getPointTransBypage_args setPageSize(int pageSize) {
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
      return this;
    }

    public void unsetPageSize() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    /** Returns true if field pageSize is set (has been assigned a value) and false otherwise */
    public boolean isSetPageSize() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    public void setPageSizeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGESIZE_ISSET_ID, value);
    }

    public int getPageNum() {
      return this.pageNum;
    }

    public getPointTransBypage_args setPageNum(int pageNum) {
      this.pageNum = pageNum;
      setPageNumIsSet(true);
      return this;
    }

    public void unsetPageNum() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGENUM_ISSET_ID);
    }

    /** Returns true if field pageNum is set (has been assigned a value) and false otherwise */
    public boolean isSetPageNum() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGENUM_ISSET_ID);
    }

    public void setPageNumIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGENUM_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CLIENT_ID:
        if (value == null) {
          unsetClientId();
        } else {
          setClientId((String)value);
        }
        break;

      case USER_NAME:
        if (value == null) {
          unsetUserName();
        } else {
          setUserName((String)value);
        }
        break;

      case FROM_TIME:
        if (value == null) {
          unsetFromTime();
        } else {
          setFromTime((Long)value);
        }
        break;

      case TO_TIME:
        if (value == null) {
          unsetToTime();
        } else {
          setToTime((Long)value);
        }
        break;

      case PROTOCOL_TYPE:
        if (value == null) {
          unsetProtocolType();
        } else {
          setProtocolType((String)value);
        }
        break;

      case POINT_TYPE:
        if (value == null) {
          unsetPointType();
        } else {
          setPointType((String)value);
        }
        break;

      case PAGE_SIZE:
        if (value == null) {
          unsetPageSize();
        } else {
          setPageSize((Integer)value);
        }
        break;

      case PAGE_NUM:
        if (value == null) {
          unsetPageNum();
        } else {
          setPageNum((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CLIENT_ID:
        return getClientId();

      case USER_NAME:
        return getUserName();

      case FROM_TIME:
        return Long.valueOf(getFromTime());

      case TO_TIME:
        return Long.valueOf(getToTime());

      case PROTOCOL_TYPE:
        return getProtocolType();

      case POINT_TYPE:
        return getPointType();

      case PAGE_SIZE:
        return Integer.valueOf(getPageSize());

      case PAGE_NUM:
        return Integer.valueOf(getPageNum());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CLIENT_ID:
        return isSetClientId();
      case USER_NAME:
        return isSetUserName();
      case FROM_TIME:
        return isSetFromTime();
      case TO_TIME:
        return isSetToTime();
      case PROTOCOL_TYPE:
        return isSetProtocolType();
      case POINT_TYPE:
        return isSetPointType();
      case PAGE_SIZE:
        return isSetPageSize();
      case PAGE_NUM:
        return isSetPageNum();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPointTransBypage_args)
        return this.equals((getPointTransBypage_args)that);
      return false;
    }

    public boolean equals(getPointTransBypage_args that) {
      if (that == null)
        return false;

      boolean this_present_clientId = true && this.isSetClientId();
      boolean that_present_clientId = true && that.isSetClientId();
      if (this_present_clientId || that_present_clientId) {
        if (!(this_present_clientId && that_present_clientId))
          return false;
        if (!this.clientId.equals(that.clientId))
          return false;
      }

      boolean this_present_userName = true && this.isSetUserName();
      boolean that_present_userName = true && that.isSetUserName();
      if (this_present_userName || that_present_userName) {
        if (!(this_present_userName && that_present_userName))
          return false;
        if (!this.userName.equals(that.userName))
          return false;
      }

      boolean this_present_fromTime = true;
      boolean that_present_fromTime = true;
      if (this_present_fromTime || that_present_fromTime) {
        if (!(this_present_fromTime && that_present_fromTime))
          return false;
        if (this.fromTime != that.fromTime)
          return false;
      }

      boolean this_present_toTime = true;
      boolean that_present_toTime = true;
      if (this_present_toTime || that_present_toTime) {
        if (!(this_present_toTime && that_present_toTime))
          return false;
        if (this.toTime != that.toTime)
          return false;
      }

      boolean this_present_protocolType = true && this.isSetProtocolType();
      boolean that_present_protocolType = true && that.isSetProtocolType();
      if (this_present_protocolType || that_present_protocolType) {
        if (!(this_present_protocolType && that_present_protocolType))
          return false;
        if (!this.protocolType.equals(that.protocolType))
          return false;
      }

      boolean this_present_pointType = true && this.isSetPointType();
      boolean that_present_pointType = true && that.isSetPointType();
      if (this_present_pointType || that_present_pointType) {
        if (!(this_present_pointType && that_present_pointType))
          return false;
        if (!this.pointType.equals(that.pointType))
          return false;
      }

      boolean this_present_pageSize = true;
      boolean that_present_pageSize = true;
      if (this_present_pageSize || that_present_pageSize) {
        if (!(this_present_pageSize && that_present_pageSize))
          return false;
        if (this.pageSize != that.pageSize)
          return false;
      }

      boolean this_present_pageNum = true;
      boolean that_present_pageNum = true;
      if (this_present_pageNum || that_present_pageNum) {
        if (!(this_present_pageNum && that_present_pageNum))
          return false;
        if (this.pageNum != that.pageNum)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_clientId = true && (isSetClientId());
      list.add(present_clientId);
      if (present_clientId)
        list.add(clientId);

      boolean present_userName = true && (isSetUserName());
      list.add(present_userName);
      if (present_userName)
        list.add(userName);

      boolean present_fromTime = true;
      list.add(present_fromTime);
      if (present_fromTime)
        list.add(fromTime);

      boolean present_toTime = true;
      list.add(present_toTime);
      if (present_toTime)
        list.add(toTime);

      boolean present_protocolType = true && (isSetProtocolType());
      list.add(present_protocolType);
      if (present_protocolType)
        list.add(protocolType);

      boolean present_pointType = true && (isSetPointType());
      list.add(present_pointType);
      if (present_pointType)
        list.add(pointType);

      boolean present_pageSize = true;
      list.add(present_pageSize);
      if (present_pageSize)
        list.add(pageSize);

      boolean present_pageNum = true;
      list.add(present_pageNum);
      if (present_pageNum)
        list.add(pageNum);

      return list.hashCode();
    }

    @Override
    public int compareTo(getPointTransBypage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserName()).compareTo(other.isSetUserName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userName, other.userName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFromTime()).compareTo(other.isSetFromTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFromTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fromTime, other.fromTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetToTime()).compareTo(other.isSetToTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.toTime, other.toTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetProtocolType()).compareTo(other.isSetProtocolType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProtocolType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.protocolType, other.protocolType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPointType()).compareTo(other.isSetPointType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPointType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pointType, other.pointType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageSize()).compareTo(other.isSetPageSize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageSize()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageSize, other.pageSize);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageNum()).compareTo(other.isSetPageNum());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageNum()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageNum, other.pageNum);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPointTransBypage_args(");
      boolean first = true;

      sb.append("clientId:");
      if (this.clientId == null) {
        sb.append("null");
      } else {
        sb.append(this.clientId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userName:");
      if (this.userName == null) {
        sb.append("null");
      } else {
        sb.append(this.userName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("fromTime:");
      sb.append(this.fromTime);
      first = false;
      if (!first) sb.append(", ");
      sb.append("toTime:");
      sb.append(this.toTime);
      first = false;
      if (!first) sb.append(", ");
      sb.append("protocolType:");
      if (this.protocolType == null) {
        sb.append("null");
      } else {
        sb.append(this.protocolType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("pointType:");
      if (this.pointType == null) {
        sb.append("null");
      } else {
        sb.append(this.pointType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageSize:");
      sb.append(this.pageSize);
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageNum:");
      sb.append(this.pageNum);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPointTransBypage_argsStandardSchemeFactory implements SchemeFactory {
      public getPointTransBypage_argsStandardScheme getScheme() {
        return new getPointTransBypage_argsStandardScheme();
      }
    }

    private static class getPointTransBypage_argsStandardScheme extends StandardScheme<getPointTransBypage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPointTransBypage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CLIENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clientId = iprot.readString();
                struct.setClientIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userName = iprot.readString();
                struct.setUserNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // FROM_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.fromTime = iprot.readI64();
                struct.setFromTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // TO_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.toTime = iprot.readI64();
                struct.setToTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // PROTOCOL_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.protocolType = iprot.readString();
                struct.setProtocolTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // POINT_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.pointType = iprot.readString();
                struct.setPointTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // PAGE_SIZE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageSize = iprot.readI32();
                struct.setPageSizeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 8: // PAGE_NUM
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageNum = iprot.readI32();
                struct.setPageNumIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPointTransBypage_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.clientId != null) {
          oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
          oprot.writeString(struct.clientId);
          oprot.writeFieldEnd();
        }
        if (struct.userName != null) {
          oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
          oprot.writeString(struct.userName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(FROM_TIME_FIELD_DESC);
        oprot.writeI64(struct.fromTime);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(TO_TIME_FIELD_DESC);
        oprot.writeI64(struct.toTime);
        oprot.writeFieldEnd();
        if (struct.protocolType != null) {
          oprot.writeFieldBegin(PROTOCOL_TYPE_FIELD_DESC);
          oprot.writeString(struct.protocolType);
          oprot.writeFieldEnd();
        }
        if (struct.pointType != null) {
          oprot.writeFieldBegin(POINT_TYPE_FIELD_DESC);
          oprot.writeString(struct.pointType);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
        oprot.writeI32(struct.pageSize);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PAGE_NUM_FIELD_DESC);
        oprot.writeI32(struct.pageNum);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPointTransBypage_argsTupleSchemeFactory implements SchemeFactory {
      public getPointTransBypage_argsTupleScheme getScheme() {
        return new getPointTransBypage_argsTupleScheme();
      }
    }

    private static class getPointTransBypage_argsTupleScheme extends TupleScheme<getPointTransBypage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPointTransBypage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetClientId()) {
          optionals.set(0);
        }
        if (struct.isSetUserName()) {
          optionals.set(1);
        }
        if (struct.isSetFromTime()) {
          optionals.set(2);
        }
        if (struct.isSetToTime()) {
          optionals.set(3);
        }
        if (struct.isSetProtocolType()) {
          optionals.set(4);
        }
        if (struct.isSetPointType()) {
          optionals.set(5);
        }
        if (struct.isSetPageSize()) {
          optionals.set(6);
        }
        if (struct.isSetPageNum()) {
          optionals.set(7);
        }
        oprot.writeBitSet(optionals, 8);
        if (struct.isSetClientId()) {
          oprot.writeString(struct.clientId);
        }
        if (struct.isSetUserName()) {
          oprot.writeString(struct.userName);
        }
        if (struct.isSetFromTime()) {
          oprot.writeI64(struct.fromTime);
        }
        if (struct.isSetToTime()) {
          oprot.writeI64(struct.toTime);
        }
        if (struct.isSetProtocolType()) {
          oprot.writeString(struct.protocolType);
        }
        if (struct.isSetPointType()) {
          oprot.writeString(struct.pointType);
        }
        if (struct.isSetPageSize()) {
          oprot.writeI32(struct.pageSize);
        }
        if (struct.isSetPageNum()) {
          oprot.writeI32(struct.pageNum);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPointTransBypage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(8);
        if (incoming.get(0)) {
          struct.clientId = iprot.readString();
          struct.setClientIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.userName = iprot.readString();
          struct.setUserNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.fromTime = iprot.readI64();
          struct.setFromTimeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.toTime = iprot.readI64();
          struct.setToTimeIsSet(true);
        }
        if (incoming.get(4)) {
          struct.protocolType = iprot.readString();
          struct.setProtocolTypeIsSet(true);
        }
        if (incoming.get(5)) {
          struct.pointType = iprot.readString();
          struct.setPointTypeIsSet(true);
        }
        if (incoming.get(6)) {
          struct.pageSize = iprot.readI32();
          struct.setPageSizeIsSet(true);
        }
        if (incoming.get(7)) {
          struct.pageNum = iprot.readI32();
          struct.setPageNumIsSet(true);
        }
      }
    }

  }

  public static class getPointTransBypage_result implements org.apache.thrift.TBase<getPointTransBypage_result, getPointTransBypage_result._Fields>, java.io.Serializable, Cloneable, Comparable<getPointTransBypage_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPointTransBypage_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPointTransBypage_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPointTransBypage_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.member.QueryProtocolVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.member.QueryProtocolVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPointTransBypage_result.class, metaDataMap);
    }

    public getPointTransBypage_result() {
    }

    public getPointTransBypage_result(
      com.froad.thrift.vo.member.QueryProtocolVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPointTransBypage_result(getPointTransBypage_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.member.QueryProtocolVo(other.success);
      }
    }

    public getPointTransBypage_result deepCopy() {
      return new getPointTransBypage_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.member.QueryProtocolVo getSuccess() {
      return this.success;
    }

    public getPointTransBypage_result setSuccess(com.froad.thrift.vo.member.QueryProtocolVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.member.QueryProtocolVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPointTransBypage_result)
        return this.equals((getPointTransBypage_result)that);
      return false;
    }

    public boolean equals(getPointTransBypage_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getPointTransBypage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPointTransBypage_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPointTransBypage_resultStandardSchemeFactory implements SchemeFactory {
      public getPointTransBypage_resultStandardScheme getScheme() {
        return new getPointTransBypage_resultStandardScheme();
      }
    }

    private static class getPointTransBypage_resultStandardScheme extends StandardScheme<getPointTransBypage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPointTransBypage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.member.QueryProtocolVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPointTransBypage_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPointTransBypage_resultTupleSchemeFactory implements SchemeFactory {
      public getPointTransBypage_resultTupleScheme getScheme() {
        return new getPointTransBypage_resultTupleScheme();
      }
    }

    private static class getPointTransBypage_resultTupleScheme extends TupleScheme<getPointTransBypage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPointTransBypage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPointTransBypage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.member.QueryProtocolVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class sendCheckCode_args implements org.apache.thrift.TBase<sendCheckCode_args, sendCheckCode_args._Fields>, java.io.Serializable, Cloneable, Comparable<sendCheckCode_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendCheckCode_args");

    private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField MOBILE_FIELD_DESC = new org.apache.thrift.protocol.TField("mobile", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField POINTS_FIELD_DESC = new org.apache.thrift.protocol.TField("points", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new sendCheckCode_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new sendCheckCode_argsTupleSchemeFactory());
    }

    public String clientId; // required
    public String mobile; // required
    public String points; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CLIENT_ID((short)1, "clientId"),
      MOBILE((short)2, "mobile"),
      POINTS((short)3, "points");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CLIENT_ID
            return CLIENT_ID;
          case 2: // MOBILE
            return MOBILE;
          case 3: // POINTS
            return POINTS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MOBILE, new org.apache.thrift.meta_data.FieldMetaData("mobile", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.POINTS, new org.apache.thrift.meta_data.FieldMetaData("points", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendCheckCode_args.class, metaDataMap);
    }

    public sendCheckCode_args() {
    }

    public sendCheckCode_args(
      String clientId,
      String mobile,
      String points)
    {
      this();
      this.clientId = clientId;
      this.mobile = mobile;
      this.points = points;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendCheckCode_args(sendCheckCode_args other) {
      if (other.isSetClientId()) {
        this.clientId = other.clientId;
      }
      if (other.isSetMobile()) {
        this.mobile = other.mobile;
      }
      if (other.isSetPoints()) {
        this.points = other.points;
      }
    }

    public sendCheckCode_args deepCopy() {
      return new sendCheckCode_args(this);
    }

    @Override
    public void clear() {
      this.clientId = null;
      this.mobile = null;
      this.points = null;
    }

    public String getClientId() {
      return this.clientId;
    }

    public sendCheckCode_args setClientId(String clientId) {
      this.clientId = clientId;
      return this;
    }

    public void unsetClientId() {
      this.clientId = null;
    }

    /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
    public boolean isSetClientId() {
      return this.clientId != null;
    }

    public void setClientIdIsSet(boolean value) {
      if (!value) {
        this.clientId = null;
      }
    }

    public String getMobile() {
      return this.mobile;
    }

    public sendCheckCode_args setMobile(String mobile) {
      this.mobile = mobile;
      return this;
    }

    public void unsetMobile() {
      this.mobile = null;
    }

    /** Returns true if field mobile is set (has been assigned a value) and false otherwise */
    public boolean isSetMobile() {
      return this.mobile != null;
    }

    public void setMobileIsSet(boolean value) {
      if (!value) {
        this.mobile = null;
      }
    }

    public String getPoints() {
      return this.points;
    }

    public sendCheckCode_args setPoints(String points) {
      this.points = points;
      return this;
    }

    public void unsetPoints() {
      this.points = null;
    }

    /** Returns true if field points is set (has been assigned a value) and false otherwise */
    public boolean isSetPoints() {
      return this.points != null;
    }

    public void setPointsIsSet(boolean value) {
      if (!value) {
        this.points = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CLIENT_ID:
        if (value == null) {
          unsetClientId();
        } else {
          setClientId((String)value);
        }
        break;

      case MOBILE:
        if (value == null) {
          unsetMobile();
        } else {
          setMobile((String)value);
        }
        break;

      case POINTS:
        if (value == null) {
          unsetPoints();
        } else {
          setPoints((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CLIENT_ID:
        return getClientId();

      case MOBILE:
        return getMobile();

      case POINTS:
        return getPoints();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CLIENT_ID:
        return isSetClientId();
      case MOBILE:
        return isSetMobile();
      case POINTS:
        return isSetPoints();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendCheckCode_args)
        return this.equals((sendCheckCode_args)that);
      return false;
    }

    public boolean equals(sendCheckCode_args that) {
      if (that == null)
        return false;

      boolean this_present_clientId = true && this.isSetClientId();
      boolean that_present_clientId = true && that.isSetClientId();
      if (this_present_clientId || that_present_clientId) {
        if (!(this_present_clientId && that_present_clientId))
          return false;
        if (!this.clientId.equals(that.clientId))
          return false;
      }

      boolean this_present_mobile = true && this.isSetMobile();
      boolean that_present_mobile = true && that.isSetMobile();
      if (this_present_mobile || that_present_mobile) {
        if (!(this_present_mobile && that_present_mobile))
          return false;
        if (!this.mobile.equals(that.mobile))
          return false;
      }

      boolean this_present_points = true && this.isSetPoints();
      boolean that_present_points = true && that.isSetPoints();
      if (this_present_points || that_present_points) {
        if (!(this_present_points && that_present_points))
          return false;
        if (!this.points.equals(that.points))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_clientId = true && (isSetClientId());
      list.add(present_clientId);
      if (present_clientId)
        list.add(clientId);

      boolean present_mobile = true && (isSetMobile());
      list.add(present_mobile);
      if (present_mobile)
        list.add(mobile);

      boolean present_points = true && (isSetPoints());
      list.add(present_points);
      if (present_points)
        list.add(points);

      return list.hashCode();
    }

    @Override
    public int compareTo(sendCheckCode_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMobile()).compareTo(other.isSetMobile());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMobile()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mobile, other.mobile);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPoints()).compareTo(other.isSetPoints());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPoints()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.points, other.points);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sendCheckCode_args(");
      boolean first = true;

      sb.append("clientId:");
      if (this.clientId == null) {
        sb.append("null");
      } else {
        sb.append(this.clientId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("mobile:");
      if (this.mobile == null) {
        sb.append("null");
      } else {
        sb.append(this.mobile);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("points:");
      if (this.points == null) {
        sb.append("null");
      } else {
        sb.append(this.points);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendCheckCode_argsStandardSchemeFactory implements SchemeFactory {
      public sendCheckCode_argsStandardScheme getScheme() {
        return new sendCheckCode_argsStandardScheme();
      }
    }

    private static class sendCheckCode_argsStandardScheme extends StandardScheme<sendCheckCode_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendCheckCode_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CLIENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clientId = iprot.readString();
                struct.setClientIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // MOBILE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.mobile = iprot.readString();
                struct.setMobileIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // POINTS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.points = iprot.readString();
                struct.setPointsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendCheckCode_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.clientId != null) {
          oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
          oprot.writeString(struct.clientId);
          oprot.writeFieldEnd();
        }
        if (struct.mobile != null) {
          oprot.writeFieldBegin(MOBILE_FIELD_DESC);
          oprot.writeString(struct.mobile);
          oprot.writeFieldEnd();
        }
        if (struct.points != null) {
          oprot.writeFieldBegin(POINTS_FIELD_DESC);
          oprot.writeString(struct.points);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendCheckCode_argsTupleSchemeFactory implements SchemeFactory {
      public sendCheckCode_argsTupleScheme getScheme() {
        return new sendCheckCode_argsTupleScheme();
      }
    }

    private static class sendCheckCode_argsTupleScheme extends TupleScheme<sendCheckCode_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendCheckCode_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetClientId()) {
          optionals.set(0);
        }
        if (struct.isSetMobile()) {
          optionals.set(1);
        }
        if (struct.isSetPoints()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetClientId()) {
          oprot.writeString(struct.clientId);
        }
        if (struct.isSetMobile()) {
          oprot.writeString(struct.mobile);
        }
        if (struct.isSetPoints()) {
          oprot.writeString(struct.points);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendCheckCode_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.clientId = iprot.readString();
          struct.setClientIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.mobile = iprot.readString();
          struct.setMobileIsSet(true);
        }
        if (incoming.get(2)) {
          struct.points = iprot.readString();
          struct.setPointsIsSet(true);
        }
      }
    }

  }

  public static class sendCheckCode_result implements org.apache.thrift.TBase<sendCheckCode_result, sendCheckCode_result._Fields>, java.io.Serializable, Cloneable, Comparable<sendCheckCode_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendCheckCode_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new sendCheckCode_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new sendCheckCode_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendCheckCode_result.class, metaDataMap);
    }

    public sendCheckCode_result() {
    }

    public sendCheckCode_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendCheckCode_result(sendCheckCode_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public sendCheckCode_result deepCopy() {
      return new sendCheckCode_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public sendCheckCode_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendCheckCode_result)
        return this.equals((sendCheckCode_result)that);
      return false;
    }

    public boolean equals(sendCheckCode_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(sendCheckCode_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sendCheckCode_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendCheckCode_resultStandardSchemeFactory implements SchemeFactory {
      public sendCheckCode_resultStandardScheme getScheme() {
        return new sendCheckCode_resultStandardScheme();
      }
    }

    private static class sendCheckCode_resultStandardScheme extends StandardScheme<sendCheckCode_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendCheckCode_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendCheckCode_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendCheckCode_resultTupleSchemeFactory implements SchemeFactory {
      public sendCheckCode_resultTupleScheme getScheme() {
        return new sendCheckCode_resultTupleScheme();
      }
    }

    private static class sendCheckCode_resultTupleScheme extends TupleScheme<sendCheckCode_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendCheckCode_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendCheckCode_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class findBankPointsByMobile_args implements org.apache.thrift.TBase<findBankPointsByMobile_args, findBankPointsByMobile_args._Fields>, java.io.Serializable, Cloneable, Comparable<findBankPointsByMobile_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findBankPointsByMobile_args");

    private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField MOBILE_FIELD_DESC = new org.apache.thrift.protocol.TField("mobile", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findBankPointsByMobile_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findBankPointsByMobile_argsTupleSchemeFactory());
    }

    public String clientId; // required
    public String mobile; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CLIENT_ID((short)1, "clientId"),
      MOBILE((short)2, "mobile");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CLIENT_ID
            return CLIENT_ID;
          case 2: // MOBILE
            return MOBILE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MOBILE, new org.apache.thrift.meta_data.FieldMetaData("mobile", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findBankPointsByMobile_args.class, metaDataMap);
    }

    public findBankPointsByMobile_args() {
    }

    public findBankPointsByMobile_args(
      String clientId,
      String mobile)
    {
      this();
      this.clientId = clientId;
      this.mobile = mobile;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findBankPointsByMobile_args(findBankPointsByMobile_args other) {
      if (other.isSetClientId()) {
        this.clientId = other.clientId;
      }
      if (other.isSetMobile()) {
        this.mobile = other.mobile;
      }
    }

    public findBankPointsByMobile_args deepCopy() {
      return new findBankPointsByMobile_args(this);
    }

    @Override
    public void clear() {
      this.clientId = null;
      this.mobile = null;
    }

    public String getClientId() {
      return this.clientId;
    }

    public findBankPointsByMobile_args setClientId(String clientId) {
      this.clientId = clientId;
      return this;
    }

    public void unsetClientId() {
      this.clientId = null;
    }

    /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
    public boolean isSetClientId() {
      return this.clientId != null;
    }

    public void setClientIdIsSet(boolean value) {
      if (!value) {
        this.clientId = null;
      }
    }

    public String getMobile() {
      return this.mobile;
    }

    public findBankPointsByMobile_args setMobile(String mobile) {
      this.mobile = mobile;
      return this;
    }

    public void unsetMobile() {
      this.mobile = null;
    }

    /** Returns true if field mobile is set (has been assigned a value) and false otherwise */
    public boolean isSetMobile() {
      return this.mobile != null;
    }

    public void setMobileIsSet(boolean value) {
      if (!value) {
        this.mobile = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CLIENT_ID:
        if (value == null) {
          unsetClientId();
        } else {
          setClientId((String)value);
        }
        break;

      case MOBILE:
        if (value == null) {
          unsetMobile();
        } else {
          setMobile((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CLIENT_ID:
        return getClientId();

      case MOBILE:
        return getMobile();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CLIENT_ID:
        return isSetClientId();
      case MOBILE:
        return isSetMobile();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findBankPointsByMobile_args)
        return this.equals((findBankPointsByMobile_args)that);
      return false;
    }

    public boolean equals(findBankPointsByMobile_args that) {
      if (that == null)
        return false;

      boolean this_present_clientId = true && this.isSetClientId();
      boolean that_present_clientId = true && that.isSetClientId();
      if (this_present_clientId || that_present_clientId) {
        if (!(this_present_clientId && that_present_clientId))
          return false;
        if (!this.clientId.equals(that.clientId))
          return false;
      }

      boolean this_present_mobile = true && this.isSetMobile();
      boolean that_present_mobile = true && that.isSetMobile();
      if (this_present_mobile || that_present_mobile) {
        if (!(this_present_mobile && that_present_mobile))
          return false;
        if (!this.mobile.equals(that.mobile))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_clientId = true && (isSetClientId());
      list.add(present_clientId);
      if (present_clientId)
        list.add(clientId);

      boolean present_mobile = true && (isSetMobile());
      list.add(present_mobile);
      if (present_mobile)
        list.add(mobile);

      return list.hashCode();
    }

    @Override
    public int compareTo(findBankPointsByMobile_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMobile()).compareTo(other.isSetMobile());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMobile()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mobile, other.mobile);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findBankPointsByMobile_args(");
      boolean first = true;

      sb.append("clientId:");
      if (this.clientId == null) {
        sb.append("null");
      } else {
        sb.append(this.clientId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("mobile:");
      if (this.mobile == null) {
        sb.append("null");
      } else {
        sb.append(this.mobile);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findBankPointsByMobile_argsStandardSchemeFactory implements SchemeFactory {
      public findBankPointsByMobile_argsStandardScheme getScheme() {
        return new findBankPointsByMobile_argsStandardScheme();
      }
    }

    private static class findBankPointsByMobile_argsStandardScheme extends StandardScheme<findBankPointsByMobile_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findBankPointsByMobile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CLIENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clientId = iprot.readString();
                struct.setClientIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // MOBILE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.mobile = iprot.readString();
                struct.setMobileIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findBankPointsByMobile_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.clientId != null) {
          oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
          oprot.writeString(struct.clientId);
          oprot.writeFieldEnd();
        }
        if (struct.mobile != null) {
          oprot.writeFieldBegin(MOBILE_FIELD_DESC);
          oprot.writeString(struct.mobile);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findBankPointsByMobile_argsTupleSchemeFactory implements SchemeFactory {
      public findBankPointsByMobile_argsTupleScheme getScheme() {
        return new findBankPointsByMobile_argsTupleScheme();
      }
    }

    private static class findBankPointsByMobile_argsTupleScheme extends TupleScheme<findBankPointsByMobile_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findBankPointsByMobile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetClientId()) {
          optionals.set(0);
        }
        if (struct.isSetMobile()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetClientId()) {
          oprot.writeString(struct.clientId);
        }
        if (struct.isSetMobile()) {
          oprot.writeString(struct.mobile);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findBankPointsByMobile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.clientId = iprot.readString();
          struct.setClientIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.mobile = iprot.readString();
          struct.setMobileIsSet(true);
        }
      }
    }

  }

  public static class findBankPointsByMobile_result implements org.apache.thrift.TBase<findBankPointsByMobile_result, findBankPointsByMobile_result._Fields>, java.io.Serializable, Cloneable, Comparable<findBankPointsByMobile_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findBankPointsByMobile_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findBankPointsByMobile_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findBankPointsByMobile_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findBankPointsByMobile_result.class, metaDataMap);
    }

    public findBankPointsByMobile_result() {
    }

    public findBankPointsByMobile_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findBankPointsByMobile_result(findBankPointsByMobile_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public findBankPointsByMobile_result deepCopy() {
      return new findBankPointsByMobile_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public findBankPointsByMobile_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findBankPointsByMobile_result)
        return this.equals((findBankPointsByMobile_result)that);
      return false;
    }

    public boolean equals(findBankPointsByMobile_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(findBankPointsByMobile_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findBankPointsByMobile_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findBankPointsByMobile_resultStandardSchemeFactory implements SchemeFactory {
      public findBankPointsByMobile_resultStandardScheme getScheme() {
        return new findBankPointsByMobile_resultStandardScheme();
      }
    }

    private static class findBankPointsByMobile_resultStandardScheme extends StandardScheme<findBankPointsByMobile_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findBankPointsByMobile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findBankPointsByMobile_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findBankPointsByMobile_resultTupleSchemeFactory implements SchemeFactory {
      public findBankPointsByMobile_resultTupleScheme getScheme() {
        return new findBankPointsByMobile_resultTupleScheme();
      }
    }

    private static class findBankPointsByMobile_resultTupleScheme extends TupleScheme<findBankPointsByMobile_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findBankPointsByMobile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findBankPointsByMobile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryBankPointsByBankNo_args implements org.apache.thrift.TBase<queryBankPointsByBankNo_args, queryBankPointsByBankNo_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryBankPointsByBankNo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryBankPointsByBankNo_args");

    private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField BANK_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("bankNo", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryBankPointsByBankNo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryBankPointsByBankNo_argsTupleSchemeFactory());
    }

    public String clientId; // required
    public String bankNo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CLIENT_ID((short)1, "clientId"),
      BANK_NO((short)2, "bankNo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CLIENT_ID
            return CLIENT_ID;
          case 2: // BANK_NO
            return BANK_NO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.BANK_NO, new org.apache.thrift.meta_data.FieldMetaData("bankNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryBankPointsByBankNo_args.class, metaDataMap);
    }

    public queryBankPointsByBankNo_args() {
    }

    public queryBankPointsByBankNo_args(
      String clientId,
      String bankNo)
    {
      this();
      this.clientId = clientId;
      this.bankNo = bankNo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryBankPointsByBankNo_args(queryBankPointsByBankNo_args other) {
      if (other.isSetClientId()) {
        this.clientId = other.clientId;
      }
      if (other.isSetBankNo()) {
        this.bankNo = other.bankNo;
      }
    }

    public queryBankPointsByBankNo_args deepCopy() {
      return new queryBankPointsByBankNo_args(this);
    }

    @Override
    public void clear() {
      this.clientId = null;
      this.bankNo = null;
    }

    public String getClientId() {
      return this.clientId;
    }

    public queryBankPointsByBankNo_args setClientId(String clientId) {
      this.clientId = clientId;
      return this;
    }

    public void unsetClientId() {
      this.clientId = null;
    }

    /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
    public boolean isSetClientId() {
      return this.clientId != null;
    }

    public void setClientIdIsSet(boolean value) {
      if (!value) {
        this.clientId = null;
      }
    }

    public String getBankNo() {
      return this.bankNo;
    }

    public queryBankPointsByBankNo_args setBankNo(String bankNo) {
      this.bankNo = bankNo;
      return this;
    }

    public void unsetBankNo() {
      this.bankNo = null;
    }

    /** Returns true if field bankNo is set (has been assigned a value) and false otherwise */
    public boolean isSetBankNo() {
      return this.bankNo != null;
    }

    public void setBankNoIsSet(boolean value) {
      if (!value) {
        this.bankNo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CLIENT_ID:
        if (value == null) {
          unsetClientId();
        } else {
          setClientId((String)value);
        }
        break;

      case BANK_NO:
        if (value == null) {
          unsetBankNo();
        } else {
          setBankNo((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CLIENT_ID:
        return getClientId();

      case BANK_NO:
        return getBankNo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CLIENT_ID:
        return isSetClientId();
      case BANK_NO:
        return isSetBankNo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryBankPointsByBankNo_args)
        return this.equals((queryBankPointsByBankNo_args)that);
      return false;
    }

    public boolean equals(queryBankPointsByBankNo_args that) {
      if (that == null)
        return false;

      boolean this_present_clientId = true && this.isSetClientId();
      boolean that_present_clientId = true && that.isSetClientId();
      if (this_present_clientId || that_present_clientId) {
        if (!(this_present_clientId && that_present_clientId))
          return false;
        if (!this.clientId.equals(that.clientId))
          return false;
      }

      boolean this_present_bankNo = true && this.isSetBankNo();
      boolean that_present_bankNo = true && that.isSetBankNo();
      if (this_present_bankNo || that_present_bankNo) {
        if (!(this_present_bankNo && that_present_bankNo))
          return false;
        if (!this.bankNo.equals(that.bankNo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_clientId = true && (isSetClientId());
      list.add(present_clientId);
      if (present_clientId)
        list.add(clientId);

      boolean present_bankNo = true && (isSetBankNo());
      list.add(present_bankNo);
      if (present_bankNo)
        list.add(bankNo);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryBankPointsByBankNo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBankNo()).compareTo(other.isSetBankNo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBankNo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankNo, other.bankNo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryBankPointsByBankNo_args(");
      boolean first = true;

      sb.append("clientId:");
      if (this.clientId == null) {
        sb.append("null");
      } else {
        sb.append(this.clientId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("bankNo:");
      if (this.bankNo == null) {
        sb.append("null");
      } else {
        sb.append(this.bankNo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryBankPointsByBankNo_argsStandardSchemeFactory implements SchemeFactory {
      public queryBankPointsByBankNo_argsStandardScheme getScheme() {
        return new queryBankPointsByBankNo_argsStandardScheme();
      }
    }

    private static class queryBankPointsByBankNo_argsStandardScheme extends StandardScheme<queryBankPointsByBankNo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryBankPointsByBankNo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CLIENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clientId = iprot.readString();
                struct.setClientIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BANK_NO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.bankNo = iprot.readString();
                struct.setBankNoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryBankPointsByBankNo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.clientId != null) {
          oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
          oprot.writeString(struct.clientId);
          oprot.writeFieldEnd();
        }
        if (struct.bankNo != null) {
          oprot.writeFieldBegin(BANK_NO_FIELD_DESC);
          oprot.writeString(struct.bankNo);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryBankPointsByBankNo_argsTupleSchemeFactory implements SchemeFactory {
      public queryBankPointsByBankNo_argsTupleScheme getScheme() {
        return new queryBankPointsByBankNo_argsTupleScheme();
      }
    }

    private static class queryBankPointsByBankNo_argsTupleScheme extends TupleScheme<queryBankPointsByBankNo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryBankPointsByBankNo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetClientId()) {
          optionals.set(0);
        }
        if (struct.isSetBankNo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetClientId()) {
          oprot.writeString(struct.clientId);
        }
        if (struct.isSetBankNo()) {
          oprot.writeString(struct.bankNo);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryBankPointsByBankNo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.clientId = iprot.readString();
          struct.setClientIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.bankNo = iprot.readString();
          struct.setBankNoIsSet(true);
        }
      }
    }

  }

  public static class queryBankPointsByBankNo_result implements org.apache.thrift.TBase<queryBankPointsByBankNo_result, queryBankPointsByBankNo_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryBankPointsByBankNo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryBankPointsByBankNo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryBankPointsByBankNo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryBankPointsByBankNo_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.member.PointsAccountVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.member.PointsAccountVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryBankPointsByBankNo_result.class, metaDataMap);
    }

    public queryBankPointsByBankNo_result() {
    }

    public queryBankPointsByBankNo_result(
      com.froad.thrift.vo.member.PointsAccountVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryBankPointsByBankNo_result(queryBankPointsByBankNo_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.member.PointsAccountVo(other.success);
      }
    }

    public queryBankPointsByBankNo_result deepCopy() {
      return new queryBankPointsByBankNo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.member.PointsAccountVo getSuccess() {
      return this.success;
    }

    public queryBankPointsByBankNo_result setSuccess(com.froad.thrift.vo.member.PointsAccountVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.member.PointsAccountVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryBankPointsByBankNo_result)
        return this.equals((queryBankPointsByBankNo_result)that);
      return false;
    }

    public boolean equals(queryBankPointsByBankNo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryBankPointsByBankNo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryBankPointsByBankNo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryBankPointsByBankNo_resultStandardSchemeFactory implements SchemeFactory {
      public queryBankPointsByBankNo_resultStandardScheme getScheme() {
        return new queryBankPointsByBankNo_resultStandardScheme();
      }
    }

    private static class queryBankPointsByBankNo_resultStandardScheme extends StandardScheme<queryBankPointsByBankNo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryBankPointsByBankNo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.member.PointsAccountVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryBankPointsByBankNo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryBankPointsByBankNo_resultTupleSchemeFactory implements SchemeFactory {
      public queryBankPointsByBankNo_resultTupleScheme getScheme() {
        return new queryBankPointsByBankNo_resultTupleScheme();
      }
    }

    private static class queryBankPointsByBankNo_resultTupleScheme extends TupleScheme<queryBankPointsByBankNo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryBankPointsByBankNo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryBankPointsByBankNo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.member.PointsAccountVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class payPointsByMobileNo_args implements org.apache.thrift.TBase<payPointsByMobileNo_args, payPointsByMobileNo_args._Fields>, java.io.Serializable, Cloneable, Comparable<payPointsByMobileNo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("payPointsByMobileNo_args");

    private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ORDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("orderId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField PAY_REASON_FIELD_DESC = new org.apache.thrift.protocol.TField("payReason", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField REMARK_FIELD_DESC = new org.apache.thrift.protocol.TField("remark", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField OUTLET_ORG_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("outletOrgNo", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField LOGIN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("loginId", org.apache.thrift.protocol.TType.STRING, (short)6);
    private static final org.apache.thrift.protocol.TField POINTS_FIELD_DESC = new org.apache.thrift.protocol.TField("points", org.apache.thrift.protocol.TType.I32, (short)7);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new payPointsByMobileNo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new payPointsByMobileNo_argsTupleSchemeFactory());
    }

    public String clientId; // required
    public String orderId; // required
    public String payReason; // required
    public String remark; // required
    public String outletOrgNo; // required
    public String loginId; // required
    public int points; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CLIENT_ID((short)1, "clientId"),
      ORDER_ID((short)2, "orderId"),
      PAY_REASON((short)3, "payReason"),
      REMARK((short)4, "remark"),
      OUTLET_ORG_NO((short)5, "outletOrgNo"),
      LOGIN_ID((short)6, "loginId"),
      POINTS((short)7, "points");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CLIENT_ID
            return CLIENT_ID;
          case 2: // ORDER_ID
            return ORDER_ID;
          case 3: // PAY_REASON
            return PAY_REASON;
          case 4: // REMARK
            return REMARK;
          case 5: // OUTLET_ORG_NO
            return OUTLET_ORG_NO;
          case 6: // LOGIN_ID
            return LOGIN_ID;
          case 7: // POINTS
            return POINTS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __POINTS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ORDER_ID, new org.apache.thrift.meta_data.FieldMetaData("orderId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PAY_REASON, new org.apache.thrift.meta_data.FieldMetaData("payReason", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.REMARK, new org.apache.thrift.meta_data.FieldMetaData("remark", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.OUTLET_ORG_NO, new org.apache.thrift.meta_data.FieldMetaData("outletOrgNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.LOGIN_ID, new org.apache.thrift.meta_data.FieldMetaData("loginId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.POINTS, new org.apache.thrift.meta_data.FieldMetaData("points", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(payPointsByMobileNo_args.class, metaDataMap);
    }

    public payPointsByMobileNo_args() {
    }

    public payPointsByMobileNo_args(
      String clientId,
      String orderId,
      String payReason,
      String remark,
      String outletOrgNo,
      String loginId,
      int points)
    {
      this();
      this.clientId = clientId;
      this.orderId = orderId;
      this.payReason = payReason;
      this.remark = remark;
      this.outletOrgNo = outletOrgNo;
      this.loginId = loginId;
      this.points = points;
      setPointsIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public payPointsByMobileNo_args(payPointsByMobileNo_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetClientId()) {
        this.clientId = other.clientId;
      }
      if (other.isSetOrderId()) {
        this.orderId = other.orderId;
      }
      if (other.isSetPayReason()) {
        this.payReason = other.payReason;
      }
      if (other.isSetRemark()) {
        this.remark = other.remark;
      }
      if (other.isSetOutletOrgNo()) {
        this.outletOrgNo = other.outletOrgNo;
      }
      if (other.isSetLoginId()) {
        this.loginId = other.loginId;
      }
      this.points = other.points;
    }

    public payPointsByMobileNo_args deepCopy() {
      return new payPointsByMobileNo_args(this);
    }

    @Override
    public void clear() {
      this.clientId = null;
      this.orderId = null;
      this.payReason = null;
      this.remark = null;
      this.outletOrgNo = null;
      this.loginId = null;
      setPointsIsSet(false);
      this.points = 0;
    }

    public String getClientId() {
      return this.clientId;
    }

    public payPointsByMobileNo_args setClientId(String clientId) {
      this.clientId = clientId;
      return this;
    }

    public void unsetClientId() {
      this.clientId = null;
    }

    /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
    public boolean isSetClientId() {
      return this.clientId != null;
    }

    public void setClientIdIsSet(boolean value) {
      if (!value) {
        this.clientId = null;
      }
    }

    public String getOrderId() {
      return this.orderId;
    }

    public payPointsByMobileNo_args setOrderId(String orderId) {
      this.orderId = orderId;
      return this;
    }

    public void unsetOrderId() {
      this.orderId = null;
    }

    /** Returns true if field orderId is set (has been assigned a value) and false otherwise */
    public boolean isSetOrderId() {
      return this.orderId != null;
    }

    public void setOrderIdIsSet(boolean value) {
      if (!value) {
        this.orderId = null;
      }
    }

    public String getPayReason() {
      return this.payReason;
    }

    public payPointsByMobileNo_args setPayReason(String payReason) {
      this.payReason = payReason;
      return this;
    }

    public void unsetPayReason() {
      this.payReason = null;
    }

    /** Returns true if field payReason is set (has been assigned a value) and false otherwise */
    public boolean isSetPayReason() {
      return this.payReason != null;
    }

    public void setPayReasonIsSet(boolean value) {
      if (!value) {
        this.payReason = null;
      }
    }

    public String getRemark() {
      return this.remark;
    }

    public payPointsByMobileNo_args setRemark(String remark) {
      this.remark = remark;
      return this;
    }

    public void unsetRemark() {
      this.remark = null;
    }

    /** Returns true if field remark is set (has been assigned a value) and false otherwise */
    public boolean isSetRemark() {
      return this.remark != null;
    }

    public void setRemarkIsSet(boolean value) {
      if (!value) {
        this.remark = null;
      }
    }

    public String getOutletOrgNo() {
      return this.outletOrgNo;
    }

    public payPointsByMobileNo_args setOutletOrgNo(String outletOrgNo) {
      this.outletOrgNo = outletOrgNo;
      return this;
    }

    public void unsetOutletOrgNo() {
      this.outletOrgNo = null;
    }

    /** Returns true if field outletOrgNo is set (has been assigned a value) and false otherwise */
    public boolean isSetOutletOrgNo() {
      return this.outletOrgNo != null;
    }

    public void setOutletOrgNoIsSet(boolean value) {
      if (!value) {
        this.outletOrgNo = null;
      }
    }

    public String getLoginId() {
      return this.loginId;
    }

    public payPointsByMobileNo_args setLoginId(String loginId) {
      this.loginId = loginId;
      return this;
    }

    public void unsetLoginId() {
      this.loginId = null;
    }

    /** Returns true if field loginId is set (has been assigned a value) and false otherwise */
    public boolean isSetLoginId() {
      return this.loginId != null;
    }

    public void setLoginIdIsSet(boolean value) {
      if (!value) {
        this.loginId = null;
      }
    }

    public int getPoints() {
      return this.points;
    }

    public payPointsByMobileNo_args setPoints(int points) {
      this.points = points;
      setPointsIsSet(true);
      return this;
    }

    public void unsetPoints() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POINTS_ISSET_ID);
    }

    /** Returns true if field points is set (has been assigned a value) and false otherwise */
    public boolean isSetPoints() {
      return EncodingUtils.testBit(__isset_bitfield, __POINTS_ISSET_ID);
    }

    public void setPointsIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POINTS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CLIENT_ID:
        if (value == null) {
          unsetClientId();
        } else {
          setClientId((String)value);
        }
        break;

      case ORDER_ID:
        if (value == null) {
          unsetOrderId();
        } else {
          setOrderId((String)value);
        }
        break;

      case PAY_REASON:
        if (value == null) {
          unsetPayReason();
        } else {
          setPayReason((String)value);
        }
        break;

      case REMARK:
        if (value == null) {
          unsetRemark();
        } else {
          setRemark((String)value);
        }
        break;

      case OUTLET_ORG_NO:
        if (value == null) {
          unsetOutletOrgNo();
        } else {
          setOutletOrgNo((String)value);
        }
        break;

      case LOGIN_ID:
        if (value == null) {
          unsetLoginId();
        } else {
          setLoginId((String)value);
        }
        break;

      case POINTS:
        if (value == null) {
          unsetPoints();
        } else {
          setPoints((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CLIENT_ID:
        return getClientId();

      case ORDER_ID:
        return getOrderId();

      case PAY_REASON:
        return getPayReason();

      case REMARK:
        return getRemark();

      case OUTLET_ORG_NO:
        return getOutletOrgNo();

      case LOGIN_ID:
        return getLoginId();

      case POINTS:
        return Integer.valueOf(getPoints());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CLIENT_ID:
        return isSetClientId();
      case ORDER_ID:
        return isSetOrderId();
      case PAY_REASON:
        return isSetPayReason();
      case REMARK:
        return isSetRemark();
      case OUTLET_ORG_NO:
        return isSetOutletOrgNo();
      case LOGIN_ID:
        return isSetLoginId();
      case POINTS:
        return isSetPoints();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof payPointsByMobileNo_args)
        return this.equals((payPointsByMobileNo_args)that);
      return false;
    }

    public boolean equals(payPointsByMobileNo_args that) {
      if (that == null)
        return false;

      boolean this_present_clientId = true && this.isSetClientId();
      boolean that_present_clientId = true && that.isSetClientId();
      if (this_present_clientId || that_present_clientId) {
        if (!(this_present_clientId && that_present_clientId))
          return false;
        if (!this.clientId.equals(that.clientId))
          return false;
      }

      boolean this_present_orderId = true && this.isSetOrderId();
      boolean that_present_orderId = true && that.isSetOrderId();
      if (this_present_orderId || that_present_orderId) {
        if (!(this_present_orderId && that_present_orderId))
          return false;
        if (!this.orderId.equals(that.orderId))
          return false;
      }

      boolean this_present_payReason = true && this.isSetPayReason();
      boolean that_present_payReason = true && that.isSetPayReason();
      if (this_present_payReason || that_present_payReason) {
        if (!(this_present_payReason && that_present_payReason))
          return false;
        if (!this.payReason.equals(that.payReason))
          return false;
      }

      boolean this_present_remark = true && this.isSetRemark();
      boolean that_present_remark = true && that.isSetRemark();
      if (this_present_remark || that_present_remark) {
        if (!(this_present_remark && that_present_remark))
          return false;
        if (!this.remark.equals(that.remark))
          return false;
      }

      boolean this_present_outletOrgNo = true && this.isSetOutletOrgNo();
      boolean that_present_outletOrgNo = true && that.isSetOutletOrgNo();
      if (this_present_outletOrgNo || that_present_outletOrgNo) {
        if (!(this_present_outletOrgNo && that_present_outletOrgNo))
          return false;
        if (!this.outletOrgNo.equals(that.outletOrgNo))
          return false;
      }

      boolean this_present_loginId = true && this.isSetLoginId();
      boolean that_present_loginId = true && that.isSetLoginId();
      if (this_present_loginId || that_present_loginId) {
        if (!(this_present_loginId && that_present_loginId))
          return false;
        if (!this.loginId.equals(that.loginId))
          return false;
      }

      boolean this_present_points = true;
      boolean that_present_points = true;
      if (this_present_points || that_present_points) {
        if (!(this_present_points && that_present_points))
          return false;
        if (this.points != that.points)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_clientId = true && (isSetClientId());
      list.add(present_clientId);
      if (present_clientId)
        list.add(clientId);

      boolean present_orderId = true && (isSetOrderId());
      list.add(present_orderId);
      if (present_orderId)
        list.add(orderId);

      boolean present_payReason = true && (isSetPayReason());
      list.add(present_payReason);
      if (present_payReason)
        list.add(payReason);

      boolean present_remark = true && (isSetRemark());
      list.add(present_remark);
      if (present_remark)
        list.add(remark);

      boolean present_outletOrgNo = true && (isSetOutletOrgNo());
      list.add(present_outletOrgNo);
      if (present_outletOrgNo)
        list.add(outletOrgNo);

      boolean present_loginId = true && (isSetLoginId());
      list.add(present_loginId);
      if (present_loginId)
        list.add(loginId);

      boolean present_points = true;
      list.add(present_points);
      if (present_points)
        list.add(points);

      return list.hashCode();
    }

    @Override
    public int compareTo(payPointsByMobileNo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOrderId()).compareTo(other.isSetOrderId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOrderId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderId, other.orderId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPayReason()).compareTo(other.isSetPayReason());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPayReason()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.payReason, other.payReason);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRemark()).compareTo(other.isSetRemark());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRemark()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remark, other.remark);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOutletOrgNo()).compareTo(other.isSetOutletOrgNo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOutletOrgNo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outletOrgNo, other.outletOrgNo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLoginId()).compareTo(other.isSetLoginId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLoginId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loginId, other.loginId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPoints()).compareTo(other.isSetPoints());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPoints()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.points, other.points);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("payPointsByMobileNo_args(");
      boolean first = true;

      sb.append("clientId:");
      if (this.clientId == null) {
        sb.append("null");
      } else {
        sb.append(this.clientId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("orderId:");
      if (this.orderId == null) {
        sb.append("null");
      } else {
        sb.append(this.orderId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("payReason:");
      if (this.payReason == null) {
        sb.append("null");
      } else {
        sb.append(this.payReason);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("remark:");
      if (this.remark == null) {
        sb.append("null");
      } else {
        sb.append(this.remark);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("outletOrgNo:");
      if (this.outletOrgNo == null) {
        sb.append("null");
      } else {
        sb.append(this.outletOrgNo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("loginId:");
      if (this.loginId == null) {
        sb.append("null");
      } else {
        sb.append(this.loginId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("points:");
      sb.append(this.points);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class payPointsByMobileNo_argsStandardSchemeFactory implements SchemeFactory {
      public payPointsByMobileNo_argsStandardScheme getScheme() {
        return new payPointsByMobileNo_argsStandardScheme();
      }
    }

    private static class payPointsByMobileNo_argsStandardScheme extends StandardScheme<payPointsByMobileNo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, payPointsByMobileNo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CLIENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clientId = iprot.readString();
                struct.setClientIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ORDER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.orderId = iprot.readString();
                struct.setOrderIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PAY_REASON
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.payReason = iprot.readString();
                struct.setPayReasonIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // REMARK
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.remark = iprot.readString();
                struct.setRemarkIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // OUTLET_ORG_NO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.outletOrgNo = iprot.readString();
                struct.setOutletOrgNoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // LOGIN_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.loginId = iprot.readString();
                struct.setLoginIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // POINTS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.points = iprot.readI32();
                struct.setPointsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, payPointsByMobileNo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.clientId != null) {
          oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
          oprot.writeString(struct.clientId);
          oprot.writeFieldEnd();
        }
        if (struct.orderId != null) {
          oprot.writeFieldBegin(ORDER_ID_FIELD_DESC);
          oprot.writeString(struct.orderId);
          oprot.writeFieldEnd();
        }
        if (struct.payReason != null) {
          oprot.writeFieldBegin(PAY_REASON_FIELD_DESC);
          oprot.writeString(struct.payReason);
          oprot.writeFieldEnd();
        }
        if (struct.remark != null) {
          oprot.writeFieldBegin(REMARK_FIELD_DESC);
          oprot.writeString(struct.remark);
          oprot.writeFieldEnd();
        }
        if (struct.outletOrgNo != null) {
          oprot.writeFieldBegin(OUTLET_ORG_NO_FIELD_DESC);
          oprot.writeString(struct.outletOrgNo);
          oprot.writeFieldEnd();
        }
        if (struct.loginId != null) {
          oprot.writeFieldBegin(LOGIN_ID_FIELD_DESC);
          oprot.writeString(struct.loginId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(POINTS_FIELD_DESC);
        oprot.writeI32(struct.points);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class payPointsByMobileNo_argsTupleSchemeFactory implements SchemeFactory {
      public payPointsByMobileNo_argsTupleScheme getScheme() {
        return new payPointsByMobileNo_argsTupleScheme();
      }
    }

    private static class payPointsByMobileNo_argsTupleScheme extends TupleScheme<payPointsByMobileNo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, payPointsByMobileNo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetClientId()) {
          optionals.set(0);
        }
        if (struct.isSetOrderId()) {
          optionals.set(1);
        }
        if (struct.isSetPayReason()) {
          optionals.set(2);
        }
        if (struct.isSetRemark()) {
          optionals.set(3);
        }
        if (struct.isSetOutletOrgNo()) {
          optionals.set(4);
        }
        if (struct.isSetLoginId()) {
          optionals.set(5);
        }
        if (struct.isSetPoints()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetClientId()) {
          oprot.writeString(struct.clientId);
        }
        if (struct.isSetOrderId()) {
          oprot.writeString(struct.orderId);
        }
        if (struct.isSetPayReason()) {
          oprot.writeString(struct.payReason);
        }
        if (struct.isSetRemark()) {
          oprot.writeString(struct.remark);
        }
        if (struct.isSetOutletOrgNo()) {
          oprot.writeString(struct.outletOrgNo);
        }
        if (struct.isSetLoginId()) {
          oprot.writeString(struct.loginId);
        }
        if (struct.isSetPoints()) {
          oprot.writeI32(struct.points);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, payPointsByMobileNo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          struct.clientId = iprot.readString();
          struct.setClientIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.orderId = iprot.readString();
          struct.setOrderIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.payReason = iprot.readString();
          struct.setPayReasonIsSet(true);
        }
        if (incoming.get(3)) {
          struct.remark = iprot.readString();
          struct.setRemarkIsSet(true);
        }
        if (incoming.get(4)) {
          struct.outletOrgNo = iprot.readString();
          struct.setOutletOrgNoIsSet(true);
        }
        if (incoming.get(5)) {
          struct.loginId = iprot.readString();
          struct.setLoginIdIsSet(true);
        }
        if (incoming.get(6)) {
          struct.points = iprot.readI32();
          struct.setPointsIsSet(true);
        }
      }
    }

  }

  public static class payPointsByMobileNo_result implements org.apache.thrift.TBase<payPointsByMobileNo_result, payPointsByMobileNo_result._Fields>, java.io.Serializable, Cloneable, Comparable<payPointsByMobileNo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("payPointsByMobileNo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new payPointsByMobileNo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new payPointsByMobileNo_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(payPointsByMobileNo_result.class, metaDataMap);
    }

    public payPointsByMobileNo_result() {
    }

    public payPointsByMobileNo_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public payPointsByMobileNo_result(payPointsByMobileNo_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public payPointsByMobileNo_result deepCopy() {
      return new payPointsByMobileNo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public payPointsByMobileNo_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof payPointsByMobileNo_result)
        return this.equals((payPointsByMobileNo_result)that);
      return false;
    }

    public boolean equals(payPointsByMobileNo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(payPointsByMobileNo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("payPointsByMobileNo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class payPointsByMobileNo_resultStandardSchemeFactory implements SchemeFactory {
      public payPointsByMobileNo_resultStandardScheme getScheme() {
        return new payPointsByMobileNo_resultStandardScheme();
      }
    }

    private static class payPointsByMobileNo_resultStandardScheme extends StandardScheme<payPointsByMobileNo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, payPointsByMobileNo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, payPointsByMobileNo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class payPointsByMobileNo_resultTupleSchemeFactory implements SchemeFactory {
      public payPointsByMobileNo_resultTupleScheme getScheme() {
        return new payPointsByMobileNo_resultTupleScheme();
      }
    }

    private static class payPointsByMobileNo_resultTupleScheme extends TupleScheme<payPointsByMobileNo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, payPointsByMobileNo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, payPointsByMobileNo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class employeeCodeVerify_args implements org.apache.thrift.TBase<employeeCodeVerify_args, employeeCodeVerify_args._Fields>, java.io.Serializable, Cloneable, Comparable<employeeCodeVerify_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("employeeCodeVerify_args");

    private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField VERIFY_ORG_FIELD_DESC = new org.apache.thrift.protocol.TField("verifyOrg", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField EMPLOYEE_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("employeeCode", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("password", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField CLIENT_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("clientNo", org.apache.thrift.protocol.TType.STRING, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new employeeCodeVerify_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new employeeCodeVerify_argsTupleSchemeFactory());
    }

    public String clientId; // required
    public String verifyOrg; // required
    public String employeeCode; // required
    public String password; // required
    public String clientNo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CLIENT_ID((short)1, "clientId"),
      VERIFY_ORG((short)2, "verifyOrg"),
      EMPLOYEE_CODE((short)3, "employeeCode"),
      PASSWORD((short)4, "password"),
      CLIENT_NO((short)5, "clientNo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CLIENT_ID
            return CLIENT_ID;
          case 2: // VERIFY_ORG
            return VERIFY_ORG;
          case 3: // EMPLOYEE_CODE
            return EMPLOYEE_CODE;
          case 4: // PASSWORD
            return PASSWORD;
          case 5: // CLIENT_NO
            return CLIENT_NO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.VERIFY_ORG, new org.apache.thrift.meta_data.FieldMetaData("verifyOrg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EMPLOYEE_CODE, new org.apache.thrift.meta_data.FieldMetaData("employeeCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("password", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CLIENT_NO, new org.apache.thrift.meta_data.FieldMetaData("clientNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(employeeCodeVerify_args.class, metaDataMap);
    }

    public employeeCodeVerify_args() {
    }

    public employeeCodeVerify_args(
      String clientId,
      String verifyOrg,
      String employeeCode,
      String password,
      String clientNo)
    {
      this();
      this.clientId = clientId;
      this.verifyOrg = verifyOrg;
      this.employeeCode = employeeCode;
      this.password = password;
      this.clientNo = clientNo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public employeeCodeVerify_args(employeeCodeVerify_args other) {
      if (other.isSetClientId()) {
        this.clientId = other.clientId;
      }
      if (other.isSetVerifyOrg()) {
        this.verifyOrg = other.verifyOrg;
      }
      if (other.isSetEmployeeCode()) {
        this.employeeCode = other.employeeCode;
      }
      if (other.isSetPassword()) {
        this.password = other.password;
      }
      if (other.isSetClientNo()) {
        this.clientNo = other.clientNo;
      }
    }

    public employeeCodeVerify_args deepCopy() {
      return new employeeCodeVerify_args(this);
    }

    @Override
    public void clear() {
      this.clientId = null;
      this.verifyOrg = null;
      this.employeeCode = null;
      this.password = null;
      this.clientNo = null;
    }

    public String getClientId() {
      return this.clientId;
    }

    public employeeCodeVerify_args setClientId(String clientId) {
      this.clientId = clientId;
      return this;
    }

    public void unsetClientId() {
      this.clientId = null;
    }

    /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
    public boolean isSetClientId() {
      return this.clientId != null;
    }

    public void setClientIdIsSet(boolean value) {
      if (!value) {
        this.clientId = null;
      }
    }

    public String getVerifyOrg() {
      return this.verifyOrg;
    }

    public employeeCodeVerify_args setVerifyOrg(String verifyOrg) {
      this.verifyOrg = verifyOrg;
      return this;
    }

    public void unsetVerifyOrg() {
      this.verifyOrg = null;
    }

    /** Returns true if field verifyOrg is set (has been assigned a value) and false otherwise */
    public boolean isSetVerifyOrg() {
      return this.verifyOrg != null;
    }

    public void setVerifyOrgIsSet(boolean value) {
      if (!value) {
        this.verifyOrg = null;
      }
    }

    public String getEmployeeCode() {
      return this.employeeCode;
    }

    public employeeCodeVerify_args setEmployeeCode(String employeeCode) {
      this.employeeCode = employeeCode;
      return this;
    }

    public void unsetEmployeeCode() {
      this.employeeCode = null;
    }

    /** Returns true if field employeeCode is set (has been assigned a value) and false otherwise */
    public boolean isSetEmployeeCode() {
      return this.employeeCode != null;
    }

    public void setEmployeeCodeIsSet(boolean value) {
      if (!value) {
        this.employeeCode = null;
      }
    }

    public String getPassword() {
      return this.password;
    }

    public employeeCodeVerify_args setPassword(String password) {
      this.password = password;
      return this;
    }

    public void unsetPassword() {
      this.password = null;
    }

    /** Returns true if field password is set (has been assigned a value) and false otherwise */
    public boolean isSetPassword() {
      return this.password != null;
    }

    public void setPasswordIsSet(boolean value) {
      if (!value) {
        this.password = null;
      }
    }

    public String getClientNo() {
      return this.clientNo;
    }

    public employeeCodeVerify_args setClientNo(String clientNo) {
      this.clientNo = clientNo;
      return this;
    }

    public void unsetClientNo() {
      this.clientNo = null;
    }

    /** Returns true if field clientNo is set (has been assigned a value) and false otherwise */
    public boolean isSetClientNo() {
      return this.clientNo != null;
    }

    public void setClientNoIsSet(boolean value) {
      if (!value) {
        this.clientNo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CLIENT_ID:
        if (value == null) {
          unsetClientId();
        } else {
          setClientId((String)value);
        }
        break;

      case VERIFY_ORG:
        if (value == null) {
          unsetVerifyOrg();
        } else {
          setVerifyOrg((String)value);
        }
        break;

      case EMPLOYEE_CODE:
        if (value == null) {
          unsetEmployeeCode();
        } else {
          setEmployeeCode((String)value);
        }
        break;

      case PASSWORD:
        if (value == null) {
          unsetPassword();
        } else {
          setPassword((String)value);
        }
        break;

      case CLIENT_NO:
        if (value == null) {
          unsetClientNo();
        } else {
          setClientNo((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CLIENT_ID:
        return getClientId();

      case VERIFY_ORG:
        return getVerifyOrg();

      case EMPLOYEE_CODE:
        return getEmployeeCode();

      case PASSWORD:
        return getPassword();

      case CLIENT_NO:
        return getClientNo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CLIENT_ID:
        return isSetClientId();
      case VERIFY_ORG:
        return isSetVerifyOrg();
      case EMPLOYEE_CODE:
        return isSetEmployeeCode();
      case PASSWORD:
        return isSetPassword();
      case CLIENT_NO:
        return isSetClientNo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof employeeCodeVerify_args)
        return this.equals((employeeCodeVerify_args)that);
      return false;
    }

    public boolean equals(employeeCodeVerify_args that) {
      if (that == null)
        return false;

      boolean this_present_clientId = true && this.isSetClientId();
      boolean that_present_clientId = true && that.isSetClientId();
      if (this_present_clientId || that_present_clientId) {
        if (!(this_present_clientId && that_present_clientId))
          return false;
        if (!this.clientId.equals(that.clientId))
          return false;
      }

      boolean this_present_verifyOrg = true && this.isSetVerifyOrg();
      boolean that_present_verifyOrg = true && that.isSetVerifyOrg();
      if (this_present_verifyOrg || that_present_verifyOrg) {
        if (!(this_present_verifyOrg && that_present_verifyOrg))
          return false;
        if (!this.verifyOrg.equals(that.verifyOrg))
          return false;
      }

      boolean this_present_employeeCode = true && this.isSetEmployeeCode();
      boolean that_present_employeeCode = true && that.isSetEmployeeCode();
      if (this_present_employeeCode || that_present_employeeCode) {
        if (!(this_present_employeeCode && that_present_employeeCode))
          return false;
        if (!this.employeeCode.equals(that.employeeCode))
          return false;
      }

      boolean this_present_password = true && this.isSetPassword();
      boolean that_present_password = true && that.isSetPassword();
      if (this_present_password || that_present_password) {
        if (!(this_present_password && that_present_password))
          return false;
        if (!this.password.equals(that.password))
          return false;
      }

      boolean this_present_clientNo = true && this.isSetClientNo();
      boolean that_present_clientNo = true && that.isSetClientNo();
      if (this_present_clientNo || that_present_clientNo) {
        if (!(this_present_clientNo && that_present_clientNo))
          return false;
        if (!this.clientNo.equals(that.clientNo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_clientId = true && (isSetClientId());
      list.add(present_clientId);
      if (present_clientId)
        list.add(clientId);

      boolean present_verifyOrg = true && (isSetVerifyOrg());
      list.add(present_verifyOrg);
      if (present_verifyOrg)
        list.add(verifyOrg);

      boolean present_employeeCode = true && (isSetEmployeeCode());
      list.add(present_employeeCode);
      if (present_employeeCode)
        list.add(employeeCode);

      boolean present_password = true && (isSetPassword());
      list.add(present_password);
      if (present_password)
        list.add(password);

      boolean present_clientNo = true && (isSetClientNo());
      list.add(present_clientNo);
      if (present_clientNo)
        list.add(clientNo);

      return list.hashCode();
    }

    @Override
    public int compareTo(employeeCodeVerify_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVerifyOrg()).compareTo(other.isSetVerifyOrg());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVerifyOrg()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.verifyOrg, other.verifyOrg);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEmployeeCode()).compareTo(other.isSetEmployeeCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEmployeeCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.employeeCode, other.employeeCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPassword()).compareTo(other.isSetPassword());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPassword()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.password, other.password);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetClientNo()).compareTo(other.isSetClientNo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientNo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientNo, other.clientNo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("employeeCodeVerify_args(");
      boolean first = true;

      sb.append("clientId:");
      if (this.clientId == null) {
        sb.append("null");
      } else {
        sb.append(this.clientId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("verifyOrg:");
      if (this.verifyOrg == null) {
        sb.append("null");
      } else {
        sb.append(this.verifyOrg);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("employeeCode:");
      if (this.employeeCode == null) {
        sb.append("null");
      } else {
        sb.append(this.employeeCode);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("password:");
      if (this.password == null) {
        sb.append("null");
      } else {
        sb.append(this.password);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("clientNo:");
      if (this.clientNo == null) {
        sb.append("null");
      } else {
        sb.append(this.clientNo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class employeeCodeVerify_argsStandardSchemeFactory implements SchemeFactory {
      public employeeCodeVerify_argsStandardScheme getScheme() {
        return new employeeCodeVerify_argsStandardScheme();
      }
    }

    private static class employeeCodeVerify_argsStandardScheme extends StandardScheme<employeeCodeVerify_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, employeeCodeVerify_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CLIENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clientId = iprot.readString();
                struct.setClientIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // VERIFY_ORG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.verifyOrg = iprot.readString();
                struct.setVerifyOrgIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // EMPLOYEE_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.employeeCode = iprot.readString();
                struct.setEmployeeCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PASSWORD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.password = iprot.readString();
                struct.setPasswordIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // CLIENT_NO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clientNo = iprot.readString();
                struct.setClientNoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, employeeCodeVerify_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.clientId != null) {
          oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
          oprot.writeString(struct.clientId);
          oprot.writeFieldEnd();
        }
        if (struct.verifyOrg != null) {
          oprot.writeFieldBegin(VERIFY_ORG_FIELD_DESC);
          oprot.writeString(struct.verifyOrg);
          oprot.writeFieldEnd();
        }
        if (struct.employeeCode != null) {
          oprot.writeFieldBegin(EMPLOYEE_CODE_FIELD_DESC);
          oprot.writeString(struct.employeeCode);
          oprot.writeFieldEnd();
        }
        if (struct.password != null) {
          oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
          oprot.writeString(struct.password);
          oprot.writeFieldEnd();
        }
        if (struct.clientNo != null) {
          oprot.writeFieldBegin(CLIENT_NO_FIELD_DESC);
          oprot.writeString(struct.clientNo);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class employeeCodeVerify_argsTupleSchemeFactory implements SchemeFactory {
      public employeeCodeVerify_argsTupleScheme getScheme() {
        return new employeeCodeVerify_argsTupleScheme();
      }
    }

    private static class employeeCodeVerify_argsTupleScheme extends TupleScheme<employeeCodeVerify_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, employeeCodeVerify_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetClientId()) {
          optionals.set(0);
        }
        if (struct.isSetVerifyOrg()) {
          optionals.set(1);
        }
        if (struct.isSetEmployeeCode()) {
          optionals.set(2);
        }
        if (struct.isSetPassword()) {
          optionals.set(3);
        }
        if (struct.isSetClientNo()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetClientId()) {
          oprot.writeString(struct.clientId);
        }
        if (struct.isSetVerifyOrg()) {
          oprot.writeString(struct.verifyOrg);
        }
        if (struct.isSetEmployeeCode()) {
          oprot.writeString(struct.employeeCode);
        }
        if (struct.isSetPassword()) {
          oprot.writeString(struct.password);
        }
        if (struct.isSetClientNo()) {
          oprot.writeString(struct.clientNo);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, employeeCodeVerify_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.clientId = iprot.readString();
          struct.setClientIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.verifyOrg = iprot.readString();
          struct.setVerifyOrgIsSet(true);
        }
        if (incoming.get(2)) {
          struct.employeeCode = iprot.readString();
          struct.setEmployeeCodeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.password = iprot.readString();
          struct.setPasswordIsSet(true);
        }
        if (incoming.get(4)) {
          struct.clientNo = iprot.readString();
          struct.setClientNoIsSet(true);
        }
      }
    }

  }

  public static class employeeCodeVerify_result implements org.apache.thrift.TBase<employeeCodeVerify_result, employeeCodeVerify_result._Fields>, java.io.Serializable, Cloneable, Comparable<employeeCodeVerify_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("employeeCodeVerify_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new employeeCodeVerify_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new employeeCodeVerify_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(employeeCodeVerify_result.class, metaDataMap);
    }

    public employeeCodeVerify_result() {
    }

    public employeeCodeVerify_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public employeeCodeVerify_result(employeeCodeVerify_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public employeeCodeVerify_result deepCopy() {
      return new employeeCodeVerify_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public employeeCodeVerify_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof employeeCodeVerify_result)
        return this.equals((employeeCodeVerify_result)that);
      return false;
    }

    public boolean equals(employeeCodeVerify_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(employeeCodeVerify_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("employeeCodeVerify_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class employeeCodeVerify_resultStandardSchemeFactory implements SchemeFactory {
      public employeeCodeVerify_resultStandardScheme getScheme() {
        return new employeeCodeVerify_resultStandardScheme();
      }
    }

    private static class employeeCodeVerify_resultStandardScheme extends StandardScheme<employeeCodeVerify_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, employeeCodeVerify_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, employeeCodeVerify_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class employeeCodeVerify_resultTupleSchemeFactory implements SchemeFactory {
      public employeeCodeVerify_resultTupleScheme getScheme() {
        return new employeeCodeVerify_resultTupleScheme();
      }
    }

    private static class employeeCodeVerify_resultTupleScheme extends TupleScheme<employeeCodeVerify_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, employeeCodeVerify_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, employeeCodeVerify_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
