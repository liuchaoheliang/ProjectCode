/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class HistoryTaskService {

  /**
   * HistoryTaskService
   */
  public interface Iface extends com.froad.thrift.monitor.service.BizMonitorService.Iface {

    /**
     * 增加 HistoryTask
     * @param originVo 源信息对象
     * @param historyTaskVo
     * @return long    主键ID
     * 
     * @param originVo
     * @param historyTaskVo
     */
    public long addHistoryTask(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.HistoryTaskVo historyTaskVo) throws org.apache.thrift.TException;

    /**
     * 删除 HistoryTask
     * @param originVo 源信息对象
     * @param historyTaskVo
     * @return boolean
     * 
     * @param originVo
     * @param historyTaskVo
     */
    public boolean deleteHistoryTask(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.HistoryTaskVo historyTaskVo) throws org.apache.thrift.TException;

    /**
     * 根据id删除单个 HistoryTask
     * @param originVo 源信息对象
     * @param id
     * @return HistoryTaskVo
     * 
     * @param originVo
     * @param id
     */
    public boolean deleteHistoryTaskById(com.froad.thrift.vo.OriginVo originVo, long id) throws org.apache.thrift.TException;

    /**
     * 修改 HistoryTask
     * @param originVo 源信息对象
     * @param historyTaskVo
     * @return boolean
     * 
     * @param originVo
     * @param historyTaskVo
     */
    public boolean updateHistoryTask(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.HistoryTaskVo historyTaskVo) throws org.apache.thrift.TException;

    /**
     * 根据id修改单个 HistoryTask
     * @param originVo 源信息对象
     * @param id
     * @return HistoryTaskVo
     * 
     * @param originVo
     * @param historyTaskVo
     */
    public boolean updateHistoryTaskById(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.HistoryTaskVo historyTaskVo) throws org.apache.thrift.TException;

    /**
     * 根据id查询单个 HistoryTask
     * @param id
     * @return HistoryTaskVo
     * 
     * @param id
     */
    public com.froad.thrift.vo.HistoryTaskVo getHistoryTaskById(long id) throws org.apache.thrift.TException;

    /**
     * 根据条件查询一个 HistoryTask
     * @param historyTaskVo
     * @return HistoryTaskVo
     * 
     * @param historyTaskVo
     */
    public com.froad.thrift.vo.HistoryTaskVo getOneHistoryTask(com.froad.thrift.vo.HistoryTaskVo historyTaskVo) throws org.apache.thrift.TException;

    /**
     * 根据条件统计 HistoryTask
     * @param historyTaskVo
     * @return int
     * 
     * @param historyTaskVo
     */
    public int countHistoryTask(com.froad.thrift.vo.HistoryTaskVo historyTaskVo) throws org.apache.thrift.TException;

    /**
     * 查询 HistoryTask
     * @param historyTaskVo
     * @return List<HistoryTaskVo>
     * 
     * @param historyTaskVo
     */
    public List<com.froad.thrift.vo.HistoryTaskVo> getHistoryTask(com.froad.thrift.vo.HistoryTaskVo historyTaskVo) throws org.apache.thrift.TException;

    /**
     * 分页查询 HistoryTask
     * @param historyTaskVo
     * @return HistoryTaskPageVoRes
     * 
     * @param page
     * @param historyTaskVo
     */
    public com.froad.thrift.vo.HistoryTaskPageVoRes getHistoryTaskByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.HistoryTaskVo historyTaskVo) throws org.apache.thrift.TException;

  }

  public interface AsyncIface extends com.froad.thrift.monitor.service.BizMonitorService .AsyncIface {

    public void addHistoryTask(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.HistoryTaskVo historyTaskVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteHistoryTask(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.HistoryTaskVo historyTaskVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteHistoryTaskById(com.froad.thrift.vo.OriginVo originVo, long id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateHistoryTask(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.HistoryTaskVo historyTaskVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateHistoryTaskById(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.HistoryTaskVo historyTaskVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getHistoryTaskById(long id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getOneHistoryTask(com.froad.thrift.vo.HistoryTaskVo historyTaskVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void countHistoryTask(com.froad.thrift.vo.HistoryTaskVo historyTaskVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getHistoryTask(com.froad.thrift.vo.HistoryTaskVo historyTaskVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getHistoryTaskByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.HistoryTaskVo historyTaskVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends com.froad.thrift.monitor.service.BizMonitorService.Client implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public long addHistoryTask(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.HistoryTaskVo historyTaskVo) throws org.apache.thrift.TException
    {
      send_addHistoryTask(originVo, historyTaskVo);
      return recv_addHistoryTask();
    }

    public void send_addHistoryTask(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.HistoryTaskVo historyTaskVo) throws org.apache.thrift.TException
    {
      addHistoryTask_args args = new addHistoryTask_args();
      args.setOriginVo(originVo);
      args.setHistoryTaskVo(historyTaskVo);
      sendBase("addHistoryTask", args);
    }

    public long recv_addHistoryTask() throws org.apache.thrift.TException
    {
      addHistoryTask_result result = new addHistoryTask_result();
      receiveBase(result, "addHistoryTask");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addHistoryTask failed: unknown result");
    }

    public boolean deleteHistoryTask(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.HistoryTaskVo historyTaskVo) throws org.apache.thrift.TException
    {
      send_deleteHistoryTask(originVo, historyTaskVo);
      return recv_deleteHistoryTask();
    }

    public void send_deleteHistoryTask(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.HistoryTaskVo historyTaskVo) throws org.apache.thrift.TException
    {
      deleteHistoryTask_args args = new deleteHistoryTask_args();
      args.setOriginVo(originVo);
      args.setHistoryTaskVo(historyTaskVo);
      sendBase("deleteHistoryTask", args);
    }

    public boolean recv_deleteHistoryTask() throws org.apache.thrift.TException
    {
      deleteHistoryTask_result result = new deleteHistoryTask_result();
      receiveBase(result, "deleteHistoryTask");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteHistoryTask failed: unknown result");
    }

    public boolean deleteHistoryTaskById(com.froad.thrift.vo.OriginVo originVo, long id) throws org.apache.thrift.TException
    {
      send_deleteHistoryTaskById(originVo, id);
      return recv_deleteHistoryTaskById();
    }

    public void send_deleteHistoryTaskById(com.froad.thrift.vo.OriginVo originVo, long id) throws org.apache.thrift.TException
    {
      deleteHistoryTaskById_args args = new deleteHistoryTaskById_args();
      args.setOriginVo(originVo);
      args.setId(id);
      sendBase("deleteHistoryTaskById", args);
    }

    public boolean recv_deleteHistoryTaskById() throws org.apache.thrift.TException
    {
      deleteHistoryTaskById_result result = new deleteHistoryTaskById_result();
      receiveBase(result, "deleteHistoryTaskById");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteHistoryTaskById failed: unknown result");
    }

    public boolean updateHistoryTask(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.HistoryTaskVo historyTaskVo) throws org.apache.thrift.TException
    {
      send_updateHistoryTask(originVo, historyTaskVo);
      return recv_updateHistoryTask();
    }

    public void send_updateHistoryTask(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.HistoryTaskVo historyTaskVo) throws org.apache.thrift.TException
    {
      updateHistoryTask_args args = new updateHistoryTask_args();
      args.setOriginVo(originVo);
      args.setHistoryTaskVo(historyTaskVo);
      sendBase("updateHistoryTask", args);
    }

    public boolean recv_updateHistoryTask() throws org.apache.thrift.TException
    {
      updateHistoryTask_result result = new updateHistoryTask_result();
      receiveBase(result, "updateHistoryTask");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateHistoryTask failed: unknown result");
    }

    public boolean updateHistoryTaskById(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.HistoryTaskVo historyTaskVo) throws org.apache.thrift.TException
    {
      send_updateHistoryTaskById(originVo, historyTaskVo);
      return recv_updateHistoryTaskById();
    }

    public void send_updateHistoryTaskById(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.HistoryTaskVo historyTaskVo) throws org.apache.thrift.TException
    {
      updateHistoryTaskById_args args = new updateHistoryTaskById_args();
      args.setOriginVo(originVo);
      args.setHistoryTaskVo(historyTaskVo);
      sendBase("updateHistoryTaskById", args);
    }

    public boolean recv_updateHistoryTaskById() throws org.apache.thrift.TException
    {
      updateHistoryTaskById_result result = new updateHistoryTaskById_result();
      receiveBase(result, "updateHistoryTaskById");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateHistoryTaskById failed: unknown result");
    }

    public com.froad.thrift.vo.HistoryTaskVo getHistoryTaskById(long id) throws org.apache.thrift.TException
    {
      send_getHistoryTaskById(id);
      return recv_getHistoryTaskById();
    }

    public void send_getHistoryTaskById(long id) throws org.apache.thrift.TException
    {
      getHistoryTaskById_args args = new getHistoryTaskById_args();
      args.setId(id);
      sendBase("getHistoryTaskById", args);
    }

    public com.froad.thrift.vo.HistoryTaskVo recv_getHistoryTaskById() throws org.apache.thrift.TException
    {
      getHistoryTaskById_result result = new getHistoryTaskById_result();
      receiveBase(result, "getHistoryTaskById");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getHistoryTaskById failed: unknown result");
    }

    public com.froad.thrift.vo.HistoryTaskVo getOneHistoryTask(com.froad.thrift.vo.HistoryTaskVo historyTaskVo) throws org.apache.thrift.TException
    {
      send_getOneHistoryTask(historyTaskVo);
      return recv_getOneHistoryTask();
    }

    public void send_getOneHistoryTask(com.froad.thrift.vo.HistoryTaskVo historyTaskVo) throws org.apache.thrift.TException
    {
      getOneHistoryTask_args args = new getOneHistoryTask_args();
      args.setHistoryTaskVo(historyTaskVo);
      sendBase("getOneHistoryTask", args);
    }

    public com.froad.thrift.vo.HistoryTaskVo recv_getOneHistoryTask() throws org.apache.thrift.TException
    {
      getOneHistoryTask_result result = new getOneHistoryTask_result();
      receiveBase(result, "getOneHistoryTask");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getOneHistoryTask failed: unknown result");
    }

    public int countHistoryTask(com.froad.thrift.vo.HistoryTaskVo historyTaskVo) throws org.apache.thrift.TException
    {
      send_countHistoryTask(historyTaskVo);
      return recv_countHistoryTask();
    }

    public void send_countHistoryTask(com.froad.thrift.vo.HistoryTaskVo historyTaskVo) throws org.apache.thrift.TException
    {
      countHistoryTask_args args = new countHistoryTask_args();
      args.setHistoryTaskVo(historyTaskVo);
      sendBase("countHistoryTask", args);
    }

    public int recv_countHistoryTask() throws org.apache.thrift.TException
    {
      countHistoryTask_result result = new countHistoryTask_result();
      receiveBase(result, "countHistoryTask");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "countHistoryTask failed: unknown result");
    }

    public List<com.froad.thrift.vo.HistoryTaskVo> getHistoryTask(com.froad.thrift.vo.HistoryTaskVo historyTaskVo) throws org.apache.thrift.TException
    {
      send_getHistoryTask(historyTaskVo);
      return recv_getHistoryTask();
    }

    public void send_getHistoryTask(com.froad.thrift.vo.HistoryTaskVo historyTaskVo) throws org.apache.thrift.TException
    {
      getHistoryTask_args args = new getHistoryTask_args();
      args.setHistoryTaskVo(historyTaskVo);
      sendBase("getHistoryTask", args);
    }

    public List<com.froad.thrift.vo.HistoryTaskVo> recv_getHistoryTask() throws org.apache.thrift.TException
    {
      getHistoryTask_result result = new getHistoryTask_result();
      receiveBase(result, "getHistoryTask");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getHistoryTask failed: unknown result");
    }

    public com.froad.thrift.vo.HistoryTaskPageVoRes getHistoryTaskByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.HistoryTaskVo historyTaskVo) throws org.apache.thrift.TException
    {
      send_getHistoryTaskByPage(page, historyTaskVo);
      return recv_getHistoryTaskByPage();
    }

    public void send_getHistoryTaskByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.HistoryTaskVo historyTaskVo) throws org.apache.thrift.TException
    {
      getHistoryTaskByPage_args args = new getHistoryTaskByPage_args();
      args.setPage(page);
      args.setHistoryTaskVo(historyTaskVo);
      sendBase("getHistoryTaskByPage", args);
    }

    public com.froad.thrift.vo.HistoryTaskPageVoRes recv_getHistoryTaskByPage() throws org.apache.thrift.TException
    {
      getHistoryTaskByPage_result result = new getHistoryTaskByPage_result();
      receiveBase(result, "getHistoryTaskByPage");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getHistoryTaskByPage failed: unknown result");
    }

  }
  public static class AsyncClient extends com.froad.thrift.monitor.service.BizMonitorService.AsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void addHistoryTask(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.HistoryTaskVo historyTaskVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addHistoryTask_call method_call = new addHistoryTask_call(originVo, historyTaskVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addHistoryTask_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.OriginVo originVo;
      private com.froad.thrift.vo.HistoryTaskVo historyTaskVo;
      public addHistoryTask_call(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.HistoryTaskVo historyTaskVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.originVo = originVo;
        this.historyTaskVo = historyTaskVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addHistoryTask", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addHistoryTask_args args = new addHistoryTask_args();
        args.setOriginVo(originVo);
        args.setHistoryTaskVo(historyTaskVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addHistoryTask();
      }
    }

    public void deleteHistoryTask(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.HistoryTaskVo historyTaskVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteHistoryTask_call method_call = new deleteHistoryTask_call(originVo, historyTaskVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteHistoryTask_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.OriginVo originVo;
      private com.froad.thrift.vo.HistoryTaskVo historyTaskVo;
      public deleteHistoryTask_call(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.HistoryTaskVo historyTaskVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.originVo = originVo;
        this.historyTaskVo = historyTaskVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteHistoryTask", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteHistoryTask_args args = new deleteHistoryTask_args();
        args.setOriginVo(originVo);
        args.setHistoryTaskVo(historyTaskVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteHistoryTask();
      }
    }

    public void deleteHistoryTaskById(com.froad.thrift.vo.OriginVo originVo, long id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteHistoryTaskById_call method_call = new deleteHistoryTaskById_call(originVo, id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteHistoryTaskById_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.OriginVo originVo;
      private long id;
      public deleteHistoryTaskById_call(com.froad.thrift.vo.OriginVo originVo, long id, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.originVo = originVo;
        this.id = id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteHistoryTaskById", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteHistoryTaskById_args args = new deleteHistoryTaskById_args();
        args.setOriginVo(originVo);
        args.setId(id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteHistoryTaskById();
      }
    }

    public void updateHistoryTask(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.HistoryTaskVo historyTaskVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateHistoryTask_call method_call = new updateHistoryTask_call(originVo, historyTaskVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateHistoryTask_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.OriginVo originVo;
      private com.froad.thrift.vo.HistoryTaskVo historyTaskVo;
      public updateHistoryTask_call(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.HistoryTaskVo historyTaskVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.originVo = originVo;
        this.historyTaskVo = historyTaskVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateHistoryTask", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateHistoryTask_args args = new updateHistoryTask_args();
        args.setOriginVo(originVo);
        args.setHistoryTaskVo(historyTaskVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateHistoryTask();
      }
    }

    public void updateHistoryTaskById(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.HistoryTaskVo historyTaskVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateHistoryTaskById_call method_call = new updateHistoryTaskById_call(originVo, historyTaskVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateHistoryTaskById_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.OriginVo originVo;
      private com.froad.thrift.vo.HistoryTaskVo historyTaskVo;
      public updateHistoryTaskById_call(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.HistoryTaskVo historyTaskVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.originVo = originVo;
        this.historyTaskVo = historyTaskVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateHistoryTaskById", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateHistoryTaskById_args args = new updateHistoryTaskById_args();
        args.setOriginVo(originVo);
        args.setHistoryTaskVo(historyTaskVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateHistoryTaskById();
      }
    }

    public void getHistoryTaskById(long id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getHistoryTaskById_call method_call = new getHistoryTaskById_call(id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getHistoryTaskById_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long id;
      public getHistoryTaskById_call(long id, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getHistoryTaskById", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getHistoryTaskById_args args = new getHistoryTaskById_args();
        args.setId(id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.HistoryTaskVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getHistoryTaskById();
      }
    }

    public void getOneHistoryTask(com.froad.thrift.vo.HistoryTaskVo historyTaskVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getOneHistoryTask_call method_call = new getOneHistoryTask_call(historyTaskVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getOneHistoryTask_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.HistoryTaskVo historyTaskVo;
      public getOneHistoryTask_call(com.froad.thrift.vo.HistoryTaskVo historyTaskVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.historyTaskVo = historyTaskVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getOneHistoryTask", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getOneHistoryTask_args args = new getOneHistoryTask_args();
        args.setHistoryTaskVo(historyTaskVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.HistoryTaskVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getOneHistoryTask();
      }
    }

    public void countHistoryTask(com.froad.thrift.vo.HistoryTaskVo historyTaskVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      countHistoryTask_call method_call = new countHistoryTask_call(historyTaskVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class countHistoryTask_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.HistoryTaskVo historyTaskVo;
      public countHistoryTask_call(com.froad.thrift.vo.HistoryTaskVo historyTaskVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.historyTaskVo = historyTaskVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("countHistoryTask", org.apache.thrift.protocol.TMessageType.CALL, 0));
        countHistoryTask_args args = new countHistoryTask_args();
        args.setHistoryTaskVo(historyTaskVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_countHistoryTask();
      }
    }

    public void getHistoryTask(com.froad.thrift.vo.HistoryTaskVo historyTaskVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getHistoryTask_call method_call = new getHistoryTask_call(historyTaskVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getHistoryTask_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.HistoryTaskVo historyTaskVo;
      public getHistoryTask_call(com.froad.thrift.vo.HistoryTaskVo historyTaskVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.historyTaskVo = historyTaskVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getHistoryTask", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getHistoryTask_args args = new getHistoryTask_args();
        args.setHistoryTaskVo(historyTaskVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.froad.thrift.vo.HistoryTaskVo> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getHistoryTask();
      }
    }

    public void getHistoryTaskByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.HistoryTaskVo historyTaskVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getHistoryTaskByPage_call method_call = new getHistoryTaskByPage_call(page, historyTaskVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getHistoryTaskByPage_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.PageVo page;
      private com.froad.thrift.vo.HistoryTaskVo historyTaskVo;
      public getHistoryTaskByPage_call(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.HistoryTaskVo historyTaskVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.page = page;
        this.historyTaskVo = historyTaskVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getHistoryTaskByPage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getHistoryTaskByPage_args args = new getHistoryTaskByPage_args();
        args.setPage(page);
        args.setHistoryTaskVo(historyTaskVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.HistoryTaskPageVoRes getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getHistoryTaskByPage();
      }
    }

  }

  public static class Processor<I extends Iface> extends com.froad.thrift.monitor.service.BizMonitorService.Processor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("addHistoryTask", new addHistoryTask());
      processMap.put("deleteHistoryTask", new deleteHistoryTask());
      processMap.put("deleteHistoryTaskById", new deleteHistoryTaskById());
      processMap.put("updateHistoryTask", new updateHistoryTask());
      processMap.put("updateHistoryTaskById", new updateHistoryTaskById());
      processMap.put("getHistoryTaskById", new getHistoryTaskById());
      processMap.put("getOneHistoryTask", new getOneHistoryTask());
      processMap.put("countHistoryTask", new countHistoryTask());
      processMap.put("getHistoryTask", new getHistoryTask());
      processMap.put("getHistoryTaskByPage", new getHistoryTaskByPage());
      return processMap;
    }

    public static class addHistoryTask<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addHistoryTask_args> {
      public addHistoryTask() {
        super("addHistoryTask");
      }

      public addHistoryTask_args getEmptyArgsInstance() {
        return new addHistoryTask_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addHistoryTask_result getResult(I iface, addHistoryTask_args args) throws org.apache.thrift.TException {
        addHistoryTask_result result = new addHistoryTask_result();
        result.success = iface.addHistoryTask(args.originVo, args.historyTaskVo);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class deleteHistoryTask<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteHistoryTask_args> {
      public deleteHistoryTask() {
        super("deleteHistoryTask");
      }

      public deleteHistoryTask_args getEmptyArgsInstance() {
        return new deleteHistoryTask_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteHistoryTask_result getResult(I iface, deleteHistoryTask_args args) throws org.apache.thrift.TException {
        deleteHistoryTask_result result = new deleteHistoryTask_result();
        result.success = iface.deleteHistoryTask(args.originVo, args.historyTaskVo);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class deleteHistoryTaskById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteHistoryTaskById_args> {
      public deleteHistoryTaskById() {
        super("deleteHistoryTaskById");
      }

      public deleteHistoryTaskById_args getEmptyArgsInstance() {
        return new deleteHistoryTaskById_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteHistoryTaskById_result getResult(I iface, deleteHistoryTaskById_args args) throws org.apache.thrift.TException {
        deleteHistoryTaskById_result result = new deleteHistoryTaskById_result();
        result.success = iface.deleteHistoryTaskById(args.originVo, args.id);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class updateHistoryTask<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateHistoryTask_args> {
      public updateHistoryTask() {
        super("updateHistoryTask");
      }

      public updateHistoryTask_args getEmptyArgsInstance() {
        return new updateHistoryTask_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateHistoryTask_result getResult(I iface, updateHistoryTask_args args) throws org.apache.thrift.TException {
        updateHistoryTask_result result = new updateHistoryTask_result();
        result.success = iface.updateHistoryTask(args.originVo, args.historyTaskVo);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class updateHistoryTaskById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateHistoryTaskById_args> {
      public updateHistoryTaskById() {
        super("updateHistoryTaskById");
      }

      public updateHistoryTaskById_args getEmptyArgsInstance() {
        return new updateHistoryTaskById_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateHistoryTaskById_result getResult(I iface, updateHistoryTaskById_args args) throws org.apache.thrift.TException {
        updateHistoryTaskById_result result = new updateHistoryTaskById_result();
        result.success = iface.updateHistoryTaskById(args.originVo, args.historyTaskVo);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getHistoryTaskById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getHistoryTaskById_args> {
      public getHistoryTaskById() {
        super("getHistoryTaskById");
      }

      public getHistoryTaskById_args getEmptyArgsInstance() {
        return new getHistoryTaskById_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getHistoryTaskById_result getResult(I iface, getHistoryTaskById_args args) throws org.apache.thrift.TException {
        getHistoryTaskById_result result = new getHistoryTaskById_result();
        result.success = iface.getHistoryTaskById(args.id);
        return result;
      }
    }

    public static class getOneHistoryTask<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getOneHistoryTask_args> {
      public getOneHistoryTask() {
        super("getOneHistoryTask");
      }

      public getOneHistoryTask_args getEmptyArgsInstance() {
        return new getOneHistoryTask_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getOneHistoryTask_result getResult(I iface, getOneHistoryTask_args args) throws org.apache.thrift.TException {
        getOneHistoryTask_result result = new getOneHistoryTask_result();
        result.success = iface.getOneHistoryTask(args.historyTaskVo);
        return result;
      }
    }

    public static class countHistoryTask<I extends Iface> extends org.apache.thrift.ProcessFunction<I, countHistoryTask_args> {
      public countHistoryTask() {
        super("countHistoryTask");
      }

      public countHistoryTask_args getEmptyArgsInstance() {
        return new countHistoryTask_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public countHistoryTask_result getResult(I iface, countHistoryTask_args args) throws org.apache.thrift.TException {
        countHistoryTask_result result = new countHistoryTask_result();
        result.success = iface.countHistoryTask(args.historyTaskVo);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getHistoryTask<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getHistoryTask_args> {
      public getHistoryTask() {
        super("getHistoryTask");
      }

      public getHistoryTask_args getEmptyArgsInstance() {
        return new getHistoryTask_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getHistoryTask_result getResult(I iface, getHistoryTask_args args) throws org.apache.thrift.TException {
        getHistoryTask_result result = new getHistoryTask_result();
        result.success = iface.getHistoryTask(args.historyTaskVo);
        return result;
      }
    }

    public static class getHistoryTaskByPage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getHistoryTaskByPage_args> {
      public getHistoryTaskByPage() {
        super("getHistoryTaskByPage");
      }

      public getHistoryTaskByPage_args getEmptyArgsInstance() {
        return new getHistoryTaskByPage_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getHistoryTaskByPage_result getResult(I iface, getHistoryTaskByPage_args args) throws org.apache.thrift.TException {
        getHistoryTaskByPage_result result = new getHistoryTaskByPage_result();
        result.success = iface.getHistoryTaskByPage(args.page, args.historyTaskVo);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends com.froad.thrift.monitor.service.BizMonitorService.AsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("addHistoryTask", new addHistoryTask());
      processMap.put("deleteHistoryTask", new deleteHistoryTask());
      processMap.put("deleteHistoryTaskById", new deleteHistoryTaskById());
      processMap.put("updateHistoryTask", new updateHistoryTask());
      processMap.put("updateHistoryTaskById", new updateHistoryTaskById());
      processMap.put("getHistoryTaskById", new getHistoryTaskById());
      processMap.put("getOneHistoryTask", new getOneHistoryTask());
      processMap.put("countHistoryTask", new countHistoryTask());
      processMap.put("getHistoryTask", new getHistoryTask());
      processMap.put("getHistoryTaskByPage", new getHistoryTaskByPage());
      return processMap;
    }

    public static class addHistoryTask<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addHistoryTask_args, Long> {
      public addHistoryTask() {
        super("addHistoryTask");
      }

      public addHistoryTask_args getEmptyArgsInstance() {
        return new addHistoryTask_args();
      }

      public AsyncMethodCallback<Long> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Long>() { 
          public void onComplete(Long o) {
            addHistoryTask_result result = new addHistoryTask_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addHistoryTask_result result = new addHistoryTask_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addHistoryTask_args args, org.apache.thrift.async.AsyncMethodCallback<Long> resultHandler) throws TException {
        iface.addHistoryTask(args.originVo, args.historyTaskVo,resultHandler);
      }
    }

    public static class deleteHistoryTask<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteHistoryTask_args, Boolean> {
      public deleteHistoryTask() {
        super("deleteHistoryTask");
      }

      public deleteHistoryTask_args getEmptyArgsInstance() {
        return new deleteHistoryTask_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            deleteHistoryTask_result result = new deleteHistoryTask_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteHistoryTask_result result = new deleteHistoryTask_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteHistoryTask_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.deleteHistoryTask(args.originVo, args.historyTaskVo,resultHandler);
      }
    }

    public static class deleteHistoryTaskById<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteHistoryTaskById_args, Boolean> {
      public deleteHistoryTaskById() {
        super("deleteHistoryTaskById");
      }

      public deleteHistoryTaskById_args getEmptyArgsInstance() {
        return new deleteHistoryTaskById_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            deleteHistoryTaskById_result result = new deleteHistoryTaskById_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteHistoryTaskById_result result = new deleteHistoryTaskById_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteHistoryTaskById_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.deleteHistoryTaskById(args.originVo, args.id,resultHandler);
      }
    }

    public static class updateHistoryTask<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateHistoryTask_args, Boolean> {
      public updateHistoryTask() {
        super("updateHistoryTask");
      }

      public updateHistoryTask_args getEmptyArgsInstance() {
        return new updateHistoryTask_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            updateHistoryTask_result result = new updateHistoryTask_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateHistoryTask_result result = new updateHistoryTask_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateHistoryTask_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.updateHistoryTask(args.originVo, args.historyTaskVo,resultHandler);
      }
    }

    public static class updateHistoryTaskById<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateHistoryTaskById_args, Boolean> {
      public updateHistoryTaskById() {
        super("updateHistoryTaskById");
      }

      public updateHistoryTaskById_args getEmptyArgsInstance() {
        return new updateHistoryTaskById_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            updateHistoryTaskById_result result = new updateHistoryTaskById_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateHistoryTaskById_result result = new updateHistoryTaskById_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateHistoryTaskById_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.updateHistoryTaskById(args.originVo, args.historyTaskVo,resultHandler);
      }
    }

    public static class getHistoryTaskById<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getHistoryTaskById_args, com.froad.thrift.vo.HistoryTaskVo> {
      public getHistoryTaskById() {
        super("getHistoryTaskById");
      }

      public getHistoryTaskById_args getEmptyArgsInstance() {
        return new getHistoryTaskById_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.HistoryTaskVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.HistoryTaskVo>() { 
          public void onComplete(com.froad.thrift.vo.HistoryTaskVo o) {
            getHistoryTaskById_result result = new getHistoryTaskById_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getHistoryTaskById_result result = new getHistoryTaskById_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getHistoryTaskById_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.HistoryTaskVo> resultHandler) throws TException {
        iface.getHistoryTaskById(args.id,resultHandler);
      }
    }

    public static class getOneHistoryTask<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getOneHistoryTask_args, com.froad.thrift.vo.HistoryTaskVo> {
      public getOneHistoryTask() {
        super("getOneHistoryTask");
      }

      public getOneHistoryTask_args getEmptyArgsInstance() {
        return new getOneHistoryTask_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.HistoryTaskVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.HistoryTaskVo>() { 
          public void onComplete(com.froad.thrift.vo.HistoryTaskVo o) {
            getOneHistoryTask_result result = new getOneHistoryTask_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getOneHistoryTask_result result = new getOneHistoryTask_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getOneHistoryTask_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.HistoryTaskVo> resultHandler) throws TException {
        iface.getOneHistoryTask(args.historyTaskVo,resultHandler);
      }
    }

    public static class countHistoryTask<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, countHistoryTask_args, Integer> {
      public countHistoryTask() {
        super("countHistoryTask");
      }

      public countHistoryTask_args getEmptyArgsInstance() {
        return new countHistoryTask_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            countHistoryTask_result result = new countHistoryTask_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            countHistoryTask_result result = new countHistoryTask_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, countHistoryTask_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.countHistoryTask(args.historyTaskVo,resultHandler);
      }
    }

    public static class getHistoryTask<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getHistoryTask_args, List<com.froad.thrift.vo.HistoryTaskVo>> {
      public getHistoryTask() {
        super("getHistoryTask");
      }

      public getHistoryTask_args getEmptyArgsInstance() {
        return new getHistoryTask_args();
      }

      public AsyncMethodCallback<List<com.froad.thrift.vo.HistoryTaskVo>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.froad.thrift.vo.HistoryTaskVo>>() { 
          public void onComplete(List<com.froad.thrift.vo.HistoryTaskVo> o) {
            getHistoryTask_result result = new getHistoryTask_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getHistoryTask_result result = new getHistoryTask_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getHistoryTask_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.froad.thrift.vo.HistoryTaskVo>> resultHandler) throws TException {
        iface.getHistoryTask(args.historyTaskVo,resultHandler);
      }
    }

    public static class getHistoryTaskByPage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getHistoryTaskByPage_args, com.froad.thrift.vo.HistoryTaskPageVoRes> {
      public getHistoryTaskByPage() {
        super("getHistoryTaskByPage");
      }

      public getHistoryTaskByPage_args getEmptyArgsInstance() {
        return new getHistoryTaskByPage_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.HistoryTaskPageVoRes> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.HistoryTaskPageVoRes>() { 
          public void onComplete(com.froad.thrift.vo.HistoryTaskPageVoRes o) {
            getHistoryTaskByPage_result result = new getHistoryTaskByPage_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getHistoryTaskByPage_result result = new getHistoryTaskByPage_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getHistoryTaskByPage_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.HistoryTaskPageVoRes> resultHandler) throws TException {
        iface.getHistoryTaskByPage(args.page, args.historyTaskVo,resultHandler);
      }
    }

  }

  public static class addHistoryTask_args implements org.apache.thrift.TBase<addHistoryTask_args, addHistoryTask_args._Fields>, java.io.Serializable, Cloneable, Comparable<addHistoryTask_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addHistoryTask_args");

    private static final org.apache.thrift.protocol.TField ORIGIN_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("originVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField HISTORY_TASK_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("historyTaskVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addHistoryTask_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addHistoryTask_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OriginVo originVo; // required
    public com.froad.thrift.vo.HistoryTaskVo historyTaskVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORIGIN_VO((short)1, "originVo"),
      HISTORY_TASK_VO((short)2, "historyTaskVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORIGIN_VO
            return ORIGIN_VO;
          case 2: // HISTORY_TASK_VO
            return HISTORY_TASK_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORIGIN_VO, new org.apache.thrift.meta_data.FieldMetaData("originVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OriginVo.class)));
      tmpMap.put(_Fields.HISTORY_TASK_VO, new org.apache.thrift.meta_data.FieldMetaData("historyTaskVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.HistoryTaskVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addHistoryTask_args.class, metaDataMap);
    }

    public addHistoryTask_args() {
    }

    public addHistoryTask_args(
      com.froad.thrift.vo.OriginVo originVo,
      com.froad.thrift.vo.HistoryTaskVo historyTaskVo)
    {
      this();
      this.originVo = originVo;
      this.historyTaskVo = historyTaskVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addHistoryTask_args(addHistoryTask_args other) {
      if (other.isSetOriginVo()) {
        this.originVo = new com.froad.thrift.vo.OriginVo(other.originVo);
      }
      if (other.isSetHistoryTaskVo()) {
        this.historyTaskVo = new com.froad.thrift.vo.HistoryTaskVo(other.historyTaskVo);
      }
    }

    public addHistoryTask_args deepCopy() {
      return new addHistoryTask_args(this);
    }

    @Override
    public void clear() {
      this.originVo = null;
      this.historyTaskVo = null;
    }

    public com.froad.thrift.vo.OriginVo getOriginVo() {
      return this.originVo;
    }

    public addHistoryTask_args setOriginVo(com.froad.thrift.vo.OriginVo originVo) {
      this.originVo = originVo;
      return this;
    }

    public void unsetOriginVo() {
      this.originVo = null;
    }

    /** Returns true if field originVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginVo() {
      return this.originVo != null;
    }

    public void setOriginVoIsSet(boolean value) {
      if (!value) {
        this.originVo = null;
      }
    }

    public com.froad.thrift.vo.HistoryTaskVo getHistoryTaskVo() {
      return this.historyTaskVo;
    }

    public addHistoryTask_args setHistoryTaskVo(com.froad.thrift.vo.HistoryTaskVo historyTaskVo) {
      this.historyTaskVo = historyTaskVo;
      return this;
    }

    public void unsetHistoryTaskVo() {
      this.historyTaskVo = null;
    }

    /** Returns true if field historyTaskVo is set (has been assigned a value) and false otherwise */
    public boolean isSetHistoryTaskVo() {
      return this.historyTaskVo != null;
    }

    public void setHistoryTaskVoIsSet(boolean value) {
      if (!value) {
        this.historyTaskVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORIGIN_VO:
        if (value == null) {
          unsetOriginVo();
        } else {
          setOriginVo((com.froad.thrift.vo.OriginVo)value);
        }
        break;

      case HISTORY_TASK_VO:
        if (value == null) {
          unsetHistoryTaskVo();
        } else {
          setHistoryTaskVo((com.froad.thrift.vo.HistoryTaskVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORIGIN_VO:
        return getOriginVo();

      case HISTORY_TASK_VO:
        return getHistoryTaskVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORIGIN_VO:
        return isSetOriginVo();
      case HISTORY_TASK_VO:
        return isSetHistoryTaskVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addHistoryTask_args)
        return this.equals((addHistoryTask_args)that);
      return false;
    }

    public boolean equals(addHistoryTask_args that) {
      if (that == null)
        return false;

      boolean this_present_originVo = true && this.isSetOriginVo();
      boolean that_present_originVo = true && that.isSetOriginVo();
      if (this_present_originVo || that_present_originVo) {
        if (!(this_present_originVo && that_present_originVo))
          return false;
        if (!this.originVo.equals(that.originVo))
          return false;
      }

      boolean this_present_historyTaskVo = true && this.isSetHistoryTaskVo();
      boolean that_present_historyTaskVo = true && that.isSetHistoryTaskVo();
      if (this_present_historyTaskVo || that_present_historyTaskVo) {
        if (!(this_present_historyTaskVo && that_present_historyTaskVo))
          return false;
        if (!this.historyTaskVo.equals(that.historyTaskVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_originVo = true && (isSetOriginVo());
      list.add(present_originVo);
      if (present_originVo)
        list.add(originVo);

      boolean present_historyTaskVo = true && (isSetHistoryTaskVo());
      list.add(present_historyTaskVo);
      if (present_historyTaskVo)
        list.add(historyTaskVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(addHistoryTask_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOriginVo()).compareTo(other.isSetOriginVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originVo, other.originVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetHistoryTaskVo()).compareTo(other.isSetHistoryTaskVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHistoryTaskVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.historyTaskVo, other.historyTaskVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addHistoryTask_args(");
      boolean first = true;

      sb.append("originVo:");
      if (this.originVo == null) {
        sb.append("null");
      } else {
        sb.append(this.originVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("historyTaskVo:");
      if (this.historyTaskVo == null) {
        sb.append("null");
      } else {
        sb.append(this.historyTaskVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (originVo != null) {
        originVo.validate();
      }
      if (historyTaskVo != null) {
        historyTaskVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addHistoryTask_argsStandardSchemeFactory implements SchemeFactory {
      public addHistoryTask_argsStandardScheme getScheme() {
        return new addHistoryTask_argsStandardScheme();
      }
    }

    private static class addHistoryTask_argsStandardScheme extends StandardScheme<addHistoryTask_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addHistoryTask_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORIGIN_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.originVo = new com.froad.thrift.vo.OriginVo();
                struct.originVo.read(iprot);
                struct.setOriginVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // HISTORY_TASK_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.historyTaskVo = new com.froad.thrift.vo.HistoryTaskVo();
                struct.historyTaskVo.read(iprot);
                struct.setHistoryTaskVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addHistoryTask_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.originVo != null) {
          oprot.writeFieldBegin(ORIGIN_VO_FIELD_DESC);
          struct.originVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.historyTaskVo != null) {
          oprot.writeFieldBegin(HISTORY_TASK_VO_FIELD_DESC);
          struct.historyTaskVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addHistoryTask_argsTupleSchemeFactory implements SchemeFactory {
      public addHistoryTask_argsTupleScheme getScheme() {
        return new addHistoryTask_argsTupleScheme();
      }
    }

    private static class addHistoryTask_argsTupleScheme extends TupleScheme<addHistoryTask_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addHistoryTask_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOriginVo()) {
          optionals.set(0);
        }
        if (struct.isSetHistoryTaskVo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOriginVo()) {
          struct.originVo.write(oprot);
        }
        if (struct.isSetHistoryTaskVo()) {
          struct.historyTaskVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addHistoryTask_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.originVo = new com.froad.thrift.vo.OriginVo();
          struct.originVo.read(iprot);
          struct.setOriginVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.historyTaskVo = new com.froad.thrift.vo.HistoryTaskVo();
          struct.historyTaskVo.read(iprot);
          struct.setHistoryTaskVoIsSet(true);
        }
      }
    }

  }

  public static class addHistoryTask_result implements org.apache.thrift.TBase<addHistoryTask_result, addHistoryTask_result._Fields>, java.io.Serializable, Cloneable, Comparable<addHistoryTask_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addHistoryTask_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addHistoryTask_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addHistoryTask_resultTupleSchemeFactory());
    }

    public long success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addHistoryTask_result.class, metaDataMap);
    }

    public addHistoryTask_result() {
    }

    public addHistoryTask_result(
      long success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addHistoryTask_result(addHistoryTask_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public addHistoryTask_result deepCopy() {
      return new addHistoryTask_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public long getSuccess() {
      return this.success;
    }

    public addHistoryTask_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Long.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addHistoryTask_result)
        return this.equals((addHistoryTask_result)that);
      return false;
    }

    public boolean equals(addHistoryTask_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(addHistoryTask_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addHistoryTask_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addHistoryTask_resultStandardSchemeFactory implements SchemeFactory {
      public addHistoryTask_resultStandardScheme getScheme() {
        return new addHistoryTask_resultStandardScheme();
      }
    }

    private static class addHistoryTask_resultStandardScheme extends StandardScheme<addHistoryTask_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addHistoryTask_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addHistoryTask_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addHistoryTask_resultTupleSchemeFactory implements SchemeFactory {
      public addHistoryTask_resultTupleScheme getScheme() {
        return new addHistoryTask_resultTupleScheme();
      }
    }

    private static class addHistoryTask_resultTupleScheme extends TupleScheme<addHistoryTask_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addHistoryTask_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addHistoryTask_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class deleteHistoryTask_args implements org.apache.thrift.TBase<deleteHistoryTask_args, deleteHistoryTask_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteHistoryTask_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteHistoryTask_args");

    private static final org.apache.thrift.protocol.TField ORIGIN_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("originVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField HISTORY_TASK_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("historyTaskVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteHistoryTask_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteHistoryTask_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OriginVo originVo; // required
    public com.froad.thrift.vo.HistoryTaskVo historyTaskVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORIGIN_VO((short)1, "originVo"),
      HISTORY_TASK_VO((short)2, "historyTaskVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORIGIN_VO
            return ORIGIN_VO;
          case 2: // HISTORY_TASK_VO
            return HISTORY_TASK_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORIGIN_VO, new org.apache.thrift.meta_data.FieldMetaData("originVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OriginVo.class)));
      tmpMap.put(_Fields.HISTORY_TASK_VO, new org.apache.thrift.meta_data.FieldMetaData("historyTaskVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.HistoryTaskVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteHistoryTask_args.class, metaDataMap);
    }

    public deleteHistoryTask_args() {
    }

    public deleteHistoryTask_args(
      com.froad.thrift.vo.OriginVo originVo,
      com.froad.thrift.vo.HistoryTaskVo historyTaskVo)
    {
      this();
      this.originVo = originVo;
      this.historyTaskVo = historyTaskVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteHistoryTask_args(deleteHistoryTask_args other) {
      if (other.isSetOriginVo()) {
        this.originVo = new com.froad.thrift.vo.OriginVo(other.originVo);
      }
      if (other.isSetHistoryTaskVo()) {
        this.historyTaskVo = new com.froad.thrift.vo.HistoryTaskVo(other.historyTaskVo);
      }
    }

    public deleteHistoryTask_args deepCopy() {
      return new deleteHistoryTask_args(this);
    }

    @Override
    public void clear() {
      this.originVo = null;
      this.historyTaskVo = null;
    }

    public com.froad.thrift.vo.OriginVo getOriginVo() {
      return this.originVo;
    }

    public deleteHistoryTask_args setOriginVo(com.froad.thrift.vo.OriginVo originVo) {
      this.originVo = originVo;
      return this;
    }

    public void unsetOriginVo() {
      this.originVo = null;
    }

    /** Returns true if field originVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginVo() {
      return this.originVo != null;
    }

    public void setOriginVoIsSet(boolean value) {
      if (!value) {
        this.originVo = null;
      }
    }

    public com.froad.thrift.vo.HistoryTaskVo getHistoryTaskVo() {
      return this.historyTaskVo;
    }

    public deleteHistoryTask_args setHistoryTaskVo(com.froad.thrift.vo.HistoryTaskVo historyTaskVo) {
      this.historyTaskVo = historyTaskVo;
      return this;
    }

    public void unsetHistoryTaskVo() {
      this.historyTaskVo = null;
    }

    /** Returns true if field historyTaskVo is set (has been assigned a value) and false otherwise */
    public boolean isSetHistoryTaskVo() {
      return this.historyTaskVo != null;
    }

    public void setHistoryTaskVoIsSet(boolean value) {
      if (!value) {
        this.historyTaskVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORIGIN_VO:
        if (value == null) {
          unsetOriginVo();
        } else {
          setOriginVo((com.froad.thrift.vo.OriginVo)value);
        }
        break;

      case HISTORY_TASK_VO:
        if (value == null) {
          unsetHistoryTaskVo();
        } else {
          setHistoryTaskVo((com.froad.thrift.vo.HistoryTaskVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORIGIN_VO:
        return getOriginVo();

      case HISTORY_TASK_VO:
        return getHistoryTaskVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORIGIN_VO:
        return isSetOriginVo();
      case HISTORY_TASK_VO:
        return isSetHistoryTaskVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteHistoryTask_args)
        return this.equals((deleteHistoryTask_args)that);
      return false;
    }

    public boolean equals(deleteHistoryTask_args that) {
      if (that == null)
        return false;

      boolean this_present_originVo = true && this.isSetOriginVo();
      boolean that_present_originVo = true && that.isSetOriginVo();
      if (this_present_originVo || that_present_originVo) {
        if (!(this_present_originVo && that_present_originVo))
          return false;
        if (!this.originVo.equals(that.originVo))
          return false;
      }

      boolean this_present_historyTaskVo = true && this.isSetHistoryTaskVo();
      boolean that_present_historyTaskVo = true && that.isSetHistoryTaskVo();
      if (this_present_historyTaskVo || that_present_historyTaskVo) {
        if (!(this_present_historyTaskVo && that_present_historyTaskVo))
          return false;
        if (!this.historyTaskVo.equals(that.historyTaskVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_originVo = true && (isSetOriginVo());
      list.add(present_originVo);
      if (present_originVo)
        list.add(originVo);

      boolean present_historyTaskVo = true && (isSetHistoryTaskVo());
      list.add(present_historyTaskVo);
      if (present_historyTaskVo)
        list.add(historyTaskVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteHistoryTask_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOriginVo()).compareTo(other.isSetOriginVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originVo, other.originVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetHistoryTaskVo()).compareTo(other.isSetHistoryTaskVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHistoryTaskVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.historyTaskVo, other.historyTaskVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteHistoryTask_args(");
      boolean first = true;

      sb.append("originVo:");
      if (this.originVo == null) {
        sb.append("null");
      } else {
        sb.append(this.originVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("historyTaskVo:");
      if (this.historyTaskVo == null) {
        sb.append("null");
      } else {
        sb.append(this.historyTaskVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (originVo != null) {
        originVo.validate();
      }
      if (historyTaskVo != null) {
        historyTaskVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteHistoryTask_argsStandardSchemeFactory implements SchemeFactory {
      public deleteHistoryTask_argsStandardScheme getScheme() {
        return new deleteHistoryTask_argsStandardScheme();
      }
    }

    private static class deleteHistoryTask_argsStandardScheme extends StandardScheme<deleteHistoryTask_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteHistoryTask_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORIGIN_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.originVo = new com.froad.thrift.vo.OriginVo();
                struct.originVo.read(iprot);
                struct.setOriginVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // HISTORY_TASK_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.historyTaskVo = new com.froad.thrift.vo.HistoryTaskVo();
                struct.historyTaskVo.read(iprot);
                struct.setHistoryTaskVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteHistoryTask_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.originVo != null) {
          oprot.writeFieldBegin(ORIGIN_VO_FIELD_DESC);
          struct.originVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.historyTaskVo != null) {
          oprot.writeFieldBegin(HISTORY_TASK_VO_FIELD_DESC);
          struct.historyTaskVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteHistoryTask_argsTupleSchemeFactory implements SchemeFactory {
      public deleteHistoryTask_argsTupleScheme getScheme() {
        return new deleteHistoryTask_argsTupleScheme();
      }
    }

    private static class deleteHistoryTask_argsTupleScheme extends TupleScheme<deleteHistoryTask_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteHistoryTask_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOriginVo()) {
          optionals.set(0);
        }
        if (struct.isSetHistoryTaskVo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOriginVo()) {
          struct.originVo.write(oprot);
        }
        if (struct.isSetHistoryTaskVo()) {
          struct.historyTaskVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteHistoryTask_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.originVo = new com.froad.thrift.vo.OriginVo();
          struct.originVo.read(iprot);
          struct.setOriginVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.historyTaskVo = new com.froad.thrift.vo.HistoryTaskVo();
          struct.historyTaskVo.read(iprot);
          struct.setHistoryTaskVoIsSet(true);
        }
      }
    }

  }

  public static class deleteHistoryTask_result implements org.apache.thrift.TBase<deleteHistoryTask_result, deleteHistoryTask_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteHistoryTask_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteHistoryTask_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteHistoryTask_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteHistoryTask_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteHistoryTask_result.class, metaDataMap);
    }

    public deleteHistoryTask_result() {
    }

    public deleteHistoryTask_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteHistoryTask_result(deleteHistoryTask_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public deleteHistoryTask_result deepCopy() {
      return new deleteHistoryTask_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public deleteHistoryTask_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteHistoryTask_result)
        return this.equals((deleteHistoryTask_result)that);
      return false;
    }

    public boolean equals(deleteHistoryTask_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteHistoryTask_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteHistoryTask_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteHistoryTask_resultStandardSchemeFactory implements SchemeFactory {
      public deleteHistoryTask_resultStandardScheme getScheme() {
        return new deleteHistoryTask_resultStandardScheme();
      }
    }

    private static class deleteHistoryTask_resultStandardScheme extends StandardScheme<deleteHistoryTask_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteHistoryTask_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteHistoryTask_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteHistoryTask_resultTupleSchemeFactory implements SchemeFactory {
      public deleteHistoryTask_resultTupleScheme getScheme() {
        return new deleteHistoryTask_resultTupleScheme();
      }
    }

    private static class deleteHistoryTask_resultTupleScheme extends TupleScheme<deleteHistoryTask_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteHistoryTask_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteHistoryTask_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class deleteHistoryTaskById_args implements org.apache.thrift.TBase<deleteHistoryTaskById_args, deleteHistoryTaskById_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteHistoryTaskById_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteHistoryTaskById_args");

    private static final org.apache.thrift.protocol.TField ORIGIN_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("originVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteHistoryTaskById_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteHistoryTaskById_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OriginVo originVo; // required
    public long id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORIGIN_VO((short)1, "originVo"),
      ID((short)2, "id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORIGIN_VO
            return ORIGIN_VO;
          case 2: // ID
            return ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORIGIN_VO, new org.apache.thrift.meta_data.FieldMetaData("originVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OriginVo.class)));
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteHistoryTaskById_args.class, metaDataMap);
    }

    public deleteHistoryTaskById_args() {
    }

    public deleteHistoryTaskById_args(
      com.froad.thrift.vo.OriginVo originVo,
      long id)
    {
      this();
      this.originVo = originVo;
      this.id = id;
      setIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteHistoryTaskById_args(deleteHistoryTaskById_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetOriginVo()) {
        this.originVo = new com.froad.thrift.vo.OriginVo(other.originVo);
      }
      this.id = other.id;
    }

    public deleteHistoryTaskById_args deepCopy() {
      return new deleteHistoryTaskById_args(this);
    }

    @Override
    public void clear() {
      this.originVo = null;
      setIdIsSet(false);
      this.id = 0;
    }

    public com.froad.thrift.vo.OriginVo getOriginVo() {
      return this.originVo;
    }

    public deleteHistoryTaskById_args setOriginVo(com.froad.thrift.vo.OriginVo originVo) {
      this.originVo = originVo;
      return this;
    }

    public void unsetOriginVo() {
      this.originVo = null;
    }

    /** Returns true if field originVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginVo() {
      return this.originVo != null;
    }

    public void setOriginVoIsSet(boolean value) {
      if (!value) {
        this.originVo = null;
      }
    }

    public long getId() {
      return this.id;
    }

    public deleteHistoryTaskById_args setId(long id) {
      this.id = id;
      setIdIsSet(true);
      return this;
    }

    public void unsetId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
    }

    public void setIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORIGIN_VO:
        if (value == null) {
          unsetOriginVo();
        } else {
          setOriginVo((com.froad.thrift.vo.OriginVo)value);
        }
        break;

      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORIGIN_VO:
        return getOriginVo();

      case ID:
        return Long.valueOf(getId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORIGIN_VO:
        return isSetOriginVo();
      case ID:
        return isSetId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteHistoryTaskById_args)
        return this.equals((deleteHistoryTaskById_args)that);
      return false;
    }

    public boolean equals(deleteHistoryTaskById_args that) {
      if (that == null)
        return false;

      boolean this_present_originVo = true && this.isSetOriginVo();
      boolean that_present_originVo = true && that.isSetOriginVo();
      if (this_present_originVo || that_present_originVo) {
        if (!(this_present_originVo && that_present_originVo))
          return false;
        if (!this.originVo.equals(that.originVo))
          return false;
      }

      boolean this_present_id = true;
      boolean that_present_id = true;
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (this.id != that.id)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_originVo = true && (isSetOriginVo());
      list.add(present_originVo);
      if (present_originVo)
        list.add(originVo);

      boolean present_id = true;
      list.add(present_id);
      if (present_id)
        list.add(id);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteHistoryTaskById_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOriginVo()).compareTo(other.isSetOriginVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originVo, other.originVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteHistoryTaskById_args(");
      boolean first = true;

      sb.append("originVo:");
      if (this.originVo == null) {
        sb.append("null");
      } else {
        sb.append(this.originVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("id:");
      sb.append(this.id);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (originVo != null) {
        originVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteHistoryTaskById_argsStandardSchemeFactory implements SchemeFactory {
      public deleteHistoryTaskById_argsStandardScheme getScheme() {
        return new deleteHistoryTaskById_argsStandardScheme();
      }
    }

    private static class deleteHistoryTaskById_argsStandardScheme extends StandardScheme<deleteHistoryTaskById_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteHistoryTaskById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORIGIN_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.originVo = new com.froad.thrift.vo.OriginVo();
                struct.originVo.read(iprot);
                struct.setOriginVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.id = iprot.readI64();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteHistoryTaskById_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.originVo != null) {
          oprot.writeFieldBegin(ORIGIN_VO_FIELD_DESC);
          struct.originVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI64(struct.id);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteHistoryTaskById_argsTupleSchemeFactory implements SchemeFactory {
      public deleteHistoryTaskById_argsTupleScheme getScheme() {
        return new deleteHistoryTaskById_argsTupleScheme();
      }
    }

    private static class deleteHistoryTaskById_argsTupleScheme extends TupleScheme<deleteHistoryTaskById_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteHistoryTaskById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOriginVo()) {
          optionals.set(0);
        }
        if (struct.isSetId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOriginVo()) {
          struct.originVo.write(oprot);
        }
        if (struct.isSetId()) {
          oprot.writeI64(struct.id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteHistoryTaskById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.originVo = new com.froad.thrift.vo.OriginVo();
          struct.originVo.read(iprot);
          struct.setOriginVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.id = iprot.readI64();
          struct.setIdIsSet(true);
        }
      }
    }

  }

  public static class deleteHistoryTaskById_result implements org.apache.thrift.TBase<deleteHistoryTaskById_result, deleteHistoryTaskById_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteHistoryTaskById_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteHistoryTaskById_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteHistoryTaskById_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteHistoryTaskById_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteHistoryTaskById_result.class, metaDataMap);
    }

    public deleteHistoryTaskById_result() {
    }

    public deleteHistoryTaskById_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteHistoryTaskById_result(deleteHistoryTaskById_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public deleteHistoryTaskById_result deepCopy() {
      return new deleteHistoryTaskById_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public deleteHistoryTaskById_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteHistoryTaskById_result)
        return this.equals((deleteHistoryTaskById_result)that);
      return false;
    }

    public boolean equals(deleteHistoryTaskById_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteHistoryTaskById_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteHistoryTaskById_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteHistoryTaskById_resultStandardSchemeFactory implements SchemeFactory {
      public deleteHistoryTaskById_resultStandardScheme getScheme() {
        return new deleteHistoryTaskById_resultStandardScheme();
      }
    }

    private static class deleteHistoryTaskById_resultStandardScheme extends StandardScheme<deleteHistoryTaskById_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteHistoryTaskById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteHistoryTaskById_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteHistoryTaskById_resultTupleSchemeFactory implements SchemeFactory {
      public deleteHistoryTaskById_resultTupleScheme getScheme() {
        return new deleteHistoryTaskById_resultTupleScheme();
      }
    }

    private static class deleteHistoryTaskById_resultTupleScheme extends TupleScheme<deleteHistoryTaskById_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteHistoryTaskById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteHistoryTaskById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateHistoryTask_args implements org.apache.thrift.TBase<updateHistoryTask_args, updateHistoryTask_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateHistoryTask_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateHistoryTask_args");

    private static final org.apache.thrift.protocol.TField ORIGIN_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("originVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField HISTORY_TASK_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("historyTaskVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateHistoryTask_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateHistoryTask_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OriginVo originVo; // required
    public com.froad.thrift.vo.HistoryTaskVo historyTaskVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORIGIN_VO((short)1, "originVo"),
      HISTORY_TASK_VO((short)2, "historyTaskVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORIGIN_VO
            return ORIGIN_VO;
          case 2: // HISTORY_TASK_VO
            return HISTORY_TASK_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORIGIN_VO, new org.apache.thrift.meta_data.FieldMetaData("originVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OriginVo.class)));
      tmpMap.put(_Fields.HISTORY_TASK_VO, new org.apache.thrift.meta_data.FieldMetaData("historyTaskVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.HistoryTaskVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateHistoryTask_args.class, metaDataMap);
    }

    public updateHistoryTask_args() {
    }

    public updateHistoryTask_args(
      com.froad.thrift.vo.OriginVo originVo,
      com.froad.thrift.vo.HistoryTaskVo historyTaskVo)
    {
      this();
      this.originVo = originVo;
      this.historyTaskVo = historyTaskVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateHistoryTask_args(updateHistoryTask_args other) {
      if (other.isSetOriginVo()) {
        this.originVo = new com.froad.thrift.vo.OriginVo(other.originVo);
      }
      if (other.isSetHistoryTaskVo()) {
        this.historyTaskVo = new com.froad.thrift.vo.HistoryTaskVo(other.historyTaskVo);
      }
    }

    public updateHistoryTask_args deepCopy() {
      return new updateHistoryTask_args(this);
    }

    @Override
    public void clear() {
      this.originVo = null;
      this.historyTaskVo = null;
    }

    public com.froad.thrift.vo.OriginVo getOriginVo() {
      return this.originVo;
    }

    public updateHistoryTask_args setOriginVo(com.froad.thrift.vo.OriginVo originVo) {
      this.originVo = originVo;
      return this;
    }

    public void unsetOriginVo() {
      this.originVo = null;
    }

    /** Returns true if field originVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginVo() {
      return this.originVo != null;
    }

    public void setOriginVoIsSet(boolean value) {
      if (!value) {
        this.originVo = null;
      }
    }

    public com.froad.thrift.vo.HistoryTaskVo getHistoryTaskVo() {
      return this.historyTaskVo;
    }

    public updateHistoryTask_args setHistoryTaskVo(com.froad.thrift.vo.HistoryTaskVo historyTaskVo) {
      this.historyTaskVo = historyTaskVo;
      return this;
    }

    public void unsetHistoryTaskVo() {
      this.historyTaskVo = null;
    }

    /** Returns true if field historyTaskVo is set (has been assigned a value) and false otherwise */
    public boolean isSetHistoryTaskVo() {
      return this.historyTaskVo != null;
    }

    public void setHistoryTaskVoIsSet(boolean value) {
      if (!value) {
        this.historyTaskVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORIGIN_VO:
        if (value == null) {
          unsetOriginVo();
        } else {
          setOriginVo((com.froad.thrift.vo.OriginVo)value);
        }
        break;

      case HISTORY_TASK_VO:
        if (value == null) {
          unsetHistoryTaskVo();
        } else {
          setHistoryTaskVo((com.froad.thrift.vo.HistoryTaskVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORIGIN_VO:
        return getOriginVo();

      case HISTORY_TASK_VO:
        return getHistoryTaskVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORIGIN_VO:
        return isSetOriginVo();
      case HISTORY_TASK_VO:
        return isSetHistoryTaskVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateHistoryTask_args)
        return this.equals((updateHistoryTask_args)that);
      return false;
    }

    public boolean equals(updateHistoryTask_args that) {
      if (that == null)
        return false;

      boolean this_present_originVo = true && this.isSetOriginVo();
      boolean that_present_originVo = true && that.isSetOriginVo();
      if (this_present_originVo || that_present_originVo) {
        if (!(this_present_originVo && that_present_originVo))
          return false;
        if (!this.originVo.equals(that.originVo))
          return false;
      }

      boolean this_present_historyTaskVo = true && this.isSetHistoryTaskVo();
      boolean that_present_historyTaskVo = true && that.isSetHistoryTaskVo();
      if (this_present_historyTaskVo || that_present_historyTaskVo) {
        if (!(this_present_historyTaskVo && that_present_historyTaskVo))
          return false;
        if (!this.historyTaskVo.equals(that.historyTaskVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_originVo = true && (isSetOriginVo());
      list.add(present_originVo);
      if (present_originVo)
        list.add(originVo);

      boolean present_historyTaskVo = true && (isSetHistoryTaskVo());
      list.add(present_historyTaskVo);
      if (present_historyTaskVo)
        list.add(historyTaskVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateHistoryTask_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOriginVo()).compareTo(other.isSetOriginVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originVo, other.originVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetHistoryTaskVo()).compareTo(other.isSetHistoryTaskVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHistoryTaskVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.historyTaskVo, other.historyTaskVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateHistoryTask_args(");
      boolean first = true;

      sb.append("originVo:");
      if (this.originVo == null) {
        sb.append("null");
      } else {
        sb.append(this.originVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("historyTaskVo:");
      if (this.historyTaskVo == null) {
        sb.append("null");
      } else {
        sb.append(this.historyTaskVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (originVo != null) {
        originVo.validate();
      }
      if (historyTaskVo != null) {
        historyTaskVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateHistoryTask_argsStandardSchemeFactory implements SchemeFactory {
      public updateHistoryTask_argsStandardScheme getScheme() {
        return new updateHistoryTask_argsStandardScheme();
      }
    }

    private static class updateHistoryTask_argsStandardScheme extends StandardScheme<updateHistoryTask_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateHistoryTask_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORIGIN_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.originVo = new com.froad.thrift.vo.OriginVo();
                struct.originVo.read(iprot);
                struct.setOriginVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // HISTORY_TASK_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.historyTaskVo = new com.froad.thrift.vo.HistoryTaskVo();
                struct.historyTaskVo.read(iprot);
                struct.setHistoryTaskVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateHistoryTask_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.originVo != null) {
          oprot.writeFieldBegin(ORIGIN_VO_FIELD_DESC);
          struct.originVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.historyTaskVo != null) {
          oprot.writeFieldBegin(HISTORY_TASK_VO_FIELD_DESC);
          struct.historyTaskVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateHistoryTask_argsTupleSchemeFactory implements SchemeFactory {
      public updateHistoryTask_argsTupleScheme getScheme() {
        return new updateHistoryTask_argsTupleScheme();
      }
    }

    private static class updateHistoryTask_argsTupleScheme extends TupleScheme<updateHistoryTask_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateHistoryTask_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOriginVo()) {
          optionals.set(0);
        }
        if (struct.isSetHistoryTaskVo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOriginVo()) {
          struct.originVo.write(oprot);
        }
        if (struct.isSetHistoryTaskVo()) {
          struct.historyTaskVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateHistoryTask_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.originVo = new com.froad.thrift.vo.OriginVo();
          struct.originVo.read(iprot);
          struct.setOriginVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.historyTaskVo = new com.froad.thrift.vo.HistoryTaskVo();
          struct.historyTaskVo.read(iprot);
          struct.setHistoryTaskVoIsSet(true);
        }
      }
    }

  }

  public static class updateHistoryTask_result implements org.apache.thrift.TBase<updateHistoryTask_result, updateHistoryTask_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateHistoryTask_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateHistoryTask_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateHistoryTask_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateHistoryTask_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateHistoryTask_result.class, metaDataMap);
    }

    public updateHistoryTask_result() {
    }

    public updateHistoryTask_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateHistoryTask_result(updateHistoryTask_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public updateHistoryTask_result deepCopy() {
      return new updateHistoryTask_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public updateHistoryTask_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateHistoryTask_result)
        return this.equals((updateHistoryTask_result)that);
      return false;
    }

    public boolean equals(updateHistoryTask_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateHistoryTask_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateHistoryTask_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateHistoryTask_resultStandardSchemeFactory implements SchemeFactory {
      public updateHistoryTask_resultStandardScheme getScheme() {
        return new updateHistoryTask_resultStandardScheme();
      }
    }

    private static class updateHistoryTask_resultStandardScheme extends StandardScheme<updateHistoryTask_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateHistoryTask_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateHistoryTask_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateHistoryTask_resultTupleSchemeFactory implements SchemeFactory {
      public updateHistoryTask_resultTupleScheme getScheme() {
        return new updateHistoryTask_resultTupleScheme();
      }
    }

    private static class updateHistoryTask_resultTupleScheme extends TupleScheme<updateHistoryTask_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateHistoryTask_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateHistoryTask_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateHistoryTaskById_args implements org.apache.thrift.TBase<updateHistoryTaskById_args, updateHistoryTaskById_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateHistoryTaskById_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateHistoryTaskById_args");

    private static final org.apache.thrift.protocol.TField ORIGIN_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("originVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField HISTORY_TASK_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("historyTaskVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateHistoryTaskById_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateHistoryTaskById_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OriginVo originVo; // required
    public com.froad.thrift.vo.HistoryTaskVo historyTaskVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORIGIN_VO((short)1, "originVo"),
      HISTORY_TASK_VO((short)2, "historyTaskVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORIGIN_VO
            return ORIGIN_VO;
          case 2: // HISTORY_TASK_VO
            return HISTORY_TASK_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORIGIN_VO, new org.apache.thrift.meta_data.FieldMetaData("originVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OriginVo.class)));
      tmpMap.put(_Fields.HISTORY_TASK_VO, new org.apache.thrift.meta_data.FieldMetaData("historyTaskVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.HistoryTaskVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateHistoryTaskById_args.class, metaDataMap);
    }

    public updateHistoryTaskById_args() {
    }

    public updateHistoryTaskById_args(
      com.froad.thrift.vo.OriginVo originVo,
      com.froad.thrift.vo.HistoryTaskVo historyTaskVo)
    {
      this();
      this.originVo = originVo;
      this.historyTaskVo = historyTaskVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateHistoryTaskById_args(updateHistoryTaskById_args other) {
      if (other.isSetOriginVo()) {
        this.originVo = new com.froad.thrift.vo.OriginVo(other.originVo);
      }
      if (other.isSetHistoryTaskVo()) {
        this.historyTaskVo = new com.froad.thrift.vo.HistoryTaskVo(other.historyTaskVo);
      }
    }

    public updateHistoryTaskById_args deepCopy() {
      return new updateHistoryTaskById_args(this);
    }

    @Override
    public void clear() {
      this.originVo = null;
      this.historyTaskVo = null;
    }

    public com.froad.thrift.vo.OriginVo getOriginVo() {
      return this.originVo;
    }

    public updateHistoryTaskById_args setOriginVo(com.froad.thrift.vo.OriginVo originVo) {
      this.originVo = originVo;
      return this;
    }

    public void unsetOriginVo() {
      this.originVo = null;
    }

    /** Returns true if field originVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginVo() {
      return this.originVo != null;
    }

    public void setOriginVoIsSet(boolean value) {
      if (!value) {
        this.originVo = null;
      }
    }

    public com.froad.thrift.vo.HistoryTaskVo getHistoryTaskVo() {
      return this.historyTaskVo;
    }

    public updateHistoryTaskById_args setHistoryTaskVo(com.froad.thrift.vo.HistoryTaskVo historyTaskVo) {
      this.historyTaskVo = historyTaskVo;
      return this;
    }

    public void unsetHistoryTaskVo() {
      this.historyTaskVo = null;
    }

    /** Returns true if field historyTaskVo is set (has been assigned a value) and false otherwise */
    public boolean isSetHistoryTaskVo() {
      return this.historyTaskVo != null;
    }

    public void setHistoryTaskVoIsSet(boolean value) {
      if (!value) {
        this.historyTaskVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORIGIN_VO:
        if (value == null) {
          unsetOriginVo();
        } else {
          setOriginVo((com.froad.thrift.vo.OriginVo)value);
        }
        break;

      case HISTORY_TASK_VO:
        if (value == null) {
          unsetHistoryTaskVo();
        } else {
          setHistoryTaskVo((com.froad.thrift.vo.HistoryTaskVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORIGIN_VO:
        return getOriginVo();

      case HISTORY_TASK_VO:
        return getHistoryTaskVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORIGIN_VO:
        return isSetOriginVo();
      case HISTORY_TASK_VO:
        return isSetHistoryTaskVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateHistoryTaskById_args)
        return this.equals((updateHistoryTaskById_args)that);
      return false;
    }

    public boolean equals(updateHistoryTaskById_args that) {
      if (that == null)
        return false;

      boolean this_present_originVo = true && this.isSetOriginVo();
      boolean that_present_originVo = true && that.isSetOriginVo();
      if (this_present_originVo || that_present_originVo) {
        if (!(this_present_originVo && that_present_originVo))
          return false;
        if (!this.originVo.equals(that.originVo))
          return false;
      }

      boolean this_present_historyTaskVo = true && this.isSetHistoryTaskVo();
      boolean that_present_historyTaskVo = true && that.isSetHistoryTaskVo();
      if (this_present_historyTaskVo || that_present_historyTaskVo) {
        if (!(this_present_historyTaskVo && that_present_historyTaskVo))
          return false;
        if (!this.historyTaskVo.equals(that.historyTaskVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_originVo = true && (isSetOriginVo());
      list.add(present_originVo);
      if (present_originVo)
        list.add(originVo);

      boolean present_historyTaskVo = true && (isSetHistoryTaskVo());
      list.add(present_historyTaskVo);
      if (present_historyTaskVo)
        list.add(historyTaskVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateHistoryTaskById_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOriginVo()).compareTo(other.isSetOriginVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originVo, other.originVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetHistoryTaskVo()).compareTo(other.isSetHistoryTaskVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHistoryTaskVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.historyTaskVo, other.historyTaskVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateHistoryTaskById_args(");
      boolean first = true;

      sb.append("originVo:");
      if (this.originVo == null) {
        sb.append("null");
      } else {
        sb.append(this.originVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("historyTaskVo:");
      if (this.historyTaskVo == null) {
        sb.append("null");
      } else {
        sb.append(this.historyTaskVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (originVo != null) {
        originVo.validate();
      }
      if (historyTaskVo != null) {
        historyTaskVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateHistoryTaskById_argsStandardSchemeFactory implements SchemeFactory {
      public updateHistoryTaskById_argsStandardScheme getScheme() {
        return new updateHistoryTaskById_argsStandardScheme();
      }
    }

    private static class updateHistoryTaskById_argsStandardScheme extends StandardScheme<updateHistoryTaskById_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateHistoryTaskById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORIGIN_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.originVo = new com.froad.thrift.vo.OriginVo();
                struct.originVo.read(iprot);
                struct.setOriginVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // HISTORY_TASK_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.historyTaskVo = new com.froad.thrift.vo.HistoryTaskVo();
                struct.historyTaskVo.read(iprot);
                struct.setHistoryTaskVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateHistoryTaskById_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.originVo != null) {
          oprot.writeFieldBegin(ORIGIN_VO_FIELD_DESC);
          struct.originVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.historyTaskVo != null) {
          oprot.writeFieldBegin(HISTORY_TASK_VO_FIELD_DESC);
          struct.historyTaskVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateHistoryTaskById_argsTupleSchemeFactory implements SchemeFactory {
      public updateHistoryTaskById_argsTupleScheme getScheme() {
        return new updateHistoryTaskById_argsTupleScheme();
      }
    }

    private static class updateHistoryTaskById_argsTupleScheme extends TupleScheme<updateHistoryTaskById_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateHistoryTaskById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOriginVo()) {
          optionals.set(0);
        }
        if (struct.isSetHistoryTaskVo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOriginVo()) {
          struct.originVo.write(oprot);
        }
        if (struct.isSetHistoryTaskVo()) {
          struct.historyTaskVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateHistoryTaskById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.originVo = new com.froad.thrift.vo.OriginVo();
          struct.originVo.read(iprot);
          struct.setOriginVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.historyTaskVo = new com.froad.thrift.vo.HistoryTaskVo();
          struct.historyTaskVo.read(iprot);
          struct.setHistoryTaskVoIsSet(true);
        }
      }
    }

  }

  public static class updateHistoryTaskById_result implements org.apache.thrift.TBase<updateHistoryTaskById_result, updateHistoryTaskById_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateHistoryTaskById_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateHistoryTaskById_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateHistoryTaskById_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateHistoryTaskById_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateHistoryTaskById_result.class, metaDataMap);
    }

    public updateHistoryTaskById_result() {
    }

    public updateHistoryTaskById_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateHistoryTaskById_result(updateHistoryTaskById_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public updateHistoryTaskById_result deepCopy() {
      return new updateHistoryTaskById_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public updateHistoryTaskById_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateHistoryTaskById_result)
        return this.equals((updateHistoryTaskById_result)that);
      return false;
    }

    public boolean equals(updateHistoryTaskById_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateHistoryTaskById_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateHistoryTaskById_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateHistoryTaskById_resultStandardSchemeFactory implements SchemeFactory {
      public updateHistoryTaskById_resultStandardScheme getScheme() {
        return new updateHistoryTaskById_resultStandardScheme();
      }
    }

    private static class updateHistoryTaskById_resultStandardScheme extends StandardScheme<updateHistoryTaskById_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateHistoryTaskById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateHistoryTaskById_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateHistoryTaskById_resultTupleSchemeFactory implements SchemeFactory {
      public updateHistoryTaskById_resultTupleScheme getScheme() {
        return new updateHistoryTaskById_resultTupleScheme();
      }
    }

    private static class updateHistoryTaskById_resultTupleScheme extends TupleScheme<updateHistoryTaskById_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateHistoryTaskById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateHistoryTaskById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getHistoryTaskById_args implements org.apache.thrift.TBase<getHistoryTaskById_args, getHistoryTaskById_args._Fields>, java.io.Serializable, Cloneable, Comparable<getHistoryTaskById_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getHistoryTaskById_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getHistoryTaskById_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getHistoryTaskById_argsTupleSchemeFactory());
    }

    public long id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getHistoryTaskById_args.class, metaDataMap);
    }

    public getHistoryTaskById_args() {
    }

    public getHistoryTaskById_args(
      long id)
    {
      this();
      this.id = id;
      setIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getHistoryTaskById_args(getHistoryTaskById_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.id = other.id;
    }

    public getHistoryTaskById_args deepCopy() {
      return new getHistoryTaskById_args(this);
    }

    @Override
    public void clear() {
      setIdIsSet(false);
      this.id = 0;
    }

    public long getId() {
      return this.id;
    }

    public getHistoryTaskById_args setId(long id) {
      this.id = id;
      setIdIsSet(true);
      return this;
    }

    public void unsetId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
    }

    public void setIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return Long.valueOf(getId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getHistoryTaskById_args)
        return this.equals((getHistoryTaskById_args)that);
      return false;
    }

    public boolean equals(getHistoryTaskById_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true;
      boolean that_present_id = true;
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (this.id != that.id)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_id = true;
      list.add(present_id);
      if (present_id)
        list.add(id);

      return list.hashCode();
    }

    @Override
    public int compareTo(getHistoryTaskById_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getHistoryTaskById_args(");
      boolean first = true;

      sb.append("id:");
      sb.append(this.id);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getHistoryTaskById_argsStandardSchemeFactory implements SchemeFactory {
      public getHistoryTaskById_argsStandardScheme getScheme() {
        return new getHistoryTaskById_argsStandardScheme();
      }
    }

    private static class getHistoryTaskById_argsStandardScheme extends StandardScheme<getHistoryTaskById_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getHistoryTaskById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.id = iprot.readI64();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getHistoryTaskById_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI64(struct.id);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getHistoryTaskById_argsTupleSchemeFactory implements SchemeFactory {
      public getHistoryTaskById_argsTupleScheme getScheme() {
        return new getHistoryTaskById_argsTupleScheme();
      }
    }

    private static class getHistoryTaskById_argsTupleScheme extends TupleScheme<getHistoryTaskById_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getHistoryTaskById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetId()) {
          oprot.writeI64(struct.id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getHistoryTaskById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.id = iprot.readI64();
          struct.setIdIsSet(true);
        }
      }
    }

  }

  public static class getHistoryTaskById_result implements org.apache.thrift.TBase<getHistoryTaskById_result, getHistoryTaskById_result._Fields>, java.io.Serializable, Cloneable, Comparable<getHistoryTaskById_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getHistoryTaskById_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getHistoryTaskById_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getHistoryTaskById_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.HistoryTaskVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.HistoryTaskVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getHistoryTaskById_result.class, metaDataMap);
    }

    public getHistoryTaskById_result() {
    }

    public getHistoryTaskById_result(
      com.froad.thrift.vo.HistoryTaskVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getHistoryTaskById_result(getHistoryTaskById_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.HistoryTaskVo(other.success);
      }
    }

    public getHistoryTaskById_result deepCopy() {
      return new getHistoryTaskById_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.HistoryTaskVo getSuccess() {
      return this.success;
    }

    public getHistoryTaskById_result setSuccess(com.froad.thrift.vo.HistoryTaskVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.HistoryTaskVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getHistoryTaskById_result)
        return this.equals((getHistoryTaskById_result)that);
      return false;
    }

    public boolean equals(getHistoryTaskById_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getHistoryTaskById_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getHistoryTaskById_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getHistoryTaskById_resultStandardSchemeFactory implements SchemeFactory {
      public getHistoryTaskById_resultStandardScheme getScheme() {
        return new getHistoryTaskById_resultStandardScheme();
      }
    }

    private static class getHistoryTaskById_resultStandardScheme extends StandardScheme<getHistoryTaskById_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getHistoryTaskById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.HistoryTaskVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getHistoryTaskById_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getHistoryTaskById_resultTupleSchemeFactory implements SchemeFactory {
      public getHistoryTaskById_resultTupleScheme getScheme() {
        return new getHistoryTaskById_resultTupleScheme();
      }
    }

    private static class getHistoryTaskById_resultTupleScheme extends TupleScheme<getHistoryTaskById_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getHistoryTaskById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getHistoryTaskById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.HistoryTaskVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getOneHistoryTask_args implements org.apache.thrift.TBase<getOneHistoryTask_args, getOneHistoryTask_args._Fields>, java.io.Serializable, Cloneable, Comparable<getOneHistoryTask_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOneHistoryTask_args");

    private static final org.apache.thrift.protocol.TField HISTORY_TASK_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("historyTaskVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOneHistoryTask_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOneHistoryTask_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.HistoryTaskVo historyTaskVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HISTORY_TASK_VO((short)1, "historyTaskVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HISTORY_TASK_VO
            return HISTORY_TASK_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HISTORY_TASK_VO, new org.apache.thrift.meta_data.FieldMetaData("historyTaskVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.HistoryTaskVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOneHistoryTask_args.class, metaDataMap);
    }

    public getOneHistoryTask_args() {
    }

    public getOneHistoryTask_args(
      com.froad.thrift.vo.HistoryTaskVo historyTaskVo)
    {
      this();
      this.historyTaskVo = historyTaskVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOneHistoryTask_args(getOneHistoryTask_args other) {
      if (other.isSetHistoryTaskVo()) {
        this.historyTaskVo = new com.froad.thrift.vo.HistoryTaskVo(other.historyTaskVo);
      }
    }

    public getOneHistoryTask_args deepCopy() {
      return new getOneHistoryTask_args(this);
    }

    @Override
    public void clear() {
      this.historyTaskVo = null;
    }

    public com.froad.thrift.vo.HistoryTaskVo getHistoryTaskVo() {
      return this.historyTaskVo;
    }

    public getOneHistoryTask_args setHistoryTaskVo(com.froad.thrift.vo.HistoryTaskVo historyTaskVo) {
      this.historyTaskVo = historyTaskVo;
      return this;
    }

    public void unsetHistoryTaskVo() {
      this.historyTaskVo = null;
    }

    /** Returns true if field historyTaskVo is set (has been assigned a value) and false otherwise */
    public boolean isSetHistoryTaskVo() {
      return this.historyTaskVo != null;
    }

    public void setHistoryTaskVoIsSet(boolean value) {
      if (!value) {
        this.historyTaskVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case HISTORY_TASK_VO:
        if (value == null) {
          unsetHistoryTaskVo();
        } else {
          setHistoryTaskVo((com.froad.thrift.vo.HistoryTaskVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case HISTORY_TASK_VO:
        return getHistoryTaskVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case HISTORY_TASK_VO:
        return isSetHistoryTaskVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOneHistoryTask_args)
        return this.equals((getOneHistoryTask_args)that);
      return false;
    }

    public boolean equals(getOneHistoryTask_args that) {
      if (that == null)
        return false;

      boolean this_present_historyTaskVo = true && this.isSetHistoryTaskVo();
      boolean that_present_historyTaskVo = true && that.isSetHistoryTaskVo();
      if (this_present_historyTaskVo || that_present_historyTaskVo) {
        if (!(this_present_historyTaskVo && that_present_historyTaskVo))
          return false;
        if (!this.historyTaskVo.equals(that.historyTaskVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_historyTaskVo = true && (isSetHistoryTaskVo());
      list.add(present_historyTaskVo);
      if (present_historyTaskVo)
        list.add(historyTaskVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(getOneHistoryTask_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetHistoryTaskVo()).compareTo(other.isSetHistoryTaskVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHistoryTaskVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.historyTaskVo, other.historyTaskVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOneHistoryTask_args(");
      boolean first = true;

      sb.append("historyTaskVo:");
      if (this.historyTaskVo == null) {
        sb.append("null");
      } else {
        sb.append(this.historyTaskVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (historyTaskVo != null) {
        historyTaskVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOneHistoryTask_argsStandardSchemeFactory implements SchemeFactory {
      public getOneHistoryTask_argsStandardScheme getScheme() {
        return new getOneHistoryTask_argsStandardScheme();
      }
    }

    private static class getOneHistoryTask_argsStandardScheme extends StandardScheme<getOneHistoryTask_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOneHistoryTask_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HISTORY_TASK_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.historyTaskVo = new com.froad.thrift.vo.HistoryTaskVo();
                struct.historyTaskVo.read(iprot);
                struct.setHistoryTaskVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOneHistoryTask_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.historyTaskVo != null) {
          oprot.writeFieldBegin(HISTORY_TASK_VO_FIELD_DESC);
          struct.historyTaskVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOneHistoryTask_argsTupleSchemeFactory implements SchemeFactory {
      public getOneHistoryTask_argsTupleScheme getScheme() {
        return new getOneHistoryTask_argsTupleScheme();
      }
    }

    private static class getOneHistoryTask_argsTupleScheme extends TupleScheme<getOneHistoryTask_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOneHistoryTask_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetHistoryTaskVo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetHistoryTaskVo()) {
          struct.historyTaskVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOneHistoryTask_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.historyTaskVo = new com.froad.thrift.vo.HistoryTaskVo();
          struct.historyTaskVo.read(iprot);
          struct.setHistoryTaskVoIsSet(true);
        }
      }
    }

  }

  public static class getOneHistoryTask_result implements org.apache.thrift.TBase<getOneHistoryTask_result, getOneHistoryTask_result._Fields>, java.io.Serializable, Cloneable, Comparable<getOneHistoryTask_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOneHistoryTask_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOneHistoryTask_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOneHistoryTask_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.HistoryTaskVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.HistoryTaskVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOneHistoryTask_result.class, metaDataMap);
    }

    public getOneHistoryTask_result() {
    }

    public getOneHistoryTask_result(
      com.froad.thrift.vo.HistoryTaskVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOneHistoryTask_result(getOneHistoryTask_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.HistoryTaskVo(other.success);
      }
    }

    public getOneHistoryTask_result deepCopy() {
      return new getOneHistoryTask_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.HistoryTaskVo getSuccess() {
      return this.success;
    }

    public getOneHistoryTask_result setSuccess(com.froad.thrift.vo.HistoryTaskVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.HistoryTaskVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOneHistoryTask_result)
        return this.equals((getOneHistoryTask_result)that);
      return false;
    }

    public boolean equals(getOneHistoryTask_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getOneHistoryTask_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOneHistoryTask_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOneHistoryTask_resultStandardSchemeFactory implements SchemeFactory {
      public getOneHistoryTask_resultStandardScheme getScheme() {
        return new getOneHistoryTask_resultStandardScheme();
      }
    }

    private static class getOneHistoryTask_resultStandardScheme extends StandardScheme<getOneHistoryTask_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOneHistoryTask_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.HistoryTaskVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOneHistoryTask_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOneHistoryTask_resultTupleSchemeFactory implements SchemeFactory {
      public getOneHistoryTask_resultTupleScheme getScheme() {
        return new getOneHistoryTask_resultTupleScheme();
      }
    }

    private static class getOneHistoryTask_resultTupleScheme extends TupleScheme<getOneHistoryTask_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOneHistoryTask_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOneHistoryTask_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.HistoryTaskVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class countHistoryTask_args implements org.apache.thrift.TBase<countHistoryTask_args, countHistoryTask_args._Fields>, java.io.Serializable, Cloneable, Comparable<countHistoryTask_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("countHistoryTask_args");

    private static final org.apache.thrift.protocol.TField HISTORY_TASK_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("historyTaskVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new countHistoryTask_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new countHistoryTask_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.HistoryTaskVo historyTaskVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HISTORY_TASK_VO((short)1, "historyTaskVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HISTORY_TASK_VO
            return HISTORY_TASK_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HISTORY_TASK_VO, new org.apache.thrift.meta_data.FieldMetaData("historyTaskVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.HistoryTaskVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(countHistoryTask_args.class, metaDataMap);
    }

    public countHistoryTask_args() {
    }

    public countHistoryTask_args(
      com.froad.thrift.vo.HistoryTaskVo historyTaskVo)
    {
      this();
      this.historyTaskVo = historyTaskVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public countHistoryTask_args(countHistoryTask_args other) {
      if (other.isSetHistoryTaskVo()) {
        this.historyTaskVo = new com.froad.thrift.vo.HistoryTaskVo(other.historyTaskVo);
      }
    }

    public countHistoryTask_args deepCopy() {
      return new countHistoryTask_args(this);
    }

    @Override
    public void clear() {
      this.historyTaskVo = null;
    }

    public com.froad.thrift.vo.HistoryTaskVo getHistoryTaskVo() {
      return this.historyTaskVo;
    }

    public countHistoryTask_args setHistoryTaskVo(com.froad.thrift.vo.HistoryTaskVo historyTaskVo) {
      this.historyTaskVo = historyTaskVo;
      return this;
    }

    public void unsetHistoryTaskVo() {
      this.historyTaskVo = null;
    }

    /** Returns true if field historyTaskVo is set (has been assigned a value) and false otherwise */
    public boolean isSetHistoryTaskVo() {
      return this.historyTaskVo != null;
    }

    public void setHistoryTaskVoIsSet(boolean value) {
      if (!value) {
        this.historyTaskVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case HISTORY_TASK_VO:
        if (value == null) {
          unsetHistoryTaskVo();
        } else {
          setHistoryTaskVo((com.froad.thrift.vo.HistoryTaskVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case HISTORY_TASK_VO:
        return getHistoryTaskVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case HISTORY_TASK_VO:
        return isSetHistoryTaskVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof countHistoryTask_args)
        return this.equals((countHistoryTask_args)that);
      return false;
    }

    public boolean equals(countHistoryTask_args that) {
      if (that == null)
        return false;

      boolean this_present_historyTaskVo = true && this.isSetHistoryTaskVo();
      boolean that_present_historyTaskVo = true && that.isSetHistoryTaskVo();
      if (this_present_historyTaskVo || that_present_historyTaskVo) {
        if (!(this_present_historyTaskVo && that_present_historyTaskVo))
          return false;
        if (!this.historyTaskVo.equals(that.historyTaskVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_historyTaskVo = true && (isSetHistoryTaskVo());
      list.add(present_historyTaskVo);
      if (present_historyTaskVo)
        list.add(historyTaskVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(countHistoryTask_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetHistoryTaskVo()).compareTo(other.isSetHistoryTaskVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHistoryTaskVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.historyTaskVo, other.historyTaskVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("countHistoryTask_args(");
      boolean first = true;

      sb.append("historyTaskVo:");
      if (this.historyTaskVo == null) {
        sb.append("null");
      } else {
        sb.append(this.historyTaskVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (historyTaskVo != null) {
        historyTaskVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class countHistoryTask_argsStandardSchemeFactory implements SchemeFactory {
      public countHistoryTask_argsStandardScheme getScheme() {
        return new countHistoryTask_argsStandardScheme();
      }
    }

    private static class countHistoryTask_argsStandardScheme extends StandardScheme<countHistoryTask_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, countHistoryTask_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HISTORY_TASK_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.historyTaskVo = new com.froad.thrift.vo.HistoryTaskVo();
                struct.historyTaskVo.read(iprot);
                struct.setHistoryTaskVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, countHistoryTask_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.historyTaskVo != null) {
          oprot.writeFieldBegin(HISTORY_TASK_VO_FIELD_DESC);
          struct.historyTaskVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class countHistoryTask_argsTupleSchemeFactory implements SchemeFactory {
      public countHistoryTask_argsTupleScheme getScheme() {
        return new countHistoryTask_argsTupleScheme();
      }
    }

    private static class countHistoryTask_argsTupleScheme extends TupleScheme<countHistoryTask_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, countHistoryTask_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetHistoryTaskVo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetHistoryTaskVo()) {
          struct.historyTaskVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, countHistoryTask_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.historyTaskVo = new com.froad.thrift.vo.HistoryTaskVo();
          struct.historyTaskVo.read(iprot);
          struct.setHistoryTaskVoIsSet(true);
        }
      }
    }

  }

  public static class countHistoryTask_result implements org.apache.thrift.TBase<countHistoryTask_result, countHistoryTask_result._Fields>, java.io.Serializable, Cloneable, Comparable<countHistoryTask_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("countHistoryTask_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new countHistoryTask_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new countHistoryTask_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(countHistoryTask_result.class, metaDataMap);
    }

    public countHistoryTask_result() {
    }

    public countHistoryTask_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public countHistoryTask_result(countHistoryTask_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public countHistoryTask_result deepCopy() {
      return new countHistoryTask_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public countHistoryTask_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof countHistoryTask_result)
        return this.equals((countHistoryTask_result)that);
      return false;
    }

    public boolean equals(countHistoryTask_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(countHistoryTask_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("countHistoryTask_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class countHistoryTask_resultStandardSchemeFactory implements SchemeFactory {
      public countHistoryTask_resultStandardScheme getScheme() {
        return new countHistoryTask_resultStandardScheme();
      }
    }

    private static class countHistoryTask_resultStandardScheme extends StandardScheme<countHistoryTask_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, countHistoryTask_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, countHistoryTask_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class countHistoryTask_resultTupleSchemeFactory implements SchemeFactory {
      public countHistoryTask_resultTupleScheme getScheme() {
        return new countHistoryTask_resultTupleScheme();
      }
    }

    private static class countHistoryTask_resultTupleScheme extends TupleScheme<countHistoryTask_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, countHistoryTask_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, countHistoryTask_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getHistoryTask_args implements org.apache.thrift.TBase<getHistoryTask_args, getHistoryTask_args._Fields>, java.io.Serializable, Cloneable, Comparable<getHistoryTask_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getHistoryTask_args");

    private static final org.apache.thrift.protocol.TField HISTORY_TASK_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("historyTaskVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getHistoryTask_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getHistoryTask_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.HistoryTaskVo historyTaskVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HISTORY_TASK_VO((short)1, "historyTaskVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HISTORY_TASK_VO
            return HISTORY_TASK_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HISTORY_TASK_VO, new org.apache.thrift.meta_data.FieldMetaData("historyTaskVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.HistoryTaskVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getHistoryTask_args.class, metaDataMap);
    }

    public getHistoryTask_args() {
    }

    public getHistoryTask_args(
      com.froad.thrift.vo.HistoryTaskVo historyTaskVo)
    {
      this();
      this.historyTaskVo = historyTaskVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getHistoryTask_args(getHistoryTask_args other) {
      if (other.isSetHistoryTaskVo()) {
        this.historyTaskVo = new com.froad.thrift.vo.HistoryTaskVo(other.historyTaskVo);
      }
    }

    public getHistoryTask_args deepCopy() {
      return new getHistoryTask_args(this);
    }

    @Override
    public void clear() {
      this.historyTaskVo = null;
    }

    public com.froad.thrift.vo.HistoryTaskVo getHistoryTaskVo() {
      return this.historyTaskVo;
    }

    public getHistoryTask_args setHistoryTaskVo(com.froad.thrift.vo.HistoryTaskVo historyTaskVo) {
      this.historyTaskVo = historyTaskVo;
      return this;
    }

    public void unsetHistoryTaskVo() {
      this.historyTaskVo = null;
    }

    /** Returns true if field historyTaskVo is set (has been assigned a value) and false otherwise */
    public boolean isSetHistoryTaskVo() {
      return this.historyTaskVo != null;
    }

    public void setHistoryTaskVoIsSet(boolean value) {
      if (!value) {
        this.historyTaskVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case HISTORY_TASK_VO:
        if (value == null) {
          unsetHistoryTaskVo();
        } else {
          setHistoryTaskVo((com.froad.thrift.vo.HistoryTaskVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case HISTORY_TASK_VO:
        return getHistoryTaskVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case HISTORY_TASK_VO:
        return isSetHistoryTaskVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getHistoryTask_args)
        return this.equals((getHistoryTask_args)that);
      return false;
    }

    public boolean equals(getHistoryTask_args that) {
      if (that == null)
        return false;

      boolean this_present_historyTaskVo = true && this.isSetHistoryTaskVo();
      boolean that_present_historyTaskVo = true && that.isSetHistoryTaskVo();
      if (this_present_historyTaskVo || that_present_historyTaskVo) {
        if (!(this_present_historyTaskVo && that_present_historyTaskVo))
          return false;
        if (!this.historyTaskVo.equals(that.historyTaskVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_historyTaskVo = true && (isSetHistoryTaskVo());
      list.add(present_historyTaskVo);
      if (present_historyTaskVo)
        list.add(historyTaskVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(getHistoryTask_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetHistoryTaskVo()).compareTo(other.isSetHistoryTaskVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHistoryTaskVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.historyTaskVo, other.historyTaskVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getHistoryTask_args(");
      boolean first = true;

      sb.append("historyTaskVo:");
      if (this.historyTaskVo == null) {
        sb.append("null");
      } else {
        sb.append(this.historyTaskVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (historyTaskVo != null) {
        historyTaskVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getHistoryTask_argsStandardSchemeFactory implements SchemeFactory {
      public getHistoryTask_argsStandardScheme getScheme() {
        return new getHistoryTask_argsStandardScheme();
      }
    }

    private static class getHistoryTask_argsStandardScheme extends StandardScheme<getHistoryTask_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getHistoryTask_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HISTORY_TASK_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.historyTaskVo = new com.froad.thrift.vo.HistoryTaskVo();
                struct.historyTaskVo.read(iprot);
                struct.setHistoryTaskVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getHistoryTask_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.historyTaskVo != null) {
          oprot.writeFieldBegin(HISTORY_TASK_VO_FIELD_DESC);
          struct.historyTaskVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getHistoryTask_argsTupleSchemeFactory implements SchemeFactory {
      public getHistoryTask_argsTupleScheme getScheme() {
        return new getHistoryTask_argsTupleScheme();
      }
    }

    private static class getHistoryTask_argsTupleScheme extends TupleScheme<getHistoryTask_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getHistoryTask_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetHistoryTaskVo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetHistoryTaskVo()) {
          struct.historyTaskVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getHistoryTask_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.historyTaskVo = new com.froad.thrift.vo.HistoryTaskVo();
          struct.historyTaskVo.read(iprot);
          struct.setHistoryTaskVoIsSet(true);
        }
      }
    }

  }

  public static class getHistoryTask_result implements org.apache.thrift.TBase<getHistoryTask_result, getHistoryTask_result._Fields>, java.io.Serializable, Cloneable, Comparable<getHistoryTask_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getHistoryTask_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getHistoryTask_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getHistoryTask_resultTupleSchemeFactory());
    }

    public List<com.froad.thrift.vo.HistoryTaskVo> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.HistoryTaskVo.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getHistoryTask_result.class, metaDataMap);
    }

    public getHistoryTask_result() {
    }

    public getHistoryTask_result(
      List<com.froad.thrift.vo.HistoryTaskVo> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getHistoryTask_result(getHistoryTask_result other) {
      if (other.isSetSuccess()) {
        List<com.froad.thrift.vo.HistoryTaskVo> __this__success = new ArrayList<com.froad.thrift.vo.HistoryTaskVo>(other.success.size());
        for (com.froad.thrift.vo.HistoryTaskVo other_element : other.success) {
          __this__success.add(new com.froad.thrift.vo.HistoryTaskVo(other_element));
        }
        this.success = __this__success;
      }
    }

    public getHistoryTask_result deepCopy() {
      return new getHistoryTask_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.froad.thrift.vo.HistoryTaskVo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.froad.thrift.vo.HistoryTaskVo elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.froad.thrift.vo.HistoryTaskVo>();
      }
      this.success.add(elem);
    }

    public List<com.froad.thrift.vo.HistoryTaskVo> getSuccess() {
      return this.success;
    }

    public getHistoryTask_result setSuccess(List<com.froad.thrift.vo.HistoryTaskVo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.froad.thrift.vo.HistoryTaskVo>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getHistoryTask_result)
        return this.equals((getHistoryTask_result)that);
      return false;
    }

    public boolean equals(getHistoryTask_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getHistoryTask_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getHistoryTask_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getHistoryTask_resultStandardSchemeFactory implements SchemeFactory {
      public getHistoryTask_resultStandardScheme getScheme() {
        return new getHistoryTask_resultStandardScheme();
      }
    }

    private static class getHistoryTask_resultStandardScheme extends StandardScheme<getHistoryTask_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getHistoryTask_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.success = new ArrayList<com.froad.thrift.vo.HistoryTaskVo>(_list0.size);
                  com.froad.thrift.vo.HistoryTaskVo _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    _elem1 = new com.froad.thrift.vo.HistoryTaskVo();
                    _elem1.read(iprot);
                    struct.success.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getHistoryTask_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.froad.thrift.vo.HistoryTaskVo _iter3 : struct.success)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getHistoryTask_resultTupleSchemeFactory implements SchemeFactory {
      public getHistoryTask_resultTupleScheme getScheme() {
        return new getHistoryTask_resultTupleScheme();
      }
    }

    private static class getHistoryTask_resultTupleScheme extends TupleScheme<getHistoryTask_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getHistoryTask_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.froad.thrift.vo.HistoryTaskVo _iter4 : struct.success)
            {
              _iter4.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getHistoryTask_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.froad.thrift.vo.HistoryTaskVo>(_list5.size);
            com.froad.thrift.vo.HistoryTaskVo _elem6;
            for (int _i7 = 0; _i7 < _list5.size; ++_i7)
            {
              _elem6 = new com.froad.thrift.vo.HistoryTaskVo();
              _elem6.read(iprot);
              struct.success.add(_elem6);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getHistoryTaskByPage_args implements org.apache.thrift.TBase<getHistoryTaskByPage_args, getHistoryTaskByPage_args._Fields>, java.io.Serializable, Cloneable, Comparable<getHistoryTaskByPage_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getHistoryTaskByPage_args");

    private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField HISTORY_TASK_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("historyTaskVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getHistoryTaskByPage_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getHistoryTaskByPage_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.PageVo page; // required
    public com.froad.thrift.vo.HistoryTaskVo historyTaskVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PAGE((short)1, "page"),
      HISTORY_TASK_VO((short)2, "historyTaskVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PAGE
            return PAGE;
          case 2: // HISTORY_TASK_VO
            return HISTORY_TASK_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.PageVo.class)));
      tmpMap.put(_Fields.HISTORY_TASK_VO, new org.apache.thrift.meta_data.FieldMetaData("historyTaskVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.HistoryTaskVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getHistoryTaskByPage_args.class, metaDataMap);
    }

    public getHistoryTaskByPage_args() {
    }

    public getHistoryTaskByPage_args(
      com.froad.thrift.vo.PageVo page,
      com.froad.thrift.vo.HistoryTaskVo historyTaskVo)
    {
      this();
      this.page = page;
      this.historyTaskVo = historyTaskVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getHistoryTaskByPage_args(getHistoryTaskByPage_args other) {
      if (other.isSetPage()) {
        this.page = new com.froad.thrift.vo.PageVo(other.page);
      }
      if (other.isSetHistoryTaskVo()) {
        this.historyTaskVo = new com.froad.thrift.vo.HistoryTaskVo(other.historyTaskVo);
      }
    }

    public getHistoryTaskByPage_args deepCopy() {
      return new getHistoryTaskByPage_args(this);
    }

    @Override
    public void clear() {
      this.page = null;
      this.historyTaskVo = null;
    }

    public com.froad.thrift.vo.PageVo getPage() {
      return this.page;
    }

    public getHistoryTaskByPage_args setPage(com.froad.thrift.vo.PageVo page) {
      this.page = page;
      return this;
    }

    public void unsetPage() {
      this.page = null;
    }

    /** Returns true if field page is set (has been assigned a value) and false otherwise */
    public boolean isSetPage() {
      return this.page != null;
    }

    public void setPageIsSet(boolean value) {
      if (!value) {
        this.page = null;
      }
    }

    public com.froad.thrift.vo.HistoryTaskVo getHistoryTaskVo() {
      return this.historyTaskVo;
    }

    public getHistoryTaskByPage_args setHistoryTaskVo(com.froad.thrift.vo.HistoryTaskVo historyTaskVo) {
      this.historyTaskVo = historyTaskVo;
      return this;
    }

    public void unsetHistoryTaskVo() {
      this.historyTaskVo = null;
    }

    /** Returns true if field historyTaskVo is set (has been assigned a value) and false otherwise */
    public boolean isSetHistoryTaskVo() {
      return this.historyTaskVo != null;
    }

    public void setHistoryTaskVoIsSet(boolean value) {
      if (!value) {
        this.historyTaskVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PAGE:
        if (value == null) {
          unsetPage();
        } else {
          setPage((com.froad.thrift.vo.PageVo)value);
        }
        break;

      case HISTORY_TASK_VO:
        if (value == null) {
          unsetHistoryTaskVo();
        } else {
          setHistoryTaskVo((com.froad.thrift.vo.HistoryTaskVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PAGE:
        return getPage();

      case HISTORY_TASK_VO:
        return getHistoryTaskVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PAGE:
        return isSetPage();
      case HISTORY_TASK_VO:
        return isSetHistoryTaskVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getHistoryTaskByPage_args)
        return this.equals((getHistoryTaskByPage_args)that);
      return false;
    }

    public boolean equals(getHistoryTaskByPage_args that) {
      if (that == null)
        return false;

      boolean this_present_page = true && this.isSetPage();
      boolean that_present_page = true && that.isSetPage();
      if (this_present_page || that_present_page) {
        if (!(this_present_page && that_present_page))
          return false;
        if (!this.page.equals(that.page))
          return false;
      }

      boolean this_present_historyTaskVo = true && this.isSetHistoryTaskVo();
      boolean that_present_historyTaskVo = true && that.isSetHistoryTaskVo();
      if (this_present_historyTaskVo || that_present_historyTaskVo) {
        if (!(this_present_historyTaskVo && that_present_historyTaskVo))
          return false;
        if (!this.historyTaskVo.equals(that.historyTaskVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_page = true && (isSetPage());
      list.add(present_page);
      if (present_page)
        list.add(page);

      boolean present_historyTaskVo = true && (isSetHistoryTaskVo());
      list.add(present_historyTaskVo);
      if (present_historyTaskVo)
        list.add(historyTaskVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(getHistoryTaskByPage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetHistoryTaskVo()).compareTo(other.isSetHistoryTaskVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHistoryTaskVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.historyTaskVo, other.historyTaskVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getHistoryTaskByPage_args(");
      boolean first = true;

      sb.append("page:");
      if (this.page == null) {
        sb.append("null");
      } else {
        sb.append(this.page);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("historyTaskVo:");
      if (this.historyTaskVo == null) {
        sb.append("null");
      } else {
        sb.append(this.historyTaskVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (page != null) {
        page.validate();
      }
      if (historyTaskVo != null) {
        historyTaskVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getHistoryTaskByPage_argsStandardSchemeFactory implements SchemeFactory {
      public getHistoryTaskByPage_argsStandardScheme getScheme() {
        return new getHistoryTaskByPage_argsStandardScheme();
      }
    }

    private static class getHistoryTaskByPage_argsStandardScheme extends StandardScheme<getHistoryTaskByPage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getHistoryTaskByPage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.page = new com.froad.thrift.vo.PageVo();
                struct.page.read(iprot);
                struct.setPageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // HISTORY_TASK_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.historyTaskVo = new com.froad.thrift.vo.HistoryTaskVo();
                struct.historyTaskVo.read(iprot);
                struct.setHistoryTaskVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getHistoryTaskByPage_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.page != null) {
          oprot.writeFieldBegin(PAGE_FIELD_DESC);
          struct.page.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.historyTaskVo != null) {
          oprot.writeFieldBegin(HISTORY_TASK_VO_FIELD_DESC);
          struct.historyTaskVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getHistoryTaskByPage_argsTupleSchemeFactory implements SchemeFactory {
      public getHistoryTaskByPage_argsTupleScheme getScheme() {
        return new getHistoryTaskByPage_argsTupleScheme();
      }
    }

    private static class getHistoryTaskByPage_argsTupleScheme extends TupleScheme<getHistoryTaskByPage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getHistoryTaskByPage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPage()) {
          optionals.set(0);
        }
        if (struct.isSetHistoryTaskVo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPage()) {
          struct.page.write(oprot);
        }
        if (struct.isSetHistoryTaskVo()) {
          struct.historyTaskVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getHistoryTaskByPage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.page = new com.froad.thrift.vo.PageVo();
          struct.page.read(iprot);
          struct.setPageIsSet(true);
        }
        if (incoming.get(1)) {
          struct.historyTaskVo = new com.froad.thrift.vo.HistoryTaskVo();
          struct.historyTaskVo.read(iprot);
          struct.setHistoryTaskVoIsSet(true);
        }
      }
    }

  }

  public static class getHistoryTaskByPage_result implements org.apache.thrift.TBase<getHistoryTaskByPage_result, getHistoryTaskByPage_result._Fields>, java.io.Serializable, Cloneable, Comparable<getHistoryTaskByPage_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getHistoryTaskByPage_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getHistoryTaskByPage_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getHistoryTaskByPage_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.HistoryTaskPageVoRes success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.HistoryTaskPageVoRes.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getHistoryTaskByPage_result.class, metaDataMap);
    }

    public getHistoryTaskByPage_result() {
    }

    public getHistoryTaskByPage_result(
      com.froad.thrift.vo.HistoryTaskPageVoRes success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getHistoryTaskByPage_result(getHistoryTaskByPage_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.HistoryTaskPageVoRes(other.success);
      }
    }

    public getHistoryTaskByPage_result deepCopy() {
      return new getHistoryTaskByPage_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.HistoryTaskPageVoRes getSuccess() {
      return this.success;
    }

    public getHistoryTaskByPage_result setSuccess(com.froad.thrift.vo.HistoryTaskPageVoRes success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.HistoryTaskPageVoRes)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getHistoryTaskByPage_result)
        return this.equals((getHistoryTaskByPage_result)that);
      return false;
    }

    public boolean equals(getHistoryTaskByPage_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getHistoryTaskByPage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getHistoryTaskByPage_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getHistoryTaskByPage_resultStandardSchemeFactory implements SchemeFactory {
      public getHistoryTaskByPage_resultStandardScheme getScheme() {
        return new getHistoryTaskByPage_resultStandardScheme();
      }
    }

    private static class getHistoryTaskByPage_resultStandardScheme extends StandardScheme<getHistoryTaskByPage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getHistoryTaskByPage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.HistoryTaskPageVoRes();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getHistoryTaskByPage_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getHistoryTaskByPage_resultTupleSchemeFactory implements SchemeFactory {
      public getHistoryTaskByPage_resultTupleScheme getScheme() {
        return new getHistoryTaskByPage_resultTupleScheme();
      }
    }

    private static class getHistoryTaskByPage_resultTupleScheme extends TupleScheme<getHistoryTaskByPage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getHistoryTaskByPage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getHistoryTaskByPage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.HistoryTaskPageVoRes();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
