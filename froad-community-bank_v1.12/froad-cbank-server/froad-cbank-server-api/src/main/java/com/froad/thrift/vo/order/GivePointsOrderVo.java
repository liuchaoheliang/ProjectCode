/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.vo.order;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 查询商品送积分明细-订单信息
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class GivePointsOrderVo implements org.apache.thrift.TBase<GivePointsOrderVo, GivePointsOrderVo._Fields>, java.io.Serializable, Cloneable, Comparable<GivePointsOrderVo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GivePointsOrderVo");

  private static final org.apache.thrift.protocol.TField ORDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("orderId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField SUB_ORDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("subOrderId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PAYMENT_METHOD_FIELD_DESC = new org.apache.thrift.protocol.TField("paymentMethod", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField ORDER_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("orderStatus", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField REFUND_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("refundState", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField TOTAL_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("totalPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField TOTAL_GIVE_POINTS_FIELD_DESC = new org.apache.thrift.protocol.TField("totalGivePoints", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField PRODUCT_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("productList", org.apache.thrift.protocol.TType.LIST, (short)9);
  private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)10);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new GivePointsOrderVoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new GivePointsOrderVoTupleSchemeFactory());
  }

  /**
   * 订单编号
   */
  public String orderId; // required
  /**
   * 子订单号
   */
  public String subOrderId; // required
  /**
   * 支付方式(对应枚举类PaymentMethod)
   */
  public String paymentMethod; // required
  /**
   * 订单状态(对应枚举类OrderStatus)
   */
  public String orderStatus; // required
  /**
   * 订单子状态，即退款状态(对应枚举类SubOrderRefundState)：{"1":"未退款"，"2":"退款中","3":"退款完成","4":"部分退款"}
   */
  public String refundState; // required
  /**
   * 下单时间
   */
  public String createTime; // required
  /**
   * 订单总金额
   */
  public double totalPrice; // required
  /**
   * 子订单总送积分值
   */
  public double totalGivePoints; // required
  /**
   * 商品信息
   */
  public List<GivePointsProductVo> productList; // required
  /**
   * 客户端号
   */
  public String clientId; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 订单编号
     */
    ORDER_ID((short)1, "orderId"),
    /**
     * 子订单号
     */
    SUB_ORDER_ID((short)2, "subOrderId"),
    /**
     * 支付方式(对应枚举类PaymentMethod)
     */
    PAYMENT_METHOD((short)3, "paymentMethod"),
    /**
     * 订单状态(对应枚举类OrderStatus)
     */
    ORDER_STATUS((short)4, "orderStatus"),
    /**
     * 订单子状态，即退款状态(对应枚举类SubOrderRefundState)：{"1":"未退款"，"2":"退款中","3":"退款完成","4":"部分退款"}
     */
    REFUND_STATE((short)5, "refundState"),
    /**
     * 下单时间
     */
    CREATE_TIME((short)6, "createTime"),
    /**
     * 订单总金额
     */
    TOTAL_PRICE((short)7, "totalPrice"),
    /**
     * 子订单总送积分值
     */
    TOTAL_GIVE_POINTS((short)8, "totalGivePoints"),
    /**
     * 商品信息
     */
    PRODUCT_LIST((short)9, "productList"),
    /**
     * 客户端号
     */
    CLIENT_ID((short)10, "clientId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ORDER_ID
          return ORDER_ID;
        case 2: // SUB_ORDER_ID
          return SUB_ORDER_ID;
        case 3: // PAYMENT_METHOD
          return PAYMENT_METHOD;
        case 4: // ORDER_STATUS
          return ORDER_STATUS;
        case 5: // REFUND_STATE
          return REFUND_STATE;
        case 6: // CREATE_TIME
          return CREATE_TIME;
        case 7: // TOTAL_PRICE
          return TOTAL_PRICE;
        case 8: // TOTAL_GIVE_POINTS
          return TOTAL_GIVE_POINTS;
        case 9: // PRODUCT_LIST
          return PRODUCT_LIST;
        case 10: // CLIENT_ID
          return CLIENT_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TOTALPRICE_ISSET_ID = 0;
  private static final int __TOTALGIVEPOINTS_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ORDER_ID, new org.apache.thrift.meta_data.FieldMetaData("orderId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SUB_ORDER_ID, new org.apache.thrift.meta_data.FieldMetaData("subOrderId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAYMENT_METHOD, new org.apache.thrift.meta_data.FieldMetaData("paymentMethod", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORDER_STATUS, new org.apache.thrift.meta_data.FieldMetaData("orderStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REFUND_STATE, new org.apache.thrift.meta_data.FieldMetaData("refundState", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TOTAL_PRICE, new org.apache.thrift.meta_data.FieldMetaData("totalPrice", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.TOTAL_GIVE_POINTS, new org.apache.thrift.meta_data.FieldMetaData("totalGivePoints", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PRODUCT_LIST, new org.apache.thrift.meta_data.FieldMetaData("productList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "GivePointsProductVo"))));
    tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GivePointsOrderVo.class, metaDataMap);
  }

  public GivePointsOrderVo() {
  }

  public GivePointsOrderVo(
    String orderId,
    String subOrderId,
    String paymentMethod,
    String orderStatus,
    String refundState,
    String createTime,
    double totalPrice,
    double totalGivePoints,
    List<GivePointsProductVo> productList,
    String clientId)
  {
    this();
    this.orderId = orderId;
    this.subOrderId = subOrderId;
    this.paymentMethod = paymentMethod;
    this.orderStatus = orderStatus;
    this.refundState = refundState;
    this.createTime = createTime;
    this.totalPrice = totalPrice;
    setTotalPriceIsSet(true);
    this.totalGivePoints = totalGivePoints;
    setTotalGivePointsIsSet(true);
    this.productList = productList;
    this.clientId = clientId;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public GivePointsOrderVo(GivePointsOrderVo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetOrderId()) {
      this.orderId = other.orderId;
    }
    if (other.isSetSubOrderId()) {
      this.subOrderId = other.subOrderId;
    }
    if (other.isSetPaymentMethod()) {
      this.paymentMethod = other.paymentMethod;
    }
    if (other.isSetOrderStatus()) {
      this.orderStatus = other.orderStatus;
    }
    if (other.isSetRefundState()) {
      this.refundState = other.refundState;
    }
    if (other.isSetCreateTime()) {
      this.createTime = other.createTime;
    }
    this.totalPrice = other.totalPrice;
    this.totalGivePoints = other.totalGivePoints;
    if (other.isSetProductList()) {
      List<GivePointsProductVo> __this__productList = new ArrayList<GivePointsProductVo>(other.productList.size());
      for (GivePointsProductVo other_element : other.productList) {
        __this__productList.add(other_element);
      }
      this.productList = __this__productList;
    }
    if (other.isSetClientId()) {
      this.clientId = other.clientId;
    }
  }

  public GivePointsOrderVo deepCopy() {
    return new GivePointsOrderVo(this);
  }

  @Override
  public void clear() {
    this.orderId = null;
    this.subOrderId = null;
    this.paymentMethod = null;
    this.orderStatus = null;
    this.refundState = null;
    this.createTime = null;
    setTotalPriceIsSet(false);
    this.totalPrice = 0.0;
    setTotalGivePointsIsSet(false);
    this.totalGivePoints = 0.0;
    this.productList = null;
    this.clientId = null;
  }

  /**
   * 订单编号
   */
  public String getOrderId() {
    return this.orderId;
  }

  /**
   * 订单编号
   */
  public GivePointsOrderVo setOrderId(String orderId) {
    this.orderId = orderId;
    return this;
  }

  public void unsetOrderId() {
    this.orderId = null;
  }

  /** Returns true if field orderId is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderId() {
    return this.orderId != null;
  }

  public void setOrderIdIsSet(boolean value) {
    if (!value) {
      this.orderId = null;
    }
  }

  /**
   * 子订单号
   */
  public String getSubOrderId() {
    return this.subOrderId;
  }

  /**
   * 子订单号
   */
  public GivePointsOrderVo setSubOrderId(String subOrderId) {
    this.subOrderId = subOrderId;
    return this;
  }

  public void unsetSubOrderId() {
    this.subOrderId = null;
  }

  /** Returns true if field subOrderId is set (has been assigned a value) and false otherwise */
  public boolean isSetSubOrderId() {
    return this.subOrderId != null;
  }

  public void setSubOrderIdIsSet(boolean value) {
    if (!value) {
      this.subOrderId = null;
    }
  }

  /**
   * 支付方式(对应枚举类PaymentMethod)
   */
  public String getPaymentMethod() {
    return this.paymentMethod;
  }

  /**
   * 支付方式(对应枚举类PaymentMethod)
   */
  public GivePointsOrderVo setPaymentMethod(String paymentMethod) {
    this.paymentMethod = paymentMethod;
    return this;
  }

  public void unsetPaymentMethod() {
    this.paymentMethod = null;
  }

  /** Returns true if field paymentMethod is set (has been assigned a value) and false otherwise */
  public boolean isSetPaymentMethod() {
    return this.paymentMethod != null;
  }

  public void setPaymentMethodIsSet(boolean value) {
    if (!value) {
      this.paymentMethod = null;
    }
  }

  /**
   * 订单状态(对应枚举类OrderStatus)
   */
  public String getOrderStatus() {
    return this.orderStatus;
  }

  /**
   * 订单状态(对应枚举类OrderStatus)
   */
  public GivePointsOrderVo setOrderStatus(String orderStatus) {
    this.orderStatus = orderStatus;
    return this;
  }

  public void unsetOrderStatus() {
    this.orderStatus = null;
  }

  /** Returns true if field orderStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderStatus() {
    return this.orderStatus != null;
  }

  public void setOrderStatusIsSet(boolean value) {
    if (!value) {
      this.orderStatus = null;
    }
  }

  /**
   * 订单子状态，即退款状态(对应枚举类SubOrderRefundState)：{"1":"未退款"，"2":"退款中","3":"退款完成","4":"部分退款"}
   */
  public String getRefundState() {
    return this.refundState;
  }

  /**
   * 订单子状态，即退款状态(对应枚举类SubOrderRefundState)：{"1":"未退款"，"2":"退款中","3":"退款完成","4":"部分退款"}
   */
  public GivePointsOrderVo setRefundState(String refundState) {
    this.refundState = refundState;
    return this;
  }

  public void unsetRefundState() {
    this.refundState = null;
  }

  /** Returns true if field refundState is set (has been assigned a value) and false otherwise */
  public boolean isSetRefundState() {
    return this.refundState != null;
  }

  public void setRefundStateIsSet(boolean value) {
    if (!value) {
      this.refundState = null;
    }
  }

  /**
   * 下单时间
   */
  public String getCreateTime() {
    return this.createTime;
  }

  /**
   * 下单时间
   */
  public GivePointsOrderVo setCreateTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  public void unsetCreateTime() {
    this.createTime = null;
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return this.createTime != null;
  }

  public void setCreateTimeIsSet(boolean value) {
    if (!value) {
      this.createTime = null;
    }
  }

  /**
   * 订单总金额
   */
  public double getTotalPrice() {
    return this.totalPrice;
  }

  /**
   * 订单总金额
   */
  public GivePointsOrderVo setTotalPrice(double totalPrice) {
    this.totalPrice = totalPrice;
    setTotalPriceIsSet(true);
    return this;
  }

  public void unsetTotalPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALPRICE_ISSET_ID);
  }

  /** Returns true if field totalPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALPRICE_ISSET_ID);
  }

  public void setTotalPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALPRICE_ISSET_ID, value);
  }

  /**
   * 子订单总送积分值
   */
  public double getTotalGivePoints() {
    return this.totalGivePoints;
  }

  /**
   * 子订单总送积分值
   */
  public GivePointsOrderVo setTotalGivePoints(double totalGivePoints) {
    this.totalGivePoints = totalGivePoints;
    setTotalGivePointsIsSet(true);
    return this;
  }

  public void unsetTotalGivePoints() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALGIVEPOINTS_ISSET_ID);
  }

  /** Returns true if field totalGivePoints is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalGivePoints() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALGIVEPOINTS_ISSET_ID);
  }

  public void setTotalGivePointsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALGIVEPOINTS_ISSET_ID, value);
  }

  public int getProductListSize() {
    return (this.productList == null) ? 0 : this.productList.size();
  }

  public java.util.Iterator<GivePointsProductVo> getProductListIterator() {
    return (this.productList == null) ? null : this.productList.iterator();
  }

  public void addToProductList(GivePointsProductVo elem) {
    if (this.productList == null) {
      this.productList = new ArrayList<GivePointsProductVo>();
    }
    this.productList.add(elem);
  }

  /**
   * 商品信息
   */
  public List<GivePointsProductVo> getProductList() {
    return this.productList;
  }

  /**
   * 商品信息
   */
  public GivePointsOrderVo setProductList(List<GivePointsProductVo> productList) {
    this.productList = productList;
    return this;
  }

  public void unsetProductList() {
    this.productList = null;
  }

  /** Returns true if field productList is set (has been assigned a value) and false otherwise */
  public boolean isSetProductList() {
    return this.productList != null;
  }

  public void setProductListIsSet(boolean value) {
    if (!value) {
      this.productList = null;
    }
  }

  /**
   * 客户端号
   */
  public String getClientId() {
    return this.clientId;
  }

  /**
   * 客户端号
   */
  public GivePointsOrderVo setClientId(String clientId) {
    this.clientId = clientId;
    return this;
  }

  public void unsetClientId() {
    this.clientId = null;
  }

  /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
  public boolean isSetClientId() {
    return this.clientId != null;
  }

  public void setClientIdIsSet(boolean value) {
    if (!value) {
      this.clientId = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ORDER_ID:
      if (value == null) {
        unsetOrderId();
      } else {
        setOrderId((String)value);
      }
      break;

    case SUB_ORDER_ID:
      if (value == null) {
        unsetSubOrderId();
      } else {
        setSubOrderId((String)value);
      }
      break;

    case PAYMENT_METHOD:
      if (value == null) {
        unsetPaymentMethod();
      } else {
        setPaymentMethod((String)value);
      }
      break;

    case ORDER_STATUS:
      if (value == null) {
        unsetOrderStatus();
      } else {
        setOrderStatus((String)value);
      }
      break;

    case REFUND_STATE:
      if (value == null) {
        unsetRefundState();
      } else {
        setRefundState((String)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((String)value);
      }
      break;

    case TOTAL_PRICE:
      if (value == null) {
        unsetTotalPrice();
      } else {
        setTotalPrice((Double)value);
      }
      break;

    case TOTAL_GIVE_POINTS:
      if (value == null) {
        unsetTotalGivePoints();
      } else {
        setTotalGivePoints((Double)value);
      }
      break;

    case PRODUCT_LIST:
      if (value == null) {
        unsetProductList();
      } else {
        setProductList((List<GivePointsProductVo>)value);
      }
      break;

    case CLIENT_ID:
      if (value == null) {
        unsetClientId();
      } else {
        setClientId((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ORDER_ID:
      return getOrderId();

    case SUB_ORDER_ID:
      return getSubOrderId();

    case PAYMENT_METHOD:
      return getPaymentMethod();

    case ORDER_STATUS:
      return getOrderStatus();

    case REFUND_STATE:
      return getRefundState();

    case CREATE_TIME:
      return getCreateTime();

    case TOTAL_PRICE:
      return Double.valueOf(getTotalPrice());

    case TOTAL_GIVE_POINTS:
      return Double.valueOf(getTotalGivePoints());

    case PRODUCT_LIST:
      return getProductList();

    case CLIENT_ID:
      return getClientId();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ORDER_ID:
      return isSetOrderId();
    case SUB_ORDER_ID:
      return isSetSubOrderId();
    case PAYMENT_METHOD:
      return isSetPaymentMethod();
    case ORDER_STATUS:
      return isSetOrderStatus();
    case REFUND_STATE:
      return isSetRefundState();
    case CREATE_TIME:
      return isSetCreateTime();
    case TOTAL_PRICE:
      return isSetTotalPrice();
    case TOTAL_GIVE_POINTS:
      return isSetTotalGivePoints();
    case PRODUCT_LIST:
      return isSetProductList();
    case CLIENT_ID:
      return isSetClientId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof GivePointsOrderVo)
      return this.equals((GivePointsOrderVo)that);
    return false;
  }

  public boolean equals(GivePointsOrderVo that) {
    if (that == null)
      return false;

    boolean this_present_orderId = true && this.isSetOrderId();
    boolean that_present_orderId = true && that.isSetOrderId();
    if (this_present_orderId || that_present_orderId) {
      if (!(this_present_orderId && that_present_orderId))
        return false;
      if (!this.orderId.equals(that.orderId))
        return false;
    }

    boolean this_present_subOrderId = true && this.isSetSubOrderId();
    boolean that_present_subOrderId = true && that.isSetSubOrderId();
    if (this_present_subOrderId || that_present_subOrderId) {
      if (!(this_present_subOrderId && that_present_subOrderId))
        return false;
      if (!this.subOrderId.equals(that.subOrderId))
        return false;
    }

    boolean this_present_paymentMethod = true && this.isSetPaymentMethod();
    boolean that_present_paymentMethod = true && that.isSetPaymentMethod();
    if (this_present_paymentMethod || that_present_paymentMethod) {
      if (!(this_present_paymentMethod && that_present_paymentMethod))
        return false;
      if (!this.paymentMethod.equals(that.paymentMethod))
        return false;
    }

    boolean this_present_orderStatus = true && this.isSetOrderStatus();
    boolean that_present_orderStatus = true && that.isSetOrderStatus();
    if (this_present_orderStatus || that_present_orderStatus) {
      if (!(this_present_orderStatus && that_present_orderStatus))
        return false;
      if (!this.orderStatus.equals(that.orderStatus))
        return false;
    }

    boolean this_present_refundState = true && this.isSetRefundState();
    boolean that_present_refundState = true && that.isSetRefundState();
    if (this_present_refundState || that_present_refundState) {
      if (!(this_present_refundState && that_present_refundState))
        return false;
      if (!this.refundState.equals(that.refundState))
        return false;
    }

    boolean this_present_createTime = true && this.isSetCreateTime();
    boolean that_present_createTime = true && that.isSetCreateTime();
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (!this.createTime.equals(that.createTime))
        return false;
    }

    boolean this_present_totalPrice = true;
    boolean that_present_totalPrice = true;
    if (this_present_totalPrice || that_present_totalPrice) {
      if (!(this_present_totalPrice && that_present_totalPrice))
        return false;
      if (this.totalPrice != that.totalPrice)
        return false;
    }

    boolean this_present_totalGivePoints = true;
    boolean that_present_totalGivePoints = true;
    if (this_present_totalGivePoints || that_present_totalGivePoints) {
      if (!(this_present_totalGivePoints && that_present_totalGivePoints))
        return false;
      if (this.totalGivePoints != that.totalGivePoints)
        return false;
    }

    boolean this_present_productList = true && this.isSetProductList();
    boolean that_present_productList = true && that.isSetProductList();
    if (this_present_productList || that_present_productList) {
      if (!(this_present_productList && that_present_productList))
        return false;
      if (!this.productList.equals(that.productList))
        return false;
    }

    boolean this_present_clientId = true && this.isSetClientId();
    boolean that_present_clientId = true && that.isSetClientId();
    if (this_present_clientId || that_present_clientId) {
      if (!(this_present_clientId && that_present_clientId))
        return false;
      if (!this.clientId.equals(that.clientId))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_orderId = true && (isSetOrderId());
    list.add(present_orderId);
    if (present_orderId)
      list.add(orderId);

    boolean present_subOrderId = true && (isSetSubOrderId());
    list.add(present_subOrderId);
    if (present_subOrderId)
      list.add(subOrderId);

    boolean present_paymentMethod = true && (isSetPaymentMethod());
    list.add(present_paymentMethod);
    if (present_paymentMethod)
      list.add(paymentMethod);

    boolean present_orderStatus = true && (isSetOrderStatus());
    list.add(present_orderStatus);
    if (present_orderStatus)
      list.add(orderStatus);

    boolean present_refundState = true && (isSetRefundState());
    list.add(present_refundState);
    if (present_refundState)
      list.add(refundState);

    boolean present_createTime = true && (isSetCreateTime());
    list.add(present_createTime);
    if (present_createTime)
      list.add(createTime);

    boolean present_totalPrice = true;
    list.add(present_totalPrice);
    if (present_totalPrice)
      list.add(totalPrice);

    boolean present_totalGivePoints = true;
    list.add(present_totalGivePoints);
    if (present_totalGivePoints)
      list.add(totalGivePoints);

    boolean present_productList = true && (isSetProductList());
    list.add(present_productList);
    if (present_productList)
      list.add(productList);

    boolean present_clientId = true && (isSetClientId());
    list.add(present_clientId);
    if (present_clientId)
      list.add(clientId);

    return list.hashCode();
  }

  @Override
  public int compareTo(GivePointsOrderVo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetOrderId()).compareTo(other.isSetOrderId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderId, other.orderId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubOrderId()).compareTo(other.isSetSubOrderId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubOrderId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subOrderId, other.subOrderId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPaymentMethod()).compareTo(other.isSetPaymentMethod());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPaymentMethod()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paymentMethod, other.paymentMethod);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderStatus()).compareTo(other.isSetOrderStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderStatus, other.orderStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRefundState()).compareTo(other.isSetRefundState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRefundState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refundState, other.refundState);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalPrice()).compareTo(other.isSetTotalPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalPrice, other.totalPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalGivePoints()).compareTo(other.isSetTotalGivePoints());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalGivePoints()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalGivePoints, other.totalGivePoints);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductList()).compareTo(other.isSetProductList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productList, other.productList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClientId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("GivePointsOrderVo(");
    boolean first = true;

    sb.append("orderId:");
    if (this.orderId == null) {
      sb.append("null");
    } else {
      sb.append(this.orderId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("subOrderId:");
    if (this.subOrderId == null) {
      sb.append("null");
    } else {
      sb.append(this.subOrderId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("paymentMethod:");
    if (this.paymentMethod == null) {
      sb.append("null");
    } else {
      sb.append(this.paymentMethod);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("orderStatus:");
    if (this.orderStatus == null) {
      sb.append("null");
    } else {
      sb.append(this.orderStatus);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("refundState:");
    if (this.refundState == null) {
      sb.append("null");
    } else {
      sb.append(this.refundState);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTime:");
    if (this.createTime == null) {
      sb.append("null");
    } else {
      sb.append(this.createTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalPrice:");
    sb.append(this.totalPrice);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalGivePoints:");
    sb.append(this.totalGivePoints);
    first = false;
    if (!first) sb.append(", ");
    sb.append("productList:");
    if (this.productList == null) {
      sb.append("null");
    } else {
      sb.append(this.productList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("clientId:");
    if (this.clientId == null) {
      sb.append("null");
    } else {
      sb.append(this.clientId);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class GivePointsOrderVoStandardSchemeFactory implements SchemeFactory {
    public GivePointsOrderVoStandardScheme getScheme() {
      return new GivePointsOrderVoStandardScheme();
    }
  }

  private static class GivePointsOrderVoStandardScheme extends StandardScheme<GivePointsOrderVo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, GivePointsOrderVo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ORDER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orderId = iprot.readString();
              struct.setOrderIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SUB_ORDER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.subOrderId = iprot.readString();
              struct.setSubOrderIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PAYMENT_METHOD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.paymentMethod = iprot.readString();
              struct.setPaymentMethodIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ORDER_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orderStatus = iprot.readString();
              struct.setOrderStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // REFUND_STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.refundState = iprot.readString();
              struct.setRefundStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createTime = iprot.readString();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TOTAL_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.totalPrice = iprot.readDouble();
              struct.setTotalPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // TOTAL_GIVE_POINTS
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.totalGivePoints = iprot.readDouble();
              struct.setTotalGivePointsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // PRODUCT_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list120 = iprot.readListBegin();
                struct.productList = new ArrayList<GivePointsProductVo>(_list120.size);
                GivePointsProductVo _elem121;
                for (int _i122 = 0; _i122 < _list120.size; ++_i122)
                {
                  _elem121 = new GivePointsProductVo();
                  _elem121.read(iprot);
                  struct.productList.add(_elem121);
                }
                iprot.readListEnd();
              }
              struct.setProductListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // CLIENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clientId = iprot.readString();
              struct.setClientIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, GivePointsOrderVo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.orderId != null) {
        oprot.writeFieldBegin(ORDER_ID_FIELD_DESC);
        oprot.writeString(struct.orderId);
        oprot.writeFieldEnd();
      }
      if (struct.subOrderId != null) {
        oprot.writeFieldBegin(SUB_ORDER_ID_FIELD_DESC);
        oprot.writeString(struct.subOrderId);
        oprot.writeFieldEnd();
      }
      if (struct.paymentMethod != null) {
        oprot.writeFieldBegin(PAYMENT_METHOD_FIELD_DESC);
        oprot.writeString(struct.paymentMethod);
        oprot.writeFieldEnd();
      }
      if (struct.orderStatus != null) {
        oprot.writeFieldBegin(ORDER_STATUS_FIELD_DESC);
        oprot.writeString(struct.orderStatus);
        oprot.writeFieldEnd();
      }
      if (struct.refundState != null) {
        oprot.writeFieldBegin(REFUND_STATE_FIELD_DESC);
        oprot.writeString(struct.refundState);
        oprot.writeFieldEnd();
      }
      if (struct.createTime != null) {
        oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
        oprot.writeString(struct.createTime);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TOTAL_PRICE_FIELD_DESC);
      oprot.writeDouble(struct.totalPrice);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_GIVE_POINTS_FIELD_DESC);
      oprot.writeDouble(struct.totalGivePoints);
      oprot.writeFieldEnd();
      if (struct.productList != null) {
        oprot.writeFieldBegin(PRODUCT_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.productList.size()));
          for (GivePointsProductVo _iter123 : struct.productList)
          {
            _iter123.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.clientId != null) {
        oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
        oprot.writeString(struct.clientId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class GivePointsOrderVoTupleSchemeFactory implements SchemeFactory {
    public GivePointsOrderVoTupleScheme getScheme() {
      return new GivePointsOrderVoTupleScheme();
    }
  }

  private static class GivePointsOrderVoTupleScheme extends TupleScheme<GivePointsOrderVo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, GivePointsOrderVo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetOrderId()) {
        optionals.set(0);
      }
      if (struct.isSetSubOrderId()) {
        optionals.set(1);
      }
      if (struct.isSetPaymentMethod()) {
        optionals.set(2);
      }
      if (struct.isSetOrderStatus()) {
        optionals.set(3);
      }
      if (struct.isSetRefundState()) {
        optionals.set(4);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(5);
      }
      if (struct.isSetTotalPrice()) {
        optionals.set(6);
      }
      if (struct.isSetTotalGivePoints()) {
        optionals.set(7);
      }
      if (struct.isSetProductList()) {
        optionals.set(8);
      }
      if (struct.isSetClientId()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetOrderId()) {
        oprot.writeString(struct.orderId);
      }
      if (struct.isSetSubOrderId()) {
        oprot.writeString(struct.subOrderId);
      }
      if (struct.isSetPaymentMethod()) {
        oprot.writeString(struct.paymentMethod);
      }
      if (struct.isSetOrderStatus()) {
        oprot.writeString(struct.orderStatus);
      }
      if (struct.isSetRefundState()) {
        oprot.writeString(struct.refundState);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeString(struct.createTime);
      }
      if (struct.isSetTotalPrice()) {
        oprot.writeDouble(struct.totalPrice);
      }
      if (struct.isSetTotalGivePoints()) {
        oprot.writeDouble(struct.totalGivePoints);
      }
      if (struct.isSetProductList()) {
        {
          oprot.writeI32(struct.productList.size());
          for (GivePointsProductVo _iter124 : struct.productList)
          {
            _iter124.write(oprot);
          }
        }
      }
      if (struct.isSetClientId()) {
        oprot.writeString(struct.clientId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, GivePointsOrderVo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.orderId = iprot.readString();
        struct.setOrderIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.subOrderId = iprot.readString();
        struct.setSubOrderIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.paymentMethod = iprot.readString();
        struct.setPaymentMethodIsSet(true);
      }
      if (incoming.get(3)) {
        struct.orderStatus = iprot.readString();
        struct.setOrderStatusIsSet(true);
      }
      if (incoming.get(4)) {
        struct.refundState = iprot.readString();
        struct.setRefundStateIsSet(true);
      }
      if (incoming.get(5)) {
        struct.createTime = iprot.readString();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.totalPrice = iprot.readDouble();
        struct.setTotalPriceIsSet(true);
      }
      if (incoming.get(7)) {
        struct.totalGivePoints = iprot.readDouble();
        struct.setTotalGivePointsIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TList _list125 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.productList = new ArrayList<GivePointsProductVo>(_list125.size);
          GivePointsProductVo _elem126;
          for (int _i127 = 0; _i127 < _list125.size; ++_i127)
          {
            _elem126 = new GivePointsProductVo();
            _elem126.read(iprot);
            struct.productList.add(_elem126);
          }
        }
        struct.setProductListIsSet(true);
      }
      if (incoming.get(9)) {
        struct.clientId = iprot.readString();
        struct.setClientIdIsSet(true);
      }
    }
  }

}

