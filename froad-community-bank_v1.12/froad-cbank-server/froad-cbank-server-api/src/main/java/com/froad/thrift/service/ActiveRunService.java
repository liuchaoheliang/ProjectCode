/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class ActiveRunService {

  /**
   * 营销活动运行 服务
   */
  public interface Iface extends com.froad.thrift.monitor.service.BizMonitorService.Iface {

    /**
     * 进入购物车
     * 
     * @param shoppingCartReqVo
     */
    public com.froad.thrift.vo.active.ShoppingCartResVo goShoppingCart(com.froad.thrift.vo.active.ShoppingCartReqVo shoppingCartReqVo) throws org.apache.thrift.TException;

    /**
     * 订单校验
     * <br>
     * CheckOrderRes.Result.resultCode = 0000 成功
     * CheckOrderRes.orderResList[n] 订单的各种满减金额
     * <br>
     * CheckOrderRes.Result.resultCode = 6666 没有传递活动
     * CheckOrderRes.orderResList = null
     * <br>
     * CheckOrderRes.Result.resultCode = 9999 活动校验失败
     * CheckOrderRes.Result.resultDesc 失败信息
     * <br>
     * 
     * @param checkOrderReqVo
     */
    public com.froad.thrift.vo.active.CheckOrderResVo checkOrder(com.froad.thrift.vo.active.CheckOrderReqVo checkOrderReqVo) throws org.apache.thrift.TException;

    /**
     * 订单校验失败回退
     * 
     * @param failureGoBackReqVo
     */
    public com.froad.thrift.vo.ResultVo createOrderFailureGoBack(com.froad.thrift.vo.active.FailureGoBackReqVo failureGoBackReqVo) throws org.apache.thrift.TException;

    /**
     * 创建营销订单
     * <br>
     * CreateResult.Result.resultCode = 0000 成功
     * CreateResult.id = 营销订单编号
     * <br>
     * CreateResult.Result.resultCode != 不成功
     * CreateResult.Result.resultDesc = 失败信息
     * 
     * @param createMarketOrderReqVo
     */
    public com.froad.thrift.vo.active.CreateResultVo createMarketOrder(com.froad.thrift.vo.active.CreateMarketOrderReqVo createMarketOrderReqVo) throws org.apache.thrift.TException;

    /**
     * 订单查询
     * 
     * @param findMarketOrderReqVo
     */
    public com.froad.thrift.vo.active.FindMarketOrderResVo findMarketOrder(com.froad.thrift.vo.active.FindMarketOrderReqVo findMarketOrderReqVo) throws org.apache.thrift.TException;

    /**
     * 订单关闭
     * 
     * @param closeMarketOrderReqVo
     */
    public com.froad.thrift.vo.ResultVo closeMarketOrder(com.froad.thrift.vo.active.CloseMarketOrderReqVo closeMarketOrderReqVo) throws org.apache.thrift.TException;

    /**
     * 订单退款
     * 
     * @param returnMarketOrderReqVo
     */
    public com.froad.thrift.vo.active.ReturnMarketOrderResVo returnMarketOrder(com.froad.thrift.vo.active.ReturnMarketOrderReqVo returnMarketOrderReqVo) throws org.apache.thrift.TException;

    /**
     * 订单退款回退
     * 
     * @param returnMarketOrderBackReqVo
     */
    public com.froad.thrift.vo.ResultVo returnMarketOrderBack(com.froad.thrift.vo.active.ReturnMarketOrderBackReqVo returnMarketOrderBackReqVo) throws org.apache.thrift.TException;

    /**
     * 订单修改
     * 
     * @param updateMarketOrderReqVo
     */
    public com.froad.thrift.vo.active.UpdateMarketOrderResVo updateMarketOrder(com.froad.thrift.vo.active.UpdateMarketOrderReqVo updateMarketOrderReqVo) throws org.apache.thrift.TException;

    /**
     * 结算接口
     * 
     * @param settlementMarkOrderReq
     */
    public com.froad.thrift.vo.active.SettlementMarkOrderRes settlementMarkOrder(com.froad.thrift.vo.active.SettlementMarkOrderReq settlementMarkOrderReq) throws org.apache.thrift.TException;

    /**
     * 新增商品时候判断是否有符合条件的满减
     * 
     * @param putFullCutReqVo
     */
    public com.froad.thrift.vo.ResultVo putFullCut(com.froad.thrift.vo.active.PutFullCutReqVo putFullCutReqVo) throws org.apache.thrift.TException;

    /**
     * 支付前满赠资格检查
     * 
     * @param fullGiveCheckReqVo
     */
    public com.froad.thrift.vo.ResultVo fullGiveCheck(com.froad.thrift.vo.active.FullGiveCheckReqVo fullGiveCheckReqVo) throws org.apache.thrift.TException;

  }

  public interface AsyncIface extends com.froad.thrift.monitor.service.BizMonitorService .AsyncIface {

    public void goShoppingCart(com.froad.thrift.vo.active.ShoppingCartReqVo shoppingCartReqVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void checkOrder(com.froad.thrift.vo.active.CheckOrderReqVo checkOrderReqVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void createOrderFailureGoBack(com.froad.thrift.vo.active.FailureGoBackReqVo failureGoBackReqVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void createMarketOrder(com.froad.thrift.vo.active.CreateMarketOrderReqVo createMarketOrderReqVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void findMarketOrder(com.froad.thrift.vo.active.FindMarketOrderReqVo findMarketOrderReqVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void closeMarketOrder(com.froad.thrift.vo.active.CloseMarketOrderReqVo closeMarketOrderReqVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void returnMarketOrder(com.froad.thrift.vo.active.ReturnMarketOrderReqVo returnMarketOrderReqVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void returnMarketOrderBack(com.froad.thrift.vo.active.ReturnMarketOrderBackReqVo returnMarketOrderBackReqVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateMarketOrder(com.froad.thrift.vo.active.UpdateMarketOrderReqVo updateMarketOrderReqVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void settlementMarkOrder(com.froad.thrift.vo.active.SettlementMarkOrderReq settlementMarkOrderReq, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void putFullCut(com.froad.thrift.vo.active.PutFullCutReqVo putFullCutReqVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void fullGiveCheck(com.froad.thrift.vo.active.FullGiveCheckReqVo fullGiveCheckReqVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends com.froad.thrift.monitor.service.BizMonitorService.Client implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public com.froad.thrift.vo.active.ShoppingCartResVo goShoppingCart(com.froad.thrift.vo.active.ShoppingCartReqVo shoppingCartReqVo) throws org.apache.thrift.TException
    {
      send_goShoppingCart(shoppingCartReqVo);
      return recv_goShoppingCart();
    }

    public void send_goShoppingCart(com.froad.thrift.vo.active.ShoppingCartReqVo shoppingCartReqVo) throws org.apache.thrift.TException
    {
      goShoppingCart_args args = new goShoppingCart_args();
      args.setShoppingCartReqVo(shoppingCartReqVo);
      sendBase("goShoppingCart", args);
    }

    public com.froad.thrift.vo.active.ShoppingCartResVo recv_goShoppingCart() throws org.apache.thrift.TException
    {
      goShoppingCart_result result = new goShoppingCart_result();
      receiveBase(result, "goShoppingCart");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "goShoppingCart failed: unknown result");
    }

    public com.froad.thrift.vo.active.CheckOrderResVo checkOrder(com.froad.thrift.vo.active.CheckOrderReqVo checkOrderReqVo) throws org.apache.thrift.TException
    {
      send_checkOrder(checkOrderReqVo);
      return recv_checkOrder();
    }

    public void send_checkOrder(com.froad.thrift.vo.active.CheckOrderReqVo checkOrderReqVo) throws org.apache.thrift.TException
    {
      checkOrder_args args = new checkOrder_args();
      args.setCheckOrderReqVo(checkOrderReqVo);
      sendBase("checkOrder", args);
    }

    public com.froad.thrift.vo.active.CheckOrderResVo recv_checkOrder() throws org.apache.thrift.TException
    {
      checkOrder_result result = new checkOrder_result();
      receiveBase(result, "checkOrder");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "checkOrder failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo createOrderFailureGoBack(com.froad.thrift.vo.active.FailureGoBackReqVo failureGoBackReqVo) throws org.apache.thrift.TException
    {
      send_createOrderFailureGoBack(failureGoBackReqVo);
      return recv_createOrderFailureGoBack();
    }

    public void send_createOrderFailureGoBack(com.froad.thrift.vo.active.FailureGoBackReqVo failureGoBackReqVo) throws org.apache.thrift.TException
    {
      createOrderFailureGoBack_args args = new createOrderFailureGoBack_args();
      args.setFailureGoBackReqVo(failureGoBackReqVo);
      sendBase("createOrderFailureGoBack", args);
    }

    public com.froad.thrift.vo.ResultVo recv_createOrderFailureGoBack() throws org.apache.thrift.TException
    {
      createOrderFailureGoBack_result result = new createOrderFailureGoBack_result();
      receiveBase(result, "createOrderFailureGoBack");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createOrderFailureGoBack failed: unknown result");
    }

    public com.froad.thrift.vo.active.CreateResultVo createMarketOrder(com.froad.thrift.vo.active.CreateMarketOrderReqVo createMarketOrderReqVo) throws org.apache.thrift.TException
    {
      send_createMarketOrder(createMarketOrderReqVo);
      return recv_createMarketOrder();
    }

    public void send_createMarketOrder(com.froad.thrift.vo.active.CreateMarketOrderReqVo createMarketOrderReqVo) throws org.apache.thrift.TException
    {
      createMarketOrder_args args = new createMarketOrder_args();
      args.setCreateMarketOrderReqVo(createMarketOrderReqVo);
      sendBase("createMarketOrder", args);
    }

    public com.froad.thrift.vo.active.CreateResultVo recv_createMarketOrder() throws org.apache.thrift.TException
    {
      createMarketOrder_result result = new createMarketOrder_result();
      receiveBase(result, "createMarketOrder");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createMarketOrder failed: unknown result");
    }

    public com.froad.thrift.vo.active.FindMarketOrderResVo findMarketOrder(com.froad.thrift.vo.active.FindMarketOrderReqVo findMarketOrderReqVo) throws org.apache.thrift.TException
    {
      send_findMarketOrder(findMarketOrderReqVo);
      return recv_findMarketOrder();
    }

    public void send_findMarketOrder(com.froad.thrift.vo.active.FindMarketOrderReqVo findMarketOrderReqVo) throws org.apache.thrift.TException
    {
      findMarketOrder_args args = new findMarketOrder_args();
      args.setFindMarketOrderReqVo(findMarketOrderReqVo);
      sendBase("findMarketOrder", args);
    }

    public com.froad.thrift.vo.active.FindMarketOrderResVo recv_findMarketOrder() throws org.apache.thrift.TException
    {
      findMarketOrder_result result = new findMarketOrder_result();
      receiveBase(result, "findMarketOrder");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findMarketOrder failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo closeMarketOrder(com.froad.thrift.vo.active.CloseMarketOrderReqVo closeMarketOrderReqVo) throws org.apache.thrift.TException
    {
      send_closeMarketOrder(closeMarketOrderReqVo);
      return recv_closeMarketOrder();
    }

    public void send_closeMarketOrder(com.froad.thrift.vo.active.CloseMarketOrderReqVo closeMarketOrderReqVo) throws org.apache.thrift.TException
    {
      closeMarketOrder_args args = new closeMarketOrder_args();
      args.setCloseMarketOrderReqVo(closeMarketOrderReqVo);
      sendBase("closeMarketOrder", args);
    }

    public com.froad.thrift.vo.ResultVo recv_closeMarketOrder() throws org.apache.thrift.TException
    {
      closeMarketOrder_result result = new closeMarketOrder_result();
      receiveBase(result, "closeMarketOrder");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "closeMarketOrder failed: unknown result");
    }

    public com.froad.thrift.vo.active.ReturnMarketOrderResVo returnMarketOrder(com.froad.thrift.vo.active.ReturnMarketOrderReqVo returnMarketOrderReqVo) throws org.apache.thrift.TException
    {
      send_returnMarketOrder(returnMarketOrderReqVo);
      return recv_returnMarketOrder();
    }

    public void send_returnMarketOrder(com.froad.thrift.vo.active.ReturnMarketOrderReqVo returnMarketOrderReqVo) throws org.apache.thrift.TException
    {
      returnMarketOrder_args args = new returnMarketOrder_args();
      args.setReturnMarketOrderReqVo(returnMarketOrderReqVo);
      sendBase("returnMarketOrder", args);
    }

    public com.froad.thrift.vo.active.ReturnMarketOrderResVo recv_returnMarketOrder() throws org.apache.thrift.TException
    {
      returnMarketOrder_result result = new returnMarketOrder_result();
      receiveBase(result, "returnMarketOrder");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "returnMarketOrder failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo returnMarketOrderBack(com.froad.thrift.vo.active.ReturnMarketOrderBackReqVo returnMarketOrderBackReqVo) throws org.apache.thrift.TException
    {
      send_returnMarketOrderBack(returnMarketOrderBackReqVo);
      return recv_returnMarketOrderBack();
    }

    public void send_returnMarketOrderBack(com.froad.thrift.vo.active.ReturnMarketOrderBackReqVo returnMarketOrderBackReqVo) throws org.apache.thrift.TException
    {
      returnMarketOrderBack_args args = new returnMarketOrderBack_args();
      args.setReturnMarketOrderBackReqVo(returnMarketOrderBackReqVo);
      sendBase("returnMarketOrderBack", args);
    }

    public com.froad.thrift.vo.ResultVo recv_returnMarketOrderBack() throws org.apache.thrift.TException
    {
      returnMarketOrderBack_result result = new returnMarketOrderBack_result();
      receiveBase(result, "returnMarketOrderBack");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "returnMarketOrderBack failed: unknown result");
    }

    public com.froad.thrift.vo.active.UpdateMarketOrderResVo updateMarketOrder(com.froad.thrift.vo.active.UpdateMarketOrderReqVo updateMarketOrderReqVo) throws org.apache.thrift.TException
    {
      send_updateMarketOrder(updateMarketOrderReqVo);
      return recv_updateMarketOrder();
    }

    public void send_updateMarketOrder(com.froad.thrift.vo.active.UpdateMarketOrderReqVo updateMarketOrderReqVo) throws org.apache.thrift.TException
    {
      updateMarketOrder_args args = new updateMarketOrder_args();
      args.setUpdateMarketOrderReqVo(updateMarketOrderReqVo);
      sendBase("updateMarketOrder", args);
    }

    public com.froad.thrift.vo.active.UpdateMarketOrderResVo recv_updateMarketOrder() throws org.apache.thrift.TException
    {
      updateMarketOrder_result result = new updateMarketOrder_result();
      receiveBase(result, "updateMarketOrder");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateMarketOrder failed: unknown result");
    }

    public com.froad.thrift.vo.active.SettlementMarkOrderRes settlementMarkOrder(com.froad.thrift.vo.active.SettlementMarkOrderReq settlementMarkOrderReq) throws org.apache.thrift.TException
    {
      send_settlementMarkOrder(settlementMarkOrderReq);
      return recv_settlementMarkOrder();
    }

    public void send_settlementMarkOrder(com.froad.thrift.vo.active.SettlementMarkOrderReq settlementMarkOrderReq) throws org.apache.thrift.TException
    {
      settlementMarkOrder_args args = new settlementMarkOrder_args();
      args.setSettlementMarkOrderReq(settlementMarkOrderReq);
      sendBase("settlementMarkOrder", args);
    }

    public com.froad.thrift.vo.active.SettlementMarkOrderRes recv_settlementMarkOrder() throws org.apache.thrift.TException
    {
      settlementMarkOrder_result result = new settlementMarkOrder_result();
      receiveBase(result, "settlementMarkOrder");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "settlementMarkOrder failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo putFullCut(com.froad.thrift.vo.active.PutFullCutReqVo putFullCutReqVo) throws org.apache.thrift.TException
    {
      send_putFullCut(putFullCutReqVo);
      return recv_putFullCut();
    }

    public void send_putFullCut(com.froad.thrift.vo.active.PutFullCutReqVo putFullCutReqVo) throws org.apache.thrift.TException
    {
      putFullCut_args args = new putFullCut_args();
      args.setPutFullCutReqVo(putFullCutReqVo);
      sendBase("putFullCut", args);
    }

    public com.froad.thrift.vo.ResultVo recv_putFullCut() throws org.apache.thrift.TException
    {
      putFullCut_result result = new putFullCut_result();
      receiveBase(result, "putFullCut");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "putFullCut failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo fullGiveCheck(com.froad.thrift.vo.active.FullGiveCheckReqVo fullGiveCheckReqVo) throws org.apache.thrift.TException
    {
      send_fullGiveCheck(fullGiveCheckReqVo);
      return recv_fullGiveCheck();
    }

    public void send_fullGiveCheck(com.froad.thrift.vo.active.FullGiveCheckReqVo fullGiveCheckReqVo) throws org.apache.thrift.TException
    {
      fullGiveCheck_args args = new fullGiveCheck_args();
      args.setFullGiveCheckReqVo(fullGiveCheckReqVo);
      sendBase("fullGiveCheck", args);
    }

    public com.froad.thrift.vo.ResultVo recv_fullGiveCheck() throws org.apache.thrift.TException
    {
      fullGiveCheck_result result = new fullGiveCheck_result();
      receiveBase(result, "fullGiveCheck");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "fullGiveCheck failed: unknown result");
    }

  }
  public static class AsyncClient extends com.froad.thrift.monitor.service.BizMonitorService.AsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void goShoppingCart(com.froad.thrift.vo.active.ShoppingCartReqVo shoppingCartReqVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      goShoppingCart_call method_call = new goShoppingCart_call(shoppingCartReqVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class goShoppingCart_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.active.ShoppingCartReqVo shoppingCartReqVo;
      public goShoppingCart_call(com.froad.thrift.vo.active.ShoppingCartReqVo shoppingCartReqVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.shoppingCartReqVo = shoppingCartReqVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("goShoppingCart", org.apache.thrift.protocol.TMessageType.CALL, 0));
        goShoppingCart_args args = new goShoppingCart_args();
        args.setShoppingCartReqVo(shoppingCartReqVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.active.ShoppingCartResVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_goShoppingCart();
      }
    }

    public void checkOrder(com.froad.thrift.vo.active.CheckOrderReqVo checkOrderReqVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      checkOrder_call method_call = new checkOrder_call(checkOrderReqVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class checkOrder_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.active.CheckOrderReqVo checkOrderReqVo;
      public checkOrder_call(com.froad.thrift.vo.active.CheckOrderReqVo checkOrderReqVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.checkOrderReqVo = checkOrderReqVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("checkOrder", org.apache.thrift.protocol.TMessageType.CALL, 0));
        checkOrder_args args = new checkOrder_args();
        args.setCheckOrderReqVo(checkOrderReqVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.active.CheckOrderResVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_checkOrder();
      }
    }

    public void createOrderFailureGoBack(com.froad.thrift.vo.active.FailureGoBackReqVo failureGoBackReqVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createOrderFailureGoBack_call method_call = new createOrderFailureGoBack_call(failureGoBackReqVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createOrderFailureGoBack_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.active.FailureGoBackReqVo failureGoBackReqVo;
      public createOrderFailureGoBack_call(com.froad.thrift.vo.active.FailureGoBackReqVo failureGoBackReqVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.failureGoBackReqVo = failureGoBackReqVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createOrderFailureGoBack", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createOrderFailureGoBack_args args = new createOrderFailureGoBack_args();
        args.setFailureGoBackReqVo(failureGoBackReqVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createOrderFailureGoBack();
      }
    }

    public void createMarketOrder(com.froad.thrift.vo.active.CreateMarketOrderReqVo createMarketOrderReqVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createMarketOrder_call method_call = new createMarketOrder_call(createMarketOrderReqVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createMarketOrder_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.active.CreateMarketOrderReqVo createMarketOrderReqVo;
      public createMarketOrder_call(com.froad.thrift.vo.active.CreateMarketOrderReqVo createMarketOrderReqVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.createMarketOrderReqVo = createMarketOrderReqVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createMarketOrder", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createMarketOrder_args args = new createMarketOrder_args();
        args.setCreateMarketOrderReqVo(createMarketOrderReqVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.active.CreateResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createMarketOrder();
      }
    }

    public void findMarketOrder(com.froad.thrift.vo.active.FindMarketOrderReqVo findMarketOrderReqVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findMarketOrder_call method_call = new findMarketOrder_call(findMarketOrderReqVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findMarketOrder_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.active.FindMarketOrderReqVo findMarketOrderReqVo;
      public findMarketOrder_call(com.froad.thrift.vo.active.FindMarketOrderReqVo findMarketOrderReqVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.findMarketOrderReqVo = findMarketOrderReqVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findMarketOrder", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findMarketOrder_args args = new findMarketOrder_args();
        args.setFindMarketOrderReqVo(findMarketOrderReqVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.active.FindMarketOrderResVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findMarketOrder();
      }
    }

    public void closeMarketOrder(com.froad.thrift.vo.active.CloseMarketOrderReqVo closeMarketOrderReqVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      closeMarketOrder_call method_call = new closeMarketOrder_call(closeMarketOrderReqVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class closeMarketOrder_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.active.CloseMarketOrderReqVo closeMarketOrderReqVo;
      public closeMarketOrder_call(com.froad.thrift.vo.active.CloseMarketOrderReqVo closeMarketOrderReqVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.closeMarketOrderReqVo = closeMarketOrderReqVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("closeMarketOrder", org.apache.thrift.protocol.TMessageType.CALL, 0));
        closeMarketOrder_args args = new closeMarketOrder_args();
        args.setCloseMarketOrderReqVo(closeMarketOrderReqVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_closeMarketOrder();
      }
    }

    public void returnMarketOrder(com.froad.thrift.vo.active.ReturnMarketOrderReqVo returnMarketOrderReqVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      returnMarketOrder_call method_call = new returnMarketOrder_call(returnMarketOrderReqVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class returnMarketOrder_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.active.ReturnMarketOrderReqVo returnMarketOrderReqVo;
      public returnMarketOrder_call(com.froad.thrift.vo.active.ReturnMarketOrderReqVo returnMarketOrderReqVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.returnMarketOrderReqVo = returnMarketOrderReqVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("returnMarketOrder", org.apache.thrift.protocol.TMessageType.CALL, 0));
        returnMarketOrder_args args = new returnMarketOrder_args();
        args.setReturnMarketOrderReqVo(returnMarketOrderReqVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.active.ReturnMarketOrderResVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_returnMarketOrder();
      }
    }

    public void returnMarketOrderBack(com.froad.thrift.vo.active.ReturnMarketOrderBackReqVo returnMarketOrderBackReqVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      returnMarketOrderBack_call method_call = new returnMarketOrderBack_call(returnMarketOrderBackReqVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class returnMarketOrderBack_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.active.ReturnMarketOrderBackReqVo returnMarketOrderBackReqVo;
      public returnMarketOrderBack_call(com.froad.thrift.vo.active.ReturnMarketOrderBackReqVo returnMarketOrderBackReqVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.returnMarketOrderBackReqVo = returnMarketOrderBackReqVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("returnMarketOrderBack", org.apache.thrift.protocol.TMessageType.CALL, 0));
        returnMarketOrderBack_args args = new returnMarketOrderBack_args();
        args.setReturnMarketOrderBackReqVo(returnMarketOrderBackReqVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_returnMarketOrderBack();
      }
    }

    public void updateMarketOrder(com.froad.thrift.vo.active.UpdateMarketOrderReqVo updateMarketOrderReqVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateMarketOrder_call method_call = new updateMarketOrder_call(updateMarketOrderReqVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateMarketOrder_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.active.UpdateMarketOrderReqVo updateMarketOrderReqVo;
      public updateMarketOrder_call(com.froad.thrift.vo.active.UpdateMarketOrderReqVo updateMarketOrderReqVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.updateMarketOrderReqVo = updateMarketOrderReqVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateMarketOrder", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateMarketOrder_args args = new updateMarketOrder_args();
        args.setUpdateMarketOrderReqVo(updateMarketOrderReqVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.active.UpdateMarketOrderResVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateMarketOrder();
      }
    }

    public void settlementMarkOrder(com.froad.thrift.vo.active.SettlementMarkOrderReq settlementMarkOrderReq, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      settlementMarkOrder_call method_call = new settlementMarkOrder_call(settlementMarkOrderReq, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class settlementMarkOrder_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.active.SettlementMarkOrderReq settlementMarkOrderReq;
      public settlementMarkOrder_call(com.froad.thrift.vo.active.SettlementMarkOrderReq settlementMarkOrderReq, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.settlementMarkOrderReq = settlementMarkOrderReq;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("settlementMarkOrder", org.apache.thrift.protocol.TMessageType.CALL, 0));
        settlementMarkOrder_args args = new settlementMarkOrder_args();
        args.setSettlementMarkOrderReq(settlementMarkOrderReq);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.active.SettlementMarkOrderRes getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_settlementMarkOrder();
      }
    }

    public void putFullCut(com.froad.thrift.vo.active.PutFullCutReqVo putFullCutReqVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      putFullCut_call method_call = new putFullCut_call(putFullCutReqVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class putFullCut_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.active.PutFullCutReqVo putFullCutReqVo;
      public putFullCut_call(com.froad.thrift.vo.active.PutFullCutReqVo putFullCutReqVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.putFullCutReqVo = putFullCutReqVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("putFullCut", org.apache.thrift.protocol.TMessageType.CALL, 0));
        putFullCut_args args = new putFullCut_args();
        args.setPutFullCutReqVo(putFullCutReqVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_putFullCut();
      }
    }

    public void fullGiveCheck(com.froad.thrift.vo.active.FullGiveCheckReqVo fullGiveCheckReqVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      fullGiveCheck_call method_call = new fullGiveCheck_call(fullGiveCheckReqVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class fullGiveCheck_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.active.FullGiveCheckReqVo fullGiveCheckReqVo;
      public fullGiveCheck_call(com.froad.thrift.vo.active.FullGiveCheckReqVo fullGiveCheckReqVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.fullGiveCheckReqVo = fullGiveCheckReqVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("fullGiveCheck", org.apache.thrift.protocol.TMessageType.CALL, 0));
        fullGiveCheck_args args = new fullGiveCheck_args();
        args.setFullGiveCheckReqVo(fullGiveCheckReqVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_fullGiveCheck();
      }
    }

  }

  public static class Processor<I extends Iface> extends com.froad.thrift.monitor.service.BizMonitorService.Processor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("goShoppingCart", new goShoppingCart());
      processMap.put("checkOrder", new checkOrder());
      processMap.put("createOrderFailureGoBack", new createOrderFailureGoBack());
      processMap.put("createMarketOrder", new createMarketOrder());
      processMap.put("findMarketOrder", new findMarketOrder());
      processMap.put("closeMarketOrder", new closeMarketOrder());
      processMap.put("returnMarketOrder", new returnMarketOrder());
      processMap.put("returnMarketOrderBack", new returnMarketOrderBack());
      processMap.put("updateMarketOrder", new updateMarketOrder());
      processMap.put("settlementMarkOrder", new settlementMarkOrder());
      processMap.put("putFullCut", new putFullCut());
      processMap.put("fullGiveCheck", new fullGiveCheck());
      return processMap;
    }

    public static class goShoppingCart<I extends Iface> extends org.apache.thrift.ProcessFunction<I, goShoppingCart_args> {
      public goShoppingCart() {
        super("goShoppingCart");
      }

      public goShoppingCart_args getEmptyArgsInstance() {
        return new goShoppingCart_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public goShoppingCart_result getResult(I iface, goShoppingCart_args args) throws org.apache.thrift.TException {
        goShoppingCart_result result = new goShoppingCart_result();
        result.success = iface.goShoppingCart(args.shoppingCartReqVo);
        return result;
      }
    }

    public static class checkOrder<I extends Iface> extends org.apache.thrift.ProcessFunction<I, checkOrder_args> {
      public checkOrder() {
        super("checkOrder");
      }

      public checkOrder_args getEmptyArgsInstance() {
        return new checkOrder_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public checkOrder_result getResult(I iface, checkOrder_args args) throws org.apache.thrift.TException {
        checkOrder_result result = new checkOrder_result();
        result.success = iface.checkOrder(args.checkOrderReqVo);
        return result;
      }
    }

    public static class createOrderFailureGoBack<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createOrderFailureGoBack_args> {
      public createOrderFailureGoBack() {
        super("createOrderFailureGoBack");
      }

      public createOrderFailureGoBack_args getEmptyArgsInstance() {
        return new createOrderFailureGoBack_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public createOrderFailureGoBack_result getResult(I iface, createOrderFailureGoBack_args args) throws org.apache.thrift.TException {
        createOrderFailureGoBack_result result = new createOrderFailureGoBack_result();
        result.success = iface.createOrderFailureGoBack(args.failureGoBackReqVo);
        return result;
      }
    }

    public static class createMarketOrder<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createMarketOrder_args> {
      public createMarketOrder() {
        super("createMarketOrder");
      }

      public createMarketOrder_args getEmptyArgsInstance() {
        return new createMarketOrder_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public createMarketOrder_result getResult(I iface, createMarketOrder_args args) throws org.apache.thrift.TException {
        createMarketOrder_result result = new createMarketOrder_result();
        result.success = iface.createMarketOrder(args.createMarketOrderReqVo);
        return result;
      }
    }

    public static class findMarketOrder<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findMarketOrder_args> {
      public findMarketOrder() {
        super("findMarketOrder");
      }

      public findMarketOrder_args getEmptyArgsInstance() {
        return new findMarketOrder_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findMarketOrder_result getResult(I iface, findMarketOrder_args args) throws org.apache.thrift.TException {
        findMarketOrder_result result = new findMarketOrder_result();
        result.success = iface.findMarketOrder(args.findMarketOrderReqVo);
        return result;
      }
    }

    public static class closeMarketOrder<I extends Iface> extends org.apache.thrift.ProcessFunction<I, closeMarketOrder_args> {
      public closeMarketOrder() {
        super("closeMarketOrder");
      }

      public closeMarketOrder_args getEmptyArgsInstance() {
        return new closeMarketOrder_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public closeMarketOrder_result getResult(I iface, closeMarketOrder_args args) throws org.apache.thrift.TException {
        closeMarketOrder_result result = new closeMarketOrder_result();
        result.success = iface.closeMarketOrder(args.closeMarketOrderReqVo);
        return result;
      }
    }

    public static class returnMarketOrder<I extends Iface> extends org.apache.thrift.ProcessFunction<I, returnMarketOrder_args> {
      public returnMarketOrder() {
        super("returnMarketOrder");
      }

      public returnMarketOrder_args getEmptyArgsInstance() {
        return new returnMarketOrder_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public returnMarketOrder_result getResult(I iface, returnMarketOrder_args args) throws org.apache.thrift.TException {
        returnMarketOrder_result result = new returnMarketOrder_result();
        result.success = iface.returnMarketOrder(args.returnMarketOrderReqVo);
        return result;
      }
    }

    public static class returnMarketOrderBack<I extends Iface> extends org.apache.thrift.ProcessFunction<I, returnMarketOrderBack_args> {
      public returnMarketOrderBack() {
        super("returnMarketOrderBack");
      }

      public returnMarketOrderBack_args getEmptyArgsInstance() {
        return new returnMarketOrderBack_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public returnMarketOrderBack_result getResult(I iface, returnMarketOrderBack_args args) throws org.apache.thrift.TException {
        returnMarketOrderBack_result result = new returnMarketOrderBack_result();
        result.success = iface.returnMarketOrderBack(args.returnMarketOrderBackReqVo);
        return result;
      }
    }

    public static class updateMarketOrder<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateMarketOrder_args> {
      public updateMarketOrder() {
        super("updateMarketOrder");
      }

      public updateMarketOrder_args getEmptyArgsInstance() {
        return new updateMarketOrder_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateMarketOrder_result getResult(I iface, updateMarketOrder_args args) throws org.apache.thrift.TException {
        updateMarketOrder_result result = new updateMarketOrder_result();
        result.success = iface.updateMarketOrder(args.updateMarketOrderReqVo);
        return result;
      }
    }

    public static class settlementMarkOrder<I extends Iface> extends org.apache.thrift.ProcessFunction<I, settlementMarkOrder_args> {
      public settlementMarkOrder() {
        super("settlementMarkOrder");
      }

      public settlementMarkOrder_args getEmptyArgsInstance() {
        return new settlementMarkOrder_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public settlementMarkOrder_result getResult(I iface, settlementMarkOrder_args args) throws org.apache.thrift.TException {
        settlementMarkOrder_result result = new settlementMarkOrder_result();
        result.success = iface.settlementMarkOrder(args.settlementMarkOrderReq);
        return result;
      }
    }

    public static class putFullCut<I extends Iface> extends org.apache.thrift.ProcessFunction<I, putFullCut_args> {
      public putFullCut() {
        super("putFullCut");
      }

      public putFullCut_args getEmptyArgsInstance() {
        return new putFullCut_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public putFullCut_result getResult(I iface, putFullCut_args args) throws org.apache.thrift.TException {
        putFullCut_result result = new putFullCut_result();
        result.success = iface.putFullCut(args.putFullCutReqVo);
        return result;
      }
    }

    public static class fullGiveCheck<I extends Iface> extends org.apache.thrift.ProcessFunction<I, fullGiveCheck_args> {
      public fullGiveCheck() {
        super("fullGiveCheck");
      }

      public fullGiveCheck_args getEmptyArgsInstance() {
        return new fullGiveCheck_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public fullGiveCheck_result getResult(I iface, fullGiveCheck_args args) throws org.apache.thrift.TException {
        fullGiveCheck_result result = new fullGiveCheck_result();
        result.success = iface.fullGiveCheck(args.fullGiveCheckReqVo);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends com.froad.thrift.monitor.service.BizMonitorService.AsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("goShoppingCart", new goShoppingCart());
      processMap.put("checkOrder", new checkOrder());
      processMap.put("createOrderFailureGoBack", new createOrderFailureGoBack());
      processMap.put("createMarketOrder", new createMarketOrder());
      processMap.put("findMarketOrder", new findMarketOrder());
      processMap.put("closeMarketOrder", new closeMarketOrder());
      processMap.put("returnMarketOrder", new returnMarketOrder());
      processMap.put("returnMarketOrderBack", new returnMarketOrderBack());
      processMap.put("updateMarketOrder", new updateMarketOrder());
      processMap.put("settlementMarkOrder", new settlementMarkOrder());
      processMap.put("putFullCut", new putFullCut());
      processMap.put("fullGiveCheck", new fullGiveCheck());
      return processMap;
    }

    public static class goShoppingCart<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, goShoppingCart_args, com.froad.thrift.vo.active.ShoppingCartResVo> {
      public goShoppingCart() {
        super("goShoppingCart");
      }

      public goShoppingCart_args getEmptyArgsInstance() {
        return new goShoppingCart_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.active.ShoppingCartResVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.active.ShoppingCartResVo>() { 
          public void onComplete(com.froad.thrift.vo.active.ShoppingCartResVo o) {
            goShoppingCart_result result = new goShoppingCart_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            goShoppingCart_result result = new goShoppingCart_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, goShoppingCart_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.active.ShoppingCartResVo> resultHandler) throws TException {
        iface.goShoppingCart(args.shoppingCartReqVo,resultHandler);
      }
    }

    public static class checkOrder<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, checkOrder_args, com.froad.thrift.vo.active.CheckOrderResVo> {
      public checkOrder() {
        super("checkOrder");
      }

      public checkOrder_args getEmptyArgsInstance() {
        return new checkOrder_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.active.CheckOrderResVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.active.CheckOrderResVo>() { 
          public void onComplete(com.froad.thrift.vo.active.CheckOrderResVo o) {
            checkOrder_result result = new checkOrder_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            checkOrder_result result = new checkOrder_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, checkOrder_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.active.CheckOrderResVo> resultHandler) throws TException {
        iface.checkOrder(args.checkOrderReqVo,resultHandler);
      }
    }

    public static class createOrderFailureGoBack<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, createOrderFailureGoBack_args, com.froad.thrift.vo.ResultVo> {
      public createOrderFailureGoBack() {
        super("createOrderFailureGoBack");
      }

      public createOrderFailureGoBack_args getEmptyArgsInstance() {
        return new createOrderFailureGoBack_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            createOrderFailureGoBack_result result = new createOrderFailureGoBack_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            createOrderFailureGoBack_result result = new createOrderFailureGoBack_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, createOrderFailureGoBack_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.createOrderFailureGoBack(args.failureGoBackReqVo,resultHandler);
      }
    }

    public static class createMarketOrder<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, createMarketOrder_args, com.froad.thrift.vo.active.CreateResultVo> {
      public createMarketOrder() {
        super("createMarketOrder");
      }

      public createMarketOrder_args getEmptyArgsInstance() {
        return new createMarketOrder_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.active.CreateResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.active.CreateResultVo>() { 
          public void onComplete(com.froad.thrift.vo.active.CreateResultVo o) {
            createMarketOrder_result result = new createMarketOrder_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            createMarketOrder_result result = new createMarketOrder_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, createMarketOrder_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.active.CreateResultVo> resultHandler) throws TException {
        iface.createMarketOrder(args.createMarketOrderReqVo,resultHandler);
      }
    }

    public static class findMarketOrder<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findMarketOrder_args, com.froad.thrift.vo.active.FindMarketOrderResVo> {
      public findMarketOrder() {
        super("findMarketOrder");
      }

      public findMarketOrder_args getEmptyArgsInstance() {
        return new findMarketOrder_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.active.FindMarketOrderResVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.active.FindMarketOrderResVo>() { 
          public void onComplete(com.froad.thrift.vo.active.FindMarketOrderResVo o) {
            findMarketOrder_result result = new findMarketOrder_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            findMarketOrder_result result = new findMarketOrder_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findMarketOrder_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.active.FindMarketOrderResVo> resultHandler) throws TException {
        iface.findMarketOrder(args.findMarketOrderReqVo,resultHandler);
      }
    }

    public static class closeMarketOrder<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, closeMarketOrder_args, com.froad.thrift.vo.ResultVo> {
      public closeMarketOrder() {
        super("closeMarketOrder");
      }

      public closeMarketOrder_args getEmptyArgsInstance() {
        return new closeMarketOrder_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            closeMarketOrder_result result = new closeMarketOrder_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            closeMarketOrder_result result = new closeMarketOrder_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, closeMarketOrder_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.closeMarketOrder(args.closeMarketOrderReqVo,resultHandler);
      }
    }

    public static class returnMarketOrder<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, returnMarketOrder_args, com.froad.thrift.vo.active.ReturnMarketOrderResVo> {
      public returnMarketOrder() {
        super("returnMarketOrder");
      }

      public returnMarketOrder_args getEmptyArgsInstance() {
        return new returnMarketOrder_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.active.ReturnMarketOrderResVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.active.ReturnMarketOrderResVo>() { 
          public void onComplete(com.froad.thrift.vo.active.ReturnMarketOrderResVo o) {
            returnMarketOrder_result result = new returnMarketOrder_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            returnMarketOrder_result result = new returnMarketOrder_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, returnMarketOrder_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.active.ReturnMarketOrderResVo> resultHandler) throws TException {
        iface.returnMarketOrder(args.returnMarketOrderReqVo,resultHandler);
      }
    }

    public static class returnMarketOrderBack<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, returnMarketOrderBack_args, com.froad.thrift.vo.ResultVo> {
      public returnMarketOrderBack() {
        super("returnMarketOrderBack");
      }

      public returnMarketOrderBack_args getEmptyArgsInstance() {
        return new returnMarketOrderBack_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            returnMarketOrderBack_result result = new returnMarketOrderBack_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            returnMarketOrderBack_result result = new returnMarketOrderBack_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, returnMarketOrderBack_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.returnMarketOrderBack(args.returnMarketOrderBackReqVo,resultHandler);
      }
    }

    public static class updateMarketOrder<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateMarketOrder_args, com.froad.thrift.vo.active.UpdateMarketOrderResVo> {
      public updateMarketOrder() {
        super("updateMarketOrder");
      }

      public updateMarketOrder_args getEmptyArgsInstance() {
        return new updateMarketOrder_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.active.UpdateMarketOrderResVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.active.UpdateMarketOrderResVo>() { 
          public void onComplete(com.froad.thrift.vo.active.UpdateMarketOrderResVo o) {
            updateMarketOrder_result result = new updateMarketOrder_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateMarketOrder_result result = new updateMarketOrder_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateMarketOrder_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.active.UpdateMarketOrderResVo> resultHandler) throws TException {
        iface.updateMarketOrder(args.updateMarketOrderReqVo,resultHandler);
      }
    }

    public static class settlementMarkOrder<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, settlementMarkOrder_args, com.froad.thrift.vo.active.SettlementMarkOrderRes> {
      public settlementMarkOrder() {
        super("settlementMarkOrder");
      }

      public settlementMarkOrder_args getEmptyArgsInstance() {
        return new settlementMarkOrder_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.active.SettlementMarkOrderRes> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.active.SettlementMarkOrderRes>() { 
          public void onComplete(com.froad.thrift.vo.active.SettlementMarkOrderRes o) {
            settlementMarkOrder_result result = new settlementMarkOrder_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            settlementMarkOrder_result result = new settlementMarkOrder_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, settlementMarkOrder_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.active.SettlementMarkOrderRes> resultHandler) throws TException {
        iface.settlementMarkOrder(args.settlementMarkOrderReq,resultHandler);
      }
    }

    public static class putFullCut<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, putFullCut_args, com.froad.thrift.vo.ResultVo> {
      public putFullCut() {
        super("putFullCut");
      }

      public putFullCut_args getEmptyArgsInstance() {
        return new putFullCut_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            putFullCut_result result = new putFullCut_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            putFullCut_result result = new putFullCut_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, putFullCut_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.putFullCut(args.putFullCutReqVo,resultHandler);
      }
    }

    public static class fullGiveCheck<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, fullGiveCheck_args, com.froad.thrift.vo.ResultVo> {
      public fullGiveCheck() {
        super("fullGiveCheck");
      }

      public fullGiveCheck_args getEmptyArgsInstance() {
        return new fullGiveCheck_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            fullGiveCheck_result result = new fullGiveCheck_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            fullGiveCheck_result result = new fullGiveCheck_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, fullGiveCheck_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.fullGiveCheck(args.fullGiveCheckReqVo,resultHandler);
      }
    }

  }

  public static class goShoppingCart_args implements org.apache.thrift.TBase<goShoppingCart_args, goShoppingCart_args._Fields>, java.io.Serializable, Cloneable, Comparable<goShoppingCart_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("goShoppingCart_args");

    private static final org.apache.thrift.protocol.TField SHOPPING_CART_REQ_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("shoppingCartReqVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new goShoppingCart_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new goShoppingCart_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.active.ShoppingCartReqVo shoppingCartReqVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SHOPPING_CART_REQ_VO((short)1, "shoppingCartReqVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SHOPPING_CART_REQ_VO
            return SHOPPING_CART_REQ_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SHOPPING_CART_REQ_VO, new org.apache.thrift.meta_data.FieldMetaData("shoppingCartReqVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.active.ShoppingCartReqVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(goShoppingCart_args.class, metaDataMap);
    }

    public goShoppingCart_args() {
    }

    public goShoppingCart_args(
      com.froad.thrift.vo.active.ShoppingCartReqVo shoppingCartReqVo)
    {
      this();
      this.shoppingCartReqVo = shoppingCartReqVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public goShoppingCart_args(goShoppingCart_args other) {
      if (other.isSetShoppingCartReqVo()) {
        this.shoppingCartReqVo = new com.froad.thrift.vo.active.ShoppingCartReqVo(other.shoppingCartReqVo);
      }
    }

    public goShoppingCart_args deepCopy() {
      return new goShoppingCart_args(this);
    }

    @Override
    public void clear() {
      this.shoppingCartReqVo = null;
    }

    public com.froad.thrift.vo.active.ShoppingCartReqVo getShoppingCartReqVo() {
      return this.shoppingCartReqVo;
    }

    public goShoppingCart_args setShoppingCartReqVo(com.froad.thrift.vo.active.ShoppingCartReqVo shoppingCartReqVo) {
      this.shoppingCartReqVo = shoppingCartReqVo;
      return this;
    }

    public void unsetShoppingCartReqVo() {
      this.shoppingCartReqVo = null;
    }

    /** Returns true if field shoppingCartReqVo is set (has been assigned a value) and false otherwise */
    public boolean isSetShoppingCartReqVo() {
      return this.shoppingCartReqVo != null;
    }

    public void setShoppingCartReqVoIsSet(boolean value) {
      if (!value) {
        this.shoppingCartReqVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SHOPPING_CART_REQ_VO:
        if (value == null) {
          unsetShoppingCartReqVo();
        } else {
          setShoppingCartReqVo((com.froad.thrift.vo.active.ShoppingCartReqVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SHOPPING_CART_REQ_VO:
        return getShoppingCartReqVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SHOPPING_CART_REQ_VO:
        return isSetShoppingCartReqVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof goShoppingCart_args)
        return this.equals((goShoppingCart_args)that);
      return false;
    }

    public boolean equals(goShoppingCart_args that) {
      if (that == null)
        return false;

      boolean this_present_shoppingCartReqVo = true && this.isSetShoppingCartReqVo();
      boolean that_present_shoppingCartReqVo = true && that.isSetShoppingCartReqVo();
      if (this_present_shoppingCartReqVo || that_present_shoppingCartReqVo) {
        if (!(this_present_shoppingCartReqVo && that_present_shoppingCartReqVo))
          return false;
        if (!this.shoppingCartReqVo.equals(that.shoppingCartReqVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_shoppingCartReqVo = true && (isSetShoppingCartReqVo());
      list.add(present_shoppingCartReqVo);
      if (present_shoppingCartReqVo)
        list.add(shoppingCartReqVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(goShoppingCart_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetShoppingCartReqVo()).compareTo(other.isSetShoppingCartReqVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetShoppingCartReqVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shoppingCartReqVo, other.shoppingCartReqVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("goShoppingCart_args(");
      boolean first = true;

      sb.append("shoppingCartReqVo:");
      if (this.shoppingCartReqVo == null) {
        sb.append("null");
      } else {
        sb.append(this.shoppingCartReqVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (shoppingCartReqVo != null) {
        shoppingCartReqVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class goShoppingCart_argsStandardSchemeFactory implements SchemeFactory {
      public goShoppingCart_argsStandardScheme getScheme() {
        return new goShoppingCart_argsStandardScheme();
      }
    }

    private static class goShoppingCart_argsStandardScheme extends StandardScheme<goShoppingCart_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, goShoppingCart_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SHOPPING_CART_REQ_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.shoppingCartReqVo = new com.froad.thrift.vo.active.ShoppingCartReqVo();
                struct.shoppingCartReqVo.read(iprot);
                struct.setShoppingCartReqVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, goShoppingCart_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.shoppingCartReqVo != null) {
          oprot.writeFieldBegin(SHOPPING_CART_REQ_VO_FIELD_DESC);
          struct.shoppingCartReqVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class goShoppingCart_argsTupleSchemeFactory implements SchemeFactory {
      public goShoppingCart_argsTupleScheme getScheme() {
        return new goShoppingCart_argsTupleScheme();
      }
    }

    private static class goShoppingCart_argsTupleScheme extends TupleScheme<goShoppingCart_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, goShoppingCart_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetShoppingCartReqVo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetShoppingCartReqVo()) {
          struct.shoppingCartReqVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, goShoppingCart_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.shoppingCartReqVo = new com.froad.thrift.vo.active.ShoppingCartReqVo();
          struct.shoppingCartReqVo.read(iprot);
          struct.setShoppingCartReqVoIsSet(true);
        }
      }
    }

  }

  public static class goShoppingCart_result implements org.apache.thrift.TBase<goShoppingCart_result, goShoppingCart_result._Fields>, java.io.Serializable, Cloneable, Comparable<goShoppingCart_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("goShoppingCart_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new goShoppingCart_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new goShoppingCart_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.active.ShoppingCartResVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.active.ShoppingCartResVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(goShoppingCart_result.class, metaDataMap);
    }

    public goShoppingCart_result() {
    }

    public goShoppingCart_result(
      com.froad.thrift.vo.active.ShoppingCartResVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public goShoppingCart_result(goShoppingCart_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.active.ShoppingCartResVo(other.success);
      }
    }

    public goShoppingCart_result deepCopy() {
      return new goShoppingCart_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.active.ShoppingCartResVo getSuccess() {
      return this.success;
    }

    public goShoppingCart_result setSuccess(com.froad.thrift.vo.active.ShoppingCartResVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.active.ShoppingCartResVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof goShoppingCart_result)
        return this.equals((goShoppingCart_result)that);
      return false;
    }

    public boolean equals(goShoppingCart_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(goShoppingCart_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("goShoppingCart_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class goShoppingCart_resultStandardSchemeFactory implements SchemeFactory {
      public goShoppingCart_resultStandardScheme getScheme() {
        return new goShoppingCart_resultStandardScheme();
      }
    }

    private static class goShoppingCart_resultStandardScheme extends StandardScheme<goShoppingCart_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, goShoppingCart_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.active.ShoppingCartResVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, goShoppingCart_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class goShoppingCart_resultTupleSchemeFactory implements SchemeFactory {
      public goShoppingCart_resultTupleScheme getScheme() {
        return new goShoppingCart_resultTupleScheme();
      }
    }

    private static class goShoppingCart_resultTupleScheme extends TupleScheme<goShoppingCart_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, goShoppingCart_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, goShoppingCart_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.active.ShoppingCartResVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class checkOrder_args implements org.apache.thrift.TBase<checkOrder_args, checkOrder_args._Fields>, java.io.Serializable, Cloneable, Comparable<checkOrder_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkOrder_args");

    private static final org.apache.thrift.protocol.TField CHECK_ORDER_REQ_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("checkOrderReqVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new checkOrder_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new checkOrder_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.active.CheckOrderReqVo checkOrderReqVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CHECK_ORDER_REQ_VO((short)1, "checkOrderReqVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CHECK_ORDER_REQ_VO
            return CHECK_ORDER_REQ_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CHECK_ORDER_REQ_VO, new org.apache.thrift.meta_data.FieldMetaData("checkOrderReqVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.active.CheckOrderReqVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkOrder_args.class, metaDataMap);
    }

    public checkOrder_args() {
    }

    public checkOrder_args(
      com.froad.thrift.vo.active.CheckOrderReqVo checkOrderReqVo)
    {
      this();
      this.checkOrderReqVo = checkOrderReqVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkOrder_args(checkOrder_args other) {
      if (other.isSetCheckOrderReqVo()) {
        this.checkOrderReqVo = new com.froad.thrift.vo.active.CheckOrderReqVo(other.checkOrderReqVo);
      }
    }

    public checkOrder_args deepCopy() {
      return new checkOrder_args(this);
    }

    @Override
    public void clear() {
      this.checkOrderReqVo = null;
    }

    public com.froad.thrift.vo.active.CheckOrderReqVo getCheckOrderReqVo() {
      return this.checkOrderReqVo;
    }

    public checkOrder_args setCheckOrderReqVo(com.froad.thrift.vo.active.CheckOrderReqVo checkOrderReqVo) {
      this.checkOrderReqVo = checkOrderReqVo;
      return this;
    }

    public void unsetCheckOrderReqVo() {
      this.checkOrderReqVo = null;
    }

    /** Returns true if field checkOrderReqVo is set (has been assigned a value) and false otherwise */
    public boolean isSetCheckOrderReqVo() {
      return this.checkOrderReqVo != null;
    }

    public void setCheckOrderReqVoIsSet(boolean value) {
      if (!value) {
        this.checkOrderReqVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CHECK_ORDER_REQ_VO:
        if (value == null) {
          unsetCheckOrderReqVo();
        } else {
          setCheckOrderReqVo((com.froad.thrift.vo.active.CheckOrderReqVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CHECK_ORDER_REQ_VO:
        return getCheckOrderReqVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CHECK_ORDER_REQ_VO:
        return isSetCheckOrderReqVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof checkOrder_args)
        return this.equals((checkOrder_args)that);
      return false;
    }

    public boolean equals(checkOrder_args that) {
      if (that == null)
        return false;

      boolean this_present_checkOrderReqVo = true && this.isSetCheckOrderReqVo();
      boolean that_present_checkOrderReqVo = true && that.isSetCheckOrderReqVo();
      if (this_present_checkOrderReqVo || that_present_checkOrderReqVo) {
        if (!(this_present_checkOrderReqVo && that_present_checkOrderReqVo))
          return false;
        if (!this.checkOrderReqVo.equals(that.checkOrderReqVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_checkOrderReqVo = true && (isSetCheckOrderReqVo());
      list.add(present_checkOrderReqVo);
      if (present_checkOrderReqVo)
        list.add(checkOrderReqVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(checkOrder_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCheckOrderReqVo()).compareTo(other.isSetCheckOrderReqVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCheckOrderReqVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.checkOrderReqVo, other.checkOrderReqVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("checkOrder_args(");
      boolean first = true;

      sb.append("checkOrderReqVo:");
      if (this.checkOrderReqVo == null) {
        sb.append("null");
      } else {
        sb.append(this.checkOrderReqVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (checkOrderReqVo != null) {
        checkOrderReqVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class checkOrder_argsStandardSchemeFactory implements SchemeFactory {
      public checkOrder_argsStandardScheme getScheme() {
        return new checkOrder_argsStandardScheme();
      }
    }

    private static class checkOrder_argsStandardScheme extends StandardScheme<checkOrder_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, checkOrder_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CHECK_ORDER_REQ_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.checkOrderReqVo = new com.froad.thrift.vo.active.CheckOrderReqVo();
                struct.checkOrderReqVo.read(iprot);
                struct.setCheckOrderReqVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, checkOrder_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.checkOrderReqVo != null) {
          oprot.writeFieldBegin(CHECK_ORDER_REQ_VO_FIELD_DESC);
          struct.checkOrderReqVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class checkOrder_argsTupleSchemeFactory implements SchemeFactory {
      public checkOrder_argsTupleScheme getScheme() {
        return new checkOrder_argsTupleScheme();
      }
    }

    private static class checkOrder_argsTupleScheme extends TupleScheme<checkOrder_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, checkOrder_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCheckOrderReqVo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCheckOrderReqVo()) {
          struct.checkOrderReqVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, checkOrder_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.checkOrderReqVo = new com.froad.thrift.vo.active.CheckOrderReqVo();
          struct.checkOrderReqVo.read(iprot);
          struct.setCheckOrderReqVoIsSet(true);
        }
      }
    }

  }

  public static class checkOrder_result implements org.apache.thrift.TBase<checkOrder_result, checkOrder_result._Fields>, java.io.Serializable, Cloneable, Comparable<checkOrder_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkOrder_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new checkOrder_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new checkOrder_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.active.CheckOrderResVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.active.CheckOrderResVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkOrder_result.class, metaDataMap);
    }

    public checkOrder_result() {
    }

    public checkOrder_result(
      com.froad.thrift.vo.active.CheckOrderResVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkOrder_result(checkOrder_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.active.CheckOrderResVo(other.success);
      }
    }

    public checkOrder_result deepCopy() {
      return new checkOrder_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.active.CheckOrderResVo getSuccess() {
      return this.success;
    }

    public checkOrder_result setSuccess(com.froad.thrift.vo.active.CheckOrderResVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.active.CheckOrderResVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof checkOrder_result)
        return this.equals((checkOrder_result)that);
      return false;
    }

    public boolean equals(checkOrder_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(checkOrder_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("checkOrder_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class checkOrder_resultStandardSchemeFactory implements SchemeFactory {
      public checkOrder_resultStandardScheme getScheme() {
        return new checkOrder_resultStandardScheme();
      }
    }

    private static class checkOrder_resultStandardScheme extends StandardScheme<checkOrder_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, checkOrder_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.active.CheckOrderResVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, checkOrder_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class checkOrder_resultTupleSchemeFactory implements SchemeFactory {
      public checkOrder_resultTupleScheme getScheme() {
        return new checkOrder_resultTupleScheme();
      }
    }

    private static class checkOrder_resultTupleScheme extends TupleScheme<checkOrder_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, checkOrder_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, checkOrder_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.active.CheckOrderResVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class createOrderFailureGoBack_args implements org.apache.thrift.TBase<createOrderFailureGoBack_args, createOrderFailureGoBack_args._Fields>, java.io.Serializable, Cloneable, Comparable<createOrderFailureGoBack_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createOrderFailureGoBack_args");

    private static final org.apache.thrift.protocol.TField FAILURE_GO_BACK_REQ_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("failureGoBackReqVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createOrderFailureGoBack_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createOrderFailureGoBack_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.active.FailureGoBackReqVo failureGoBackReqVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FAILURE_GO_BACK_REQ_VO((short)1, "failureGoBackReqVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FAILURE_GO_BACK_REQ_VO
            return FAILURE_GO_BACK_REQ_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FAILURE_GO_BACK_REQ_VO, new org.apache.thrift.meta_data.FieldMetaData("failureGoBackReqVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.active.FailureGoBackReqVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createOrderFailureGoBack_args.class, metaDataMap);
    }

    public createOrderFailureGoBack_args() {
    }

    public createOrderFailureGoBack_args(
      com.froad.thrift.vo.active.FailureGoBackReqVo failureGoBackReqVo)
    {
      this();
      this.failureGoBackReqVo = failureGoBackReqVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createOrderFailureGoBack_args(createOrderFailureGoBack_args other) {
      if (other.isSetFailureGoBackReqVo()) {
        this.failureGoBackReqVo = new com.froad.thrift.vo.active.FailureGoBackReqVo(other.failureGoBackReqVo);
      }
    }

    public createOrderFailureGoBack_args deepCopy() {
      return new createOrderFailureGoBack_args(this);
    }

    @Override
    public void clear() {
      this.failureGoBackReqVo = null;
    }

    public com.froad.thrift.vo.active.FailureGoBackReqVo getFailureGoBackReqVo() {
      return this.failureGoBackReqVo;
    }

    public createOrderFailureGoBack_args setFailureGoBackReqVo(com.froad.thrift.vo.active.FailureGoBackReqVo failureGoBackReqVo) {
      this.failureGoBackReqVo = failureGoBackReqVo;
      return this;
    }

    public void unsetFailureGoBackReqVo() {
      this.failureGoBackReqVo = null;
    }

    /** Returns true if field failureGoBackReqVo is set (has been assigned a value) and false otherwise */
    public boolean isSetFailureGoBackReqVo() {
      return this.failureGoBackReqVo != null;
    }

    public void setFailureGoBackReqVoIsSet(boolean value) {
      if (!value) {
        this.failureGoBackReqVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FAILURE_GO_BACK_REQ_VO:
        if (value == null) {
          unsetFailureGoBackReqVo();
        } else {
          setFailureGoBackReqVo((com.froad.thrift.vo.active.FailureGoBackReqVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FAILURE_GO_BACK_REQ_VO:
        return getFailureGoBackReqVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FAILURE_GO_BACK_REQ_VO:
        return isSetFailureGoBackReqVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createOrderFailureGoBack_args)
        return this.equals((createOrderFailureGoBack_args)that);
      return false;
    }

    public boolean equals(createOrderFailureGoBack_args that) {
      if (that == null)
        return false;

      boolean this_present_failureGoBackReqVo = true && this.isSetFailureGoBackReqVo();
      boolean that_present_failureGoBackReqVo = true && that.isSetFailureGoBackReqVo();
      if (this_present_failureGoBackReqVo || that_present_failureGoBackReqVo) {
        if (!(this_present_failureGoBackReqVo && that_present_failureGoBackReqVo))
          return false;
        if (!this.failureGoBackReqVo.equals(that.failureGoBackReqVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_failureGoBackReqVo = true && (isSetFailureGoBackReqVo());
      list.add(present_failureGoBackReqVo);
      if (present_failureGoBackReqVo)
        list.add(failureGoBackReqVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(createOrderFailureGoBack_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetFailureGoBackReqVo()).compareTo(other.isSetFailureGoBackReqVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFailureGoBackReqVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.failureGoBackReqVo, other.failureGoBackReqVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createOrderFailureGoBack_args(");
      boolean first = true;

      sb.append("failureGoBackReqVo:");
      if (this.failureGoBackReqVo == null) {
        sb.append("null");
      } else {
        sb.append(this.failureGoBackReqVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (failureGoBackReqVo != null) {
        failureGoBackReqVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createOrderFailureGoBack_argsStandardSchemeFactory implements SchemeFactory {
      public createOrderFailureGoBack_argsStandardScheme getScheme() {
        return new createOrderFailureGoBack_argsStandardScheme();
      }
    }

    private static class createOrderFailureGoBack_argsStandardScheme extends StandardScheme<createOrderFailureGoBack_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createOrderFailureGoBack_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FAILURE_GO_BACK_REQ_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.failureGoBackReqVo = new com.froad.thrift.vo.active.FailureGoBackReqVo();
                struct.failureGoBackReqVo.read(iprot);
                struct.setFailureGoBackReqVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createOrderFailureGoBack_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.failureGoBackReqVo != null) {
          oprot.writeFieldBegin(FAILURE_GO_BACK_REQ_VO_FIELD_DESC);
          struct.failureGoBackReqVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createOrderFailureGoBack_argsTupleSchemeFactory implements SchemeFactory {
      public createOrderFailureGoBack_argsTupleScheme getScheme() {
        return new createOrderFailureGoBack_argsTupleScheme();
      }
    }

    private static class createOrderFailureGoBack_argsTupleScheme extends TupleScheme<createOrderFailureGoBack_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createOrderFailureGoBack_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFailureGoBackReqVo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetFailureGoBackReqVo()) {
          struct.failureGoBackReqVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createOrderFailureGoBack_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.failureGoBackReqVo = new com.froad.thrift.vo.active.FailureGoBackReqVo();
          struct.failureGoBackReqVo.read(iprot);
          struct.setFailureGoBackReqVoIsSet(true);
        }
      }
    }

  }

  public static class createOrderFailureGoBack_result implements org.apache.thrift.TBase<createOrderFailureGoBack_result, createOrderFailureGoBack_result._Fields>, java.io.Serializable, Cloneable, Comparable<createOrderFailureGoBack_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createOrderFailureGoBack_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createOrderFailureGoBack_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createOrderFailureGoBack_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createOrderFailureGoBack_result.class, metaDataMap);
    }

    public createOrderFailureGoBack_result() {
    }

    public createOrderFailureGoBack_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createOrderFailureGoBack_result(createOrderFailureGoBack_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public createOrderFailureGoBack_result deepCopy() {
      return new createOrderFailureGoBack_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public createOrderFailureGoBack_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createOrderFailureGoBack_result)
        return this.equals((createOrderFailureGoBack_result)that);
      return false;
    }

    public boolean equals(createOrderFailureGoBack_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(createOrderFailureGoBack_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createOrderFailureGoBack_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createOrderFailureGoBack_resultStandardSchemeFactory implements SchemeFactory {
      public createOrderFailureGoBack_resultStandardScheme getScheme() {
        return new createOrderFailureGoBack_resultStandardScheme();
      }
    }

    private static class createOrderFailureGoBack_resultStandardScheme extends StandardScheme<createOrderFailureGoBack_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createOrderFailureGoBack_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createOrderFailureGoBack_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createOrderFailureGoBack_resultTupleSchemeFactory implements SchemeFactory {
      public createOrderFailureGoBack_resultTupleScheme getScheme() {
        return new createOrderFailureGoBack_resultTupleScheme();
      }
    }

    private static class createOrderFailureGoBack_resultTupleScheme extends TupleScheme<createOrderFailureGoBack_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createOrderFailureGoBack_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createOrderFailureGoBack_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class createMarketOrder_args implements org.apache.thrift.TBase<createMarketOrder_args, createMarketOrder_args._Fields>, java.io.Serializable, Cloneable, Comparable<createMarketOrder_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createMarketOrder_args");

    private static final org.apache.thrift.protocol.TField CREATE_MARKET_ORDER_REQ_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("createMarketOrderReqVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createMarketOrder_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createMarketOrder_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.active.CreateMarketOrderReqVo createMarketOrderReqVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CREATE_MARKET_ORDER_REQ_VO((short)1, "createMarketOrderReqVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CREATE_MARKET_ORDER_REQ_VO
            return CREATE_MARKET_ORDER_REQ_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CREATE_MARKET_ORDER_REQ_VO, new org.apache.thrift.meta_data.FieldMetaData("createMarketOrderReqVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.active.CreateMarketOrderReqVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createMarketOrder_args.class, metaDataMap);
    }

    public createMarketOrder_args() {
    }

    public createMarketOrder_args(
      com.froad.thrift.vo.active.CreateMarketOrderReqVo createMarketOrderReqVo)
    {
      this();
      this.createMarketOrderReqVo = createMarketOrderReqVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createMarketOrder_args(createMarketOrder_args other) {
      if (other.isSetCreateMarketOrderReqVo()) {
        this.createMarketOrderReqVo = new com.froad.thrift.vo.active.CreateMarketOrderReqVo(other.createMarketOrderReqVo);
      }
    }

    public createMarketOrder_args deepCopy() {
      return new createMarketOrder_args(this);
    }

    @Override
    public void clear() {
      this.createMarketOrderReqVo = null;
    }

    public com.froad.thrift.vo.active.CreateMarketOrderReqVo getCreateMarketOrderReqVo() {
      return this.createMarketOrderReqVo;
    }

    public createMarketOrder_args setCreateMarketOrderReqVo(com.froad.thrift.vo.active.CreateMarketOrderReqVo createMarketOrderReqVo) {
      this.createMarketOrderReqVo = createMarketOrderReqVo;
      return this;
    }

    public void unsetCreateMarketOrderReqVo() {
      this.createMarketOrderReqVo = null;
    }

    /** Returns true if field createMarketOrderReqVo is set (has been assigned a value) and false otherwise */
    public boolean isSetCreateMarketOrderReqVo() {
      return this.createMarketOrderReqVo != null;
    }

    public void setCreateMarketOrderReqVoIsSet(boolean value) {
      if (!value) {
        this.createMarketOrderReqVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CREATE_MARKET_ORDER_REQ_VO:
        if (value == null) {
          unsetCreateMarketOrderReqVo();
        } else {
          setCreateMarketOrderReqVo((com.froad.thrift.vo.active.CreateMarketOrderReqVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CREATE_MARKET_ORDER_REQ_VO:
        return getCreateMarketOrderReqVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CREATE_MARKET_ORDER_REQ_VO:
        return isSetCreateMarketOrderReqVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createMarketOrder_args)
        return this.equals((createMarketOrder_args)that);
      return false;
    }

    public boolean equals(createMarketOrder_args that) {
      if (that == null)
        return false;

      boolean this_present_createMarketOrderReqVo = true && this.isSetCreateMarketOrderReqVo();
      boolean that_present_createMarketOrderReqVo = true && that.isSetCreateMarketOrderReqVo();
      if (this_present_createMarketOrderReqVo || that_present_createMarketOrderReqVo) {
        if (!(this_present_createMarketOrderReqVo && that_present_createMarketOrderReqVo))
          return false;
        if (!this.createMarketOrderReqVo.equals(that.createMarketOrderReqVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_createMarketOrderReqVo = true && (isSetCreateMarketOrderReqVo());
      list.add(present_createMarketOrderReqVo);
      if (present_createMarketOrderReqVo)
        list.add(createMarketOrderReqVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(createMarketOrder_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCreateMarketOrderReqVo()).compareTo(other.isSetCreateMarketOrderReqVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCreateMarketOrderReqVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createMarketOrderReqVo, other.createMarketOrderReqVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createMarketOrder_args(");
      boolean first = true;

      sb.append("createMarketOrderReqVo:");
      if (this.createMarketOrderReqVo == null) {
        sb.append("null");
      } else {
        sb.append(this.createMarketOrderReqVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (createMarketOrderReqVo != null) {
        createMarketOrderReqVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createMarketOrder_argsStandardSchemeFactory implements SchemeFactory {
      public createMarketOrder_argsStandardScheme getScheme() {
        return new createMarketOrder_argsStandardScheme();
      }
    }

    private static class createMarketOrder_argsStandardScheme extends StandardScheme<createMarketOrder_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createMarketOrder_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CREATE_MARKET_ORDER_REQ_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.createMarketOrderReqVo = new com.froad.thrift.vo.active.CreateMarketOrderReqVo();
                struct.createMarketOrderReqVo.read(iprot);
                struct.setCreateMarketOrderReqVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createMarketOrder_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.createMarketOrderReqVo != null) {
          oprot.writeFieldBegin(CREATE_MARKET_ORDER_REQ_VO_FIELD_DESC);
          struct.createMarketOrderReqVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createMarketOrder_argsTupleSchemeFactory implements SchemeFactory {
      public createMarketOrder_argsTupleScheme getScheme() {
        return new createMarketOrder_argsTupleScheme();
      }
    }

    private static class createMarketOrder_argsTupleScheme extends TupleScheme<createMarketOrder_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createMarketOrder_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCreateMarketOrderReqVo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCreateMarketOrderReqVo()) {
          struct.createMarketOrderReqVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createMarketOrder_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.createMarketOrderReqVo = new com.froad.thrift.vo.active.CreateMarketOrderReqVo();
          struct.createMarketOrderReqVo.read(iprot);
          struct.setCreateMarketOrderReqVoIsSet(true);
        }
      }
    }

  }

  public static class createMarketOrder_result implements org.apache.thrift.TBase<createMarketOrder_result, createMarketOrder_result._Fields>, java.io.Serializable, Cloneable, Comparable<createMarketOrder_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createMarketOrder_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createMarketOrder_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createMarketOrder_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.active.CreateResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.active.CreateResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createMarketOrder_result.class, metaDataMap);
    }

    public createMarketOrder_result() {
    }

    public createMarketOrder_result(
      com.froad.thrift.vo.active.CreateResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createMarketOrder_result(createMarketOrder_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.active.CreateResultVo(other.success);
      }
    }

    public createMarketOrder_result deepCopy() {
      return new createMarketOrder_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.active.CreateResultVo getSuccess() {
      return this.success;
    }

    public createMarketOrder_result setSuccess(com.froad.thrift.vo.active.CreateResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.active.CreateResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createMarketOrder_result)
        return this.equals((createMarketOrder_result)that);
      return false;
    }

    public boolean equals(createMarketOrder_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(createMarketOrder_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createMarketOrder_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createMarketOrder_resultStandardSchemeFactory implements SchemeFactory {
      public createMarketOrder_resultStandardScheme getScheme() {
        return new createMarketOrder_resultStandardScheme();
      }
    }

    private static class createMarketOrder_resultStandardScheme extends StandardScheme<createMarketOrder_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createMarketOrder_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.active.CreateResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createMarketOrder_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createMarketOrder_resultTupleSchemeFactory implements SchemeFactory {
      public createMarketOrder_resultTupleScheme getScheme() {
        return new createMarketOrder_resultTupleScheme();
      }
    }

    private static class createMarketOrder_resultTupleScheme extends TupleScheme<createMarketOrder_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createMarketOrder_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createMarketOrder_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.active.CreateResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class findMarketOrder_args implements org.apache.thrift.TBase<findMarketOrder_args, findMarketOrder_args._Fields>, java.io.Serializable, Cloneable, Comparable<findMarketOrder_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findMarketOrder_args");

    private static final org.apache.thrift.protocol.TField FIND_MARKET_ORDER_REQ_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("findMarketOrderReqVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findMarketOrder_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findMarketOrder_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.active.FindMarketOrderReqVo findMarketOrderReqVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FIND_MARKET_ORDER_REQ_VO((short)1, "findMarketOrderReqVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FIND_MARKET_ORDER_REQ_VO
            return FIND_MARKET_ORDER_REQ_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FIND_MARKET_ORDER_REQ_VO, new org.apache.thrift.meta_data.FieldMetaData("findMarketOrderReqVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.active.FindMarketOrderReqVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findMarketOrder_args.class, metaDataMap);
    }

    public findMarketOrder_args() {
    }

    public findMarketOrder_args(
      com.froad.thrift.vo.active.FindMarketOrderReqVo findMarketOrderReqVo)
    {
      this();
      this.findMarketOrderReqVo = findMarketOrderReqVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findMarketOrder_args(findMarketOrder_args other) {
      if (other.isSetFindMarketOrderReqVo()) {
        this.findMarketOrderReqVo = new com.froad.thrift.vo.active.FindMarketOrderReqVo(other.findMarketOrderReqVo);
      }
    }

    public findMarketOrder_args deepCopy() {
      return new findMarketOrder_args(this);
    }

    @Override
    public void clear() {
      this.findMarketOrderReqVo = null;
    }

    public com.froad.thrift.vo.active.FindMarketOrderReqVo getFindMarketOrderReqVo() {
      return this.findMarketOrderReqVo;
    }

    public findMarketOrder_args setFindMarketOrderReqVo(com.froad.thrift.vo.active.FindMarketOrderReqVo findMarketOrderReqVo) {
      this.findMarketOrderReqVo = findMarketOrderReqVo;
      return this;
    }

    public void unsetFindMarketOrderReqVo() {
      this.findMarketOrderReqVo = null;
    }

    /** Returns true if field findMarketOrderReqVo is set (has been assigned a value) and false otherwise */
    public boolean isSetFindMarketOrderReqVo() {
      return this.findMarketOrderReqVo != null;
    }

    public void setFindMarketOrderReqVoIsSet(boolean value) {
      if (!value) {
        this.findMarketOrderReqVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FIND_MARKET_ORDER_REQ_VO:
        if (value == null) {
          unsetFindMarketOrderReqVo();
        } else {
          setFindMarketOrderReqVo((com.froad.thrift.vo.active.FindMarketOrderReqVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FIND_MARKET_ORDER_REQ_VO:
        return getFindMarketOrderReqVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FIND_MARKET_ORDER_REQ_VO:
        return isSetFindMarketOrderReqVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findMarketOrder_args)
        return this.equals((findMarketOrder_args)that);
      return false;
    }

    public boolean equals(findMarketOrder_args that) {
      if (that == null)
        return false;

      boolean this_present_findMarketOrderReqVo = true && this.isSetFindMarketOrderReqVo();
      boolean that_present_findMarketOrderReqVo = true && that.isSetFindMarketOrderReqVo();
      if (this_present_findMarketOrderReqVo || that_present_findMarketOrderReqVo) {
        if (!(this_present_findMarketOrderReqVo && that_present_findMarketOrderReqVo))
          return false;
        if (!this.findMarketOrderReqVo.equals(that.findMarketOrderReqVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_findMarketOrderReqVo = true && (isSetFindMarketOrderReqVo());
      list.add(present_findMarketOrderReqVo);
      if (present_findMarketOrderReqVo)
        list.add(findMarketOrderReqVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(findMarketOrder_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetFindMarketOrderReqVo()).compareTo(other.isSetFindMarketOrderReqVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFindMarketOrderReqVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.findMarketOrderReqVo, other.findMarketOrderReqVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findMarketOrder_args(");
      boolean first = true;

      sb.append("findMarketOrderReqVo:");
      if (this.findMarketOrderReqVo == null) {
        sb.append("null");
      } else {
        sb.append(this.findMarketOrderReqVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (findMarketOrderReqVo != null) {
        findMarketOrderReqVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findMarketOrder_argsStandardSchemeFactory implements SchemeFactory {
      public findMarketOrder_argsStandardScheme getScheme() {
        return new findMarketOrder_argsStandardScheme();
      }
    }

    private static class findMarketOrder_argsStandardScheme extends StandardScheme<findMarketOrder_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findMarketOrder_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FIND_MARKET_ORDER_REQ_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.findMarketOrderReqVo = new com.froad.thrift.vo.active.FindMarketOrderReqVo();
                struct.findMarketOrderReqVo.read(iprot);
                struct.setFindMarketOrderReqVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findMarketOrder_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.findMarketOrderReqVo != null) {
          oprot.writeFieldBegin(FIND_MARKET_ORDER_REQ_VO_FIELD_DESC);
          struct.findMarketOrderReqVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findMarketOrder_argsTupleSchemeFactory implements SchemeFactory {
      public findMarketOrder_argsTupleScheme getScheme() {
        return new findMarketOrder_argsTupleScheme();
      }
    }

    private static class findMarketOrder_argsTupleScheme extends TupleScheme<findMarketOrder_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findMarketOrder_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFindMarketOrderReqVo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetFindMarketOrderReqVo()) {
          struct.findMarketOrderReqVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findMarketOrder_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.findMarketOrderReqVo = new com.froad.thrift.vo.active.FindMarketOrderReqVo();
          struct.findMarketOrderReqVo.read(iprot);
          struct.setFindMarketOrderReqVoIsSet(true);
        }
      }
    }

  }

  public static class findMarketOrder_result implements org.apache.thrift.TBase<findMarketOrder_result, findMarketOrder_result._Fields>, java.io.Serializable, Cloneable, Comparable<findMarketOrder_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findMarketOrder_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findMarketOrder_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findMarketOrder_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.active.FindMarketOrderResVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.active.FindMarketOrderResVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findMarketOrder_result.class, metaDataMap);
    }

    public findMarketOrder_result() {
    }

    public findMarketOrder_result(
      com.froad.thrift.vo.active.FindMarketOrderResVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findMarketOrder_result(findMarketOrder_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.active.FindMarketOrderResVo(other.success);
      }
    }

    public findMarketOrder_result deepCopy() {
      return new findMarketOrder_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.active.FindMarketOrderResVo getSuccess() {
      return this.success;
    }

    public findMarketOrder_result setSuccess(com.froad.thrift.vo.active.FindMarketOrderResVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.active.FindMarketOrderResVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findMarketOrder_result)
        return this.equals((findMarketOrder_result)that);
      return false;
    }

    public boolean equals(findMarketOrder_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(findMarketOrder_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findMarketOrder_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findMarketOrder_resultStandardSchemeFactory implements SchemeFactory {
      public findMarketOrder_resultStandardScheme getScheme() {
        return new findMarketOrder_resultStandardScheme();
      }
    }

    private static class findMarketOrder_resultStandardScheme extends StandardScheme<findMarketOrder_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findMarketOrder_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.active.FindMarketOrderResVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findMarketOrder_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findMarketOrder_resultTupleSchemeFactory implements SchemeFactory {
      public findMarketOrder_resultTupleScheme getScheme() {
        return new findMarketOrder_resultTupleScheme();
      }
    }

    private static class findMarketOrder_resultTupleScheme extends TupleScheme<findMarketOrder_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findMarketOrder_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findMarketOrder_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.active.FindMarketOrderResVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class closeMarketOrder_args implements org.apache.thrift.TBase<closeMarketOrder_args, closeMarketOrder_args._Fields>, java.io.Serializable, Cloneable, Comparable<closeMarketOrder_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("closeMarketOrder_args");

    private static final org.apache.thrift.protocol.TField CLOSE_MARKET_ORDER_REQ_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("closeMarketOrderReqVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new closeMarketOrder_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new closeMarketOrder_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.active.CloseMarketOrderReqVo closeMarketOrderReqVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CLOSE_MARKET_ORDER_REQ_VO((short)1, "closeMarketOrderReqVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CLOSE_MARKET_ORDER_REQ_VO
            return CLOSE_MARKET_ORDER_REQ_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CLOSE_MARKET_ORDER_REQ_VO, new org.apache.thrift.meta_data.FieldMetaData("closeMarketOrderReqVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.active.CloseMarketOrderReqVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(closeMarketOrder_args.class, metaDataMap);
    }

    public closeMarketOrder_args() {
    }

    public closeMarketOrder_args(
      com.froad.thrift.vo.active.CloseMarketOrderReqVo closeMarketOrderReqVo)
    {
      this();
      this.closeMarketOrderReqVo = closeMarketOrderReqVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public closeMarketOrder_args(closeMarketOrder_args other) {
      if (other.isSetCloseMarketOrderReqVo()) {
        this.closeMarketOrderReqVo = new com.froad.thrift.vo.active.CloseMarketOrderReqVo(other.closeMarketOrderReqVo);
      }
    }

    public closeMarketOrder_args deepCopy() {
      return new closeMarketOrder_args(this);
    }

    @Override
    public void clear() {
      this.closeMarketOrderReqVo = null;
    }

    public com.froad.thrift.vo.active.CloseMarketOrderReqVo getCloseMarketOrderReqVo() {
      return this.closeMarketOrderReqVo;
    }

    public closeMarketOrder_args setCloseMarketOrderReqVo(com.froad.thrift.vo.active.CloseMarketOrderReqVo closeMarketOrderReqVo) {
      this.closeMarketOrderReqVo = closeMarketOrderReqVo;
      return this;
    }

    public void unsetCloseMarketOrderReqVo() {
      this.closeMarketOrderReqVo = null;
    }

    /** Returns true if field closeMarketOrderReqVo is set (has been assigned a value) and false otherwise */
    public boolean isSetCloseMarketOrderReqVo() {
      return this.closeMarketOrderReqVo != null;
    }

    public void setCloseMarketOrderReqVoIsSet(boolean value) {
      if (!value) {
        this.closeMarketOrderReqVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CLOSE_MARKET_ORDER_REQ_VO:
        if (value == null) {
          unsetCloseMarketOrderReqVo();
        } else {
          setCloseMarketOrderReqVo((com.froad.thrift.vo.active.CloseMarketOrderReqVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CLOSE_MARKET_ORDER_REQ_VO:
        return getCloseMarketOrderReqVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CLOSE_MARKET_ORDER_REQ_VO:
        return isSetCloseMarketOrderReqVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof closeMarketOrder_args)
        return this.equals((closeMarketOrder_args)that);
      return false;
    }

    public boolean equals(closeMarketOrder_args that) {
      if (that == null)
        return false;

      boolean this_present_closeMarketOrderReqVo = true && this.isSetCloseMarketOrderReqVo();
      boolean that_present_closeMarketOrderReqVo = true && that.isSetCloseMarketOrderReqVo();
      if (this_present_closeMarketOrderReqVo || that_present_closeMarketOrderReqVo) {
        if (!(this_present_closeMarketOrderReqVo && that_present_closeMarketOrderReqVo))
          return false;
        if (!this.closeMarketOrderReqVo.equals(that.closeMarketOrderReqVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_closeMarketOrderReqVo = true && (isSetCloseMarketOrderReqVo());
      list.add(present_closeMarketOrderReqVo);
      if (present_closeMarketOrderReqVo)
        list.add(closeMarketOrderReqVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(closeMarketOrder_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCloseMarketOrderReqVo()).compareTo(other.isSetCloseMarketOrderReqVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCloseMarketOrderReqVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.closeMarketOrderReqVo, other.closeMarketOrderReqVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("closeMarketOrder_args(");
      boolean first = true;

      sb.append("closeMarketOrderReqVo:");
      if (this.closeMarketOrderReqVo == null) {
        sb.append("null");
      } else {
        sb.append(this.closeMarketOrderReqVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (closeMarketOrderReqVo != null) {
        closeMarketOrderReqVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class closeMarketOrder_argsStandardSchemeFactory implements SchemeFactory {
      public closeMarketOrder_argsStandardScheme getScheme() {
        return new closeMarketOrder_argsStandardScheme();
      }
    }

    private static class closeMarketOrder_argsStandardScheme extends StandardScheme<closeMarketOrder_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, closeMarketOrder_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CLOSE_MARKET_ORDER_REQ_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.closeMarketOrderReqVo = new com.froad.thrift.vo.active.CloseMarketOrderReqVo();
                struct.closeMarketOrderReqVo.read(iprot);
                struct.setCloseMarketOrderReqVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, closeMarketOrder_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.closeMarketOrderReqVo != null) {
          oprot.writeFieldBegin(CLOSE_MARKET_ORDER_REQ_VO_FIELD_DESC);
          struct.closeMarketOrderReqVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class closeMarketOrder_argsTupleSchemeFactory implements SchemeFactory {
      public closeMarketOrder_argsTupleScheme getScheme() {
        return new closeMarketOrder_argsTupleScheme();
      }
    }

    private static class closeMarketOrder_argsTupleScheme extends TupleScheme<closeMarketOrder_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, closeMarketOrder_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCloseMarketOrderReqVo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCloseMarketOrderReqVo()) {
          struct.closeMarketOrderReqVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, closeMarketOrder_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.closeMarketOrderReqVo = new com.froad.thrift.vo.active.CloseMarketOrderReqVo();
          struct.closeMarketOrderReqVo.read(iprot);
          struct.setCloseMarketOrderReqVoIsSet(true);
        }
      }
    }

  }

  public static class closeMarketOrder_result implements org.apache.thrift.TBase<closeMarketOrder_result, closeMarketOrder_result._Fields>, java.io.Serializable, Cloneable, Comparable<closeMarketOrder_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("closeMarketOrder_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new closeMarketOrder_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new closeMarketOrder_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(closeMarketOrder_result.class, metaDataMap);
    }

    public closeMarketOrder_result() {
    }

    public closeMarketOrder_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public closeMarketOrder_result(closeMarketOrder_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public closeMarketOrder_result deepCopy() {
      return new closeMarketOrder_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public closeMarketOrder_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof closeMarketOrder_result)
        return this.equals((closeMarketOrder_result)that);
      return false;
    }

    public boolean equals(closeMarketOrder_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(closeMarketOrder_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("closeMarketOrder_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class closeMarketOrder_resultStandardSchemeFactory implements SchemeFactory {
      public closeMarketOrder_resultStandardScheme getScheme() {
        return new closeMarketOrder_resultStandardScheme();
      }
    }

    private static class closeMarketOrder_resultStandardScheme extends StandardScheme<closeMarketOrder_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, closeMarketOrder_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, closeMarketOrder_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class closeMarketOrder_resultTupleSchemeFactory implements SchemeFactory {
      public closeMarketOrder_resultTupleScheme getScheme() {
        return new closeMarketOrder_resultTupleScheme();
      }
    }

    private static class closeMarketOrder_resultTupleScheme extends TupleScheme<closeMarketOrder_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, closeMarketOrder_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, closeMarketOrder_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class returnMarketOrder_args implements org.apache.thrift.TBase<returnMarketOrder_args, returnMarketOrder_args._Fields>, java.io.Serializable, Cloneable, Comparable<returnMarketOrder_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("returnMarketOrder_args");

    private static final org.apache.thrift.protocol.TField RETURN_MARKET_ORDER_REQ_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("returnMarketOrderReqVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new returnMarketOrder_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new returnMarketOrder_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.active.ReturnMarketOrderReqVo returnMarketOrderReqVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      RETURN_MARKET_ORDER_REQ_VO((short)1, "returnMarketOrderReqVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // RETURN_MARKET_ORDER_REQ_VO
            return RETURN_MARKET_ORDER_REQ_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.RETURN_MARKET_ORDER_REQ_VO, new org.apache.thrift.meta_data.FieldMetaData("returnMarketOrderReqVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.active.ReturnMarketOrderReqVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(returnMarketOrder_args.class, metaDataMap);
    }

    public returnMarketOrder_args() {
    }

    public returnMarketOrder_args(
      com.froad.thrift.vo.active.ReturnMarketOrderReqVo returnMarketOrderReqVo)
    {
      this();
      this.returnMarketOrderReqVo = returnMarketOrderReqVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public returnMarketOrder_args(returnMarketOrder_args other) {
      if (other.isSetReturnMarketOrderReqVo()) {
        this.returnMarketOrderReqVo = new com.froad.thrift.vo.active.ReturnMarketOrderReqVo(other.returnMarketOrderReqVo);
      }
    }

    public returnMarketOrder_args deepCopy() {
      return new returnMarketOrder_args(this);
    }

    @Override
    public void clear() {
      this.returnMarketOrderReqVo = null;
    }

    public com.froad.thrift.vo.active.ReturnMarketOrderReqVo getReturnMarketOrderReqVo() {
      return this.returnMarketOrderReqVo;
    }

    public returnMarketOrder_args setReturnMarketOrderReqVo(com.froad.thrift.vo.active.ReturnMarketOrderReqVo returnMarketOrderReqVo) {
      this.returnMarketOrderReqVo = returnMarketOrderReqVo;
      return this;
    }

    public void unsetReturnMarketOrderReqVo() {
      this.returnMarketOrderReqVo = null;
    }

    /** Returns true if field returnMarketOrderReqVo is set (has been assigned a value) and false otherwise */
    public boolean isSetReturnMarketOrderReqVo() {
      return this.returnMarketOrderReqVo != null;
    }

    public void setReturnMarketOrderReqVoIsSet(boolean value) {
      if (!value) {
        this.returnMarketOrderReqVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case RETURN_MARKET_ORDER_REQ_VO:
        if (value == null) {
          unsetReturnMarketOrderReqVo();
        } else {
          setReturnMarketOrderReqVo((com.froad.thrift.vo.active.ReturnMarketOrderReqVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case RETURN_MARKET_ORDER_REQ_VO:
        return getReturnMarketOrderReqVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case RETURN_MARKET_ORDER_REQ_VO:
        return isSetReturnMarketOrderReqVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof returnMarketOrder_args)
        return this.equals((returnMarketOrder_args)that);
      return false;
    }

    public boolean equals(returnMarketOrder_args that) {
      if (that == null)
        return false;

      boolean this_present_returnMarketOrderReqVo = true && this.isSetReturnMarketOrderReqVo();
      boolean that_present_returnMarketOrderReqVo = true && that.isSetReturnMarketOrderReqVo();
      if (this_present_returnMarketOrderReqVo || that_present_returnMarketOrderReqVo) {
        if (!(this_present_returnMarketOrderReqVo && that_present_returnMarketOrderReqVo))
          return false;
        if (!this.returnMarketOrderReqVo.equals(that.returnMarketOrderReqVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_returnMarketOrderReqVo = true && (isSetReturnMarketOrderReqVo());
      list.add(present_returnMarketOrderReqVo);
      if (present_returnMarketOrderReqVo)
        list.add(returnMarketOrderReqVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(returnMarketOrder_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetReturnMarketOrderReqVo()).compareTo(other.isSetReturnMarketOrderReqVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReturnMarketOrderReqVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.returnMarketOrderReqVo, other.returnMarketOrderReqVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("returnMarketOrder_args(");
      boolean first = true;

      sb.append("returnMarketOrderReqVo:");
      if (this.returnMarketOrderReqVo == null) {
        sb.append("null");
      } else {
        sb.append(this.returnMarketOrderReqVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (returnMarketOrderReqVo != null) {
        returnMarketOrderReqVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class returnMarketOrder_argsStandardSchemeFactory implements SchemeFactory {
      public returnMarketOrder_argsStandardScheme getScheme() {
        return new returnMarketOrder_argsStandardScheme();
      }
    }

    private static class returnMarketOrder_argsStandardScheme extends StandardScheme<returnMarketOrder_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, returnMarketOrder_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // RETURN_MARKET_ORDER_REQ_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.returnMarketOrderReqVo = new com.froad.thrift.vo.active.ReturnMarketOrderReqVo();
                struct.returnMarketOrderReqVo.read(iprot);
                struct.setReturnMarketOrderReqVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, returnMarketOrder_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.returnMarketOrderReqVo != null) {
          oprot.writeFieldBegin(RETURN_MARKET_ORDER_REQ_VO_FIELD_DESC);
          struct.returnMarketOrderReqVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class returnMarketOrder_argsTupleSchemeFactory implements SchemeFactory {
      public returnMarketOrder_argsTupleScheme getScheme() {
        return new returnMarketOrder_argsTupleScheme();
      }
    }

    private static class returnMarketOrder_argsTupleScheme extends TupleScheme<returnMarketOrder_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, returnMarketOrder_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetReturnMarketOrderReqVo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetReturnMarketOrderReqVo()) {
          struct.returnMarketOrderReqVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, returnMarketOrder_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.returnMarketOrderReqVo = new com.froad.thrift.vo.active.ReturnMarketOrderReqVo();
          struct.returnMarketOrderReqVo.read(iprot);
          struct.setReturnMarketOrderReqVoIsSet(true);
        }
      }
    }

  }

  public static class returnMarketOrder_result implements org.apache.thrift.TBase<returnMarketOrder_result, returnMarketOrder_result._Fields>, java.io.Serializable, Cloneable, Comparable<returnMarketOrder_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("returnMarketOrder_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new returnMarketOrder_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new returnMarketOrder_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.active.ReturnMarketOrderResVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.active.ReturnMarketOrderResVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(returnMarketOrder_result.class, metaDataMap);
    }

    public returnMarketOrder_result() {
    }

    public returnMarketOrder_result(
      com.froad.thrift.vo.active.ReturnMarketOrderResVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public returnMarketOrder_result(returnMarketOrder_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.active.ReturnMarketOrderResVo(other.success);
      }
    }

    public returnMarketOrder_result deepCopy() {
      return new returnMarketOrder_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.active.ReturnMarketOrderResVo getSuccess() {
      return this.success;
    }

    public returnMarketOrder_result setSuccess(com.froad.thrift.vo.active.ReturnMarketOrderResVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.active.ReturnMarketOrderResVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof returnMarketOrder_result)
        return this.equals((returnMarketOrder_result)that);
      return false;
    }

    public boolean equals(returnMarketOrder_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(returnMarketOrder_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("returnMarketOrder_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class returnMarketOrder_resultStandardSchemeFactory implements SchemeFactory {
      public returnMarketOrder_resultStandardScheme getScheme() {
        return new returnMarketOrder_resultStandardScheme();
      }
    }

    private static class returnMarketOrder_resultStandardScheme extends StandardScheme<returnMarketOrder_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, returnMarketOrder_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.active.ReturnMarketOrderResVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, returnMarketOrder_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class returnMarketOrder_resultTupleSchemeFactory implements SchemeFactory {
      public returnMarketOrder_resultTupleScheme getScheme() {
        return new returnMarketOrder_resultTupleScheme();
      }
    }

    private static class returnMarketOrder_resultTupleScheme extends TupleScheme<returnMarketOrder_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, returnMarketOrder_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, returnMarketOrder_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.active.ReturnMarketOrderResVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class returnMarketOrderBack_args implements org.apache.thrift.TBase<returnMarketOrderBack_args, returnMarketOrderBack_args._Fields>, java.io.Serializable, Cloneable, Comparable<returnMarketOrderBack_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("returnMarketOrderBack_args");

    private static final org.apache.thrift.protocol.TField RETURN_MARKET_ORDER_BACK_REQ_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("returnMarketOrderBackReqVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new returnMarketOrderBack_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new returnMarketOrderBack_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.active.ReturnMarketOrderBackReqVo returnMarketOrderBackReqVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      RETURN_MARKET_ORDER_BACK_REQ_VO((short)1, "returnMarketOrderBackReqVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // RETURN_MARKET_ORDER_BACK_REQ_VO
            return RETURN_MARKET_ORDER_BACK_REQ_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.RETURN_MARKET_ORDER_BACK_REQ_VO, new org.apache.thrift.meta_data.FieldMetaData("returnMarketOrderBackReqVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.active.ReturnMarketOrderBackReqVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(returnMarketOrderBack_args.class, metaDataMap);
    }

    public returnMarketOrderBack_args() {
    }

    public returnMarketOrderBack_args(
      com.froad.thrift.vo.active.ReturnMarketOrderBackReqVo returnMarketOrderBackReqVo)
    {
      this();
      this.returnMarketOrderBackReqVo = returnMarketOrderBackReqVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public returnMarketOrderBack_args(returnMarketOrderBack_args other) {
      if (other.isSetReturnMarketOrderBackReqVo()) {
        this.returnMarketOrderBackReqVo = new com.froad.thrift.vo.active.ReturnMarketOrderBackReqVo(other.returnMarketOrderBackReqVo);
      }
    }

    public returnMarketOrderBack_args deepCopy() {
      return new returnMarketOrderBack_args(this);
    }

    @Override
    public void clear() {
      this.returnMarketOrderBackReqVo = null;
    }

    public com.froad.thrift.vo.active.ReturnMarketOrderBackReqVo getReturnMarketOrderBackReqVo() {
      return this.returnMarketOrderBackReqVo;
    }

    public returnMarketOrderBack_args setReturnMarketOrderBackReqVo(com.froad.thrift.vo.active.ReturnMarketOrderBackReqVo returnMarketOrderBackReqVo) {
      this.returnMarketOrderBackReqVo = returnMarketOrderBackReqVo;
      return this;
    }

    public void unsetReturnMarketOrderBackReqVo() {
      this.returnMarketOrderBackReqVo = null;
    }

    /** Returns true if field returnMarketOrderBackReqVo is set (has been assigned a value) and false otherwise */
    public boolean isSetReturnMarketOrderBackReqVo() {
      return this.returnMarketOrderBackReqVo != null;
    }

    public void setReturnMarketOrderBackReqVoIsSet(boolean value) {
      if (!value) {
        this.returnMarketOrderBackReqVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case RETURN_MARKET_ORDER_BACK_REQ_VO:
        if (value == null) {
          unsetReturnMarketOrderBackReqVo();
        } else {
          setReturnMarketOrderBackReqVo((com.froad.thrift.vo.active.ReturnMarketOrderBackReqVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case RETURN_MARKET_ORDER_BACK_REQ_VO:
        return getReturnMarketOrderBackReqVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case RETURN_MARKET_ORDER_BACK_REQ_VO:
        return isSetReturnMarketOrderBackReqVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof returnMarketOrderBack_args)
        return this.equals((returnMarketOrderBack_args)that);
      return false;
    }

    public boolean equals(returnMarketOrderBack_args that) {
      if (that == null)
        return false;

      boolean this_present_returnMarketOrderBackReqVo = true && this.isSetReturnMarketOrderBackReqVo();
      boolean that_present_returnMarketOrderBackReqVo = true && that.isSetReturnMarketOrderBackReqVo();
      if (this_present_returnMarketOrderBackReqVo || that_present_returnMarketOrderBackReqVo) {
        if (!(this_present_returnMarketOrderBackReqVo && that_present_returnMarketOrderBackReqVo))
          return false;
        if (!this.returnMarketOrderBackReqVo.equals(that.returnMarketOrderBackReqVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_returnMarketOrderBackReqVo = true && (isSetReturnMarketOrderBackReqVo());
      list.add(present_returnMarketOrderBackReqVo);
      if (present_returnMarketOrderBackReqVo)
        list.add(returnMarketOrderBackReqVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(returnMarketOrderBack_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetReturnMarketOrderBackReqVo()).compareTo(other.isSetReturnMarketOrderBackReqVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReturnMarketOrderBackReqVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.returnMarketOrderBackReqVo, other.returnMarketOrderBackReqVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("returnMarketOrderBack_args(");
      boolean first = true;

      sb.append("returnMarketOrderBackReqVo:");
      if (this.returnMarketOrderBackReqVo == null) {
        sb.append("null");
      } else {
        sb.append(this.returnMarketOrderBackReqVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (returnMarketOrderBackReqVo != null) {
        returnMarketOrderBackReqVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class returnMarketOrderBack_argsStandardSchemeFactory implements SchemeFactory {
      public returnMarketOrderBack_argsStandardScheme getScheme() {
        return new returnMarketOrderBack_argsStandardScheme();
      }
    }

    private static class returnMarketOrderBack_argsStandardScheme extends StandardScheme<returnMarketOrderBack_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, returnMarketOrderBack_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // RETURN_MARKET_ORDER_BACK_REQ_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.returnMarketOrderBackReqVo = new com.froad.thrift.vo.active.ReturnMarketOrderBackReqVo();
                struct.returnMarketOrderBackReqVo.read(iprot);
                struct.setReturnMarketOrderBackReqVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, returnMarketOrderBack_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.returnMarketOrderBackReqVo != null) {
          oprot.writeFieldBegin(RETURN_MARKET_ORDER_BACK_REQ_VO_FIELD_DESC);
          struct.returnMarketOrderBackReqVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class returnMarketOrderBack_argsTupleSchemeFactory implements SchemeFactory {
      public returnMarketOrderBack_argsTupleScheme getScheme() {
        return new returnMarketOrderBack_argsTupleScheme();
      }
    }

    private static class returnMarketOrderBack_argsTupleScheme extends TupleScheme<returnMarketOrderBack_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, returnMarketOrderBack_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetReturnMarketOrderBackReqVo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetReturnMarketOrderBackReqVo()) {
          struct.returnMarketOrderBackReqVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, returnMarketOrderBack_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.returnMarketOrderBackReqVo = new com.froad.thrift.vo.active.ReturnMarketOrderBackReqVo();
          struct.returnMarketOrderBackReqVo.read(iprot);
          struct.setReturnMarketOrderBackReqVoIsSet(true);
        }
      }
    }

  }

  public static class returnMarketOrderBack_result implements org.apache.thrift.TBase<returnMarketOrderBack_result, returnMarketOrderBack_result._Fields>, java.io.Serializable, Cloneable, Comparable<returnMarketOrderBack_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("returnMarketOrderBack_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new returnMarketOrderBack_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new returnMarketOrderBack_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(returnMarketOrderBack_result.class, metaDataMap);
    }

    public returnMarketOrderBack_result() {
    }

    public returnMarketOrderBack_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public returnMarketOrderBack_result(returnMarketOrderBack_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public returnMarketOrderBack_result deepCopy() {
      return new returnMarketOrderBack_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public returnMarketOrderBack_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof returnMarketOrderBack_result)
        return this.equals((returnMarketOrderBack_result)that);
      return false;
    }

    public boolean equals(returnMarketOrderBack_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(returnMarketOrderBack_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("returnMarketOrderBack_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class returnMarketOrderBack_resultStandardSchemeFactory implements SchemeFactory {
      public returnMarketOrderBack_resultStandardScheme getScheme() {
        return new returnMarketOrderBack_resultStandardScheme();
      }
    }

    private static class returnMarketOrderBack_resultStandardScheme extends StandardScheme<returnMarketOrderBack_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, returnMarketOrderBack_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, returnMarketOrderBack_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class returnMarketOrderBack_resultTupleSchemeFactory implements SchemeFactory {
      public returnMarketOrderBack_resultTupleScheme getScheme() {
        return new returnMarketOrderBack_resultTupleScheme();
      }
    }

    private static class returnMarketOrderBack_resultTupleScheme extends TupleScheme<returnMarketOrderBack_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, returnMarketOrderBack_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, returnMarketOrderBack_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateMarketOrder_args implements org.apache.thrift.TBase<updateMarketOrder_args, updateMarketOrder_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateMarketOrder_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateMarketOrder_args");

    private static final org.apache.thrift.protocol.TField UPDATE_MARKET_ORDER_REQ_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("updateMarketOrderReqVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateMarketOrder_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateMarketOrder_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.active.UpdateMarketOrderReqVo updateMarketOrderReqVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      UPDATE_MARKET_ORDER_REQ_VO((short)1, "updateMarketOrderReqVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // UPDATE_MARKET_ORDER_REQ_VO
            return UPDATE_MARKET_ORDER_REQ_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UPDATE_MARKET_ORDER_REQ_VO, new org.apache.thrift.meta_data.FieldMetaData("updateMarketOrderReqVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.active.UpdateMarketOrderReqVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateMarketOrder_args.class, metaDataMap);
    }

    public updateMarketOrder_args() {
    }

    public updateMarketOrder_args(
      com.froad.thrift.vo.active.UpdateMarketOrderReqVo updateMarketOrderReqVo)
    {
      this();
      this.updateMarketOrderReqVo = updateMarketOrderReqVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateMarketOrder_args(updateMarketOrder_args other) {
      if (other.isSetUpdateMarketOrderReqVo()) {
        this.updateMarketOrderReqVo = new com.froad.thrift.vo.active.UpdateMarketOrderReqVo(other.updateMarketOrderReqVo);
      }
    }

    public updateMarketOrder_args deepCopy() {
      return new updateMarketOrder_args(this);
    }

    @Override
    public void clear() {
      this.updateMarketOrderReqVo = null;
    }

    public com.froad.thrift.vo.active.UpdateMarketOrderReqVo getUpdateMarketOrderReqVo() {
      return this.updateMarketOrderReqVo;
    }

    public updateMarketOrder_args setUpdateMarketOrderReqVo(com.froad.thrift.vo.active.UpdateMarketOrderReqVo updateMarketOrderReqVo) {
      this.updateMarketOrderReqVo = updateMarketOrderReqVo;
      return this;
    }

    public void unsetUpdateMarketOrderReqVo() {
      this.updateMarketOrderReqVo = null;
    }

    /** Returns true if field updateMarketOrderReqVo is set (has been assigned a value) and false otherwise */
    public boolean isSetUpdateMarketOrderReqVo() {
      return this.updateMarketOrderReqVo != null;
    }

    public void setUpdateMarketOrderReqVoIsSet(boolean value) {
      if (!value) {
        this.updateMarketOrderReqVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case UPDATE_MARKET_ORDER_REQ_VO:
        if (value == null) {
          unsetUpdateMarketOrderReqVo();
        } else {
          setUpdateMarketOrderReqVo((com.froad.thrift.vo.active.UpdateMarketOrderReqVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case UPDATE_MARKET_ORDER_REQ_VO:
        return getUpdateMarketOrderReqVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case UPDATE_MARKET_ORDER_REQ_VO:
        return isSetUpdateMarketOrderReqVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateMarketOrder_args)
        return this.equals((updateMarketOrder_args)that);
      return false;
    }

    public boolean equals(updateMarketOrder_args that) {
      if (that == null)
        return false;

      boolean this_present_updateMarketOrderReqVo = true && this.isSetUpdateMarketOrderReqVo();
      boolean that_present_updateMarketOrderReqVo = true && that.isSetUpdateMarketOrderReqVo();
      if (this_present_updateMarketOrderReqVo || that_present_updateMarketOrderReqVo) {
        if (!(this_present_updateMarketOrderReqVo && that_present_updateMarketOrderReqVo))
          return false;
        if (!this.updateMarketOrderReqVo.equals(that.updateMarketOrderReqVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_updateMarketOrderReqVo = true && (isSetUpdateMarketOrderReqVo());
      list.add(present_updateMarketOrderReqVo);
      if (present_updateMarketOrderReqVo)
        list.add(updateMarketOrderReqVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateMarketOrder_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUpdateMarketOrderReqVo()).compareTo(other.isSetUpdateMarketOrderReqVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUpdateMarketOrderReqVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateMarketOrderReqVo, other.updateMarketOrderReqVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateMarketOrder_args(");
      boolean first = true;

      sb.append("updateMarketOrderReqVo:");
      if (this.updateMarketOrderReqVo == null) {
        sb.append("null");
      } else {
        sb.append(this.updateMarketOrderReqVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (updateMarketOrderReqVo != null) {
        updateMarketOrderReqVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateMarketOrder_argsStandardSchemeFactory implements SchemeFactory {
      public updateMarketOrder_argsStandardScheme getScheme() {
        return new updateMarketOrder_argsStandardScheme();
      }
    }

    private static class updateMarketOrder_argsStandardScheme extends StandardScheme<updateMarketOrder_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateMarketOrder_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // UPDATE_MARKET_ORDER_REQ_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.updateMarketOrderReqVo = new com.froad.thrift.vo.active.UpdateMarketOrderReqVo();
                struct.updateMarketOrderReqVo.read(iprot);
                struct.setUpdateMarketOrderReqVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateMarketOrder_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.updateMarketOrderReqVo != null) {
          oprot.writeFieldBegin(UPDATE_MARKET_ORDER_REQ_VO_FIELD_DESC);
          struct.updateMarketOrderReqVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateMarketOrder_argsTupleSchemeFactory implements SchemeFactory {
      public updateMarketOrder_argsTupleScheme getScheme() {
        return new updateMarketOrder_argsTupleScheme();
      }
    }

    private static class updateMarketOrder_argsTupleScheme extends TupleScheme<updateMarketOrder_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateMarketOrder_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUpdateMarketOrderReqVo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUpdateMarketOrderReqVo()) {
          struct.updateMarketOrderReqVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateMarketOrder_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.updateMarketOrderReqVo = new com.froad.thrift.vo.active.UpdateMarketOrderReqVo();
          struct.updateMarketOrderReqVo.read(iprot);
          struct.setUpdateMarketOrderReqVoIsSet(true);
        }
      }
    }

  }

  public static class updateMarketOrder_result implements org.apache.thrift.TBase<updateMarketOrder_result, updateMarketOrder_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateMarketOrder_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateMarketOrder_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateMarketOrder_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateMarketOrder_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.active.UpdateMarketOrderResVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.active.UpdateMarketOrderResVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateMarketOrder_result.class, metaDataMap);
    }

    public updateMarketOrder_result() {
    }

    public updateMarketOrder_result(
      com.froad.thrift.vo.active.UpdateMarketOrderResVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateMarketOrder_result(updateMarketOrder_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.active.UpdateMarketOrderResVo(other.success);
      }
    }

    public updateMarketOrder_result deepCopy() {
      return new updateMarketOrder_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.active.UpdateMarketOrderResVo getSuccess() {
      return this.success;
    }

    public updateMarketOrder_result setSuccess(com.froad.thrift.vo.active.UpdateMarketOrderResVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.active.UpdateMarketOrderResVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateMarketOrder_result)
        return this.equals((updateMarketOrder_result)that);
      return false;
    }

    public boolean equals(updateMarketOrder_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateMarketOrder_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateMarketOrder_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateMarketOrder_resultStandardSchemeFactory implements SchemeFactory {
      public updateMarketOrder_resultStandardScheme getScheme() {
        return new updateMarketOrder_resultStandardScheme();
      }
    }

    private static class updateMarketOrder_resultStandardScheme extends StandardScheme<updateMarketOrder_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateMarketOrder_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.active.UpdateMarketOrderResVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateMarketOrder_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateMarketOrder_resultTupleSchemeFactory implements SchemeFactory {
      public updateMarketOrder_resultTupleScheme getScheme() {
        return new updateMarketOrder_resultTupleScheme();
      }
    }

    private static class updateMarketOrder_resultTupleScheme extends TupleScheme<updateMarketOrder_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateMarketOrder_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateMarketOrder_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.active.UpdateMarketOrderResVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class settlementMarkOrder_args implements org.apache.thrift.TBase<settlementMarkOrder_args, settlementMarkOrder_args._Fields>, java.io.Serializable, Cloneable, Comparable<settlementMarkOrder_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("settlementMarkOrder_args");

    private static final org.apache.thrift.protocol.TField SETTLEMENT_MARK_ORDER_REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("settlementMarkOrderReq", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new settlementMarkOrder_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new settlementMarkOrder_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.active.SettlementMarkOrderReq settlementMarkOrderReq; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SETTLEMENT_MARK_ORDER_REQ((short)1, "settlementMarkOrderReq");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SETTLEMENT_MARK_ORDER_REQ
            return SETTLEMENT_MARK_ORDER_REQ;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SETTLEMENT_MARK_ORDER_REQ, new org.apache.thrift.meta_data.FieldMetaData("settlementMarkOrderReq", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.active.SettlementMarkOrderReq.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(settlementMarkOrder_args.class, metaDataMap);
    }

    public settlementMarkOrder_args() {
    }

    public settlementMarkOrder_args(
      com.froad.thrift.vo.active.SettlementMarkOrderReq settlementMarkOrderReq)
    {
      this();
      this.settlementMarkOrderReq = settlementMarkOrderReq;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public settlementMarkOrder_args(settlementMarkOrder_args other) {
      if (other.isSetSettlementMarkOrderReq()) {
        this.settlementMarkOrderReq = new com.froad.thrift.vo.active.SettlementMarkOrderReq(other.settlementMarkOrderReq);
      }
    }

    public settlementMarkOrder_args deepCopy() {
      return new settlementMarkOrder_args(this);
    }

    @Override
    public void clear() {
      this.settlementMarkOrderReq = null;
    }

    public com.froad.thrift.vo.active.SettlementMarkOrderReq getSettlementMarkOrderReq() {
      return this.settlementMarkOrderReq;
    }

    public settlementMarkOrder_args setSettlementMarkOrderReq(com.froad.thrift.vo.active.SettlementMarkOrderReq settlementMarkOrderReq) {
      this.settlementMarkOrderReq = settlementMarkOrderReq;
      return this;
    }

    public void unsetSettlementMarkOrderReq() {
      this.settlementMarkOrderReq = null;
    }

    /** Returns true if field settlementMarkOrderReq is set (has been assigned a value) and false otherwise */
    public boolean isSetSettlementMarkOrderReq() {
      return this.settlementMarkOrderReq != null;
    }

    public void setSettlementMarkOrderReqIsSet(boolean value) {
      if (!value) {
        this.settlementMarkOrderReq = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SETTLEMENT_MARK_ORDER_REQ:
        if (value == null) {
          unsetSettlementMarkOrderReq();
        } else {
          setSettlementMarkOrderReq((com.froad.thrift.vo.active.SettlementMarkOrderReq)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SETTLEMENT_MARK_ORDER_REQ:
        return getSettlementMarkOrderReq();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SETTLEMENT_MARK_ORDER_REQ:
        return isSetSettlementMarkOrderReq();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof settlementMarkOrder_args)
        return this.equals((settlementMarkOrder_args)that);
      return false;
    }

    public boolean equals(settlementMarkOrder_args that) {
      if (that == null)
        return false;

      boolean this_present_settlementMarkOrderReq = true && this.isSetSettlementMarkOrderReq();
      boolean that_present_settlementMarkOrderReq = true && that.isSetSettlementMarkOrderReq();
      if (this_present_settlementMarkOrderReq || that_present_settlementMarkOrderReq) {
        if (!(this_present_settlementMarkOrderReq && that_present_settlementMarkOrderReq))
          return false;
        if (!this.settlementMarkOrderReq.equals(that.settlementMarkOrderReq))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_settlementMarkOrderReq = true && (isSetSettlementMarkOrderReq());
      list.add(present_settlementMarkOrderReq);
      if (present_settlementMarkOrderReq)
        list.add(settlementMarkOrderReq);

      return list.hashCode();
    }

    @Override
    public int compareTo(settlementMarkOrder_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSettlementMarkOrderReq()).compareTo(other.isSetSettlementMarkOrderReq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSettlementMarkOrderReq()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.settlementMarkOrderReq, other.settlementMarkOrderReq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("settlementMarkOrder_args(");
      boolean first = true;

      sb.append("settlementMarkOrderReq:");
      if (this.settlementMarkOrderReq == null) {
        sb.append("null");
      } else {
        sb.append(this.settlementMarkOrderReq);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (settlementMarkOrderReq != null) {
        settlementMarkOrderReq.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class settlementMarkOrder_argsStandardSchemeFactory implements SchemeFactory {
      public settlementMarkOrder_argsStandardScheme getScheme() {
        return new settlementMarkOrder_argsStandardScheme();
      }
    }

    private static class settlementMarkOrder_argsStandardScheme extends StandardScheme<settlementMarkOrder_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, settlementMarkOrder_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SETTLEMENT_MARK_ORDER_REQ
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.settlementMarkOrderReq = new com.froad.thrift.vo.active.SettlementMarkOrderReq();
                struct.settlementMarkOrderReq.read(iprot);
                struct.setSettlementMarkOrderReqIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, settlementMarkOrder_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.settlementMarkOrderReq != null) {
          oprot.writeFieldBegin(SETTLEMENT_MARK_ORDER_REQ_FIELD_DESC);
          struct.settlementMarkOrderReq.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class settlementMarkOrder_argsTupleSchemeFactory implements SchemeFactory {
      public settlementMarkOrder_argsTupleScheme getScheme() {
        return new settlementMarkOrder_argsTupleScheme();
      }
    }

    private static class settlementMarkOrder_argsTupleScheme extends TupleScheme<settlementMarkOrder_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, settlementMarkOrder_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSettlementMarkOrderReq()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSettlementMarkOrderReq()) {
          struct.settlementMarkOrderReq.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, settlementMarkOrder_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.settlementMarkOrderReq = new com.froad.thrift.vo.active.SettlementMarkOrderReq();
          struct.settlementMarkOrderReq.read(iprot);
          struct.setSettlementMarkOrderReqIsSet(true);
        }
      }
    }

  }

  public static class settlementMarkOrder_result implements org.apache.thrift.TBase<settlementMarkOrder_result, settlementMarkOrder_result._Fields>, java.io.Serializable, Cloneable, Comparable<settlementMarkOrder_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("settlementMarkOrder_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new settlementMarkOrder_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new settlementMarkOrder_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.active.SettlementMarkOrderRes success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.active.SettlementMarkOrderRes.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(settlementMarkOrder_result.class, metaDataMap);
    }

    public settlementMarkOrder_result() {
    }

    public settlementMarkOrder_result(
      com.froad.thrift.vo.active.SettlementMarkOrderRes success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public settlementMarkOrder_result(settlementMarkOrder_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.active.SettlementMarkOrderRes(other.success);
      }
    }

    public settlementMarkOrder_result deepCopy() {
      return new settlementMarkOrder_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.active.SettlementMarkOrderRes getSuccess() {
      return this.success;
    }

    public settlementMarkOrder_result setSuccess(com.froad.thrift.vo.active.SettlementMarkOrderRes success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.active.SettlementMarkOrderRes)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof settlementMarkOrder_result)
        return this.equals((settlementMarkOrder_result)that);
      return false;
    }

    public boolean equals(settlementMarkOrder_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(settlementMarkOrder_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("settlementMarkOrder_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class settlementMarkOrder_resultStandardSchemeFactory implements SchemeFactory {
      public settlementMarkOrder_resultStandardScheme getScheme() {
        return new settlementMarkOrder_resultStandardScheme();
      }
    }

    private static class settlementMarkOrder_resultStandardScheme extends StandardScheme<settlementMarkOrder_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, settlementMarkOrder_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.active.SettlementMarkOrderRes();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, settlementMarkOrder_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class settlementMarkOrder_resultTupleSchemeFactory implements SchemeFactory {
      public settlementMarkOrder_resultTupleScheme getScheme() {
        return new settlementMarkOrder_resultTupleScheme();
      }
    }

    private static class settlementMarkOrder_resultTupleScheme extends TupleScheme<settlementMarkOrder_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, settlementMarkOrder_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, settlementMarkOrder_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.active.SettlementMarkOrderRes();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class putFullCut_args implements org.apache.thrift.TBase<putFullCut_args, putFullCut_args._Fields>, java.io.Serializable, Cloneable, Comparable<putFullCut_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("putFullCut_args");

    private static final org.apache.thrift.protocol.TField PUT_FULL_CUT_REQ_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("putFullCutReqVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new putFullCut_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new putFullCut_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.active.PutFullCutReqVo putFullCutReqVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PUT_FULL_CUT_REQ_VO((short)1, "putFullCutReqVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PUT_FULL_CUT_REQ_VO
            return PUT_FULL_CUT_REQ_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PUT_FULL_CUT_REQ_VO, new org.apache.thrift.meta_data.FieldMetaData("putFullCutReqVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.active.PutFullCutReqVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(putFullCut_args.class, metaDataMap);
    }

    public putFullCut_args() {
    }

    public putFullCut_args(
      com.froad.thrift.vo.active.PutFullCutReqVo putFullCutReqVo)
    {
      this();
      this.putFullCutReqVo = putFullCutReqVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public putFullCut_args(putFullCut_args other) {
      if (other.isSetPutFullCutReqVo()) {
        this.putFullCutReqVo = new com.froad.thrift.vo.active.PutFullCutReqVo(other.putFullCutReqVo);
      }
    }

    public putFullCut_args deepCopy() {
      return new putFullCut_args(this);
    }

    @Override
    public void clear() {
      this.putFullCutReqVo = null;
    }

    public com.froad.thrift.vo.active.PutFullCutReqVo getPutFullCutReqVo() {
      return this.putFullCutReqVo;
    }

    public putFullCut_args setPutFullCutReqVo(com.froad.thrift.vo.active.PutFullCutReqVo putFullCutReqVo) {
      this.putFullCutReqVo = putFullCutReqVo;
      return this;
    }

    public void unsetPutFullCutReqVo() {
      this.putFullCutReqVo = null;
    }

    /** Returns true if field putFullCutReqVo is set (has been assigned a value) and false otherwise */
    public boolean isSetPutFullCutReqVo() {
      return this.putFullCutReqVo != null;
    }

    public void setPutFullCutReqVoIsSet(boolean value) {
      if (!value) {
        this.putFullCutReqVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PUT_FULL_CUT_REQ_VO:
        if (value == null) {
          unsetPutFullCutReqVo();
        } else {
          setPutFullCutReqVo((com.froad.thrift.vo.active.PutFullCutReqVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PUT_FULL_CUT_REQ_VO:
        return getPutFullCutReqVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PUT_FULL_CUT_REQ_VO:
        return isSetPutFullCutReqVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof putFullCut_args)
        return this.equals((putFullCut_args)that);
      return false;
    }

    public boolean equals(putFullCut_args that) {
      if (that == null)
        return false;

      boolean this_present_putFullCutReqVo = true && this.isSetPutFullCutReqVo();
      boolean that_present_putFullCutReqVo = true && that.isSetPutFullCutReqVo();
      if (this_present_putFullCutReqVo || that_present_putFullCutReqVo) {
        if (!(this_present_putFullCutReqVo && that_present_putFullCutReqVo))
          return false;
        if (!this.putFullCutReqVo.equals(that.putFullCutReqVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_putFullCutReqVo = true && (isSetPutFullCutReqVo());
      list.add(present_putFullCutReqVo);
      if (present_putFullCutReqVo)
        list.add(putFullCutReqVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(putFullCut_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPutFullCutReqVo()).compareTo(other.isSetPutFullCutReqVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPutFullCutReqVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.putFullCutReqVo, other.putFullCutReqVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("putFullCut_args(");
      boolean first = true;

      sb.append("putFullCutReqVo:");
      if (this.putFullCutReqVo == null) {
        sb.append("null");
      } else {
        sb.append(this.putFullCutReqVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (putFullCutReqVo != null) {
        putFullCutReqVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class putFullCut_argsStandardSchemeFactory implements SchemeFactory {
      public putFullCut_argsStandardScheme getScheme() {
        return new putFullCut_argsStandardScheme();
      }
    }

    private static class putFullCut_argsStandardScheme extends StandardScheme<putFullCut_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, putFullCut_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PUT_FULL_CUT_REQ_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.putFullCutReqVo = new com.froad.thrift.vo.active.PutFullCutReqVo();
                struct.putFullCutReqVo.read(iprot);
                struct.setPutFullCutReqVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, putFullCut_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.putFullCutReqVo != null) {
          oprot.writeFieldBegin(PUT_FULL_CUT_REQ_VO_FIELD_DESC);
          struct.putFullCutReqVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class putFullCut_argsTupleSchemeFactory implements SchemeFactory {
      public putFullCut_argsTupleScheme getScheme() {
        return new putFullCut_argsTupleScheme();
      }
    }

    private static class putFullCut_argsTupleScheme extends TupleScheme<putFullCut_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, putFullCut_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPutFullCutReqVo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPutFullCutReqVo()) {
          struct.putFullCutReqVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, putFullCut_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.putFullCutReqVo = new com.froad.thrift.vo.active.PutFullCutReqVo();
          struct.putFullCutReqVo.read(iprot);
          struct.setPutFullCutReqVoIsSet(true);
        }
      }
    }

  }

  public static class putFullCut_result implements org.apache.thrift.TBase<putFullCut_result, putFullCut_result._Fields>, java.io.Serializable, Cloneable, Comparable<putFullCut_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("putFullCut_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new putFullCut_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new putFullCut_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(putFullCut_result.class, metaDataMap);
    }

    public putFullCut_result() {
    }

    public putFullCut_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public putFullCut_result(putFullCut_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public putFullCut_result deepCopy() {
      return new putFullCut_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public putFullCut_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof putFullCut_result)
        return this.equals((putFullCut_result)that);
      return false;
    }

    public boolean equals(putFullCut_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(putFullCut_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("putFullCut_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class putFullCut_resultStandardSchemeFactory implements SchemeFactory {
      public putFullCut_resultStandardScheme getScheme() {
        return new putFullCut_resultStandardScheme();
      }
    }

    private static class putFullCut_resultStandardScheme extends StandardScheme<putFullCut_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, putFullCut_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, putFullCut_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class putFullCut_resultTupleSchemeFactory implements SchemeFactory {
      public putFullCut_resultTupleScheme getScheme() {
        return new putFullCut_resultTupleScheme();
      }
    }

    private static class putFullCut_resultTupleScheme extends TupleScheme<putFullCut_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, putFullCut_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, putFullCut_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class fullGiveCheck_args implements org.apache.thrift.TBase<fullGiveCheck_args, fullGiveCheck_args._Fields>, java.io.Serializable, Cloneable, Comparable<fullGiveCheck_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("fullGiveCheck_args");

    private static final org.apache.thrift.protocol.TField FULL_GIVE_CHECK_REQ_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("fullGiveCheckReqVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new fullGiveCheck_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new fullGiveCheck_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.active.FullGiveCheckReqVo fullGiveCheckReqVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FULL_GIVE_CHECK_REQ_VO((short)1, "fullGiveCheckReqVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FULL_GIVE_CHECK_REQ_VO
            return FULL_GIVE_CHECK_REQ_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FULL_GIVE_CHECK_REQ_VO, new org.apache.thrift.meta_data.FieldMetaData("fullGiveCheckReqVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.active.FullGiveCheckReqVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(fullGiveCheck_args.class, metaDataMap);
    }

    public fullGiveCheck_args() {
    }

    public fullGiveCheck_args(
      com.froad.thrift.vo.active.FullGiveCheckReqVo fullGiveCheckReqVo)
    {
      this();
      this.fullGiveCheckReqVo = fullGiveCheckReqVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public fullGiveCheck_args(fullGiveCheck_args other) {
      if (other.isSetFullGiveCheckReqVo()) {
        this.fullGiveCheckReqVo = new com.froad.thrift.vo.active.FullGiveCheckReqVo(other.fullGiveCheckReqVo);
      }
    }

    public fullGiveCheck_args deepCopy() {
      return new fullGiveCheck_args(this);
    }

    @Override
    public void clear() {
      this.fullGiveCheckReqVo = null;
    }

    public com.froad.thrift.vo.active.FullGiveCheckReqVo getFullGiveCheckReqVo() {
      return this.fullGiveCheckReqVo;
    }

    public fullGiveCheck_args setFullGiveCheckReqVo(com.froad.thrift.vo.active.FullGiveCheckReqVo fullGiveCheckReqVo) {
      this.fullGiveCheckReqVo = fullGiveCheckReqVo;
      return this;
    }

    public void unsetFullGiveCheckReqVo() {
      this.fullGiveCheckReqVo = null;
    }

    /** Returns true if field fullGiveCheckReqVo is set (has been assigned a value) and false otherwise */
    public boolean isSetFullGiveCheckReqVo() {
      return this.fullGiveCheckReqVo != null;
    }

    public void setFullGiveCheckReqVoIsSet(boolean value) {
      if (!value) {
        this.fullGiveCheckReqVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FULL_GIVE_CHECK_REQ_VO:
        if (value == null) {
          unsetFullGiveCheckReqVo();
        } else {
          setFullGiveCheckReqVo((com.froad.thrift.vo.active.FullGiveCheckReqVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FULL_GIVE_CHECK_REQ_VO:
        return getFullGiveCheckReqVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FULL_GIVE_CHECK_REQ_VO:
        return isSetFullGiveCheckReqVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof fullGiveCheck_args)
        return this.equals((fullGiveCheck_args)that);
      return false;
    }

    public boolean equals(fullGiveCheck_args that) {
      if (that == null)
        return false;

      boolean this_present_fullGiveCheckReqVo = true && this.isSetFullGiveCheckReqVo();
      boolean that_present_fullGiveCheckReqVo = true && that.isSetFullGiveCheckReqVo();
      if (this_present_fullGiveCheckReqVo || that_present_fullGiveCheckReqVo) {
        if (!(this_present_fullGiveCheckReqVo && that_present_fullGiveCheckReqVo))
          return false;
        if (!this.fullGiveCheckReqVo.equals(that.fullGiveCheckReqVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_fullGiveCheckReqVo = true && (isSetFullGiveCheckReqVo());
      list.add(present_fullGiveCheckReqVo);
      if (present_fullGiveCheckReqVo)
        list.add(fullGiveCheckReqVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(fullGiveCheck_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetFullGiveCheckReqVo()).compareTo(other.isSetFullGiveCheckReqVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFullGiveCheckReqVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fullGiveCheckReqVo, other.fullGiveCheckReqVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("fullGiveCheck_args(");
      boolean first = true;

      sb.append("fullGiveCheckReqVo:");
      if (this.fullGiveCheckReqVo == null) {
        sb.append("null");
      } else {
        sb.append(this.fullGiveCheckReqVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (fullGiveCheckReqVo != null) {
        fullGiveCheckReqVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class fullGiveCheck_argsStandardSchemeFactory implements SchemeFactory {
      public fullGiveCheck_argsStandardScheme getScheme() {
        return new fullGiveCheck_argsStandardScheme();
      }
    }

    private static class fullGiveCheck_argsStandardScheme extends StandardScheme<fullGiveCheck_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, fullGiveCheck_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FULL_GIVE_CHECK_REQ_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.fullGiveCheckReqVo = new com.froad.thrift.vo.active.FullGiveCheckReqVo();
                struct.fullGiveCheckReqVo.read(iprot);
                struct.setFullGiveCheckReqVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, fullGiveCheck_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.fullGiveCheckReqVo != null) {
          oprot.writeFieldBegin(FULL_GIVE_CHECK_REQ_VO_FIELD_DESC);
          struct.fullGiveCheckReqVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class fullGiveCheck_argsTupleSchemeFactory implements SchemeFactory {
      public fullGiveCheck_argsTupleScheme getScheme() {
        return new fullGiveCheck_argsTupleScheme();
      }
    }

    private static class fullGiveCheck_argsTupleScheme extends TupleScheme<fullGiveCheck_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, fullGiveCheck_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFullGiveCheckReqVo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetFullGiveCheckReqVo()) {
          struct.fullGiveCheckReqVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, fullGiveCheck_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.fullGiveCheckReqVo = new com.froad.thrift.vo.active.FullGiveCheckReqVo();
          struct.fullGiveCheckReqVo.read(iprot);
          struct.setFullGiveCheckReqVoIsSet(true);
        }
      }
    }

  }

  public static class fullGiveCheck_result implements org.apache.thrift.TBase<fullGiveCheck_result, fullGiveCheck_result._Fields>, java.io.Serializable, Cloneable, Comparable<fullGiveCheck_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("fullGiveCheck_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new fullGiveCheck_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new fullGiveCheck_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(fullGiveCheck_result.class, metaDataMap);
    }

    public fullGiveCheck_result() {
    }

    public fullGiveCheck_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public fullGiveCheck_result(fullGiveCheck_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public fullGiveCheck_result deepCopy() {
      return new fullGiveCheck_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public fullGiveCheck_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof fullGiveCheck_result)
        return this.equals((fullGiveCheck_result)that);
      return false;
    }

    public boolean equals(fullGiveCheck_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(fullGiveCheck_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("fullGiveCheck_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class fullGiveCheck_resultStandardSchemeFactory implements SchemeFactory {
      public fullGiveCheck_resultStandardScheme getScheme() {
        return new fullGiveCheck_resultStandardScheme();
      }
    }

    private static class fullGiveCheck_resultStandardScheme extends StandardScheme<fullGiveCheck_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, fullGiveCheck_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, fullGiveCheck_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class fullGiveCheck_resultTupleSchemeFactory implements SchemeFactory {
      public fullGiveCheck_resultTupleScheme getScheme() {
        return new fullGiveCheck_resultTupleScheme();
      }
    }

    private static class fullGiveCheck_resultTupleScheme extends TupleScheme<fullGiveCheck_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, fullGiveCheck_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, fullGiveCheck_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
