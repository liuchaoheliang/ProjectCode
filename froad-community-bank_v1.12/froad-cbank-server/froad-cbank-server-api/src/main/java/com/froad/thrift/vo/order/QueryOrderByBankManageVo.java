/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.vo.order;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 银行管理需要显示的子订单信息
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class QueryOrderByBankManageVo implements org.apache.thrift.TBase<QueryOrderByBankManageVo, QueryOrderByBankManageVo._Fields>, java.io.Serializable, Cloneable, Comparable<QueryOrderByBankManageVo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("QueryOrderByBankManageVo");

  private static final org.apache.thrift.protocol.TField ORDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("orderId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField SUB_ORDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("subOrderId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PAYMENT_METHOD_FIELD_DESC = new org.apache.thrift.protocol.TField("paymentMethod", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField ORDER_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("orderStatus", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField SUB_TOTAL_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("subTotalMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField POINT_FIELD_DESC = new org.apache.thrift.protocol.TField("point", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField CASH_FIELD_DESC = new org.apache.thrift.protocol.TField("cash", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField CREATE_SOURE_FIELD_DESC = new org.apache.thrift.protocol.TField("createSoure", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField MERCHANT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("merchantName", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField PRODUCT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("productName", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField DELIVERY_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("deliveryState", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.I64, (short)12);
  private static final org.apache.thrift.protocol.TField ORG_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("orgCode", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField REFUND_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("refundState", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField QUANTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("quantity", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField ORG_NAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("orgNames", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField PRODUCT_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("productList", org.apache.thrift.protocol.TType.LIST, (short)17);
  private static final org.apache.thrift.protocol.TField DELIVER_INFO_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("deliverInfoVo", org.apache.thrift.protocol.TType.STRUCT, (short)18);
  private static final org.apache.thrift.protocol.TField DELIVERY_OPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("deliveryOption", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField SETTLEMENT_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("settlementStatus", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField MERCHANT_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("merchantUserId", org.apache.thrift.protocol.TType.I64, (short)21);
  private static final org.apache.thrift.protocol.TField CONSUME_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("consumeStatus", org.apache.thrift.protocol.TType.STRING, (short)22);
  private static final org.apache.thrift.protocol.TField SETTLE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("settleTime", org.apache.thrift.protocol.TType.I64, (short)23);
  private static final org.apache.thrift.protocol.TField MERCHANT_USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("merchantUserName", org.apache.thrift.protocol.TType.STRING, (short)24);
  private static final org.apache.thrift.protocol.TField SUB_TOTAL_MONEY_PRESELL_FIELD_DESC = new org.apache.thrift.protocol.TField("subTotalMoneyPresell", org.apache.thrift.protocol.TType.DOUBLE, (short)25);
  private static final org.apache.thrift.protocol.TField OUTLET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("outletId", org.apache.thrift.protocol.TType.STRING, (short)26);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new QueryOrderByBankManageVoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new QueryOrderByBankManageVoTupleSchemeFactory());
  }

  public String orderId; // required
  public String subOrderId; // required
  public String paymentMethod; // required
  public String orderStatus; // required
  public double subTotalMoney; // required
  public double point; // required
  public double cash; // required
  public String createSoure; // required
  public String merchantName; // required
  public String productName; // required
  public String deliveryState; // required
  public long createTime; // required
  public String orgCode; // required
  /**
   * 退款状态--2015-5-6 新增 1. 未退款， 2. 退款中， 3. 退款完成， 4. 部分退款
   */
  public String refundState; // required
  /**
   * 商品数量
   */
  public int quantity; // required
  /**
   * 所属机构
   */
  public String orgNames; // required
  public List<ProductVo> productList; // required
  /**
   * 收货人信息|提货人信息|消费人信息
   */
  public DeliverInfoVo deliverInfoVo; // required
  /**
   * 配送方式 自提、配送
   */
  public String deliveryOption; // required
  /**
   * 结算状态（0.未结算，2.结算成功）--只要结算一个则结算成功并带结算数量
   */
  public String settlementStatus; // required
  /**
   * 商户操作员ID
   */
  public long merchantUserId; // required
  /**
   * 提货状态-1.未消费，2.已消费，3.部分消费
   */
  public String consumeStatus; // required
  /**
   * 结算时间
   */
  public long settleTime; // required
  /**
   * 商户用户名
   */
  public String merchantUserName; // required
  /**
   * 订单金额-预售列表获取这个值----把自提商品和配送商品分开了
   */
  public double subTotalMoneyPresell; // required
  /**
   * 门店ID
   */
  public String outletId; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ORDER_ID((short)1, "orderId"),
    SUB_ORDER_ID((short)2, "subOrderId"),
    PAYMENT_METHOD((short)3, "paymentMethod"),
    ORDER_STATUS((short)4, "orderStatus"),
    SUB_TOTAL_MONEY((short)5, "subTotalMoney"),
    POINT((short)6, "point"),
    CASH((short)7, "cash"),
    CREATE_SOURE((short)8, "createSoure"),
    MERCHANT_NAME((short)9, "merchantName"),
    PRODUCT_NAME((short)10, "productName"),
    DELIVERY_STATE((short)11, "deliveryState"),
    CREATE_TIME((short)12, "createTime"),
    ORG_CODE((short)13, "orgCode"),
    /**
     * 退款状态--2015-5-6 新增 1. 未退款， 2. 退款中， 3. 退款完成， 4. 部分退款
     */
    REFUND_STATE((short)14, "refundState"),
    /**
     * 商品数量
     */
    QUANTITY((short)15, "quantity"),
    /**
     * 所属机构
     */
    ORG_NAMES((short)16, "orgNames"),
    PRODUCT_LIST((short)17, "productList"),
    /**
     * 收货人信息|提货人信息|消费人信息
     */
    DELIVER_INFO_VO((short)18, "deliverInfoVo"),
    /**
     * 配送方式 自提、配送
     */
    DELIVERY_OPTION((short)19, "deliveryOption"),
    /**
     * 结算状态（0.未结算，2.结算成功）--只要结算一个则结算成功并带结算数量
     */
    SETTLEMENT_STATUS((short)20, "settlementStatus"),
    /**
     * 商户操作员ID
     */
    MERCHANT_USER_ID((short)21, "merchantUserId"),
    /**
     * 提货状态-1.未消费，2.已消费，3.部分消费
     */
    CONSUME_STATUS((short)22, "consumeStatus"),
    /**
     * 结算时间
     */
    SETTLE_TIME((short)23, "settleTime"),
    /**
     * 商户用户名
     */
    MERCHANT_USER_NAME((short)24, "merchantUserName"),
    /**
     * 订单金额-预售列表获取这个值----把自提商品和配送商品分开了
     */
    SUB_TOTAL_MONEY_PRESELL((short)25, "subTotalMoneyPresell"),
    /**
     * 门店ID
     */
    OUTLET_ID((short)26, "outletId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ORDER_ID
          return ORDER_ID;
        case 2: // SUB_ORDER_ID
          return SUB_ORDER_ID;
        case 3: // PAYMENT_METHOD
          return PAYMENT_METHOD;
        case 4: // ORDER_STATUS
          return ORDER_STATUS;
        case 5: // SUB_TOTAL_MONEY
          return SUB_TOTAL_MONEY;
        case 6: // POINT
          return POINT;
        case 7: // CASH
          return CASH;
        case 8: // CREATE_SOURE
          return CREATE_SOURE;
        case 9: // MERCHANT_NAME
          return MERCHANT_NAME;
        case 10: // PRODUCT_NAME
          return PRODUCT_NAME;
        case 11: // DELIVERY_STATE
          return DELIVERY_STATE;
        case 12: // CREATE_TIME
          return CREATE_TIME;
        case 13: // ORG_CODE
          return ORG_CODE;
        case 14: // REFUND_STATE
          return REFUND_STATE;
        case 15: // QUANTITY
          return QUANTITY;
        case 16: // ORG_NAMES
          return ORG_NAMES;
        case 17: // PRODUCT_LIST
          return PRODUCT_LIST;
        case 18: // DELIVER_INFO_VO
          return DELIVER_INFO_VO;
        case 19: // DELIVERY_OPTION
          return DELIVERY_OPTION;
        case 20: // SETTLEMENT_STATUS
          return SETTLEMENT_STATUS;
        case 21: // MERCHANT_USER_ID
          return MERCHANT_USER_ID;
        case 22: // CONSUME_STATUS
          return CONSUME_STATUS;
        case 23: // SETTLE_TIME
          return SETTLE_TIME;
        case 24: // MERCHANT_USER_NAME
          return MERCHANT_USER_NAME;
        case 25: // SUB_TOTAL_MONEY_PRESELL
          return SUB_TOTAL_MONEY_PRESELL;
        case 26: // OUTLET_ID
          return OUTLET_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SUBTOTALMONEY_ISSET_ID = 0;
  private static final int __POINT_ISSET_ID = 1;
  private static final int __CASH_ISSET_ID = 2;
  private static final int __CREATETIME_ISSET_ID = 3;
  private static final int __QUANTITY_ISSET_ID = 4;
  private static final int __MERCHANTUSERID_ISSET_ID = 5;
  private static final int __SETTLETIME_ISSET_ID = 6;
  private static final int __SUBTOTALMONEYPRESELL_ISSET_ID = 7;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ORDER_ID, new org.apache.thrift.meta_data.FieldMetaData("orderId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SUB_ORDER_ID, new org.apache.thrift.meta_data.FieldMetaData("subOrderId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAYMENT_METHOD, new org.apache.thrift.meta_data.FieldMetaData("paymentMethod", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORDER_STATUS, new org.apache.thrift.meta_data.FieldMetaData("orderStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SUB_TOTAL_MONEY, new org.apache.thrift.meta_data.FieldMetaData("subTotalMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.POINT, new org.apache.thrift.meta_data.FieldMetaData("point", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CASH, new org.apache.thrift.meta_data.FieldMetaData("cash", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CREATE_SOURE, new org.apache.thrift.meta_data.FieldMetaData("createSoure", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MERCHANT_NAME, new org.apache.thrift.meta_data.FieldMetaData("merchantName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRODUCT_NAME, new org.apache.thrift.meta_data.FieldMetaData("productName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DELIVERY_STATE, new org.apache.thrift.meta_data.FieldMetaData("deliveryState", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ORG_CODE, new org.apache.thrift.meta_data.FieldMetaData("orgCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REFUND_STATE, new org.apache.thrift.meta_data.FieldMetaData("refundState", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.QUANTITY, new org.apache.thrift.meta_data.FieldMetaData("quantity", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ORG_NAMES, new org.apache.thrift.meta_data.FieldMetaData("orgNames", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRODUCT_LIST, new org.apache.thrift.meta_data.FieldMetaData("productList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ProductVo.class))));
    tmpMap.put(_Fields.DELIVER_INFO_VO, new org.apache.thrift.meta_data.FieldMetaData("deliverInfoVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "DeliverInfoVo")));
    tmpMap.put(_Fields.DELIVERY_OPTION, new org.apache.thrift.meta_data.FieldMetaData("deliveryOption", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SETTLEMENT_STATUS, new org.apache.thrift.meta_data.FieldMetaData("settlementStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MERCHANT_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("merchantUserId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CONSUME_STATUS, new org.apache.thrift.meta_data.FieldMetaData("consumeStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SETTLE_TIME, new org.apache.thrift.meta_data.FieldMetaData("settleTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MERCHANT_USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("merchantUserName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SUB_TOTAL_MONEY_PRESELL, new org.apache.thrift.meta_data.FieldMetaData("subTotalMoneyPresell", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.OUTLET_ID, new org.apache.thrift.meta_data.FieldMetaData("outletId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(QueryOrderByBankManageVo.class, metaDataMap);
  }

  public QueryOrderByBankManageVo() {
  }

  public QueryOrderByBankManageVo(
    String orderId,
    String subOrderId,
    String paymentMethod,
    String orderStatus,
    double subTotalMoney,
    double point,
    double cash,
    String createSoure,
    String merchantName,
    String productName,
    String deliveryState,
    long createTime,
    String orgCode,
    String refundState,
    int quantity,
    String orgNames,
    List<ProductVo> productList,
    DeliverInfoVo deliverInfoVo,
    String deliveryOption,
    String settlementStatus,
    long merchantUserId,
    String consumeStatus,
    long settleTime,
    String merchantUserName,
    double subTotalMoneyPresell,
    String outletId)
  {
    this();
    this.orderId = orderId;
    this.subOrderId = subOrderId;
    this.paymentMethod = paymentMethod;
    this.orderStatus = orderStatus;
    this.subTotalMoney = subTotalMoney;
    setSubTotalMoneyIsSet(true);
    this.point = point;
    setPointIsSet(true);
    this.cash = cash;
    setCashIsSet(true);
    this.createSoure = createSoure;
    this.merchantName = merchantName;
    this.productName = productName;
    this.deliveryState = deliveryState;
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    this.orgCode = orgCode;
    this.refundState = refundState;
    this.quantity = quantity;
    setQuantityIsSet(true);
    this.orgNames = orgNames;
    this.productList = productList;
    this.deliverInfoVo = deliverInfoVo;
    this.deliveryOption = deliveryOption;
    this.settlementStatus = settlementStatus;
    this.merchantUserId = merchantUserId;
    setMerchantUserIdIsSet(true);
    this.consumeStatus = consumeStatus;
    this.settleTime = settleTime;
    setSettleTimeIsSet(true);
    this.merchantUserName = merchantUserName;
    this.subTotalMoneyPresell = subTotalMoneyPresell;
    setSubTotalMoneyPresellIsSet(true);
    this.outletId = outletId;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public QueryOrderByBankManageVo(QueryOrderByBankManageVo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetOrderId()) {
      this.orderId = other.orderId;
    }
    if (other.isSetSubOrderId()) {
      this.subOrderId = other.subOrderId;
    }
    if (other.isSetPaymentMethod()) {
      this.paymentMethod = other.paymentMethod;
    }
    if (other.isSetOrderStatus()) {
      this.orderStatus = other.orderStatus;
    }
    this.subTotalMoney = other.subTotalMoney;
    this.point = other.point;
    this.cash = other.cash;
    if (other.isSetCreateSoure()) {
      this.createSoure = other.createSoure;
    }
    if (other.isSetMerchantName()) {
      this.merchantName = other.merchantName;
    }
    if (other.isSetProductName()) {
      this.productName = other.productName;
    }
    if (other.isSetDeliveryState()) {
      this.deliveryState = other.deliveryState;
    }
    this.createTime = other.createTime;
    if (other.isSetOrgCode()) {
      this.orgCode = other.orgCode;
    }
    if (other.isSetRefundState()) {
      this.refundState = other.refundState;
    }
    this.quantity = other.quantity;
    if (other.isSetOrgNames()) {
      this.orgNames = other.orgNames;
    }
    if (other.isSetProductList()) {
      List<ProductVo> __this__productList = new ArrayList<ProductVo>(other.productList.size());
      for (ProductVo other_element : other.productList) {
        __this__productList.add(new ProductVo(other_element));
      }
      this.productList = __this__productList;
    }
    if (other.isSetDeliverInfoVo()) {
      this.deliverInfoVo = other.deliverInfoVo;
    }
    if (other.isSetDeliveryOption()) {
      this.deliveryOption = other.deliveryOption;
    }
    if (other.isSetSettlementStatus()) {
      this.settlementStatus = other.settlementStatus;
    }
    this.merchantUserId = other.merchantUserId;
    if (other.isSetConsumeStatus()) {
      this.consumeStatus = other.consumeStatus;
    }
    this.settleTime = other.settleTime;
    if (other.isSetMerchantUserName()) {
      this.merchantUserName = other.merchantUserName;
    }
    this.subTotalMoneyPresell = other.subTotalMoneyPresell;
    if (other.isSetOutletId()) {
      this.outletId = other.outletId;
    }
  }

  public QueryOrderByBankManageVo deepCopy() {
    return new QueryOrderByBankManageVo(this);
  }

  @Override
  public void clear() {
    this.orderId = null;
    this.subOrderId = null;
    this.paymentMethod = null;
    this.orderStatus = null;
    setSubTotalMoneyIsSet(false);
    this.subTotalMoney = 0.0;
    setPointIsSet(false);
    this.point = 0.0;
    setCashIsSet(false);
    this.cash = 0.0;
    this.createSoure = null;
    this.merchantName = null;
    this.productName = null;
    this.deliveryState = null;
    setCreateTimeIsSet(false);
    this.createTime = 0;
    this.orgCode = null;
    this.refundState = null;
    setQuantityIsSet(false);
    this.quantity = 0;
    this.orgNames = null;
    this.productList = null;
    this.deliverInfoVo = null;
    this.deliveryOption = null;
    this.settlementStatus = null;
    setMerchantUserIdIsSet(false);
    this.merchantUserId = 0;
    this.consumeStatus = null;
    setSettleTimeIsSet(false);
    this.settleTime = 0;
    this.merchantUserName = null;
    setSubTotalMoneyPresellIsSet(false);
    this.subTotalMoneyPresell = 0.0;
    this.outletId = null;
  }

  public String getOrderId() {
    return this.orderId;
  }

  public QueryOrderByBankManageVo setOrderId(String orderId) {
    this.orderId = orderId;
    return this;
  }

  public void unsetOrderId() {
    this.orderId = null;
  }

  /** Returns true if field orderId is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderId() {
    return this.orderId != null;
  }

  public void setOrderIdIsSet(boolean value) {
    if (!value) {
      this.orderId = null;
    }
  }

  public String getSubOrderId() {
    return this.subOrderId;
  }

  public QueryOrderByBankManageVo setSubOrderId(String subOrderId) {
    this.subOrderId = subOrderId;
    return this;
  }

  public void unsetSubOrderId() {
    this.subOrderId = null;
  }

  /** Returns true if field subOrderId is set (has been assigned a value) and false otherwise */
  public boolean isSetSubOrderId() {
    return this.subOrderId != null;
  }

  public void setSubOrderIdIsSet(boolean value) {
    if (!value) {
      this.subOrderId = null;
    }
  }

  public String getPaymentMethod() {
    return this.paymentMethod;
  }

  public QueryOrderByBankManageVo setPaymentMethod(String paymentMethod) {
    this.paymentMethod = paymentMethod;
    return this;
  }

  public void unsetPaymentMethod() {
    this.paymentMethod = null;
  }

  /** Returns true if field paymentMethod is set (has been assigned a value) and false otherwise */
  public boolean isSetPaymentMethod() {
    return this.paymentMethod != null;
  }

  public void setPaymentMethodIsSet(boolean value) {
    if (!value) {
      this.paymentMethod = null;
    }
  }

  public String getOrderStatus() {
    return this.orderStatus;
  }

  public QueryOrderByBankManageVo setOrderStatus(String orderStatus) {
    this.orderStatus = orderStatus;
    return this;
  }

  public void unsetOrderStatus() {
    this.orderStatus = null;
  }

  /** Returns true if field orderStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderStatus() {
    return this.orderStatus != null;
  }

  public void setOrderStatusIsSet(boolean value) {
    if (!value) {
      this.orderStatus = null;
    }
  }

  public double getSubTotalMoney() {
    return this.subTotalMoney;
  }

  public QueryOrderByBankManageVo setSubTotalMoney(double subTotalMoney) {
    this.subTotalMoney = subTotalMoney;
    setSubTotalMoneyIsSet(true);
    return this;
  }

  public void unsetSubTotalMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUBTOTALMONEY_ISSET_ID);
  }

  /** Returns true if field subTotalMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetSubTotalMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __SUBTOTALMONEY_ISSET_ID);
  }

  public void setSubTotalMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUBTOTALMONEY_ISSET_ID, value);
  }

  public double getPoint() {
    return this.point;
  }

  public QueryOrderByBankManageVo setPoint(double point) {
    this.point = point;
    setPointIsSet(true);
    return this;
  }

  public void unsetPoint() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POINT_ISSET_ID);
  }

  /** Returns true if field point is set (has been assigned a value) and false otherwise */
  public boolean isSetPoint() {
    return EncodingUtils.testBit(__isset_bitfield, __POINT_ISSET_ID);
  }

  public void setPointIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POINT_ISSET_ID, value);
  }

  public double getCash() {
    return this.cash;
  }

  public QueryOrderByBankManageVo setCash(double cash) {
    this.cash = cash;
    setCashIsSet(true);
    return this;
  }

  public void unsetCash() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CASH_ISSET_ID);
  }

  /** Returns true if field cash is set (has been assigned a value) and false otherwise */
  public boolean isSetCash() {
    return EncodingUtils.testBit(__isset_bitfield, __CASH_ISSET_ID);
  }

  public void setCashIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CASH_ISSET_ID, value);
  }

  public String getCreateSoure() {
    return this.createSoure;
  }

  public QueryOrderByBankManageVo setCreateSoure(String createSoure) {
    this.createSoure = createSoure;
    return this;
  }

  public void unsetCreateSoure() {
    this.createSoure = null;
  }

  /** Returns true if field createSoure is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateSoure() {
    return this.createSoure != null;
  }

  public void setCreateSoureIsSet(boolean value) {
    if (!value) {
      this.createSoure = null;
    }
  }

  public String getMerchantName() {
    return this.merchantName;
  }

  public QueryOrderByBankManageVo setMerchantName(String merchantName) {
    this.merchantName = merchantName;
    return this;
  }

  public void unsetMerchantName() {
    this.merchantName = null;
  }

  /** Returns true if field merchantName is set (has been assigned a value) and false otherwise */
  public boolean isSetMerchantName() {
    return this.merchantName != null;
  }

  public void setMerchantNameIsSet(boolean value) {
    if (!value) {
      this.merchantName = null;
    }
  }

  public String getProductName() {
    return this.productName;
  }

  public QueryOrderByBankManageVo setProductName(String productName) {
    this.productName = productName;
    return this;
  }

  public void unsetProductName() {
    this.productName = null;
  }

  /** Returns true if field productName is set (has been assigned a value) and false otherwise */
  public boolean isSetProductName() {
    return this.productName != null;
  }

  public void setProductNameIsSet(boolean value) {
    if (!value) {
      this.productName = null;
    }
  }

  public String getDeliveryState() {
    return this.deliveryState;
  }

  public QueryOrderByBankManageVo setDeliveryState(String deliveryState) {
    this.deliveryState = deliveryState;
    return this;
  }

  public void unsetDeliveryState() {
    this.deliveryState = null;
  }

  /** Returns true if field deliveryState is set (has been assigned a value) and false otherwise */
  public boolean isSetDeliveryState() {
    return this.deliveryState != null;
  }

  public void setDeliveryStateIsSet(boolean value) {
    if (!value) {
      this.deliveryState = null;
    }
  }

  public long getCreateTime() {
    return this.createTime;
  }

  public QueryOrderByBankManageVo setCreateTime(long createTime) {
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    return this;
  }

  public void unsetCreateTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  public void setCreateTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATETIME_ISSET_ID, value);
  }

  public String getOrgCode() {
    return this.orgCode;
  }

  public QueryOrderByBankManageVo setOrgCode(String orgCode) {
    this.orgCode = orgCode;
    return this;
  }

  public void unsetOrgCode() {
    this.orgCode = null;
  }

  /** Returns true if field orgCode is set (has been assigned a value) and false otherwise */
  public boolean isSetOrgCode() {
    return this.orgCode != null;
  }

  public void setOrgCodeIsSet(boolean value) {
    if (!value) {
      this.orgCode = null;
    }
  }

  /**
   * 退款状态--2015-5-6 新增 1. 未退款， 2. 退款中， 3. 退款完成， 4. 部分退款
   */
  public String getRefundState() {
    return this.refundState;
  }

  /**
   * 退款状态--2015-5-6 新增 1. 未退款， 2. 退款中， 3. 退款完成， 4. 部分退款
   */
  public QueryOrderByBankManageVo setRefundState(String refundState) {
    this.refundState = refundState;
    return this;
  }

  public void unsetRefundState() {
    this.refundState = null;
  }

  /** Returns true if field refundState is set (has been assigned a value) and false otherwise */
  public boolean isSetRefundState() {
    return this.refundState != null;
  }

  public void setRefundStateIsSet(boolean value) {
    if (!value) {
      this.refundState = null;
    }
  }

  /**
   * 商品数量
   */
  public int getQuantity() {
    return this.quantity;
  }

  /**
   * 商品数量
   */
  public QueryOrderByBankManageVo setQuantity(int quantity) {
    this.quantity = quantity;
    setQuantityIsSet(true);
    return this;
  }

  public void unsetQuantity() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __QUANTITY_ISSET_ID);
  }

  /** Returns true if field quantity is set (has been assigned a value) and false otherwise */
  public boolean isSetQuantity() {
    return EncodingUtils.testBit(__isset_bitfield, __QUANTITY_ISSET_ID);
  }

  public void setQuantityIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __QUANTITY_ISSET_ID, value);
  }

  /**
   * 所属机构
   */
  public String getOrgNames() {
    return this.orgNames;
  }

  /**
   * 所属机构
   */
  public QueryOrderByBankManageVo setOrgNames(String orgNames) {
    this.orgNames = orgNames;
    return this;
  }

  public void unsetOrgNames() {
    this.orgNames = null;
  }

  /** Returns true if field orgNames is set (has been assigned a value) and false otherwise */
  public boolean isSetOrgNames() {
    return this.orgNames != null;
  }

  public void setOrgNamesIsSet(boolean value) {
    if (!value) {
      this.orgNames = null;
    }
  }

  public int getProductListSize() {
    return (this.productList == null) ? 0 : this.productList.size();
  }

  public java.util.Iterator<ProductVo> getProductListIterator() {
    return (this.productList == null) ? null : this.productList.iterator();
  }

  public void addToProductList(ProductVo elem) {
    if (this.productList == null) {
      this.productList = new ArrayList<ProductVo>();
    }
    this.productList.add(elem);
  }

  public List<ProductVo> getProductList() {
    return this.productList;
  }

  public QueryOrderByBankManageVo setProductList(List<ProductVo> productList) {
    this.productList = productList;
    return this;
  }

  public void unsetProductList() {
    this.productList = null;
  }

  /** Returns true if field productList is set (has been assigned a value) and false otherwise */
  public boolean isSetProductList() {
    return this.productList != null;
  }

  public void setProductListIsSet(boolean value) {
    if (!value) {
      this.productList = null;
    }
  }

  /**
   * 收货人信息|提货人信息|消费人信息
   */
  public DeliverInfoVo getDeliverInfoVo() {
    return this.deliverInfoVo;
  }

  /**
   * 收货人信息|提货人信息|消费人信息
   */
  public QueryOrderByBankManageVo setDeliverInfoVo(DeliverInfoVo deliverInfoVo) {
    this.deliverInfoVo = deliverInfoVo;
    return this;
  }

  public void unsetDeliverInfoVo() {
    this.deliverInfoVo = null;
  }

  /** Returns true if field deliverInfoVo is set (has been assigned a value) and false otherwise */
  public boolean isSetDeliverInfoVo() {
    return this.deliverInfoVo != null;
  }

  public void setDeliverInfoVoIsSet(boolean value) {
    if (!value) {
      this.deliverInfoVo = null;
    }
  }

  /**
   * 配送方式 自提、配送
   */
  public String getDeliveryOption() {
    return this.deliveryOption;
  }

  /**
   * 配送方式 自提、配送
   */
  public QueryOrderByBankManageVo setDeliveryOption(String deliveryOption) {
    this.deliveryOption = deliveryOption;
    return this;
  }

  public void unsetDeliveryOption() {
    this.deliveryOption = null;
  }

  /** Returns true if field deliveryOption is set (has been assigned a value) and false otherwise */
  public boolean isSetDeliveryOption() {
    return this.deliveryOption != null;
  }

  public void setDeliveryOptionIsSet(boolean value) {
    if (!value) {
      this.deliveryOption = null;
    }
  }

  /**
   * 结算状态（0.未结算，2.结算成功）--只要结算一个则结算成功并带结算数量
   */
  public String getSettlementStatus() {
    return this.settlementStatus;
  }

  /**
   * 结算状态（0.未结算，2.结算成功）--只要结算一个则结算成功并带结算数量
   */
  public QueryOrderByBankManageVo setSettlementStatus(String settlementStatus) {
    this.settlementStatus = settlementStatus;
    return this;
  }

  public void unsetSettlementStatus() {
    this.settlementStatus = null;
  }

  /** Returns true if field settlementStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetSettlementStatus() {
    return this.settlementStatus != null;
  }

  public void setSettlementStatusIsSet(boolean value) {
    if (!value) {
      this.settlementStatus = null;
    }
  }

  /**
   * 商户操作员ID
   */
  public long getMerchantUserId() {
    return this.merchantUserId;
  }

  /**
   * 商户操作员ID
   */
  public QueryOrderByBankManageVo setMerchantUserId(long merchantUserId) {
    this.merchantUserId = merchantUserId;
    setMerchantUserIdIsSet(true);
    return this;
  }

  public void unsetMerchantUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MERCHANTUSERID_ISSET_ID);
  }

  /** Returns true if field merchantUserId is set (has been assigned a value) and false otherwise */
  public boolean isSetMerchantUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __MERCHANTUSERID_ISSET_ID);
  }

  public void setMerchantUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MERCHANTUSERID_ISSET_ID, value);
  }

  /**
   * 提货状态-1.未消费，2.已消费，3.部分消费
   */
  public String getConsumeStatus() {
    return this.consumeStatus;
  }

  /**
   * 提货状态-1.未消费，2.已消费，3.部分消费
   */
  public QueryOrderByBankManageVo setConsumeStatus(String consumeStatus) {
    this.consumeStatus = consumeStatus;
    return this;
  }

  public void unsetConsumeStatus() {
    this.consumeStatus = null;
  }

  /** Returns true if field consumeStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetConsumeStatus() {
    return this.consumeStatus != null;
  }

  public void setConsumeStatusIsSet(boolean value) {
    if (!value) {
      this.consumeStatus = null;
    }
  }

  /**
   * 结算时间
   */
  public long getSettleTime() {
    return this.settleTime;
  }

  /**
   * 结算时间
   */
  public QueryOrderByBankManageVo setSettleTime(long settleTime) {
    this.settleTime = settleTime;
    setSettleTimeIsSet(true);
    return this;
  }

  public void unsetSettleTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SETTLETIME_ISSET_ID);
  }

  /** Returns true if field settleTime is set (has been assigned a value) and false otherwise */
  public boolean isSetSettleTime() {
    return EncodingUtils.testBit(__isset_bitfield, __SETTLETIME_ISSET_ID);
  }

  public void setSettleTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SETTLETIME_ISSET_ID, value);
  }

  /**
   * 商户用户名
   */
  public String getMerchantUserName() {
    return this.merchantUserName;
  }

  /**
   * 商户用户名
   */
  public QueryOrderByBankManageVo setMerchantUserName(String merchantUserName) {
    this.merchantUserName = merchantUserName;
    return this;
  }

  public void unsetMerchantUserName() {
    this.merchantUserName = null;
  }

  /** Returns true if field merchantUserName is set (has been assigned a value) and false otherwise */
  public boolean isSetMerchantUserName() {
    return this.merchantUserName != null;
  }

  public void setMerchantUserNameIsSet(boolean value) {
    if (!value) {
      this.merchantUserName = null;
    }
  }

  /**
   * 订单金额-预售列表获取这个值----把自提商品和配送商品分开了
   */
  public double getSubTotalMoneyPresell() {
    return this.subTotalMoneyPresell;
  }

  /**
   * 订单金额-预售列表获取这个值----把自提商品和配送商品分开了
   */
  public QueryOrderByBankManageVo setSubTotalMoneyPresell(double subTotalMoneyPresell) {
    this.subTotalMoneyPresell = subTotalMoneyPresell;
    setSubTotalMoneyPresellIsSet(true);
    return this;
  }

  public void unsetSubTotalMoneyPresell() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUBTOTALMONEYPRESELL_ISSET_ID);
  }

  /** Returns true if field subTotalMoneyPresell is set (has been assigned a value) and false otherwise */
  public boolean isSetSubTotalMoneyPresell() {
    return EncodingUtils.testBit(__isset_bitfield, __SUBTOTALMONEYPRESELL_ISSET_ID);
  }

  public void setSubTotalMoneyPresellIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUBTOTALMONEYPRESELL_ISSET_ID, value);
  }

  /**
   * 门店ID
   */
  public String getOutletId() {
    return this.outletId;
  }

  /**
   * 门店ID
   */
  public QueryOrderByBankManageVo setOutletId(String outletId) {
    this.outletId = outletId;
    return this;
  }

  public void unsetOutletId() {
    this.outletId = null;
  }

  /** Returns true if field outletId is set (has been assigned a value) and false otherwise */
  public boolean isSetOutletId() {
    return this.outletId != null;
  }

  public void setOutletIdIsSet(boolean value) {
    if (!value) {
      this.outletId = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ORDER_ID:
      if (value == null) {
        unsetOrderId();
      } else {
        setOrderId((String)value);
      }
      break;

    case SUB_ORDER_ID:
      if (value == null) {
        unsetSubOrderId();
      } else {
        setSubOrderId((String)value);
      }
      break;

    case PAYMENT_METHOD:
      if (value == null) {
        unsetPaymentMethod();
      } else {
        setPaymentMethod((String)value);
      }
      break;

    case ORDER_STATUS:
      if (value == null) {
        unsetOrderStatus();
      } else {
        setOrderStatus((String)value);
      }
      break;

    case SUB_TOTAL_MONEY:
      if (value == null) {
        unsetSubTotalMoney();
      } else {
        setSubTotalMoney((Double)value);
      }
      break;

    case POINT:
      if (value == null) {
        unsetPoint();
      } else {
        setPoint((Double)value);
      }
      break;

    case CASH:
      if (value == null) {
        unsetCash();
      } else {
        setCash((Double)value);
      }
      break;

    case CREATE_SOURE:
      if (value == null) {
        unsetCreateSoure();
      } else {
        setCreateSoure((String)value);
      }
      break;

    case MERCHANT_NAME:
      if (value == null) {
        unsetMerchantName();
      } else {
        setMerchantName((String)value);
      }
      break;

    case PRODUCT_NAME:
      if (value == null) {
        unsetProductName();
      } else {
        setProductName((String)value);
      }
      break;

    case DELIVERY_STATE:
      if (value == null) {
        unsetDeliveryState();
      } else {
        setDeliveryState((String)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((Long)value);
      }
      break;

    case ORG_CODE:
      if (value == null) {
        unsetOrgCode();
      } else {
        setOrgCode((String)value);
      }
      break;

    case REFUND_STATE:
      if (value == null) {
        unsetRefundState();
      } else {
        setRefundState((String)value);
      }
      break;

    case QUANTITY:
      if (value == null) {
        unsetQuantity();
      } else {
        setQuantity((Integer)value);
      }
      break;

    case ORG_NAMES:
      if (value == null) {
        unsetOrgNames();
      } else {
        setOrgNames((String)value);
      }
      break;

    case PRODUCT_LIST:
      if (value == null) {
        unsetProductList();
      } else {
        setProductList((List<ProductVo>)value);
      }
      break;

    case DELIVER_INFO_VO:
      if (value == null) {
        unsetDeliverInfoVo();
      } else {
        setDeliverInfoVo((DeliverInfoVo)value);
      }
      break;

    case DELIVERY_OPTION:
      if (value == null) {
        unsetDeliveryOption();
      } else {
        setDeliveryOption((String)value);
      }
      break;

    case SETTLEMENT_STATUS:
      if (value == null) {
        unsetSettlementStatus();
      } else {
        setSettlementStatus((String)value);
      }
      break;

    case MERCHANT_USER_ID:
      if (value == null) {
        unsetMerchantUserId();
      } else {
        setMerchantUserId((Long)value);
      }
      break;

    case CONSUME_STATUS:
      if (value == null) {
        unsetConsumeStatus();
      } else {
        setConsumeStatus((String)value);
      }
      break;

    case SETTLE_TIME:
      if (value == null) {
        unsetSettleTime();
      } else {
        setSettleTime((Long)value);
      }
      break;

    case MERCHANT_USER_NAME:
      if (value == null) {
        unsetMerchantUserName();
      } else {
        setMerchantUserName((String)value);
      }
      break;

    case SUB_TOTAL_MONEY_PRESELL:
      if (value == null) {
        unsetSubTotalMoneyPresell();
      } else {
        setSubTotalMoneyPresell((Double)value);
      }
      break;

    case OUTLET_ID:
      if (value == null) {
        unsetOutletId();
      } else {
        setOutletId((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ORDER_ID:
      return getOrderId();

    case SUB_ORDER_ID:
      return getSubOrderId();

    case PAYMENT_METHOD:
      return getPaymentMethod();

    case ORDER_STATUS:
      return getOrderStatus();

    case SUB_TOTAL_MONEY:
      return Double.valueOf(getSubTotalMoney());

    case POINT:
      return Double.valueOf(getPoint());

    case CASH:
      return Double.valueOf(getCash());

    case CREATE_SOURE:
      return getCreateSoure();

    case MERCHANT_NAME:
      return getMerchantName();

    case PRODUCT_NAME:
      return getProductName();

    case DELIVERY_STATE:
      return getDeliveryState();

    case CREATE_TIME:
      return Long.valueOf(getCreateTime());

    case ORG_CODE:
      return getOrgCode();

    case REFUND_STATE:
      return getRefundState();

    case QUANTITY:
      return Integer.valueOf(getQuantity());

    case ORG_NAMES:
      return getOrgNames();

    case PRODUCT_LIST:
      return getProductList();

    case DELIVER_INFO_VO:
      return getDeliverInfoVo();

    case DELIVERY_OPTION:
      return getDeliveryOption();

    case SETTLEMENT_STATUS:
      return getSettlementStatus();

    case MERCHANT_USER_ID:
      return Long.valueOf(getMerchantUserId());

    case CONSUME_STATUS:
      return getConsumeStatus();

    case SETTLE_TIME:
      return Long.valueOf(getSettleTime());

    case MERCHANT_USER_NAME:
      return getMerchantUserName();

    case SUB_TOTAL_MONEY_PRESELL:
      return Double.valueOf(getSubTotalMoneyPresell());

    case OUTLET_ID:
      return getOutletId();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ORDER_ID:
      return isSetOrderId();
    case SUB_ORDER_ID:
      return isSetSubOrderId();
    case PAYMENT_METHOD:
      return isSetPaymentMethod();
    case ORDER_STATUS:
      return isSetOrderStatus();
    case SUB_TOTAL_MONEY:
      return isSetSubTotalMoney();
    case POINT:
      return isSetPoint();
    case CASH:
      return isSetCash();
    case CREATE_SOURE:
      return isSetCreateSoure();
    case MERCHANT_NAME:
      return isSetMerchantName();
    case PRODUCT_NAME:
      return isSetProductName();
    case DELIVERY_STATE:
      return isSetDeliveryState();
    case CREATE_TIME:
      return isSetCreateTime();
    case ORG_CODE:
      return isSetOrgCode();
    case REFUND_STATE:
      return isSetRefundState();
    case QUANTITY:
      return isSetQuantity();
    case ORG_NAMES:
      return isSetOrgNames();
    case PRODUCT_LIST:
      return isSetProductList();
    case DELIVER_INFO_VO:
      return isSetDeliverInfoVo();
    case DELIVERY_OPTION:
      return isSetDeliveryOption();
    case SETTLEMENT_STATUS:
      return isSetSettlementStatus();
    case MERCHANT_USER_ID:
      return isSetMerchantUserId();
    case CONSUME_STATUS:
      return isSetConsumeStatus();
    case SETTLE_TIME:
      return isSetSettleTime();
    case MERCHANT_USER_NAME:
      return isSetMerchantUserName();
    case SUB_TOTAL_MONEY_PRESELL:
      return isSetSubTotalMoneyPresell();
    case OUTLET_ID:
      return isSetOutletId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof QueryOrderByBankManageVo)
      return this.equals((QueryOrderByBankManageVo)that);
    return false;
  }

  public boolean equals(QueryOrderByBankManageVo that) {
    if (that == null)
      return false;

    boolean this_present_orderId = true && this.isSetOrderId();
    boolean that_present_orderId = true && that.isSetOrderId();
    if (this_present_orderId || that_present_orderId) {
      if (!(this_present_orderId && that_present_orderId))
        return false;
      if (!this.orderId.equals(that.orderId))
        return false;
    }

    boolean this_present_subOrderId = true && this.isSetSubOrderId();
    boolean that_present_subOrderId = true && that.isSetSubOrderId();
    if (this_present_subOrderId || that_present_subOrderId) {
      if (!(this_present_subOrderId && that_present_subOrderId))
        return false;
      if (!this.subOrderId.equals(that.subOrderId))
        return false;
    }

    boolean this_present_paymentMethod = true && this.isSetPaymentMethod();
    boolean that_present_paymentMethod = true && that.isSetPaymentMethod();
    if (this_present_paymentMethod || that_present_paymentMethod) {
      if (!(this_present_paymentMethod && that_present_paymentMethod))
        return false;
      if (!this.paymentMethod.equals(that.paymentMethod))
        return false;
    }

    boolean this_present_orderStatus = true && this.isSetOrderStatus();
    boolean that_present_orderStatus = true && that.isSetOrderStatus();
    if (this_present_orderStatus || that_present_orderStatus) {
      if (!(this_present_orderStatus && that_present_orderStatus))
        return false;
      if (!this.orderStatus.equals(that.orderStatus))
        return false;
    }

    boolean this_present_subTotalMoney = true;
    boolean that_present_subTotalMoney = true;
    if (this_present_subTotalMoney || that_present_subTotalMoney) {
      if (!(this_present_subTotalMoney && that_present_subTotalMoney))
        return false;
      if (this.subTotalMoney != that.subTotalMoney)
        return false;
    }

    boolean this_present_point = true;
    boolean that_present_point = true;
    if (this_present_point || that_present_point) {
      if (!(this_present_point && that_present_point))
        return false;
      if (this.point != that.point)
        return false;
    }

    boolean this_present_cash = true;
    boolean that_present_cash = true;
    if (this_present_cash || that_present_cash) {
      if (!(this_present_cash && that_present_cash))
        return false;
      if (this.cash != that.cash)
        return false;
    }

    boolean this_present_createSoure = true && this.isSetCreateSoure();
    boolean that_present_createSoure = true && that.isSetCreateSoure();
    if (this_present_createSoure || that_present_createSoure) {
      if (!(this_present_createSoure && that_present_createSoure))
        return false;
      if (!this.createSoure.equals(that.createSoure))
        return false;
    }

    boolean this_present_merchantName = true && this.isSetMerchantName();
    boolean that_present_merchantName = true && that.isSetMerchantName();
    if (this_present_merchantName || that_present_merchantName) {
      if (!(this_present_merchantName && that_present_merchantName))
        return false;
      if (!this.merchantName.equals(that.merchantName))
        return false;
    }

    boolean this_present_productName = true && this.isSetProductName();
    boolean that_present_productName = true && that.isSetProductName();
    if (this_present_productName || that_present_productName) {
      if (!(this_present_productName && that_present_productName))
        return false;
      if (!this.productName.equals(that.productName))
        return false;
    }

    boolean this_present_deliveryState = true && this.isSetDeliveryState();
    boolean that_present_deliveryState = true && that.isSetDeliveryState();
    if (this_present_deliveryState || that_present_deliveryState) {
      if (!(this_present_deliveryState && that_present_deliveryState))
        return false;
      if (!this.deliveryState.equals(that.deliveryState))
        return false;
    }

    boolean this_present_createTime = true;
    boolean that_present_createTime = true;
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (this.createTime != that.createTime)
        return false;
    }

    boolean this_present_orgCode = true && this.isSetOrgCode();
    boolean that_present_orgCode = true && that.isSetOrgCode();
    if (this_present_orgCode || that_present_orgCode) {
      if (!(this_present_orgCode && that_present_orgCode))
        return false;
      if (!this.orgCode.equals(that.orgCode))
        return false;
    }

    boolean this_present_refundState = true && this.isSetRefundState();
    boolean that_present_refundState = true && that.isSetRefundState();
    if (this_present_refundState || that_present_refundState) {
      if (!(this_present_refundState && that_present_refundState))
        return false;
      if (!this.refundState.equals(that.refundState))
        return false;
    }

    boolean this_present_quantity = true;
    boolean that_present_quantity = true;
    if (this_present_quantity || that_present_quantity) {
      if (!(this_present_quantity && that_present_quantity))
        return false;
      if (this.quantity != that.quantity)
        return false;
    }

    boolean this_present_orgNames = true && this.isSetOrgNames();
    boolean that_present_orgNames = true && that.isSetOrgNames();
    if (this_present_orgNames || that_present_orgNames) {
      if (!(this_present_orgNames && that_present_orgNames))
        return false;
      if (!this.orgNames.equals(that.orgNames))
        return false;
    }

    boolean this_present_productList = true && this.isSetProductList();
    boolean that_present_productList = true && that.isSetProductList();
    if (this_present_productList || that_present_productList) {
      if (!(this_present_productList && that_present_productList))
        return false;
      if (!this.productList.equals(that.productList))
        return false;
    }

    boolean this_present_deliverInfoVo = true && this.isSetDeliverInfoVo();
    boolean that_present_deliverInfoVo = true && that.isSetDeliverInfoVo();
    if (this_present_deliverInfoVo || that_present_deliverInfoVo) {
      if (!(this_present_deliverInfoVo && that_present_deliverInfoVo))
        return false;
      if (!this.deliverInfoVo.equals(that.deliverInfoVo))
        return false;
    }

    boolean this_present_deliveryOption = true && this.isSetDeliveryOption();
    boolean that_present_deliveryOption = true && that.isSetDeliveryOption();
    if (this_present_deliveryOption || that_present_deliveryOption) {
      if (!(this_present_deliveryOption && that_present_deliveryOption))
        return false;
      if (!this.deliveryOption.equals(that.deliveryOption))
        return false;
    }

    boolean this_present_settlementStatus = true && this.isSetSettlementStatus();
    boolean that_present_settlementStatus = true && that.isSetSettlementStatus();
    if (this_present_settlementStatus || that_present_settlementStatus) {
      if (!(this_present_settlementStatus && that_present_settlementStatus))
        return false;
      if (!this.settlementStatus.equals(that.settlementStatus))
        return false;
    }

    boolean this_present_merchantUserId = true;
    boolean that_present_merchantUserId = true;
    if (this_present_merchantUserId || that_present_merchantUserId) {
      if (!(this_present_merchantUserId && that_present_merchantUserId))
        return false;
      if (this.merchantUserId != that.merchantUserId)
        return false;
    }

    boolean this_present_consumeStatus = true && this.isSetConsumeStatus();
    boolean that_present_consumeStatus = true && that.isSetConsumeStatus();
    if (this_present_consumeStatus || that_present_consumeStatus) {
      if (!(this_present_consumeStatus && that_present_consumeStatus))
        return false;
      if (!this.consumeStatus.equals(that.consumeStatus))
        return false;
    }

    boolean this_present_settleTime = true;
    boolean that_present_settleTime = true;
    if (this_present_settleTime || that_present_settleTime) {
      if (!(this_present_settleTime && that_present_settleTime))
        return false;
      if (this.settleTime != that.settleTime)
        return false;
    }

    boolean this_present_merchantUserName = true && this.isSetMerchantUserName();
    boolean that_present_merchantUserName = true && that.isSetMerchantUserName();
    if (this_present_merchantUserName || that_present_merchantUserName) {
      if (!(this_present_merchantUserName && that_present_merchantUserName))
        return false;
      if (!this.merchantUserName.equals(that.merchantUserName))
        return false;
    }

    boolean this_present_subTotalMoneyPresell = true;
    boolean that_present_subTotalMoneyPresell = true;
    if (this_present_subTotalMoneyPresell || that_present_subTotalMoneyPresell) {
      if (!(this_present_subTotalMoneyPresell && that_present_subTotalMoneyPresell))
        return false;
      if (this.subTotalMoneyPresell != that.subTotalMoneyPresell)
        return false;
    }

    boolean this_present_outletId = true && this.isSetOutletId();
    boolean that_present_outletId = true && that.isSetOutletId();
    if (this_present_outletId || that_present_outletId) {
      if (!(this_present_outletId && that_present_outletId))
        return false;
      if (!this.outletId.equals(that.outletId))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_orderId = true && (isSetOrderId());
    list.add(present_orderId);
    if (present_orderId)
      list.add(orderId);

    boolean present_subOrderId = true && (isSetSubOrderId());
    list.add(present_subOrderId);
    if (present_subOrderId)
      list.add(subOrderId);

    boolean present_paymentMethod = true && (isSetPaymentMethod());
    list.add(present_paymentMethod);
    if (present_paymentMethod)
      list.add(paymentMethod);

    boolean present_orderStatus = true && (isSetOrderStatus());
    list.add(present_orderStatus);
    if (present_orderStatus)
      list.add(orderStatus);

    boolean present_subTotalMoney = true;
    list.add(present_subTotalMoney);
    if (present_subTotalMoney)
      list.add(subTotalMoney);

    boolean present_point = true;
    list.add(present_point);
    if (present_point)
      list.add(point);

    boolean present_cash = true;
    list.add(present_cash);
    if (present_cash)
      list.add(cash);

    boolean present_createSoure = true && (isSetCreateSoure());
    list.add(present_createSoure);
    if (present_createSoure)
      list.add(createSoure);

    boolean present_merchantName = true && (isSetMerchantName());
    list.add(present_merchantName);
    if (present_merchantName)
      list.add(merchantName);

    boolean present_productName = true && (isSetProductName());
    list.add(present_productName);
    if (present_productName)
      list.add(productName);

    boolean present_deliveryState = true && (isSetDeliveryState());
    list.add(present_deliveryState);
    if (present_deliveryState)
      list.add(deliveryState);

    boolean present_createTime = true;
    list.add(present_createTime);
    if (present_createTime)
      list.add(createTime);

    boolean present_orgCode = true && (isSetOrgCode());
    list.add(present_orgCode);
    if (present_orgCode)
      list.add(orgCode);

    boolean present_refundState = true && (isSetRefundState());
    list.add(present_refundState);
    if (present_refundState)
      list.add(refundState);

    boolean present_quantity = true;
    list.add(present_quantity);
    if (present_quantity)
      list.add(quantity);

    boolean present_orgNames = true && (isSetOrgNames());
    list.add(present_orgNames);
    if (present_orgNames)
      list.add(orgNames);

    boolean present_productList = true && (isSetProductList());
    list.add(present_productList);
    if (present_productList)
      list.add(productList);

    boolean present_deliverInfoVo = true && (isSetDeliverInfoVo());
    list.add(present_deliverInfoVo);
    if (present_deliverInfoVo)
      list.add(deliverInfoVo);

    boolean present_deliveryOption = true && (isSetDeliveryOption());
    list.add(present_deliveryOption);
    if (present_deliveryOption)
      list.add(deliveryOption);

    boolean present_settlementStatus = true && (isSetSettlementStatus());
    list.add(present_settlementStatus);
    if (present_settlementStatus)
      list.add(settlementStatus);

    boolean present_merchantUserId = true;
    list.add(present_merchantUserId);
    if (present_merchantUserId)
      list.add(merchantUserId);

    boolean present_consumeStatus = true && (isSetConsumeStatus());
    list.add(present_consumeStatus);
    if (present_consumeStatus)
      list.add(consumeStatus);

    boolean present_settleTime = true;
    list.add(present_settleTime);
    if (present_settleTime)
      list.add(settleTime);

    boolean present_merchantUserName = true && (isSetMerchantUserName());
    list.add(present_merchantUserName);
    if (present_merchantUserName)
      list.add(merchantUserName);

    boolean present_subTotalMoneyPresell = true;
    list.add(present_subTotalMoneyPresell);
    if (present_subTotalMoneyPresell)
      list.add(subTotalMoneyPresell);

    boolean present_outletId = true && (isSetOutletId());
    list.add(present_outletId);
    if (present_outletId)
      list.add(outletId);

    return list.hashCode();
  }

  @Override
  public int compareTo(QueryOrderByBankManageVo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetOrderId()).compareTo(other.isSetOrderId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderId, other.orderId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubOrderId()).compareTo(other.isSetSubOrderId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubOrderId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subOrderId, other.subOrderId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPaymentMethod()).compareTo(other.isSetPaymentMethod());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPaymentMethod()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paymentMethod, other.paymentMethod);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderStatus()).compareTo(other.isSetOrderStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderStatus, other.orderStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubTotalMoney()).compareTo(other.isSetSubTotalMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubTotalMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subTotalMoney, other.subTotalMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPoint()).compareTo(other.isSetPoint());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPoint()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.point, other.point);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCash()).compareTo(other.isSetCash());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCash()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cash, other.cash);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateSoure()).compareTo(other.isSetCreateSoure());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateSoure()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createSoure, other.createSoure);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMerchantName()).compareTo(other.isSetMerchantName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMerchantName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchantName, other.merchantName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductName()).compareTo(other.isSetProductName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productName, other.productName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeliveryState()).compareTo(other.isSetDeliveryState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeliveryState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deliveryState, other.deliveryState);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrgCode()).compareTo(other.isSetOrgCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrgCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orgCode, other.orgCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRefundState()).compareTo(other.isSetRefundState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRefundState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refundState, other.refundState);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQuantity()).compareTo(other.isSetQuantity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuantity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.quantity, other.quantity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrgNames()).compareTo(other.isSetOrgNames());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrgNames()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orgNames, other.orgNames);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductList()).compareTo(other.isSetProductList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productList, other.productList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeliverInfoVo()).compareTo(other.isSetDeliverInfoVo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeliverInfoVo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deliverInfoVo, other.deliverInfoVo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeliveryOption()).compareTo(other.isSetDeliveryOption());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeliveryOption()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deliveryOption, other.deliveryOption);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSettlementStatus()).compareTo(other.isSetSettlementStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSettlementStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.settlementStatus, other.settlementStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMerchantUserId()).compareTo(other.isSetMerchantUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMerchantUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchantUserId, other.merchantUserId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetConsumeStatus()).compareTo(other.isSetConsumeStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConsumeStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.consumeStatus, other.consumeStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSettleTime()).compareTo(other.isSetSettleTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSettleTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.settleTime, other.settleTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMerchantUserName()).compareTo(other.isSetMerchantUserName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMerchantUserName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchantUserName, other.merchantUserName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubTotalMoneyPresell()).compareTo(other.isSetSubTotalMoneyPresell());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubTotalMoneyPresell()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subTotalMoneyPresell, other.subTotalMoneyPresell);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOutletId()).compareTo(other.isSetOutletId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOutletId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outletId, other.outletId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("QueryOrderByBankManageVo(");
    boolean first = true;

    sb.append("orderId:");
    if (this.orderId == null) {
      sb.append("null");
    } else {
      sb.append(this.orderId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("subOrderId:");
    if (this.subOrderId == null) {
      sb.append("null");
    } else {
      sb.append(this.subOrderId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("paymentMethod:");
    if (this.paymentMethod == null) {
      sb.append("null");
    } else {
      sb.append(this.paymentMethod);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("orderStatus:");
    if (this.orderStatus == null) {
      sb.append("null");
    } else {
      sb.append(this.orderStatus);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("subTotalMoney:");
    sb.append(this.subTotalMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("point:");
    sb.append(this.point);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cash:");
    sb.append(this.cash);
    first = false;
    if (!first) sb.append(", ");
    sb.append("createSoure:");
    if (this.createSoure == null) {
      sb.append("null");
    } else {
      sb.append(this.createSoure);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("merchantName:");
    if (this.merchantName == null) {
      sb.append("null");
    } else {
      sb.append(this.merchantName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("productName:");
    if (this.productName == null) {
      sb.append("null");
    } else {
      sb.append(this.productName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("deliveryState:");
    if (this.deliveryState == null) {
      sb.append("null");
    } else {
      sb.append(this.deliveryState);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTime:");
    sb.append(this.createTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("orgCode:");
    if (this.orgCode == null) {
      sb.append("null");
    } else {
      sb.append(this.orgCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("refundState:");
    if (this.refundState == null) {
      sb.append("null");
    } else {
      sb.append(this.refundState);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("quantity:");
    sb.append(this.quantity);
    first = false;
    if (!first) sb.append(", ");
    sb.append("orgNames:");
    if (this.orgNames == null) {
      sb.append("null");
    } else {
      sb.append(this.orgNames);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("productList:");
    if (this.productList == null) {
      sb.append("null");
    } else {
      sb.append(this.productList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("deliverInfoVo:");
    if (this.deliverInfoVo == null) {
      sb.append("null");
    } else {
      sb.append(this.deliverInfoVo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("deliveryOption:");
    if (this.deliveryOption == null) {
      sb.append("null");
    } else {
      sb.append(this.deliveryOption);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("settlementStatus:");
    if (this.settlementStatus == null) {
      sb.append("null");
    } else {
      sb.append(this.settlementStatus);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("merchantUserId:");
    sb.append(this.merchantUserId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("consumeStatus:");
    if (this.consumeStatus == null) {
      sb.append("null");
    } else {
      sb.append(this.consumeStatus);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("settleTime:");
    sb.append(this.settleTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("merchantUserName:");
    if (this.merchantUserName == null) {
      sb.append("null");
    } else {
      sb.append(this.merchantUserName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("subTotalMoneyPresell:");
    sb.append(this.subTotalMoneyPresell);
    first = false;
    if (!first) sb.append(", ");
    sb.append("outletId:");
    if (this.outletId == null) {
      sb.append("null");
    } else {
      sb.append(this.outletId);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class QueryOrderByBankManageVoStandardSchemeFactory implements SchemeFactory {
    public QueryOrderByBankManageVoStandardScheme getScheme() {
      return new QueryOrderByBankManageVoStandardScheme();
    }
  }

  private static class QueryOrderByBankManageVoStandardScheme extends StandardScheme<QueryOrderByBankManageVo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, QueryOrderByBankManageVo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ORDER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orderId = iprot.readString();
              struct.setOrderIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SUB_ORDER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.subOrderId = iprot.readString();
              struct.setSubOrderIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PAYMENT_METHOD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.paymentMethod = iprot.readString();
              struct.setPaymentMethodIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ORDER_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orderStatus = iprot.readString();
              struct.setOrderStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SUB_TOTAL_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.subTotalMoney = iprot.readDouble();
              struct.setSubTotalMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // POINT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.point = iprot.readDouble();
              struct.setPointIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CASH
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.cash = iprot.readDouble();
              struct.setCashIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CREATE_SOURE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createSoure = iprot.readString();
              struct.setCreateSoureIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // MERCHANT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.merchantName = iprot.readString();
              struct.setMerchantNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // PRODUCT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.productName = iprot.readString();
              struct.setProductNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // DELIVERY_STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.deliveryState = iprot.readString();
              struct.setDeliveryStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createTime = iprot.readI64();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // ORG_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orgCode = iprot.readString();
              struct.setOrgCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // REFUND_STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.refundState = iprot.readString();
              struct.setRefundStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // QUANTITY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.quantity = iprot.readI32();
              struct.setQuantityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // ORG_NAMES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orgNames = iprot.readString();
              struct.setOrgNamesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // PRODUCT_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                struct.productList = new ArrayList<ProductVo>(_list16.size);
                ProductVo _elem17;
                for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                {
                  _elem17 = new ProductVo();
                  _elem17.read(iprot);
                  struct.productList.add(_elem17);
                }
                iprot.readListEnd();
              }
              struct.setProductListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // DELIVER_INFO_VO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.deliverInfoVo = new DeliverInfoVo();
              struct.deliverInfoVo.read(iprot);
              struct.setDeliverInfoVoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // DELIVERY_OPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.deliveryOption = iprot.readString();
              struct.setDeliveryOptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // SETTLEMENT_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.settlementStatus = iprot.readString();
              struct.setSettlementStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // MERCHANT_USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.merchantUserId = iprot.readI64();
              struct.setMerchantUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // CONSUME_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.consumeStatus = iprot.readString();
              struct.setConsumeStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // SETTLE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.settleTime = iprot.readI64();
              struct.setSettleTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // MERCHANT_USER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.merchantUserName = iprot.readString();
              struct.setMerchantUserNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // SUB_TOTAL_MONEY_PRESELL
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.subTotalMoneyPresell = iprot.readDouble();
              struct.setSubTotalMoneyPresellIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // OUTLET_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.outletId = iprot.readString();
              struct.setOutletIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, QueryOrderByBankManageVo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.orderId != null) {
        oprot.writeFieldBegin(ORDER_ID_FIELD_DESC);
        oprot.writeString(struct.orderId);
        oprot.writeFieldEnd();
      }
      if (struct.subOrderId != null) {
        oprot.writeFieldBegin(SUB_ORDER_ID_FIELD_DESC);
        oprot.writeString(struct.subOrderId);
        oprot.writeFieldEnd();
      }
      if (struct.paymentMethod != null) {
        oprot.writeFieldBegin(PAYMENT_METHOD_FIELD_DESC);
        oprot.writeString(struct.paymentMethod);
        oprot.writeFieldEnd();
      }
      if (struct.orderStatus != null) {
        oprot.writeFieldBegin(ORDER_STATUS_FIELD_DESC);
        oprot.writeString(struct.orderStatus);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SUB_TOTAL_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.subTotalMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(POINT_FIELD_DESC);
      oprot.writeDouble(struct.point);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CASH_FIELD_DESC);
      oprot.writeDouble(struct.cash);
      oprot.writeFieldEnd();
      if (struct.createSoure != null) {
        oprot.writeFieldBegin(CREATE_SOURE_FIELD_DESC);
        oprot.writeString(struct.createSoure);
        oprot.writeFieldEnd();
      }
      if (struct.merchantName != null) {
        oprot.writeFieldBegin(MERCHANT_NAME_FIELD_DESC);
        oprot.writeString(struct.merchantName);
        oprot.writeFieldEnd();
      }
      if (struct.productName != null) {
        oprot.writeFieldBegin(PRODUCT_NAME_FIELD_DESC);
        oprot.writeString(struct.productName);
        oprot.writeFieldEnd();
      }
      if (struct.deliveryState != null) {
        oprot.writeFieldBegin(DELIVERY_STATE_FIELD_DESC);
        oprot.writeString(struct.deliveryState);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
      oprot.writeI64(struct.createTime);
      oprot.writeFieldEnd();
      if (struct.orgCode != null) {
        oprot.writeFieldBegin(ORG_CODE_FIELD_DESC);
        oprot.writeString(struct.orgCode);
        oprot.writeFieldEnd();
      }
      if (struct.refundState != null) {
        oprot.writeFieldBegin(REFUND_STATE_FIELD_DESC);
        oprot.writeString(struct.refundState);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(QUANTITY_FIELD_DESC);
      oprot.writeI32(struct.quantity);
      oprot.writeFieldEnd();
      if (struct.orgNames != null) {
        oprot.writeFieldBegin(ORG_NAMES_FIELD_DESC);
        oprot.writeString(struct.orgNames);
        oprot.writeFieldEnd();
      }
      if (struct.productList != null) {
        oprot.writeFieldBegin(PRODUCT_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.productList.size()));
          for (ProductVo _iter19 : struct.productList)
          {
            _iter19.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.deliverInfoVo != null) {
        oprot.writeFieldBegin(DELIVER_INFO_VO_FIELD_DESC);
        struct.deliverInfoVo.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.deliveryOption != null) {
        oprot.writeFieldBegin(DELIVERY_OPTION_FIELD_DESC);
        oprot.writeString(struct.deliveryOption);
        oprot.writeFieldEnd();
      }
      if (struct.settlementStatus != null) {
        oprot.writeFieldBegin(SETTLEMENT_STATUS_FIELD_DESC);
        oprot.writeString(struct.settlementStatus);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MERCHANT_USER_ID_FIELD_DESC);
      oprot.writeI64(struct.merchantUserId);
      oprot.writeFieldEnd();
      if (struct.consumeStatus != null) {
        oprot.writeFieldBegin(CONSUME_STATUS_FIELD_DESC);
        oprot.writeString(struct.consumeStatus);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SETTLE_TIME_FIELD_DESC);
      oprot.writeI64(struct.settleTime);
      oprot.writeFieldEnd();
      if (struct.merchantUserName != null) {
        oprot.writeFieldBegin(MERCHANT_USER_NAME_FIELD_DESC);
        oprot.writeString(struct.merchantUserName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SUB_TOTAL_MONEY_PRESELL_FIELD_DESC);
      oprot.writeDouble(struct.subTotalMoneyPresell);
      oprot.writeFieldEnd();
      if (struct.outletId != null) {
        oprot.writeFieldBegin(OUTLET_ID_FIELD_DESC);
        oprot.writeString(struct.outletId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class QueryOrderByBankManageVoTupleSchemeFactory implements SchemeFactory {
    public QueryOrderByBankManageVoTupleScheme getScheme() {
      return new QueryOrderByBankManageVoTupleScheme();
    }
  }

  private static class QueryOrderByBankManageVoTupleScheme extends TupleScheme<QueryOrderByBankManageVo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, QueryOrderByBankManageVo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetOrderId()) {
        optionals.set(0);
      }
      if (struct.isSetSubOrderId()) {
        optionals.set(1);
      }
      if (struct.isSetPaymentMethod()) {
        optionals.set(2);
      }
      if (struct.isSetOrderStatus()) {
        optionals.set(3);
      }
      if (struct.isSetSubTotalMoney()) {
        optionals.set(4);
      }
      if (struct.isSetPoint()) {
        optionals.set(5);
      }
      if (struct.isSetCash()) {
        optionals.set(6);
      }
      if (struct.isSetCreateSoure()) {
        optionals.set(7);
      }
      if (struct.isSetMerchantName()) {
        optionals.set(8);
      }
      if (struct.isSetProductName()) {
        optionals.set(9);
      }
      if (struct.isSetDeliveryState()) {
        optionals.set(10);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(11);
      }
      if (struct.isSetOrgCode()) {
        optionals.set(12);
      }
      if (struct.isSetRefundState()) {
        optionals.set(13);
      }
      if (struct.isSetQuantity()) {
        optionals.set(14);
      }
      if (struct.isSetOrgNames()) {
        optionals.set(15);
      }
      if (struct.isSetProductList()) {
        optionals.set(16);
      }
      if (struct.isSetDeliverInfoVo()) {
        optionals.set(17);
      }
      if (struct.isSetDeliveryOption()) {
        optionals.set(18);
      }
      if (struct.isSetSettlementStatus()) {
        optionals.set(19);
      }
      if (struct.isSetMerchantUserId()) {
        optionals.set(20);
      }
      if (struct.isSetConsumeStatus()) {
        optionals.set(21);
      }
      if (struct.isSetSettleTime()) {
        optionals.set(22);
      }
      if (struct.isSetMerchantUserName()) {
        optionals.set(23);
      }
      if (struct.isSetSubTotalMoneyPresell()) {
        optionals.set(24);
      }
      if (struct.isSetOutletId()) {
        optionals.set(25);
      }
      oprot.writeBitSet(optionals, 26);
      if (struct.isSetOrderId()) {
        oprot.writeString(struct.orderId);
      }
      if (struct.isSetSubOrderId()) {
        oprot.writeString(struct.subOrderId);
      }
      if (struct.isSetPaymentMethod()) {
        oprot.writeString(struct.paymentMethod);
      }
      if (struct.isSetOrderStatus()) {
        oprot.writeString(struct.orderStatus);
      }
      if (struct.isSetSubTotalMoney()) {
        oprot.writeDouble(struct.subTotalMoney);
      }
      if (struct.isSetPoint()) {
        oprot.writeDouble(struct.point);
      }
      if (struct.isSetCash()) {
        oprot.writeDouble(struct.cash);
      }
      if (struct.isSetCreateSoure()) {
        oprot.writeString(struct.createSoure);
      }
      if (struct.isSetMerchantName()) {
        oprot.writeString(struct.merchantName);
      }
      if (struct.isSetProductName()) {
        oprot.writeString(struct.productName);
      }
      if (struct.isSetDeliveryState()) {
        oprot.writeString(struct.deliveryState);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeI64(struct.createTime);
      }
      if (struct.isSetOrgCode()) {
        oprot.writeString(struct.orgCode);
      }
      if (struct.isSetRefundState()) {
        oprot.writeString(struct.refundState);
      }
      if (struct.isSetQuantity()) {
        oprot.writeI32(struct.quantity);
      }
      if (struct.isSetOrgNames()) {
        oprot.writeString(struct.orgNames);
      }
      if (struct.isSetProductList()) {
        {
          oprot.writeI32(struct.productList.size());
          for (ProductVo _iter20 : struct.productList)
          {
            _iter20.write(oprot);
          }
        }
      }
      if (struct.isSetDeliverInfoVo()) {
        struct.deliverInfoVo.write(oprot);
      }
      if (struct.isSetDeliveryOption()) {
        oprot.writeString(struct.deliveryOption);
      }
      if (struct.isSetSettlementStatus()) {
        oprot.writeString(struct.settlementStatus);
      }
      if (struct.isSetMerchantUserId()) {
        oprot.writeI64(struct.merchantUserId);
      }
      if (struct.isSetConsumeStatus()) {
        oprot.writeString(struct.consumeStatus);
      }
      if (struct.isSetSettleTime()) {
        oprot.writeI64(struct.settleTime);
      }
      if (struct.isSetMerchantUserName()) {
        oprot.writeString(struct.merchantUserName);
      }
      if (struct.isSetSubTotalMoneyPresell()) {
        oprot.writeDouble(struct.subTotalMoneyPresell);
      }
      if (struct.isSetOutletId()) {
        oprot.writeString(struct.outletId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, QueryOrderByBankManageVo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(26);
      if (incoming.get(0)) {
        struct.orderId = iprot.readString();
        struct.setOrderIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.subOrderId = iprot.readString();
        struct.setSubOrderIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.paymentMethod = iprot.readString();
        struct.setPaymentMethodIsSet(true);
      }
      if (incoming.get(3)) {
        struct.orderStatus = iprot.readString();
        struct.setOrderStatusIsSet(true);
      }
      if (incoming.get(4)) {
        struct.subTotalMoney = iprot.readDouble();
        struct.setSubTotalMoneyIsSet(true);
      }
      if (incoming.get(5)) {
        struct.point = iprot.readDouble();
        struct.setPointIsSet(true);
      }
      if (incoming.get(6)) {
        struct.cash = iprot.readDouble();
        struct.setCashIsSet(true);
      }
      if (incoming.get(7)) {
        struct.createSoure = iprot.readString();
        struct.setCreateSoureIsSet(true);
      }
      if (incoming.get(8)) {
        struct.merchantName = iprot.readString();
        struct.setMerchantNameIsSet(true);
      }
      if (incoming.get(9)) {
        struct.productName = iprot.readString();
        struct.setProductNameIsSet(true);
      }
      if (incoming.get(10)) {
        struct.deliveryState = iprot.readString();
        struct.setDeliveryStateIsSet(true);
      }
      if (incoming.get(11)) {
        struct.createTime = iprot.readI64();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(12)) {
        struct.orgCode = iprot.readString();
        struct.setOrgCodeIsSet(true);
      }
      if (incoming.get(13)) {
        struct.refundState = iprot.readString();
        struct.setRefundStateIsSet(true);
      }
      if (incoming.get(14)) {
        struct.quantity = iprot.readI32();
        struct.setQuantityIsSet(true);
      }
      if (incoming.get(15)) {
        struct.orgNames = iprot.readString();
        struct.setOrgNamesIsSet(true);
      }
      if (incoming.get(16)) {
        {
          org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.productList = new ArrayList<ProductVo>(_list21.size);
          ProductVo _elem22;
          for (int _i23 = 0; _i23 < _list21.size; ++_i23)
          {
            _elem22 = new ProductVo();
            _elem22.read(iprot);
            struct.productList.add(_elem22);
          }
        }
        struct.setProductListIsSet(true);
      }
      if (incoming.get(17)) {
        struct.deliverInfoVo = new DeliverInfoVo();
        struct.deliverInfoVo.read(iprot);
        struct.setDeliverInfoVoIsSet(true);
      }
      if (incoming.get(18)) {
        struct.deliveryOption = iprot.readString();
        struct.setDeliveryOptionIsSet(true);
      }
      if (incoming.get(19)) {
        struct.settlementStatus = iprot.readString();
        struct.setSettlementStatusIsSet(true);
      }
      if (incoming.get(20)) {
        struct.merchantUserId = iprot.readI64();
        struct.setMerchantUserIdIsSet(true);
      }
      if (incoming.get(21)) {
        struct.consumeStatus = iprot.readString();
        struct.setConsumeStatusIsSet(true);
      }
      if (incoming.get(22)) {
        struct.settleTime = iprot.readI64();
        struct.setSettleTimeIsSet(true);
      }
      if (incoming.get(23)) {
        struct.merchantUserName = iprot.readString();
        struct.setMerchantUserNameIsSet(true);
      }
      if (incoming.get(24)) {
        struct.subTotalMoneyPresell = iprot.readDouble();
        struct.setSubTotalMoneyPresellIsSet(true);
      }
      if (incoming.get(25)) {
        struct.outletId = iprot.readString();
        struct.setOutletIdIsSet(true);
      }
    }
  }

}

