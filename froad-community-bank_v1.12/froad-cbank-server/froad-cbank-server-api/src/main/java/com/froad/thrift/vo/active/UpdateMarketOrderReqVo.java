/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.vo.active;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 修改营销活动订单 请求
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class UpdateMarketOrderReqVo implements org.apache.thrift.TBase<UpdateMarketOrderReqVo, UpdateMarketOrderReqVo._Fields>, java.io.Serializable, Cloneable, Comparable<UpdateMarketOrderReqVo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UpdateMarketOrderReqVo");

  private static final org.apache.thrift.protocol.TField REQ_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("reqId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField MEMBER_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("memberCode", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField ORDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("orderId", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField MARKET__ID_FIELD_DESC = new org.apache.thrift.protocol.TField("market_Id", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.BOOL, (short)6);
  private static final org.apache.thrift.protocol.TField PAY_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("payTime", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField VOUCHERS_ID_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("vouchersIdList", org.apache.thrift.protocol.TType.LIST, (short)8);
  private static final org.apache.thrift.protocol.TField IS_F2_FORDER_FIELD_DESC = new org.apache.thrift.protocol.TField("isF2FOrder", org.apache.thrift.protocol.TType.BOOL, (short)9);
  private static final org.apache.thrift.protocol.TField PAY_BILL_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("payBillNo", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField FULL_GIVE_ACTIVE_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("fullGiveActiveIds", org.apache.thrift.protocol.TType.LIST, (short)11);
  private static final org.apache.thrift.protocol.TField LOGIN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("loginId", org.apache.thrift.protocol.TType.STRING, (short)12);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new UpdateMarketOrderReqVoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new UpdateMarketOrderReqVoTupleSchemeFactory());
  }

  /**
   * 请求id
   */
  public String reqId; // required
  /**
   * 客户端id
   */
  public String clientId; // required
  /**
   * 用户编号
   */
  public long memberCode; // required
  /**
   * 订单id
   */
  public String orderId; // required
  /**
   * 营销活动订单id
   */
  public String market_Id; // required
  /**
   * 状态
   */
  public boolean status; // required
  /**
   * 支付时间
   */
  public long payTime; // required
  /**
   * 代金券/红包id 列表
   */
  public List<String> vouchersIdList; // optional
  /**
   * 是否面对面订单
   */
  public boolean isF2FOrder; // required
  /**
   * 支付账单号
   */
  public String payBillNo; // required
  /**
   * 满赠活动id - 列表
   */
  public List<String> fullGiveActiveIds; // required
  /**
   * 会员账号(联盟积分需要传此参数)
   */
  public String loginId; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 请求id
     */
    REQ_ID((short)1, "reqId"),
    /**
     * 客户端id
     */
    CLIENT_ID((short)2, "clientId"),
    /**
     * 用户编号
     */
    MEMBER_CODE((short)3, "memberCode"),
    /**
     * 订单id
     */
    ORDER_ID((short)4, "orderId"),
    /**
     * 营销活动订单id
     */
    MARKET__ID((short)5, "market_Id"),
    /**
     * 状态
     */
    STATUS((short)6, "status"),
    /**
     * 支付时间
     */
    PAY_TIME((short)7, "payTime"),
    /**
     * 代金券/红包id 列表
     */
    VOUCHERS_ID_LIST((short)8, "vouchersIdList"),
    /**
     * 是否面对面订单
     */
    IS_F2_FORDER((short)9, "isF2FOrder"),
    /**
     * 支付账单号
     */
    PAY_BILL_NO((short)10, "payBillNo"),
    /**
     * 满赠活动id - 列表
     */
    FULL_GIVE_ACTIVE_IDS((short)11, "fullGiveActiveIds"),
    /**
     * 会员账号(联盟积分需要传此参数)
     */
    LOGIN_ID((short)12, "loginId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // REQ_ID
          return REQ_ID;
        case 2: // CLIENT_ID
          return CLIENT_ID;
        case 3: // MEMBER_CODE
          return MEMBER_CODE;
        case 4: // ORDER_ID
          return ORDER_ID;
        case 5: // MARKET__ID
          return MARKET__ID;
        case 6: // STATUS
          return STATUS;
        case 7: // PAY_TIME
          return PAY_TIME;
        case 8: // VOUCHERS_ID_LIST
          return VOUCHERS_ID_LIST;
        case 9: // IS_F2_FORDER
          return IS_F2_FORDER;
        case 10: // PAY_BILL_NO
          return PAY_BILL_NO;
        case 11: // FULL_GIVE_ACTIVE_IDS
          return FULL_GIVE_ACTIVE_IDS;
        case 12: // LOGIN_ID
          return LOGIN_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MEMBERCODE_ISSET_ID = 0;
  private static final int __STATUS_ISSET_ID = 1;
  private static final int __PAYTIME_ISSET_ID = 2;
  private static final int __ISF2FORDER_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.VOUCHERS_ID_LIST};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.REQ_ID, new org.apache.thrift.meta_data.FieldMetaData("reqId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MEMBER_CODE, new org.apache.thrift.meta_data.FieldMetaData("memberCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ORDER_ID, new org.apache.thrift.meta_data.FieldMetaData("orderId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MARKET__ID, new org.apache.thrift.meta_data.FieldMetaData("market_Id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.PAY_TIME, new org.apache.thrift.meta_data.FieldMetaData("payTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.VOUCHERS_ID_LIST, new org.apache.thrift.meta_data.FieldMetaData("vouchersIdList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.IS_F2_FORDER, new org.apache.thrift.meta_data.FieldMetaData("isF2FOrder", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.PAY_BILL_NO, new org.apache.thrift.meta_data.FieldMetaData("payBillNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FULL_GIVE_ACTIVE_IDS, new org.apache.thrift.meta_data.FieldMetaData("fullGiveActiveIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.LOGIN_ID, new org.apache.thrift.meta_data.FieldMetaData("loginId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UpdateMarketOrderReqVo.class, metaDataMap);
  }

  public UpdateMarketOrderReqVo() {
  }

  public UpdateMarketOrderReqVo(
    String reqId,
    String clientId,
    long memberCode,
    String orderId,
    String market_Id,
    boolean status,
    long payTime,
    boolean isF2FOrder,
    String payBillNo,
    List<String> fullGiveActiveIds,
    String loginId)
  {
    this();
    this.reqId = reqId;
    this.clientId = clientId;
    this.memberCode = memberCode;
    setMemberCodeIsSet(true);
    this.orderId = orderId;
    this.market_Id = market_Id;
    this.status = status;
    setStatusIsSet(true);
    this.payTime = payTime;
    setPayTimeIsSet(true);
    this.isF2FOrder = isF2FOrder;
    setIsF2FOrderIsSet(true);
    this.payBillNo = payBillNo;
    this.fullGiveActiveIds = fullGiveActiveIds;
    this.loginId = loginId;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public UpdateMarketOrderReqVo(UpdateMarketOrderReqVo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetReqId()) {
      this.reqId = other.reqId;
    }
    if (other.isSetClientId()) {
      this.clientId = other.clientId;
    }
    this.memberCode = other.memberCode;
    if (other.isSetOrderId()) {
      this.orderId = other.orderId;
    }
    if (other.isSetMarket_Id()) {
      this.market_Id = other.market_Id;
    }
    this.status = other.status;
    this.payTime = other.payTime;
    if (other.isSetVouchersIdList()) {
      List<String> __this__vouchersIdList = new ArrayList<String>(other.vouchersIdList);
      this.vouchersIdList = __this__vouchersIdList;
    }
    this.isF2FOrder = other.isF2FOrder;
    if (other.isSetPayBillNo()) {
      this.payBillNo = other.payBillNo;
    }
    if (other.isSetFullGiveActiveIds()) {
      List<String> __this__fullGiveActiveIds = new ArrayList<String>(other.fullGiveActiveIds);
      this.fullGiveActiveIds = __this__fullGiveActiveIds;
    }
    if (other.isSetLoginId()) {
      this.loginId = other.loginId;
    }
  }

  public UpdateMarketOrderReqVo deepCopy() {
    return new UpdateMarketOrderReqVo(this);
  }

  @Override
  public void clear() {
    this.reqId = null;
    this.clientId = null;
    setMemberCodeIsSet(false);
    this.memberCode = 0;
    this.orderId = null;
    this.market_Id = null;
    setStatusIsSet(false);
    this.status = false;
    setPayTimeIsSet(false);
    this.payTime = 0;
    this.vouchersIdList = null;
    setIsF2FOrderIsSet(false);
    this.isF2FOrder = false;
    this.payBillNo = null;
    this.fullGiveActiveIds = null;
    this.loginId = null;
  }

  /**
   * 请求id
   */
  public String getReqId() {
    return this.reqId;
  }

  /**
   * 请求id
   */
  public UpdateMarketOrderReqVo setReqId(String reqId) {
    this.reqId = reqId;
    return this;
  }

  public void unsetReqId() {
    this.reqId = null;
  }

  /** Returns true if field reqId is set (has been assigned a value) and false otherwise */
  public boolean isSetReqId() {
    return this.reqId != null;
  }

  public void setReqIdIsSet(boolean value) {
    if (!value) {
      this.reqId = null;
    }
  }

  /**
   * 客户端id
   */
  public String getClientId() {
    return this.clientId;
  }

  /**
   * 客户端id
   */
  public UpdateMarketOrderReqVo setClientId(String clientId) {
    this.clientId = clientId;
    return this;
  }

  public void unsetClientId() {
    this.clientId = null;
  }

  /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
  public boolean isSetClientId() {
    return this.clientId != null;
  }

  public void setClientIdIsSet(boolean value) {
    if (!value) {
      this.clientId = null;
    }
  }

  /**
   * 用户编号
   */
  public long getMemberCode() {
    return this.memberCode;
  }

  /**
   * 用户编号
   */
  public UpdateMarketOrderReqVo setMemberCode(long memberCode) {
    this.memberCode = memberCode;
    setMemberCodeIsSet(true);
    return this;
  }

  public void unsetMemberCode() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MEMBERCODE_ISSET_ID);
  }

  /** Returns true if field memberCode is set (has been assigned a value) and false otherwise */
  public boolean isSetMemberCode() {
    return EncodingUtils.testBit(__isset_bitfield, __MEMBERCODE_ISSET_ID);
  }

  public void setMemberCodeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MEMBERCODE_ISSET_ID, value);
  }

  /**
   * 订单id
   */
  public String getOrderId() {
    return this.orderId;
  }

  /**
   * 订单id
   */
  public UpdateMarketOrderReqVo setOrderId(String orderId) {
    this.orderId = orderId;
    return this;
  }

  public void unsetOrderId() {
    this.orderId = null;
  }

  /** Returns true if field orderId is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderId() {
    return this.orderId != null;
  }

  public void setOrderIdIsSet(boolean value) {
    if (!value) {
      this.orderId = null;
    }
  }

  /**
   * 营销活动订单id
   */
  public String getMarket_Id() {
    return this.market_Id;
  }

  /**
   * 营销活动订单id
   */
  public UpdateMarketOrderReqVo setMarket_Id(String market_Id) {
    this.market_Id = market_Id;
    return this;
  }

  public void unsetMarket_Id() {
    this.market_Id = null;
  }

  /** Returns true if field market_Id is set (has been assigned a value) and false otherwise */
  public boolean isSetMarket_Id() {
    return this.market_Id != null;
  }

  public void setMarket_IdIsSet(boolean value) {
    if (!value) {
      this.market_Id = null;
    }
  }

  /**
   * 状态
   */
  public boolean isStatus() {
    return this.status;
  }

  /**
   * 状态
   */
  public UpdateMarketOrderReqVo setStatus(boolean status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  /**
   * 支付时间
   */
  public long getPayTime() {
    return this.payTime;
  }

  /**
   * 支付时间
   */
  public UpdateMarketOrderReqVo setPayTime(long payTime) {
    this.payTime = payTime;
    setPayTimeIsSet(true);
    return this;
  }

  public void unsetPayTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAYTIME_ISSET_ID);
  }

  /** Returns true if field payTime is set (has been assigned a value) and false otherwise */
  public boolean isSetPayTime() {
    return EncodingUtils.testBit(__isset_bitfield, __PAYTIME_ISSET_ID);
  }

  public void setPayTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAYTIME_ISSET_ID, value);
  }

  public int getVouchersIdListSize() {
    return (this.vouchersIdList == null) ? 0 : this.vouchersIdList.size();
  }

  public java.util.Iterator<String> getVouchersIdListIterator() {
    return (this.vouchersIdList == null) ? null : this.vouchersIdList.iterator();
  }

  public void addToVouchersIdList(String elem) {
    if (this.vouchersIdList == null) {
      this.vouchersIdList = new ArrayList<String>();
    }
    this.vouchersIdList.add(elem);
  }

  /**
   * 代金券/红包id 列表
   */
  public List<String> getVouchersIdList() {
    return this.vouchersIdList;
  }

  /**
   * 代金券/红包id 列表
   */
  public UpdateMarketOrderReqVo setVouchersIdList(List<String> vouchersIdList) {
    this.vouchersIdList = vouchersIdList;
    return this;
  }

  public void unsetVouchersIdList() {
    this.vouchersIdList = null;
  }

  /** Returns true if field vouchersIdList is set (has been assigned a value) and false otherwise */
  public boolean isSetVouchersIdList() {
    return this.vouchersIdList != null;
  }

  public void setVouchersIdListIsSet(boolean value) {
    if (!value) {
      this.vouchersIdList = null;
    }
  }

  /**
   * 是否面对面订单
   */
  public boolean isIsF2FOrder() {
    return this.isF2FOrder;
  }

  /**
   * 是否面对面订单
   */
  public UpdateMarketOrderReqVo setIsF2FOrder(boolean isF2FOrder) {
    this.isF2FOrder = isF2FOrder;
    setIsF2FOrderIsSet(true);
    return this;
  }

  public void unsetIsF2FOrder() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISF2FORDER_ISSET_ID);
  }

  /** Returns true if field isF2FOrder is set (has been assigned a value) and false otherwise */
  public boolean isSetIsF2FOrder() {
    return EncodingUtils.testBit(__isset_bitfield, __ISF2FORDER_ISSET_ID);
  }

  public void setIsF2FOrderIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISF2FORDER_ISSET_ID, value);
  }

  /**
   * 支付账单号
   */
  public String getPayBillNo() {
    return this.payBillNo;
  }

  /**
   * 支付账单号
   */
  public UpdateMarketOrderReqVo setPayBillNo(String payBillNo) {
    this.payBillNo = payBillNo;
    return this;
  }

  public void unsetPayBillNo() {
    this.payBillNo = null;
  }

  /** Returns true if field payBillNo is set (has been assigned a value) and false otherwise */
  public boolean isSetPayBillNo() {
    return this.payBillNo != null;
  }

  public void setPayBillNoIsSet(boolean value) {
    if (!value) {
      this.payBillNo = null;
    }
  }

  public int getFullGiveActiveIdsSize() {
    return (this.fullGiveActiveIds == null) ? 0 : this.fullGiveActiveIds.size();
  }

  public java.util.Iterator<String> getFullGiveActiveIdsIterator() {
    return (this.fullGiveActiveIds == null) ? null : this.fullGiveActiveIds.iterator();
  }

  public void addToFullGiveActiveIds(String elem) {
    if (this.fullGiveActiveIds == null) {
      this.fullGiveActiveIds = new ArrayList<String>();
    }
    this.fullGiveActiveIds.add(elem);
  }

  /**
   * 满赠活动id - 列表
   */
  public List<String> getFullGiveActiveIds() {
    return this.fullGiveActiveIds;
  }

  /**
   * 满赠活动id - 列表
   */
  public UpdateMarketOrderReqVo setFullGiveActiveIds(List<String> fullGiveActiveIds) {
    this.fullGiveActiveIds = fullGiveActiveIds;
    return this;
  }

  public void unsetFullGiveActiveIds() {
    this.fullGiveActiveIds = null;
  }

  /** Returns true if field fullGiveActiveIds is set (has been assigned a value) and false otherwise */
  public boolean isSetFullGiveActiveIds() {
    return this.fullGiveActiveIds != null;
  }

  public void setFullGiveActiveIdsIsSet(boolean value) {
    if (!value) {
      this.fullGiveActiveIds = null;
    }
  }

  /**
   * 会员账号(联盟积分需要传此参数)
   */
  public String getLoginId() {
    return this.loginId;
  }

  /**
   * 会员账号(联盟积分需要传此参数)
   */
  public UpdateMarketOrderReqVo setLoginId(String loginId) {
    this.loginId = loginId;
    return this;
  }

  public void unsetLoginId() {
    this.loginId = null;
  }

  /** Returns true if field loginId is set (has been assigned a value) and false otherwise */
  public boolean isSetLoginId() {
    return this.loginId != null;
  }

  public void setLoginIdIsSet(boolean value) {
    if (!value) {
      this.loginId = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case REQ_ID:
      if (value == null) {
        unsetReqId();
      } else {
        setReqId((String)value);
      }
      break;

    case CLIENT_ID:
      if (value == null) {
        unsetClientId();
      } else {
        setClientId((String)value);
      }
      break;

    case MEMBER_CODE:
      if (value == null) {
        unsetMemberCode();
      } else {
        setMemberCode((Long)value);
      }
      break;

    case ORDER_ID:
      if (value == null) {
        unsetOrderId();
      } else {
        setOrderId((String)value);
      }
      break;

    case MARKET__ID:
      if (value == null) {
        unsetMarket_Id();
      } else {
        setMarket_Id((String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Boolean)value);
      }
      break;

    case PAY_TIME:
      if (value == null) {
        unsetPayTime();
      } else {
        setPayTime((Long)value);
      }
      break;

    case VOUCHERS_ID_LIST:
      if (value == null) {
        unsetVouchersIdList();
      } else {
        setVouchersIdList((List<String>)value);
      }
      break;

    case IS_F2_FORDER:
      if (value == null) {
        unsetIsF2FOrder();
      } else {
        setIsF2FOrder((Boolean)value);
      }
      break;

    case PAY_BILL_NO:
      if (value == null) {
        unsetPayBillNo();
      } else {
        setPayBillNo((String)value);
      }
      break;

    case FULL_GIVE_ACTIVE_IDS:
      if (value == null) {
        unsetFullGiveActiveIds();
      } else {
        setFullGiveActiveIds((List<String>)value);
      }
      break;

    case LOGIN_ID:
      if (value == null) {
        unsetLoginId();
      } else {
        setLoginId((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case REQ_ID:
      return getReqId();

    case CLIENT_ID:
      return getClientId();

    case MEMBER_CODE:
      return Long.valueOf(getMemberCode());

    case ORDER_ID:
      return getOrderId();

    case MARKET__ID:
      return getMarket_Id();

    case STATUS:
      return Boolean.valueOf(isStatus());

    case PAY_TIME:
      return Long.valueOf(getPayTime());

    case VOUCHERS_ID_LIST:
      return getVouchersIdList();

    case IS_F2_FORDER:
      return Boolean.valueOf(isIsF2FOrder());

    case PAY_BILL_NO:
      return getPayBillNo();

    case FULL_GIVE_ACTIVE_IDS:
      return getFullGiveActiveIds();

    case LOGIN_ID:
      return getLoginId();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case REQ_ID:
      return isSetReqId();
    case CLIENT_ID:
      return isSetClientId();
    case MEMBER_CODE:
      return isSetMemberCode();
    case ORDER_ID:
      return isSetOrderId();
    case MARKET__ID:
      return isSetMarket_Id();
    case STATUS:
      return isSetStatus();
    case PAY_TIME:
      return isSetPayTime();
    case VOUCHERS_ID_LIST:
      return isSetVouchersIdList();
    case IS_F2_FORDER:
      return isSetIsF2FOrder();
    case PAY_BILL_NO:
      return isSetPayBillNo();
    case FULL_GIVE_ACTIVE_IDS:
      return isSetFullGiveActiveIds();
    case LOGIN_ID:
      return isSetLoginId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof UpdateMarketOrderReqVo)
      return this.equals((UpdateMarketOrderReqVo)that);
    return false;
  }

  public boolean equals(UpdateMarketOrderReqVo that) {
    if (that == null)
      return false;

    boolean this_present_reqId = true && this.isSetReqId();
    boolean that_present_reqId = true && that.isSetReqId();
    if (this_present_reqId || that_present_reqId) {
      if (!(this_present_reqId && that_present_reqId))
        return false;
      if (!this.reqId.equals(that.reqId))
        return false;
    }

    boolean this_present_clientId = true && this.isSetClientId();
    boolean that_present_clientId = true && that.isSetClientId();
    if (this_present_clientId || that_present_clientId) {
      if (!(this_present_clientId && that_present_clientId))
        return false;
      if (!this.clientId.equals(that.clientId))
        return false;
    }

    boolean this_present_memberCode = true;
    boolean that_present_memberCode = true;
    if (this_present_memberCode || that_present_memberCode) {
      if (!(this_present_memberCode && that_present_memberCode))
        return false;
      if (this.memberCode != that.memberCode)
        return false;
    }

    boolean this_present_orderId = true && this.isSetOrderId();
    boolean that_present_orderId = true && that.isSetOrderId();
    if (this_present_orderId || that_present_orderId) {
      if (!(this_present_orderId && that_present_orderId))
        return false;
      if (!this.orderId.equals(that.orderId))
        return false;
    }

    boolean this_present_market_Id = true && this.isSetMarket_Id();
    boolean that_present_market_Id = true && that.isSetMarket_Id();
    if (this_present_market_Id || that_present_market_Id) {
      if (!(this_present_market_Id && that_present_market_Id))
        return false;
      if (!this.market_Id.equals(that.market_Id))
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_payTime = true;
    boolean that_present_payTime = true;
    if (this_present_payTime || that_present_payTime) {
      if (!(this_present_payTime && that_present_payTime))
        return false;
      if (this.payTime != that.payTime)
        return false;
    }

    boolean this_present_vouchersIdList = true && this.isSetVouchersIdList();
    boolean that_present_vouchersIdList = true && that.isSetVouchersIdList();
    if (this_present_vouchersIdList || that_present_vouchersIdList) {
      if (!(this_present_vouchersIdList && that_present_vouchersIdList))
        return false;
      if (!this.vouchersIdList.equals(that.vouchersIdList))
        return false;
    }

    boolean this_present_isF2FOrder = true;
    boolean that_present_isF2FOrder = true;
    if (this_present_isF2FOrder || that_present_isF2FOrder) {
      if (!(this_present_isF2FOrder && that_present_isF2FOrder))
        return false;
      if (this.isF2FOrder != that.isF2FOrder)
        return false;
    }

    boolean this_present_payBillNo = true && this.isSetPayBillNo();
    boolean that_present_payBillNo = true && that.isSetPayBillNo();
    if (this_present_payBillNo || that_present_payBillNo) {
      if (!(this_present_payBillNo && that_present_payBillNo))
        return false;
      if (!this.payBillNo.equals(that.payBillNo))
        return false;
    }

    boolean this_present_fullGiveActiveIds = true && this.isSetFullGiveActiveIds();
    boolean that_present_fullGiveActiveIds = true && that.isSetFullGiveActiveIds();
    if (this_present_fullGiveActiveIds || that_present_fullGiveActiveIds) {
      if (!(this_present_fullGiveActiveIds && that_present_fullGiveActiveIds))
        return false;
      if (!this.fullGiveActiveIds.equals(that.fullGiveActiveIds))
        return false;
    }

    boolean this_present_loginId = true && this.isSetLoginId();
    boolean that_present_loginId = true && that.isSetLoginId();
    if (this_present_loginId || that_present_loginId) {
      if (!(this_present_loginId && that_present_loginId))
        return false;
      if (!this.loginId.equals(that.loginId))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_reqId = true && (isSetReqId());
    list.add(present_reqId);
    if (present_reqId)
      list.add(reqId);

    boolean present_clientId = true && (isSetClientId());
    list.add(present_clientId);
    if (present_clientId)
      list.add(clientId);

    boolean present_memberCode = true;
    list.add(present_memberCode);
    if (present_memberCode)
      list.add(memberCode);

    boolean present_orderId = true && (isSetOrderId());
    list.add(present_orderId);
    if (present_orderId)
      list.add(orderId);

    boolean present_market_Id = true && (isSetMarket_Id());
    list.add(present_market_Id);
    if (present_market_Id)
      list.add(market_Id);

    boolean present_status = true;
    list.add(present_status);
    if (present_status)
      list.add(status);

    boolean present_payTime = true;
    list.add(present_payTime);
    if (present_payTime)
      list.add(payTime);

    boolean present_vouchersIdList = true && (isSetVouchersIdList());
    list.add(present_vouchersIdList);
    if (present_vouchersIdList)
      list.add(vouchersIdList);

    boolean present_isF2FOrder = true;
    list.add(present_isF2FOrder);
    if (present_isF2FOrder)
      list.add(isF2FOrder);

    boolean present_payBillNo = true && (isSetPayBillNo());
    list.add(present_payBillNo);
    if (present_payBillNo)
      list.add(payBillNo);

    boolean present_fullGiveActiveIds = true && (isSetFullGiveActiveIds());
    list.add(present_fullGiveActiveIds);
    if (present_fullGiveActiveIds)
      list.add(fullGiveActiveIds);

    boolean present_loginId = true && (isSetLoginId());
    list.add(present_loginId);
    if (present_loginId)
      list.add(loginId);

    return list.hashCode();
  }

  @Override
  public int compareTo(UpdateMarketOrderReqVo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetReqId()).compareTo(other.isSetReqId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReqId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reqId, other.reqId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClientId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMemberCode()).compareTo(other.isSetMemberCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMemberCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.memberCode, other.memberCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderId()).compareTo(other.isSetOrderId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderId, other.orderId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMarket_Id()).compareTo(other.isSetMarket_Id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMarket_Id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.market_Id, other.market_Id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPayTime()).compareTo(other.isSetPayTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPayTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.payTime, other.payTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVouchersIdList()).compareTo(other.isSetVouchersIdList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVouchersIdList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vouchersIdList, other.vouchersIdList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsF2FOrder()).compareTo(other.isSetIsF2FOrder());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsF2FOrder()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isF2FOrder, other.isF2FOrder);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPayBillNo()).compareTo(other.isSetPayBillNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPayBillNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.payBillNo, other.payBillNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFullGiveActiveIds()).compareTo(other.isSetFullGiveActiveIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFullGiveActiveIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fullGiveActiveIds, other.fullGiveActiveIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoginId()).compareTo(other.isSetLoginId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoginId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loginId, other.loginId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("UpdateMarketOrderReqVo(");
    boolean first = true;

    sb.append("reqId:");
    if (this.reqId == null) {
      sb.append("null");
    } else {
      sb.append(this.reqId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("clientId:");
    if (this.clientId == null) {
      sb.append("null");
    } else {
      sb.append(this.clientId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("memberCode:");
    sb.append(this.memberCode);
    first = false;
    if (!first) sb.append(", ");
    sb.append("orderId:");
    if (this.orderId == null) {
      sb.append("null");
    } else {
      sb.append(this.orderId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("market_Id:");
    if (this.market_Id == null) {
      sb.append("null");
    } else {
      sb.append(this.market_Id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("payTime:");
    sb.append(this.payTime);
    first = false;
    if (isSetVouchersIdList()) {
      if (!first) sb.append(", ");
      sb.append("vouchersIdList:");
      if (this.vouchersIdList == null) {
        sb.append("null");
      } else {
        sb.append(this.vouchersIdList);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("isF2FOrder:");
    sb.append(this.isF2FOrder);
    first = false;
    if (!first) sb.append(", ");
    sb.append("payBillNo:");
    if (this.payBillNo == null) {
      sb.append("null");
    } else {
      sb.append(this.payBillNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fullGiveActiveIds:");
    if (this.fullGiveActiveIds == null) {
      sb.append("null");
    } else {
      sb.append(this.fullGiveActiveIds);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("loginId:");
    if (this.loginId == null) {
      sb.append("null");
    } else {
      sb.append(this.loginId);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class UpdateMarketOrderReqVoStandardSchemeFactory implements SchemeFactory {
    public UpdateMarketOrderReqVoStandardScheme getScheme() {
      return new UpdateMarketOrderReqVoStandardScheme();
    }
  }

  private static class UpdateMarketOrderReqVoStandardScheme extends StandardScheme<UpdateMarketOrderReqVo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, UpdateMarketOrderReqVo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // REQ_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.reqId = iprot.readString();
              struct.setReqIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CLIENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clientId = iprot.readString();
              struct.setClientIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MEMBER_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.memberCode = iprot.readI64();
              struct.setMemberCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ORDER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orderId = iprot.readString();
              struct.setOrderIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // MARKET__ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.market_Id = iprot.readString();
              struct.setMarket_IdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.status = iprot.readBool();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PAY_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.payTime = iprot.readI64();
              struct.setPayTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // VOUCHERS_ID_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list184 = iprot.readListBegin();
                struct.vouchersIdList = new ArrayList<String>(_list184.size);
                String _elem185;
                for (int _i186 = 0; _i186 < _list184.size; ++_i186)
                {
                  _elem185 = iprot.readString();
                  struct.vouchersIdList.add(_elem185);
                }
                iprot.readListEnd();
              }
              struct.setVouchersIdListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // IS_F2_FORDER
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isF2FOrder = iprot.readBool();
              struct.setIsF2FOrderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // PAY_BILL_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.payBillNo = iprot.readString();
              struct.setPayBillNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // FULL_GIVE_ACTIVE_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list187 = iprot.readListBegin();
                struct.fullGiveActiveIds = new ArrayList<String>(_list187.size);
                String _elem188;
                for (int _i189 = 0; _i189 < _list187.size; ++_i189)
                {
                  _elem188 = iprot.readString();
                  struct.fullGiveActiveIds.add(_elem188);
                }
                iprot.readListEnd();
              }
              struct.setFullGiveActiveIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // LOGIN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.loginId = iprot.readString();
              struct.setLoginIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, UpdateMarketOrderReqVo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.reqId != null) {
        oprot.writeFieldBegin(REQ_ID_FIELD_DESC);
        oprot.writeString(struct.reqId);
        oprot.writeFieldEnd();
      }
      if (struct.clientId != null) {
        oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
        oprot.writeString(struct.clientId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MEMBER_CODE_FIELD_DESC);
      oprot.writeI64(struct.memberCode);
      oprot.writeFieldEnd();
      if (struct.orderId != null) {
        oprot.writeFieldBegin(ORDER_ID_FIELD_DESC);
        oprot.writeString(struct.orderId);
        oprot.writeFieldEnd();
      }
      if (struct.market_Id != null) {
        oprot.writeFieldBegin(MARKET__ID_FIELD_DESC);
        oprot.writeString(struct.market_Id);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeBool(struct.status);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PAY_TIME_FIELD_DESC);
      oprot.writeI64(struct.payTime);
      oprot.writeFieldEnd();
      if (struct.vouchersIdList != null) {
        if (struct.isSetVouchersIdList()) {
          oprot.writeFieldBegin(VOUCHERS_ID_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.vouchersIdList.size()));
            for (String _iter190 : struct.vouchersIdList)
            {
              oprot.writeString(_iter190);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldBegin(IS_F2_FORDER_FIELD_DESC);
      oprot.writeBool(struct.isF2FOrder);
      oprot.writeFieldEnd();
      if (struct.payBillNo != null) {
        oprot.writeFieldBegin(PAY_BILL_NO_FIELD_DESC);
        oprot.writeString(struct.payBillNo);
        oprot.writeFieldEnd();
      }
      if (struct.fullGiveActiveIds != null) {
        oprot.writeFieldBegin(FULL_GIVE_ACTIVE_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.fullGiveActiveIds.size()));
          for (String _iter191 : struct.fullGiveActiveIds)
          {
            oprot.writeString(_iter191);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.loginId != null) {
        oprot.writeFieldBegin(LOGIN_ID_FIELD_DESC);
        oprot.writeString(struct.loginId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class UpdateMarketOrderReqVoTupleSchemeFactory implements SchemeFactory {
    public UpdateMarketOrderReqVoTupleScheme getScheme() {
      return new UpdateMarketOrderReqVoTupleScheme();
    }
  }

  private static class UpdateMarketOrderReqVoTupleScheme extends TupleScheme<UpdateMarketOrderReqVo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, UpdateMarketOrderReqVo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetReqId()) {
        optionals.set(0);
      }
      if (struct.isSetClientId()) {
        optionals.set(1);
      }
      if (struct.isSetMemberCode()) {
        optionals.set(2);
      }
      if (struct.isSetOrderId()) {
        optionals.set(3);
      }
      if (struct.isSetMarket_Id()) {
        optionals.set(4);
      }
      if (struct.isSetStatus()) {
        optionals.set(5);
      }
      if (struct.isSetPayTime()) {
        optionals.set(6);
      }
      if (struct.isSetVouchersIdList()) {
        optionals.set(7);
      }
      if (struct.isSetIsF2FOrder()) {
        optionals.set(8);
      }
      if (struct.isSetPayBillNo()) {
        optionals.set(9);
      }
      if (struct.isSetFullGiveActiveIds()) {
        optionals.set(10);
      }
      if (struct.isSetLoginId()) {
        optionals.set(11);
      }
      oprot.writeBitSet(optionals, 12);
      if (struct.isSetReqId()) {
        oprot.writeString(struct.reqId);
      }
      if (struct.isSetClientId()) {
        oprot.writeString(struct.clientId);
      }
      if (struct.isSetMemberCode()) {
        oprot.writeI64(struct.memberCode);
      }
      if (struct.isSetOrderId()) {
        oprot.writeString(struct.orderId);
      }
      if (struct.isSetMarket_Id()) {
        oprot.writeString(struct.market_Id);
      }
      if (struct.isSetStatus()) {
        oprot.writeBool(struct.status);
      }
      if (struct.isSetPayTime()) {
        oprot.writeI64(struct.payTime);
      }
      if (struct.isSetVouchersIdList()) {
        {
          oprot.writeI32(struct.vouchersIdList.size());
          for (String _iter192 : struct.vouchersIdList)
          {
            oprot.writeString(_iter192);
          }
        }
      }
      if (struct.isSetIsF2FOrder()) {
        oprot.writeBool(struct.isF2FOrder);
      }
      if (struct.isSetPayBillNo()) {
        oprot.writeString(struct.payBillNo);
      }
      if (struct.isSetFullGiveActiveIds()) {
        {
          oprot.writeI32(struct.fullGiveActiveIds.size());
          for (String _iter193 : struct.fullGiveActiveIds)
          {
            oprot.writeString(_iter193);
          }
        }
      }
      if (struct.isSetLoginId()) {
        oprot.writeString(struct.loginId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, UpdateMarketOrderReqVo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(12);
      if (incoming.get(0)) {
        struct.reqId = iprot.readString();
        struct.setReqIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.clientId = iprot.readString();
        struct.setClientIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.memberCode = iprot.readI64();
        struct.setMemberCodeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.orderId = iprot.readString();
        struct.setOrderIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.market_Id = iprot.readString();
        struct.setMarket_IdIsSet(true);
      }
      if (incoming.get(5)) {
        struct.status = iprot.readBool();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(6)) {
        struct.payTime = iprot.readI64();
        struct.setPayTimeIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TList _list194 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.vouchersIdList = new ArrayList<String>(_list194.size);
          String _elem195;
          for (int _i196 = 0; _i196 < _list194.size; ++_i196)
          {
            _elem195 = iprot.readString();
            struct.vouchersIdList.add(_elem195);
          }
        }
        struct.setVouchersIdListIsSet(true);
      }
      if (incoming.get(8)) {
        struct.isF2FOrder = iprot.readBool();
        struct.setIsF2FOrderIsSet(true);
      }
      if (incoming.get(9)) {
        struct.payBillNo = iprot.readString();
        struct.setPayBillNoIsSet(true);
      }
      if (incoming.get(10)) {
        {
          org.apache.thrift.protocol.TList _list197 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.fullGiveActiveIds = new ArrayList<String>(_list197.size);
          String _elem198;
          for (int _i199 = 0; _i199 < _list197.size; ++_i199)
          {
            _elem198 = iprot.readString();
            struct.fullGiveActiveIds.add(_elem198);
          }
        }
        struct.setFullGiveActiveIdsIsSet(true);
      }
      if (incoming.get(11)) {
        struct.loginId = iprot.readString();
        struct.setLoginIdIsSet(true);
      }
    }
  }

}

