/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.vo;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 短信日志
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class SmsLogVo implements org.apache.thrift.TBase<SmsLogVo, SmsLogVo._Fields>, java.io.Serializable, Cloneable, Comparable<SmsLogVo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SmsLogVo");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField EXPIRE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("expireTime", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField SMS_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("smsType", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField MOBILE_FIELD_DESC = new org.apache.thrift.protocol.TField("mobile", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("content", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField IS_SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("isSuccess", org.apache.thrift.protocol.TType.BOOL, (short)8);
  private static final org.apache.thrift.protocol.TField SEND_USER_FIELD_DESC = new org.apache.thrift.protocol.TField("sendUser", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField SEND_IP_FIELD_DESC = new org.apache.thrift.protocol.TField("sendIp", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField IS_USED_FIELD_DESC = new org.apache.thrift.protocol.TField("isUsed", org.apache.thrift.protocol.TType.BOOL, (short)11);
  private static final org.apache.thrift.protocol.TField CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("code", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField URL_FIELD_DESC = new org.apache.thrift.protocol.TField("url", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField SMS_TYPE_MIN_FIELD_DESC = new org.apache.thrift.protocol.TField("smsTypeMin", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField SMS_TYPE_MAX_FIELD_DESC = new org.apache.thrift.protocol.TField("smsTypeMax", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField SMS_TYPE_MARK_FIELD_DESC = new org.apache.thrift.protocol.TField("smsTypeMark", org.apache.thrift.protocol.TType.STRING, (short)17);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SmsLogVoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SmsLogVoTupleSchemeFactory());
  }

  /**
   * 主键ID
   */
  public long id; // optional
  /**
   * 客户端编号
   */
  public String clientId; // optional
  /**
   * 创建时间
   */
  public long createTime; // optional
  /**
   * 失效时间
   */
  public long expireTime; // optional
  /**
   * 短信类型(图片验证码为特殊类型-1)
   */
  public int smsType; // optional
  /**
   * 手机号码(图片验证码无)
   */
  public String mobile; // optional
  /**
   * 发送内容
   */
  public String content; // optional
  /**
   * 是否发送成功
   */
  public boolean isSuccess; // optional
  /**
   * 发送短信方
   */
  public String sendUser; // optional
  /**
   * 发送IP
   */
  public String sendIp; // optional
  /**
   * 验证码是否已使用
   */
  public boolean isUsed; // optional
  /**
   * 验证码
   */
  public String code; // optional
  /**
   * 验证码凭证
   */
  public String token; // optional
  /**
   * 验证码图片地址
   */
  public String url; // required
  /**
   * 最小类型 - 查询使用
   */
  public int smsTypeMin; // optional
  /**
   * 最大类型 - 查询使用
   */
  public int smsTypeMax; // optional
  /**
   * smsType标识
   */
  public String smsTypeMark; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 主键ID
     */
    ID((short)1, "id"),
    /**
     * 客户端编号
     */
    CLIENT_ID((short)2, "clientId"),
    /**
     * 创建时间
     */
    CREATE_TIME((short)3, "createTime"),
    /**
     * 失效时间
     */
    EXPIRE_TIME((short)4, "expireTime"),
    /**
     * 短信类型(图片验证码为特殊类型-1)
     */
    SMS_TYPE((short)5, "smsType"),
    /**
     * 手机号码(图片验证码无)
     */
    MOBILE((short)6, "mobile"),
    /**
     * 发送内容
     */
    CONTENT((short)7, "content"),
    /**
     * 是否发送成功
     */
    IS_SUCCESS((short)8, "isSuccess"),
    /**
     * 发送短信方
     */
    SEND_USER((short)9, "sendUser"),
    /**
     * 发送IP
     */
    SEND_IP((short)10, "sendIp"),
    /**
     * 验证码是否已使用
     */
    IS_USED((short)11, "isUsed"),
    /**
     * 验证码
     */
    CODE((short)12, "code"),
    /**
     * 验证码凭证
     */
    TOKEN((short)13, "token"),
    /**
     * 验证码图片地址
     */
    URL((short)14, "url"),
    /**
     * 最小类型 - 查询使用
     */
    SMS_TYPE_MIN((short)15, "smsTypeMin"),
    /**
     * 最大类型 - 查询使用
     */
    SMS_TYPE_MAX((short)16, "smsTypeMax"),
    /**
     * smsType标识
     */
    SMS_TYPE_MARK((short)17, "smsTypeMark");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // CLIENT_ID
          return CLIENT_ID;
        case 3: // CREATE_TIME
          return CREATE_TIME;
        case 4: // EXPIRE_TIME
          return EXPIRE_TIME;
        case 5: // SMS_TYPE
          return SMS_TYPE;
        case 6: // MOBILE
          return MOBILE;
        case 7: // CONTENT
          return CONTENT;
        case 8: // IS_SUCCESS
          return IS_SUCCESS;
        case 9: // SEND_USER
          return SEND_USER;
        case 10: // SEND_IP
          return SEND_IP;
        case 11: // IS_USED
          return IS_USED;
        case 12: // CODE
          return CODE;
        case 13: // TOKEN
          return TOKEN;
        case 14: // URL
          return URL;
        case 15: // SMS_TYPE_MIN
          return SMS_TYPE_MIN;
        case 16: // SMS_TYPE_MAX
          return SMS_TYPE_MAX;
        case 17: // SMS_TYPE_MARK
          return SMS_TYPE_MARK;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __CREATETIME_ISSET_ID = 1;
  private static final int __EXPIRETIME_ISSET_ID = 2;
  private static final int __SMSTYPE_ISSET_ID = 3;
  private static final int __ISSUCCESS_ISSET_ID = 4;
  private static final int __ISUSED_ISSET_ID = 5;
  private static final int __SMSTYPEMIN_ISSET_ID = 6;
  private static final int __SMSTYPEMAX_ISSET_ID = 7;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ID,_Fields.CLIENT_ID,_Fields.CREATE_TIME,_Fields.EXPIRE_TIME,_Fields.SMS_TYPE,_Fields.MOBILE,_Fields.CONTENT,_Fields.IS_SUCCESS,_Fields.SEND_USER,_Fields.SEND_IP,_Fields.IS_USED,_Fields.CODE,_Fields.TOKEN,_Fields.SMS_TYPE_MIN,_Fields.SMS_TYPE_MAX,_Fields.SMS_TYPE_MARK};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.EXPIRE_TIME, new org.apache.thrift.meta_data.FieldMetaData("expireTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SMS_TYPE, new org.apache.thrift.meta_data.FieldMetaData("smsType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MOBILE, new org.apache.thrift.meta_data.FieldMetaData("mobile", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("isSuccess", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.SEND_USER, new org.apache.thrift.meta_data.FieldMetaData("sendUser", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SEND_IP, new org.apache.thrift.meta_data.FieldMetaData("sendIp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_USED, new org.apache.thrift.meta_data.FieldMetaData("isUsed", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.CODE, new org.apache.thrift.meta_data.FieldMetaData("code", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.URL, new org.apache.thrift.meta_data.FieldMetaData("url", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SMS_TYPE_MIN, new org.apache.thrift.meta_data.FieldMetaData("smsTypeMin", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SMS_TYPE_MAX, new org.apache.thrift.meta_data.FieldMetaData("smsTypeMax", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SMS_TYPE_MARK, new org.apache.thrift.meta_data.FieldMetaData("smsTypeMark", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SmsLogVo.class, metaDataMap);
  }

  public SmsLogVo() {
  }

  public SmsLogVo(
    String url)
  {
    this();
    this.url = url;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SmsLogVo(SmsLogVo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetClientId()) {
      this.clientId = other.clientId;
    }
    this.createTime = other.createTime;
    this.expireTime = other.expireTime;
    this.smsType = other.smsType;
    if (other.isSetMobile()) {
      this.mobile = other.mobile;
    }
    if (other.isSetContent()) {
      this.content = other.content;
    }
    this.isSuccess = other.isSuccess;
    if (other.isSetSendUser()) {
      this.sendUser = other.sendUser;
    }
    if (other.isSetSendIp()) {
      this.sendIp = other.sendIp;
    }
    this.isUsed = other.isUsed;
    if (other.isSetCode()) {
      this.code = other.code;
    }
    if (other.isSetToken()) {
      this.token = other.token;
    }
    if (other.isSetUrl()) {
      this.url = other.url;
    }
    this.smsTypeMin = other.smsTypeMin;
    this.smsTypeMax = other.smsTypeMax;
    if (other.isSetSmsTypeMark()) {
      this.smsTypeMark = other.smsTypeMark;
    }
  }

  public SmsLogVo deepCopy() {
    return new SmsLogVo(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.clientId = null;
    setCreateTimeIsSet(false);
    this.createTime = 0;
    setExpireTimeIsSet(false);
    this.expireTime = 0;
    setSmsTypeIsSet(false);
    this.smsType = 0;
    this.mobile = null;
    this.content = null;
    setIsSuccessIsSet(false);
    this.isSuccess = false;
    this.sendUser = null;
    this.sendIp = null;
    setIsUsedIsSet(false);
    this.isUsed = false;
    this.code = null;
    this.token = null;
    this.url = null;
    setSmsTypeMinIsSet(false);
    this.smsTypeMin = 0;
    setSmsTypeMaxIsSet(false);
    this.smsTypeMax = 0;
    this.smsTypeMark = null;
  }

  /**
   * 主键ID
   */
  public long getId() {
    return this.id;
  }

  /**
   * 主键ID
   */
  public SmsLogVo setId(long id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  /**
   * 客户端编号
   */
  public String getClientId() {
    return this.clientId;
  }

  /**
   * 客户端编号
   */
  public SmsLogVo setClientId(String clientId) {
    this.clientId = clientId;
    return this;
  }

  public void unsetClientId() {
    this.clientId = null;
  }

  /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
  public boolean isSetClientId() {
    return this.clientId != null;
  }

  public void setClientIdIsSet(boolean value) {
    if (!value) {
      this.clientId = null;
    }
  }

  /**
   * 创建时间
   */
  public long getCreateTime() {
    return this.createTime;
  }

  /**
   * 创建时间
   */
  public SmsLogVo setCreateTime(long createTime) {
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    return this;
  }

  public void unsetCreateTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  public void setCreateTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATETIME_ISSET_ID, value);
  }

  /**
   * 失效时间
   */
  public long getExpireTime() {
    return this.expireTime;
  }

  /**
   * 失效时间
   */
  public SmsLogVo setExpireTime(long expireTime) {
    this.expireTime = expireTime;
    setExpireTimeIsSet(true);
    return this;
  }

  public void unsetExpireTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXPIRETIME_ISSET_ID);
  }

  /** Returns true if field expireTime is set (has been assigned a value) and false otherwise */
  public boolean isSetExpireTime() {
    return EncodingUtils.testBit(__isset_bitfield, __EXPIRETIME_ISSET_ID);
  }

  public void setExpireTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXPIRETIME_ISSET_ID, value);
  }

  /**
   * 短信类型(图片验证码为特殊类型-1)
   */
  public int getSmsType() {
    return this.smsType;
  }

  /**
   * 短信类型(图片验证码为特殊类型-1)
   */
  public SmsLogVo setSmsType(int smsType) {
    this.smsType = smsType;
    setSmsTypeIsSet(true);
    return this;
  }

  public void unsetSmsType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SMSTYPE_ISSET_ID);
  }

  /** Returns true if field smsType is set (has been assigned a value) and false otherwise */
  public boolean isSetSmsType() {
    return EncodingUtils.testBit(__isset_bitfield, __SMSTYPE_ISSET_ID);
  }

  public void setSmsTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SMSTYPE_ISSET_ID, value);
  }

  /**
   * 手机号码(图片验证码无)
   */
  public String getMobile() {
    return this.mobile;
  }

  /**
   * 手机号码(图片验证码无)
   */
  public SmsLogVo setMobile(String mobile) {
    this.mobile = mobile;
    return this;
  }

  public void unsetMobile() {
    this.mobile = null;
  }

  /** Returns true if field mobile is set (has been assigned a value) and false otherwise */
  public boolean isSetMobile() {
    return this.mobile != null;
  }

  public void setMobileIsSet(boolean value) {
    if (!value) {
      this.mobile = null;
    }
  }

  /**
   * 发送内容
   */
  public String getContent() {
    return this.content;
  }

  /**
   * 发送内容
   */
  public SmsLogVo setContent(String content) {
    this.content = content;
    return this;
  }

  public void unsetContent() {
    this.content = null;
  }

  /** Returns true if field content is set (has been assigned a value) and false otherwise */
  public boolean isSetContent() {
    return this.content != null;
  }

  public void setContentIsSet(boolean value) {
    if (!value) {
      this.content = null;
    }
  }

  /**
   * 是否发送成功
   */
  public boolean isIsSuccess() {
    return this.isSuccess;
  }

  /**
   * 是否发送成功
   */
  public SmsLogVo setIsSuccess(boolean isSuccess) {
    this.isSuccess = isSuccess;
    setIsSuccessIsSet(true);
    return this;
  }

  public void unsetIsSuccess() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISSUCCESS_ISSET_ID);
  }

  /** Returns true if field isSuccess is set (has been assigned a value) and false otherwise */
  public boolean isSetIsSuccess() {
    return EncodingUtils.testBit(__isset_bitfield, __ISSUCCESS_ISSET_ID);
  }

  public void setIsSuccessIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISSUCCESS_ISSET_ID, value);
  }

  /**
   * 发送短信方
   */
  public String getSendUser() {
    return this.sendUser;
  }

  /**
   * 发送短信方
   */
  public SmsLogVo setSendUser(String sendUser) {
    this.sendUser = sendUser;
    return this;
  }

  public void unsetSendUser() {
    this.sendUser = null;
  }

  /** Returns true if field sendUser is set (has been assigned a value) and false otherwise */
  public boolean isSetSendUser() {
    return this.sendUser != null;
  }

  public void setSendUserIsSet(boolean value) {
    if (!value) {
      this.sendUser = null;
    }
  }

  /**
   * 发送IP
   */
  public String getSendIp() {
    return this.sendIp;
  }

  /**
   * 发送IP
   */
  public SmsLogVo setSendIp(String sendIp) {
    this.sendIp = sendIp;
    return this;
  }

  public void unsetSendIp() {
    this.sendIp = null;
  }

  /** Returns true if field sendIp is set (has been assigned a value) and false otherwise */
  public boolean isSetSendIp() {
    return this.sendIp != null;
  }

  public void setSendIpIsSet(boolean value) {
    if (!value) {
      this.sendIp = null;
    }
  }

  /**
   * 验证码是否已使用
   */
  public boolean isIsUsed() {
    return this.isUsed;
  }

  /**
   * 验证码是否已使用
   */
  public SmsLogVo setIsUsed(boolean isUsed) {
    this.isUsed = isUsed;
    setIsUsedIsSet(true);
    return this;
  }

  public void unsetIsUsed() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISUSED_ISSET_ID);
  }

  /** Returns true if field isUsed is set (has been assigned a value) and false otherwise */
  public boolean isSetIsUsed() {
    return EncodingUtils.testBit(__isset_bitfield, __ISUSED_ISSET_ID);
  }

  public void setIsUsedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISUSED_ISSET_ID, value);
  }

  /**
   * 验证码
   */
  public String getCode() {
    return this.code;
  }

  /**
   * 验证码
   */
  public SmsLogVo setCode(String code) {
    this.code = code;
    return this;
  }

  public void unsetCode() {
    this.code = null;
  }

  /** Returns true if field code is set (has been assigned a value) and false otherwise */
  public boolean isSetCode() {
    return this.code != null;
  }

  public void setCodeIsSet(boolean value) {
    if (!value) {
      this.code = null;
    }
  }

  /**
   * 验证码凭证
   */
  public String getToken() {
    return this.token;
  }

  /**
   * 验证码凭证
   */
  public SmsLogVo setToken(String token) {
    this.token = token;
    return this;
  }

  public void unsetToken() {
    this.token = null;
  }

  /** Returns true if field token is set (has been assigned a value) and false otherwise */
  public boolean isSetToken() {
    return this.token != null;
  }

  public void setTokenIsSet(boolean value) {
    if (!value) {
      this.token = null;
    }
  }

  /**
   * 验证码图片地址
   */
  public String getUrl() {
    return this.url;
  }

  /**
   * 验证码图片地址
   */
  public SmsLogVo setUrl(String url) {
    this.url = url;
    return this;
  }

  public void unsetUrl() {
    this.url = null;
  }

  /** Returns true if field url is set (has been assigned a value) and false otherwise */
  public boolean isSetUrl() {
    return this.url != null;
  }

  public void setUrlIsSet(boolean value) {
    if (!value) {
      this.url = null;
    }
  }

  /**
   * 最小类型 - 查询使用
   */
  public int getSmsTypeMin() {
    return this.smsTypeMin;
  }

  /**
   * 最小类型 - 查询使用
   */
  public SmsLogVo setSmsTypeMin(int smsTypeMin) {
    this.smsTypeMin = smsTypeMin;
    setSmsTypeMinIsSet(true);
    return this;
  }

  public void unsetSmsTypeMin() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SMSTYPEMIN_ISSET_ID);
  }

  /** Returns true if field smsTypeMin is set (has been assigned a value) and false otherwise */
  public boolean isSetSmsTypeMin() {
    return EncodingUtils.testBit(__isset_bitfield, __SMSTYPEMIN_ISSET_ID);
  }

  public void setSmsTypeMinIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SMSTYPEMIN_ISSET_ID, value);
  }

  /**
   * 最大类型 - 查询使用
   */
  public int getSmsTypeMax() {
    return this.smsTypeMax;
  }

  /**
   * 最大类型 - 查询使用
   */
  public SmsLogVo setSmsTypeMax(int smsTypeMax) {
    this.smsTypeMax = smsTypeMax;
    setSmsTypeMaxIsSet(true);
    return this;
  }

  public void unsetSmsTypeMax() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SMSTYPEMAX_ISSET_ID);
  }

  /** Returns true if field smsTypeMax is set (has been assigned a value) and false otherwise */
  public boolean isSetSmsTypeMax() {
    return EncodingUtils.testBit(__isset_bitfield, __SMSTYPEMAX_ISSET_ID);
  }

  public void setSmsTypeMaxIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SMSTYPEMAX_ISSET_ID, value);
  }

  /**
   * smsType标识
   */
  public String getSmsTypeMark() {
    return this.smsTypeMark;
  }

  /**
   * smsType标识
   */
  public SmsLogVo setSmsTypeMark(String smsTypeMark) {
    this.smsTypeMark = smsTypeMark;
    return this;
  }

  public void unsetSmsTypeMark() {
    this.smsTypeMark = null;
  }

  /** Returns true if field smsTypeMark is set (has been assigned a value) and false otherwise */
  public boolean isSetSmsTypeMark() {
    return this.smsTypeMark != null;
  }

  public void setSmsTypeMarkIsSet(boolean value) {
    if (!value) {
      this.smsTypeMark = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    case CLIENT_ID:
      if (value == null) {
        unsetClientId();
      } else {
        setClientId((String)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((Long)value);
      }
      break;

    case EXPIRE_TIME:
      if (value == null) {
        unsetExpireTime();
      } else {
        setExpireTime((Long)value);
      }
      break;

    case SMS_TYPE:
      if (value == null) {
        unsetSmsType();
      } else {
        setSmsType((Integer)value);
      }
      break;

    case MOBILE:
      if (value == null) {
        unsetMobile();
      } else {
        setMobile((String)value);
      }
      break;

    case CONTENT:
      if (value == null) {
        unsetContent();
      } else {
        setContent((String)value);
      }
      break;

    case IS_SUCCESS:
      if (value == null) {
        unsetIsSuccess();
      } else {
        setIsSuccess((Boolean)value);
      }
      break;

    case SEND_USER:
      if (value == null) {
        unsetSendUser();
      } else {
        setSendUser((String)value);
      }
      break;

    case SEND_IP:
      if (value == null) {
        unsetSendIp();
      } else {
        setSendIp((String)value);
      }
      break;

    case IS_USED:
      if (value == null) {
        unsetIsUsed();
      } else {
        setIsUsed((Boolean)value);
      }
      break;

    case CODE:
      if (value == null) {
        unsetCode();
      } else {
        setCode((String)value);
      }
      break;

    case TOKEN:
      if (value == null) {
        unsetToken();
      } else {
        setToken((String)value);
      }
      break;

    case URL:
      if (value == null) {
        unsetUrl();
      } else {
        setUrl((String)value);
      }
      break;

    case SMS_TYPE_MIN:
      if (value == null) {
        unsetSmsTypeMin();
      } else {
        setSmsTypeMin((Integer)value);
      }
      break;

    case SMS_TYPE_MAX:
      if (value == null) {
        unsetSmsTypeMax();
      } else {
        setSmsTypeMax((Integer)value);
      }
      break;

    case SMS_TYPE_MARK:
      if (value == null) {
        unsetSmsTypeMark();
      } else {
        setSmsTypeMark((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Long.valueOf(getId());

    case CLIENT_ID:
      return getClientId();

    case CREATE_TIME:
      return Long.valueOf(getCreateTime());

    case EXPIRE_TIME:
      return Long.valueOf(getExpireTime());

    case SMS_TYPE:
      return Integer.valueOf(getSmsType());

    case MOBILE:
      return getMobile();

    case CONTENT:
      return getContent();

    case IS_SUCCESS:
      return Boolean.valueOf(isIsSuccess());

    case SEND_USER:
      return getSendUser();

    case SEND_IP:
      return getSendIp();

    case IS_USED:
      return Boolean.valueOf(isIsUsed());

    case CODE:
      return getCode();

    case TOKEN:
      return getToken();

    case URL:
      return getUrl();

    case SMS_TYPE_MIN:
      return Integer.valueOf(getSmsTypeMin());

    case SMS_TYPE_MAX:
      return Integer.valueOf(getSmsTypeMax());

    case SMS_TYPE_MARK:
      return getSmsTypeMark();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case CLIENT_ID:
      return isSetClientId();
    case CREATE_TIME:
      return isSetCreateTime();
    case EXPIRE_TIME:
      return isSetExpireTime();
    case SMS_TYPE:
      return isSetSmsType();
    case MOBILE:
      return isSetMobile();
    case CONTENT:
      return isSetContent();
    case IS_SUCCESS:
      return isSetIsSuccess();
    case SEND_USER:
      return isSetSendUser();
    case SEND_IP:
      return isSetSendIp();
    case IS_USED:
      return isSetIsUsed();
    case CODE:
      return isSetCode();
    case TOKEN:
      return isSetToken();
    case URL:
      return isSetUrl();
    case SMS_TYPE_MIN:
      return isSetSmsTypeMin();
    case SMS_TYPE_MAX:
      return isSetSmsTypeMax();
    case SMS_TYPE_MARK:
      return isSetSmsTypeMark();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SmsLogVo)
      return this.equals((SmsLogVo)that);
    return false;
  }

  public boolean equals(SmsLogVo that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_clientId = true && this.isSetClientId();
    boolean that_present_clientId = true && that.isSetClientId();
    if (this_present_clientId || that_present_clientId) {
      if (!(this_present_clientId && that_present_clientId))
        return false;
      if (!this.clientId.equals(that.clientId))
        return false;
    }

    boolean this_present_createTime = true && this.isSetCreateTime();
    boolean that_present_createTime = true && that.isSetCreateTime();
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (this.createTime != that.createTime)
        return false;
    }

    boolean this_present_expireTime = true && this.isSetExpireTime();
    boolean that_present_expireTime = true && that.isSetExpireTime();
    if (this_present_expireTime || that_present_expireTime) {
      if (!(this_present_expireTime && that_present_expireTime))
        return false;
      if (this.expireTime != that.expireTime)
        return false;
    }

    boolean this_present_smsType = true && this.isSetSmsType();
    boolean that_present_smsType = true && that.isSetSmsType();
    if (this_present_smsType || that_present_smsType) {
      if (!(this_present_smsType && that_present_smsType))
        return false;
      if (this.smsType != that.smsType)
        return false;
    }

    boolean this_present_mobile = true && this.isSetMobile();
    boolean that_present_mobile = true && that.isSetMobile();
    if (this_present_mobile || that_present_mobile) {
      if (!(this_present_mobile && that_present_mobile))
        return false;
      if (!this.mobile.equals(that.mobile))
        return false;
    }

    boolean this_present_content = true && this.isSetContent();
    boolean that_present_content = true && that.isSetContent();
    if (this_present_content || that_present_content) {
      if (!(this_present_content && that_present_content))
        return false;
      if (!this.content.equals(that.content))
        return false;
    }

    boolean this_present_isSuccess = true && this.isSetIsSuccess();
    boolean that_present_isSuccess = true && that.isSetIsSuccess();
    if (this_present_isSuccess || that_present_isSuccess) {
      if (!(this_present_isSuccess && that_present_isSuccess))
        return false;
      if (this.isSuccess != that.isSuccess)
        return false;
    }

    boolean this_present_sendUser = true && this.isSetSendUser();
    boolean that_present_sendUser = true && that.isSetSendUser();
    if (this_present_sendUser || that_present_sendUser) {
      if (!(this_present_sendUser && that_present_sendUser))
        return false;
      if (!this.sendUser.equals(that.sendUser))
        return false;
    }

    boolean this_present_sendIp = true && this.isSetSendIp();
    boolean that_present_sendIp = true && that.isSetSendIp();
    if (this_present_sendIp || that_present_sendIp) {
      if (!(this_present_sendIp && that_present_sendIp))
        return false;
      if (!this.sendIp.equals(that.sendIp))
        return false;
    }

    boolean this_present_isUsed = true && this.isSetIsUsed();
    boolean that_present_isUsed = true && that.isSetIsUsed();
    if (this_present_isUsed || that_present_isUsed) {
      if (!(this_present_isUsed && that_present_isUsed))
        return false;
      if (this.isUsed != that.isUsed)
        return false;
    }

    boolean this_present_code = true && this.isSetCode();
    boolean that_present_code = true && that.isSetCode();
    if (this_present_code || that_present_code) {
      if (!(this_present_code && that_present_code))
        return false;
      if (!this.code.equals(that.code))
        return false;
    }

    boolean this_present_token = true && this.isSetToken();
    boolean that_present_token = true && that.isSetToken();
    if (this_present_token || that_present_token) {
      if (!(this_present_token && that_present_token))
        return false;
      if (!this.token.equals(that.token))
        return false;
    }

    boolean this_present_url = true && this.isSetUrl();
    boolean that_present_url = true && that.isSetUrl();
    if (this_present_url || that_present_url) {
      if (!(this_present_url && that_present_url))
        return false;
      if (!this.url.equals(that.url))
        return false;
    }

    boolean this_present_smsTypeMin = true && this.isSetSmsTypeMin();
    boolean that_present_smsTypeMin = true && that.isSetSmsTypeMin();
    if (this_present_smsTypeMin || that_present_smsTypeMin) {
      if (!(this_present_smsTypeMin && that_present_smsTypeMin))
        return false;
      if (this.smsTypeMin != that.smsTypeMin)
        return false;
    }

    boolean this_present_smsTypeMax = true && this.isSetSmsTypeMax();
    boolean that_present_smsTypeMax = true && that.isSetSmsTypeMax();
    if (this_present_smsTypeMax || that_present_smsTypeMax) {
      if (!(this_present_smsTypeMax && that_present_smsTypeMax))
        return false;
      if (this.smsTypeMax != that.smsTypeMax)
        return false;
    }

    boolean this_present_smsTypeMark = true && this.isSetSmsTypeMark();
    boolean that_present_smsTypeMark = true && that.isSetSmsTypeMark();
    if (this_present_smsTypeMark || that_present_smsTypeMark) {
      if (!(this_present_smsTypeMark && that_present_smsTypeMark))
        return false;
      if (!this.smsTypeMark.equals(that.smsTypeMark))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true && (isSetId());
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_clientId = true && (isSetClientId());
    list.add(present_clientId);
    if (present_clientId)
      list.add(clientId);

    boolean present_createTime = true && (isSetCreateTime());
    list.add(present_createTime);
    if (present_createTime)
      list.add(createTime);

    boolean present_expireTime = true && (isSetExpireTime());
    list.add(present_expireTime);
    if (present_expireTime)
      list.add(expireTime);

    boolean present_smsType = true && (isSetSmsType());
    list.add(present_smsType);
    if (present_smsType)
      list.add(smsType);

    boolean present_mobile = true && (isSetMobile());
    list.add(present_mobile);
    if (present_mobile)
      list.add(mobile);

    boolean present_content = true && (isSetContent());
    list.add(present_content);
    if (present_content)
      list.add(content);

    boolean present_isSuccess = true && (isSetIsSuccess());
    list.add(present_isSuccess);
    if (present_isSuccess)
      list.add(isSuccess);

    boolean present_sendUser = true && (isSetSendUser());
    list.add(present_sendUser);
    if (present_sendUser)
      list.add(sendUser);

    boolean present_sendIp = true && (isSetSendIp());
    list.add(present_sendIp);
    if (present_sendIp)
      list.add(sendIp);

    boolean present_isUsed = true && (isSetIsUsed());
    list.add(present_isUsed);
    if (present_isUsed)
      list.add(isUsed);

    boolean present_code = true && (isSetCode());
    list.add(present_code);
    if (present_code)
      list.add(code);

    boolean present_token = true && (isSetToken());
    list.add(present_token);
    if (present_token)
      list.add(token);

    boolean present_url = true && (isSetUrl());
    list.add(present_url);
    if (present_url)
      list.add(url);

    boolean present_smsTypeMin = true && (isSetSmsTypeMin());
    list.add(present_smsTypeMin);
    if (present_smsTypeMin)
      list.add(smsTypeMin);

    boolean present_smsTypeMax = true && (isSetSmsTypeMax());
    list.add(present_smsTypeMax);
    if (present_smsTypeMax)
      list.add(smsTypeMax);

    boolean present_smsTypeMark = true && (isSetSmsTypeMark());
    list.add(present_smsTypeMark);
    if (present_smsTypeMark)
      list.add(smsTypeMark);

    return list.hashCode();
  }

  @Override
  public int compareTo(SmsLogVo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClientId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExpireTime()).compareTo(other.isSetExpireTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExpireTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.expireTime, other.expireTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSmsType()).compareTo(other.isSetSmsType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSmsType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.smsType, other.smsType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMobile()).compareTo(other.isSetMobile());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMobile()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mobile, other.mobile);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContent()).compareTo(other.isSetContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, other.content);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsSuccess()).compareTo(other.isSetIsSuccess());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsSuccess()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isSuccess, other.isSuccess);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSendUser()).compareTo(other.isSetSendUser());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSendUser()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sendUser, other.sendUser);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSendIp()).compareTo(other.isSetSendIp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSendIp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sendIp, other.sendIp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsUsed()).compareTo(other.isSetIsUsed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsUsed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isUsed, other.isUsed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCode()).compareTo(other.isSetCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.code, other.code);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetToken()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUrl()).compareTo(other.isSetUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.url, other.url);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSmsTypeMin()).compareTo(other.isSetSmsTypeMin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSmsTypeMin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.smsTypeMin, other.smsTypeMin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSmsTypeMax()).compareTo(other.isSetSmsTypeMax());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSmsTypeMax()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.smsTypeMax, other.smsTypeMax);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSmsTypeMark()).compareTo(other.isSetSmsTypeMark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSmsTypeMark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.smsTypeMark, other.smsTypeMark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SmsLogVo(");
    boolean first = true;

    if (isSetId()) {
      sb.append("id:");
      sb.append(this.id);
      first = false;
    }
    if (isSetClientId()) {
      if (!first) sb.append(", ");
      sb.append("clientId:");
      if (this.clientId == null) {
        sb.append("null");
      } else {
        sb.append(this.clientId);
      }
      first = false;
    }
    if (isSetCreateTime()) {
      if (!first) sb.append(", ");
      sb.append("createTime:");
      sb.append(this.createTime);
      first = false;
    }
    if (isSetExpireTime()) {
      if (!first) sb.append(", ");
      sb.append("expireTime:");
      sb.append(this.expireTime);
      first = false;
    }
    if (isSetSmsType()) {
      if (!first) sb.append(", ");
      sb.append("smsType:");
      sb.append(this.smsType);
      first = false;
    }
    if (isSetMobile()) {
      if (!first) sb.append(", ");
      sb.append("mobile:");
      if (this.mobile == null) {
        sb.append("null");
      } else {
        sb.append(this.mobile);
      }
      first = false;
    }
    if (isSetContent()) {
      if (!first) sb.append(", ");
      sb.append("content:");
      if (this.content == null) {
        sb.append("null");
      } else {
        sb.append(this.content);
      }
      first = false;
    }
    if (isSetIsSuccess()) {
      if (!first) sb.append(", ");
      sb.append("isSuccess:");
      sb.append(this.isSuccess);
      first = false;
    }
    if (isSetSendUser()) {
      if (!first) sb.append(", ");
      sb.append("sendUser:");
      if (this.sendUser == null) {
        sb.append("null");
      } else {
        sb.append(this.sendUser);
      }
      first = false;
    }
    if (isSetSendIp()) {
      if (!first) sb.append(", ");
      sb.append("sendIp:");
      if (this.sendIp == null) {
        sb.append("null");
      } else {
        sb.append(this.sendIp);
      }
      first = false;
    }
    if (isSetIsUsed()) {
      if (!first) sb.append(", ");
      sb.append("isUsed:");
      sb.append(this.isUsed);
      first = false;
    }
    if (isSetCode()) {
      if (!first) sb.append(", ");
      sb.append("code:");
      if (this.code == null) {
        sb.append("null");
      } else {
        sb.append(this.code);
      }
      first = false;
    }
    if (isSetToken()) {
      if (!first) sb.append(", ");
      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("url:");
    if (this.url == null) {
      sb.append("null");
    } else {
      sb.append(this.url);
    }
    first = false;
    if (isSetSmsTypeMin()) {
      if (!first) sb.append(", ");
      sb.append("smsTypeMin:");
      sb.append(this.smsTypeMin);
      first = false;
    }
    if (isSetSmsTypeMax()) {
      if (!first) sb.append(", ");
      sb.append("smsTypeMax:");
      sb.append(this.smsTypeMax);
      first = false;
    }
    if (isSetSmsTypeMark()) {
      if (!first) sb.append(", ");
      sb.append("smsTypeMark:");
      if (this.smsTypeMark == null) {
        sb.append("null");
      } else {
        sb.append(this.smsTypeMark);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SmsLogVoStandardSchemeFactory implements SchemeFactory {
    public SmsLogVoStandardScheme getScheme() {
      return new SmsLogVoStandardScheme();
    }
  }

  private static class SmsLogVoStandardScheme extends StandardScheme<SmsLogVo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SmsLogVo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CLIENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clientId = iprot.readString();
              struct.setClientIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createTime = iprot.readI64();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // EXPIRE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.expireTime = iprot.readI64();
              struct.setExpireTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SMS_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.smsType = iprot.readI32();
              struct.setSmsTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // MOBILE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mobile = iprot.readString();
              struct.setMobileIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.content = iprot.readString();
              struct.setContentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // IS_SUCCESS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isSuccess = iprot.readBool();
              struct.setIsSuccessIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // SEND_USER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sendUser = iprot.readString();
              struct.setSendUserIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // SEND_IP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sendIp = iprot.readString();
              struct.setSendIpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // IS_USED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isUsed = iprot.readBool();
              struct.setIsUsedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.code = iprot.readString();
              struct.setCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // TOKEN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.token = iprot.readString();
              struct.setTokenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.url = iprot.readString();
              struct.setUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // SMS_TYPE_MIN
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.smsTypeMin = iprot.readI32();
              struct.setSmsTypeMinIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // SMS_TYPE_MAX
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.smsTypeMax = iprot.readI32();
              struct.setSmsTypeMaxIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // SMS_TYPE_MARK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.smsTypeMark = iprot.readString();
              struct.setSmsTypeMarkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SmsLogVo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetId()) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI64(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.clientId != null) {
        if (struct.isSetClientId()) {
          oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
          oprot.writeString(struct.clientId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetCreateTime()) {
        oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
        oprot.writeI64(struct.createTime);
        oprot.writeFieldEnd();
      }
      if (struct.isSetExpireTime()) {
        oprot.writeFieldBegin(EXPIRE_TIME_FIELD_DESC);
        oprot.writeI64(struct.expireTime);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSmsType()) {
        oprot.writeFieldBegin(SMS_TYPE_FIELD_DESC);
        oprot.writeI32(struct.smsType);
        oprot.writeFieldEnd();
      }
      if (struct.mobile != null) {
        if (struct.isSetMobile()) {
          oprot.writeFieldBegin(MOBILE_FIELD_DESC);
          oprot.writeString(struct.mobile);
          oprot.writeFieldEnd();
        }
      }
      if (struct.content != null) {
        if (struct.isSetContent()) {
          oprot.writeFieldBegin(CONTENT_FIELD_DESC);
          oprot.writeString(struct.content);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIsSuccess()) {
        oprot.writeFieldBegin(IS_SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.isSuccess);
        oprot.writeFieldEnd();
      }
      if (struct.sendUser != null) {
        if (struct.isSetSendUser()) {
          oprot.writeFieldBegin(SEND_USER_FIELD_DESC);
          oprot.writeString(struct.sendUser);
          oprot.writeFieldEnd();
        }
      }
      if (struct.sendIp != null) {
        if (struct.isSetSendIp()) {
          oprot.writeFieldBegin(SEND_IP_FIELD_DESC);
          oprot.writeString(struct.sendIp);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIsUsed()) {
        oprot.writeFieldBegin(IS_USED_FIELD_DESC);
        oprot.writeBool(struct.isUsed);
        oprot.writeFieldEnd();
      }
      if (struct.code != null) {
        if (struct.isSetCode()) {
          oprot.writeFieldBegin(CODE_FIELD_DESC);
          oprot.writeString(struct.code);
          oprot.writeFieldEnd();
        }
      }
      if (struct.token != null) {
        if (struct.isSetToken()) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          oprot.writeString(struct.token);
          oprot.writeFieldEnd();
        }
      }
      if (struct.url != null) {
        oprot.writeFieldBegin(URL_FIELD_DESC);
        oprot.writeString(struct.url);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSmsTypeMin()) {
        oprot.writeFieldBegin(SMS_TYPE_MIN_FIELD_DESC);
        oprot.writeI32(struct.smsTypeMin);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSmsTypeMax()) {
        oprot.writeFieldBegin(SMS_TYPE_MAX_FIELD_DESC);
        oprot.writeI32(struct.smsTypeMax);
        oprot.writeFieldEnd();
      }
      if (struct.smsTypeMark != null) {
        if (struct.isSetSmsTypeMark()) {
          oprot.writeFieldBegin(SMS_TYPE_MARK_FIELD_DESC);
          oprot.writeString(struct.smsTypeMark);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SmsLogVoTupleSchemeFactory implements SchemeFactory {
    public SmsLogVoTupleScheme getScheme() {
      return new SmsLogVoTupleScheme();
    }
  }

  private static class SmsLogVoTupleScheme extends TupleScheme<SmsLogVo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SmsLogVo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetClientId()) {
        optionals.set(1);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(2);
      }
      if (struct.isSetExpireTime()) {
        optionals.set(3);
      }
      if (struct.isSetSmsType()) {
        optionals.set(4);
      }
      if (struct.isSetMobile()) {
        optionals.set(5);
      }
      if (struct.isSetContent()) {
        optionals.set(6);
      }
      if (struct.isSetIsSuccess()) {
        optionals.set(7);
      }
      if (struct.isSetSendUser()) {
        optionals.set(8);
      }
      if (struct.isSetSendIp()) {
        optionals.set(9);
      }
      if (struct.isSetIsUsed()) {
        optionals.set(10);
      }
      if (struct.isSetCode()) {
        optionals.set(11);
      }
      if (struct.isSetToken()) {
        optionals.set(12);
      }
      if (struct.isSetUrl()) {
        optionals.set(13);
      }
      if (struct.isSetSmsTypeMin()) {
        optionals.set(14);
      }
      if (struct.isSetSmsTypeMax()) {
        optionals.set(15);
      }
      if (struct.isSetSmsTypeMark()) {
        optionals.set(16);
      }
      oprot.writeBitSet(optionals, 17);
      if (struct.isSetId()) {
        oprot.writeI64(struct.id);
      }
      if (struct.isSetClientId()) {
        oprot.writeString(struct.clientId);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeI64(struct.createTime);
      }
      if (struct.isSetExpireTime()) {
        oprot.writeI64(struct.expireTime);
      }
      if (struct.isSetSmsType()) {
        oprot.writeI32(struct.smsType);
      }
      if (struct.isSetMobile()) {
        oprot.writeString(struct.mobile);
      }
      if (struct.isSetContent()) {
        oprot.writeString(struct.content);
      }
      if (struct.isSetIsSuccess()) {
        oprot.writeBool(struct.isSuccess);
      }
      if (struct.isSetSendUser()) {
        oprot.writeString(struct.sendUser);
      }
      if (struct.isSetSendIp()) {
        oprot.writeString(struct.sendIp);
      }
      if (struct.isSetIsUsed()) {
        oprot.writeBool(struct.isUsed);
      }
      if (struct.isSetCode()) {
        oprot.writeString(struct.code);
      }
      if (struct.isSetToken()) {
        oprot.writeString(struct.token);
      }
      if (struct.isSetUrl()) {
        oprot.writeString(struct.url);
      }
      if (struct.isSetSmsTypeMin()) {
        oprot.writeI32(struct.smsTypeMin);
      }
      if (struct.isSetSmsTypeMax()) {
        oprot.writeI32(struct.smsTypeMax);
      }
      if (struct.isSetSmsTypeMark()) {
        oprot.writeString(struct.smsTypeMark);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SmsLogVo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(17);
      if (incoming.get(0)) {
        struct.id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.clientId = iprot.readString();
        struct.setClientIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.createTime = iprot.readI64();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.expireTime = iprot.readI64();
        struct.setExpireTimeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.smsType = iprot.readI32();
        struct.setSmsTypeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.mobile = iprot.readString();
        struct.setMobileIsSet(true);
      }
      if (incoming.get(6)) {
        struct.content = iprot.readString();
        struct.setContentIsSet(true);
      }
      if (incoming.get(7)) {
        struct.isSuccess = iprot.readBool();
        struct.setIsSuccessIsSet(true);
      }
      if (incoming.get(8)) {
        struct.sendUser = iprot.readString();
        struct.setSendUserIsSet(true);
      }
      if (incoming.get(9)) {
        struct.sendIp = iprot.readString();
        struct.setSendIpIsSet(true);
      }
      if (incoming.get(10)) {
        struct.isUsed = iprot.readBool();
        struct.setIsUsedIsSet(true);
      }
      if (incoming.get(11)) {
        struct.code = iprot.readString();
        struct.setCodeIsSet(true);
      }
      if (incoming.get(12)) {
        struct.token = iprot.readString();
        struct.setTokenIsSet(true);
      }
      if (incoming.get(13)) {
        struct.url = iprot.readString();
        struct.setUrlIsSet(true);
      }
      if (incoming.get(14)) {
        struct.smsTypeMin = iprot.readI32();
        struct.setSmsTypeMinIsSet(true);
      }
      if (incoming.get(15)) {
        struct.smsTypeMax = iprot.readI32();
        struct.setSmsTypeMaxIsSet(true);
      }
      if (incoming.get(16)) {
        struct.smsTypeMark = iprot.readString();
        struct.setSmsTypeMarkIsSet(true);
      }
    }
  }

}

