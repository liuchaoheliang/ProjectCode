/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.vo;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * ProcessNodeVo
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class ProcessNodeVo implements org.apache.thrift.TBase<ProcessNodeVo, ProcessNodeVo._Fields>, java.io.Serializable, Cloneable, Comparable<ProcessNodeVo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ProcessNodeVo");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("updateTime", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField PROCESS_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("processId", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField NODE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("nodeId", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField PRE_NODE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("preNodeId", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField NEXT_NODE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("nextNodeId", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField NODE_LOGIC_FIELD_DESC = new org.apache.thrift.protocol.TField("nodeLogic", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField RUNNER_FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("runnerFlag", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField NEXT_RUNNER_ORG_FIELD_DESC = new org.apache.thrift.protocol.TField("nextRunnerOrg", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField RUNNER_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("runnerUserId", org.apache.thrift.protocol.TType.I64, (short)15);
  private static final org.apache.thrift.protocol.TField RUNNER_POST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("runnerPostId", org.apache.thrift.protocol.TType.I64, (short)16);
  private static final org.apache.thrift.protocol.TField RUNNER_DEPART_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("runnerDepartId", org.apache.thrift.protocol.TType.I64, (short)17);
  private static final org.apache.thrift.protocol.TField RUNNER_USERGROUP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("runnerUsergroupId", org.apache.thrift.protocol.TType.I64, (short)18);
  private static final org.apache.thrift.protocol.TField RUNNER_ORG_LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("runnerOrgLevel", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField IS_MULTISELECT_FIELD_DESC = new org.apache.thrift.protocol.TField("isMultiselect", org.apache.thrift.protocol.TType.BOOL, (short)20);
  private static final org.apache.thrift.protocol.TField IS_OTHER_MAN_FIELD_DESC = new org.apache.thrift.protocol.TField("isOtherMan", org.apache.thrift.protocol.TType.BOOL, (short)21);
  private static final org.apache.thrift.protocol.TField IS_ASSIGN_MAN_FIELD_DESC = new org.apache.thrift.protocol.TField("isAssignMan", org.apache.thrift.protocol.TType.BOOL, (short)22);
  private static final org.apache.thrift.protocol.TField IS_REVOKE_FIELD_DESC = new org.apache.thrift.protocol.TField("isRevoke", org.apache.thrift.protocol.TType.BOOL, (short)23);
  private static final org.apache.thrift.protocol.TField IS_FALLBACK_FIELD_DESC = new org.apache.thrift.protocol.TField("isFallback", org.apache.thrift.protocol.TType.BOOL, (short)24);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ProcessNodeVoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ProcessNodeVoTupleSchemeFactory());
  }

  /**
   * id
   */
  public long id; // optional
  /**
   * createTime
   */
  public long createTime; // optional
  /**
   * updateTime
   */
  public long updateTime; // optional
  /**
   * clientId
   */
  public String clientId; // optional
  /**
   * processId
   */
  public String processId; // optional
  /**
   * nodeId
   */
  public String nodeId; // optional
  /**
   * name
   */
  public String name; // optional
  /**
   * preNodeId
   */
  public String preNodeId; // optional
  /**
   * nextNodeId
   */
  public String nextNodeId; // optional
  /**
   * type
   */
  public String type; // optional
  /**
   * nodeLogic
   */
  public String nodeLogic; // optional
  /**
   * runnerFlag
   */
  public String runnerFlag; // optional
  /**
   * nextRunnerOrg
   */
  public String nextRunnerOrg; // optional
  /**
   * status
   */
  public String status; // optional
  /**
   * runnerUserId
   */
  public long runnerUserId; // optional
  /**
   * runnerPostId
   */
  public long runnerPostId; // optional
  /**
   * runnerDepartId
   */
  public long runnerDepartId; // optional
  /**
   * runnerUsergroupId
   */
  public long runnerUsergroupId; // optional
  /**
   * runnerOrgLevel
   */
  public String runnerOrgLevel; // optional
  /**
   * isMultiselect
   */
  public boolean isMultiselect; // optional
  /**
   * isOtherMan
   */
  public boolean isOtherMan; // optional
  /**
   * isAssignMan
   */
  public boolean isAssignMan; // optional
  /**
   * isRevoke
   */
  public boolean isRevoke; // optional
  /**
   * isFallback
   */
  public boolean isFallback; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * id
     */
    ID((short)1, "id"),
    /**
     * createTime
     */
    CREATE_TIME((short)2, "createTime"),
    /**
     * updateTime
     */
    UPDATE_TIME((short)3, "updateTime"),
    /**
     * clientId
     */
    CLIENT_ID((short)4, "clientId"),
    /**
     * processId
     */
    PROCESS_ID((short)5, "processId"),
    /**
     * nodeId
     */
    NODE_ID((short)6, "nodeId"),
    /**
     * name
     */
    NAME((short)7, "name"),
    /**
     * preNodeId
     */
    PRE_NODE_ID((short)8, "preNodeId"),
    /**
     * nextNodeId
     */
    NEXT_NODE_ID((short)9, "nextNodeId"),
    /**
     * type
     */
    TYPE((short)10, "type"),
    /**
     * nodeLogic
     */
    NODE_LOGIC((short)11, "nodeLogic"),
    /**
     * runnerFlag
     */
    RUNNER_FLAG((short)12, "runnerFlag"),
    /**
     * nextRunnerOrg
     */
    NEXT_RUNNER_ORG((short)13, "nextRunnerOrg"),
    /**
     * status
     */
    STATUS((short)14, "status"),
    /**
     * runnerUserId
     */
    RUNNER_USER_ID((short)15, "runnerUserId"),
    /**
     * runnerPostId
     */
    RUNNER_POST_ID((short)16, "runnerPostId"),
    /**
     * runnerDepartId
     */
    RUNNER_DEPART_ID((short)17, "runnerDepartId"),
    /**
     * runnerUsergroupId
     */
    RUNNER_USERGROUP_ID((short)18, "runnerUsergroupId"),
    /**
     * runnerOrgLevel
     */
    RUNNER_ORG_LEVEL((short)19, "runnerOrgLevel"),
    /**
     * isMultiselect
     */
    IS_MULTISELECT((short)20, "isMultiselect"),
    /**
     * isOtherMan
     */
    IS_OTHER_MAN((short)21, "isOtherMan"),
    /**
     * isAssignMan
     */
    IS_ASSIGN_MAN((short)22, "isAssignMan"),
    /**
     * isRevoke
     */
    IS_REVOKE((short)23, "isRevoke"),
    /**
     * isFallback
     */
    IS_FALLBACK((short)24, "isFallback");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // CREATE_TIME
          return CREATE_TIME;
        case 3: // UPDATE_TIME
          return UPDATE_TIME;
        case 4: // CLIENT_ID
          return CLIENT_ID;
        case 5: // PROCESS_ID
          return PROCESS_ID;
        case 6: // NODE_ID
          return NODE_ID;
        case 7: // NAME
          return NAME;
        case 8: // PRE_NODE_ID
          return PRE_NODE_ID;
        case 9: // NEXT_NODE_ID
          return NEXT_NODE_ID;
        case 10: // TYPE
          return TYPE;
        case 11: // NODE_LOGIC
          return NODE_LOGIC;
        case 12: // RUNNER_FLAG
          return RUNNER_FLAG;
        case 13: // NEXT_RUNNER_ORG
          return NEXT_RUNNER_ORG;
        case 14: // STATUS
          return STATUS;
        case 15: // RUNNER_USER_ID
          return RUNNER_USER_ID;
        case 16: // RUNNER_POST_ID
          return RUNNER_POST_ID;
        case 17: // RUNNER_DEPART_ID
          return RUNNER_DEPART_ID;
        case 18: // RUNNER_USERGROUP_ID
          return RUNNER_USERGROUP_ID;
        case 19: // RUNNER_ORG_LEVEL
          return RUNNER_ORG_LEVEL;
        case 20: // IS_MULTISELECT
          return IS_MULTISELECT;
        case 21: // IS_OTHER_MAN
          return IS_OTHER_MAN;
        case 22: // IS_ASSIGN_MAN
          return IS_ASSIGN_MAN;
        case 23: // IS_REVOKE
          return IS_REVOKE;
        case 24: // IS_FALLBACK
          return IS_FALLBACK;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __CREATETIME_ISSET_ID = 1;
  private static final int __UPDATETIME_ISSET_ID = 2;
  private static final int __RUNNERUSERID_ISSET_ID = 3;
  private static final int __RUNNERPOSTID_ISSET_ID = 4;
  private static final int __RUNNERDEPARTID_ISSET_ID = 5;
  private static final int __RUNNERUSERGROUPID_ISSET_ID = 6;
  private static final int __ISMULTISELECT_ISSET_ID = 7;
  private static final int __ISOTHERMAN_ISSET_ID = 8;
  private static final int __ISASSIGNMAN_ISSET_ID = 9;
  private static final int __ISREVOKE_ISSET_ID = 10;
  private static final int __ISFALLBACK_ISSET_ID = 11;
  private short __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ID,_Fields.CREATE_TIME,_Fields.UPDATE_TIME,_Fields.CLIENT_ID,_Fields.PROCESS_ID,_Fields.NODE_ID,_Fields.NAME,_Fields.PRE_NODE_ID,_Fields.NEXT_NODE_ID,_Fields.TYPE,_Fields.NODE_LOGIC,_Fields.RUNNER_FLAG,_Fields.NEXT_RUNNER_ORG,_Fields.STATUS,_Fields.RUNNER_USER_ID,_Fields.RUNNER_POST_ID,_Fields.RUNNER_DEPART_ID,_Fields.RUNNER_USERGROUP_ID,_Fields.RUNNER_ORG_LEVEL,_Fields.IS_MULTISELECT,_Fields.IS_OTHER_MAN,_Fields.IS_ASSIGN_MAN,_Fields.IS_REVOKE,_Fields.IS_FALLBACK};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("updateTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROCESS_ID, new org.apache.thrift.meta_data.FieldMetaData("processId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NODE_ID, new org.apache.thrift.meta_data.FieldMetaData("nodeId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRE_NODE_ID, new org.apache.thrift.meta_data.FieldMetaData("preNodeId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NEXT_NODE_ID, new org.apache.thrift.meta_data.FieldMetaData("nextNodeId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NODE_LOGIC, new org.apache.thrift.meta_data.FieldMetaData("nodeLogic", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RUNNER_FLAG, new org.apache.thrift.meta_data.FieldMetaData("runnerFlag", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NEXT_RUNNER_ORG, new org.apache.thrift.meta_data.FieldMetaData("nextRunnerOrg", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RUNNER_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("runnerUserId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.RUNNER_POST_ID, new org.apache.thrift.meta_data.FieldMetaData("runnerPostId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.RUNNER_DEPART_ID, new org.apache.thrift.meta_data.FieldMetaData("runnerDepartId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.RUNNER_USERGROUP_ID, new org.apache.thrift.meta_data.FieldMetaData("runnerUsergroupId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.RUNNER_ORG_LEVEL, new org.apache.thrift.meta_data.FieldMetaData("runnerOrgLevel", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_MULTISELECT, new org.apache.thrift.meta_data.FieldMetaData("isMultiselect", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_OTHER_MAN, new org.apache.thrift.meta_data.FieldMetaData("isOtherMan", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_ASSIGN_MAN, new org.apache.thrift.meta_data.FieldMetaData("isAssignMan", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_REVOKE, new org.apache.thrift.meta_data.FieldMetaData("isRevoke", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_FALLBACK, new org.apache.thrift.meta_data.FieldMetaData("isFallback", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ProcessNodeVo.class, metaDataMap);
  }

  public ProcessNodeVo() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ProcessNodeVo(ProcessNodeVo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    this.createTime = other.createTime;
    this.updateTime = other.updateTime;
    if (other.isSetClientId()) {
      this.clientId = other.clientId;
    }
    if (other.isSetProcessId()) {
      this.processId = other.processId;
    }
    if (other.isSetNodeId()) {
      this.nodeId = other.nodeId;
    }
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetPreNodeId()) {
      this.preNodeId = other.preNodeId;
    }
    if (other.isSetNextNodeId()) {
      this.nextNodeId = other.nextNodeId;
    }
    if (other.isSetType()) {
      this.type = other.type;
    }
    if (other.isSetNodeLogic()) {
      this.nodeLogic = other.nodeLogic;
    }
    if (other.isSetRunnerFlag()) {
      this.runnerFlag = other.runnerFlag;
    }
    if (other.isSetNextRunnerOrg()) {
      this.nextRunnerOrg = other.nextRunnerOrg;
    }
    if (other.isSetStatus()) {
      this.status = other.status;
    }
    this.runnerUserId = other.runnerUserId;
    this.runnerPostId = other.runnerPostId;
    this.runnerDepartId = other.runnerDepartId;
    this.runnerUsergroupId = other.runnerUsergroupId;
    if (other.isSetRunnerOrgLevel()) {
      this.runnerOrgLevel = other.runnerOrgLevel;
    }
    this.isMultiselect = other.isMultiselect;
    this.isOtherMan = other.isOtherMan;
    this.isAssignMan = other.isAssignMan;
    this.isRevoke = other.isRevoke;
    this.isFallback = other.isFallback;
  }

  public ProcessNodeVo deepCopy() {
    return new ProcessNodeVo(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    setCreateTimeIsSet(false);
    this.createTime = 0;
    setUpdateTimeIsSet(false);
    this.updateTime = 0;
    this.clientId = null;
    this.processId = null;
    this.nodeId = null;
    this.name = null;
    this.preNodeId = null;
    this.nextNodeId = null;
    this.type = null;
    this.nodeLogic = null;
    this.runnerFlag = null;
    this.nextRunnerOrg = null;
    this.status = null;
    setRunnerUserIdIsSet(false);
    this.runnerUserId = 0;
    setRunnerPostIdIsSet(false);
    this.runnerPostId = 0;
    setRunnerDepartIdIsSet(false);
    this.runnerDepartId = 0;
    setRunnerUsergroupIdIsSet(false);
    this.runnerUsergroupId = 0;
    this.runnerOrgLevel = null;
    setIsMultiselectIsSet(false);
    this.isMultiselect = false;
    setIsOtherManIsSet(false);
    this.isOtherMan = false;
    setIsAssignManIsSet(false);
    this.isAssignMan = false;
    setIsRevokeIsSet(false);
    this.isRevoke = false;
    setIsFallbackIsSet(false);
    this.isFallback = false;
  }

  /**
   * id
   */
  public long getId() {
    return this.id;
  }

  /**
   * id
   */
  public ProcessNodeVo setId(long id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  /**
   * createTime
   */
  public long getCreateTime() {
    return this.createTime;
  }

  /**
   * createTime
   */
  public ProcessNodeVo setCreateTime(long createTime) {
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    return this;
  }

  public void unsetCreateTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  public void setCreateTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATETIME_ISSET_ID, value);
  }

  /**
   * updateTime
   */
  public long getUpdateTime() {
    return this.updateTime;
  }

  /**
   * updateTime
   */
  public ProcessNodeVo setUpdateTime(long updateTime) {
    this.updateTime = updateTime;
    setUpdateTimeIsSet(true);
    return this;
  }

  public void unsetUpdateTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UPDATETIME_ISSET_ID);
  }

  /** Returns true if field updateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateTime() {
    return EncodingUtils.testBit(__isset_bitfield, __UPDATETIME_ISSET_ID);
  }

  public void setUpdateTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UPDATETIME_ISSET_ID, value);
  }

  /**
   * clientId
   */
  public String getClientId() {
    return this.clientId;
  }

  /**
   * clientId
   */
  public ProcessNodeVo setClientId(String clientId) {
    this.clientId = clientId;
    return this;
  }

  public void unsetClientId() {
    this.clientId = null;
  }

  /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
  public boolean isSetClientId() {
    return this.clientId != null;
  }

  public void setClientIdIsSet(boolean value) {
    if (!value) {
      this.clientId = null;
    }
  }

  /**
   * processId
   */
  public String getProcessId() {
    return this.processId;
  }

  /**
   * processId
   */
  public ProcessNodeVo setProcessId(String processId) {
    this.processId = processId;
    return this;
  }

  public void unsetProcessId() {
    this.processId = null;
  }

  /** Returns true if field processId is set (has been assigned a value) and false otherwise */
  public boolean isSetProcessId() {
    return this.processId != null;
  }

  public void setProcessIdIsSet(boolean value) {
    if (!value) {
      this.processId = null;
    }
  }

  /**
   * nodeId
   */
  public String getNodeId() {
    return this.nodeId;
  }

  /**
   * nodeId
   */
  public ProcessNodeVo setNodeId(String nodeId) {
    this.nodeId = nodeId;
    return this;
  }

  public void unsetNodeId() {
    this.nodeId = null;
  }

  /** Returns true if field nodeId is set (has been assigned a value) and false otherwise */
  public boolean isSetNodeId() {
    return this.nodeId != null;
  }

  public void setNodeIdIsSet(boolean value) {
    if (!value) {
      this.nodeId = null;
    }
  }

  /**
   * name
   */
  public String getName() {
    return this.name;
  }

  /**
   * name
   */
  public ProcessNodeVo setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  /**
   * preNodeId
   */
  public String getPreNodeId() {
    return this.preNodeId;
  }

  /**
   * preNodeId
   */
  public ProcessNodeVo setPreNodeId(String preNodeId) {
    this.preNodeId = preNodeId;
    return this;
  }

  public void unsetPreNodeId() {
    this.preNodeId = null;
  }

  /** Returns true if field preNodeId is set (has been assigned a value) and false otherwise */
  public boolean isSetPreNodeId() {
    return this.preNodeId != null;
  }

  public void setPreNodeIdIsSet(boolean value) {
    if (!value) {
      this.preNodeId = null;
    }
  }

  /**
   * nextNodeId
   */
  public String getNextNodeId() {
    return this.nextNodeId;
  }

  /**
   * nextNodeId
   */
  public ProcessNodeVo setNextNodeId(String nextNodeId) {
    this.nextNodeId = nextNodeId;
    return this;
  }

  public void unsetNextNodeId() {
    this.nextNodeId = null;
  }

  /** Returns true if field nextNodeId is set (has been assigned a value) and false otherwise */
  public boolean isSetNextNodeId() {
    return this.nextNodeId != null;
  }

  public void setNextNodeIdIsSet(boolean value) {
    if (!value) {
      this.nextNodeId = null;
    }
  }

  /**
   * type
   */
  public String getType() {
    return this.type;
  }

  /**
   * type
   */
  public ProcessNodeVo setType(String type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  /**
   * nodeLogic
   */
  public String getNodeLogic() {
    return this.nodeLogic;
  }

  /**
   * nodeLogic
   */
  public ProcessNodeVo setNodeLogic(String nodeLogic) {
    this.nodeLogic = nodeLogic;
    return this;
  }

  public void unsetNodeLogic() {
    this.nodeLogic = null;
  }

  /** Returns true if field nodeLogic is set (has been assigned a value) and false otherwise */
  public boolean isSetNodeLogic() {
    return this.nodeLogic != null;
  }

  public void setNodeLogicIsSet(boolean value) {
    if (!value) {
      this.nodeLogic = null;
    }
  }

  /**
   * runnerFlag
   */
  public String getRunnerFlag() {
    return this.runnerFlag;
  }

  /**
   * runnerFlag
   */
  public ProcessNodeVo setRunnerFlag(String runnerFlag) {
    this.runnerFlag = runnerFlag;
    return this;
  }

  public void unsetRunnerFlag() {
    this.runnerFlag = null;
  }

  /** Returns true if field runnerFlag is set (has been assigned a value) and false otherwise */
  public boolean isSetRunnerFlag() {
    return this.runnerFlag != null;
  }

  public void setRunnerFlagIsSet(boolean value) {
    if (!value) {
      this.runnerFlag = null;
    }
  }

  /**
   * nextRunnerOrg
   */
  public String getNextRunnerOrg() {
    return this.nextRunnerOrg;
  }

  /**
   * nextRunnerOrg
   */
  public ProcessNodeVo setNextRunnerOrg(String nextRunnerOrg) {
    this.nextRunnerOrg = nextRunnerOrg;
    return this;
  }

  public void unsetNextRunnerOrg() {
    this.nextRunnerOrg = null;
  }

  /** Returns true if field nextRunnerOrg is set (has been assigned a value) and false otherwise */
  public boolean isSetNextRunnerOrg() {
    return this.nextRunnerOrg != null;
  }

  public void setNextRunnerOrgIsSet(boolean value) {
    if (!value) {
      this.nextRunnerOrg = null;
    }
  }

  /**
   * status
   */
  public String getStatus() {
    return this.status;
  }

  /**
   * status
   */
  public ProcessNodeVo setStatus(String status) {
    this.status = status;
    return this;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  /**
   * runnerUserId
   */
  public long getRunnerUserId() {
    return this.runnerUserId;
  }

  /**
   * runnerUserId
   */
  public ProcessNodeVo setRunnerUserId(long runnerUserId) {
    this.runnerUserId = runnerUserId;
    setRunnerUserIdIsSet(true);
    return this;
  }

  public void unsetRunnerUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RUNNERUSERID_ISSET_ID);
  }

  /** Returns true if field runnerUserId is set (has been assigned a value) and false otherwise */
  public boolean isSetRunnerUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __RUNNERUSERID_ISSET_ID);
  }

  public void setRunnerUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RUNNERUSERID_ISSET_ID, value);
  }

  /**
   * runnerPostId
   */
  public long getRunnerPostId() {
    return this.runnerPostId;
  }

  /**
   * runnerPostId
   */
  public ProcessNodeVo setRunnerPostId(long runnerPostId) {
    this.runnerPostId = runnerPostId;
    setRunnerPostIdIsSet(true);
    return this;
  }

  public void unsetRunnerPostId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RUNNERPOSTID_ISSET_ID);
  }

  /** Returns true if field runnerPostId is set (has been assigned a value) and false otherwise */
  public boolean isSetRunnerPostId() {
    return EncodingUtils.testBit(__isset_bitfield, __RUNNERPOSTID_ISSET_ID);
  }

  public void setRunnerPostIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RUNNERPOSTID_ISSET_ID, value);
  }

  /**
   * runnerDepartId
   */
  public long getRunnerDepartId() {
    return this.runnerDepartId;
  }

  /**
   * runnerDepartId
   */
  public ProcessNodeVo setRunnerDepartId(long runnerDepartId) {
    this.runnerDepartId = runnerDepartId;
    setRunnerDepartIdIsSet(true);
    return this;
  }

  public void unsetRunnerDepartId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RUNNERDEPARTID_ISSET_ID);
  }

  /** Returns true if field runnerDepartId is set (has been assigned a value) and false otherwise */
  public boolean isSetRunnerDepartId() {
    return EncodingUtils.testBit(__isset_bitfield, __RUNNERDEPARTID_ISSET_ID);
  }

  public void setRunnerDepartIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RUNNERDEPARTID_ISSET_ID, value);
  }

  /**
   * runnerUsergroupId
   */
  public long getRunnerUsergroupId() {
    return this.runnerUsergroupId;
  }

  /**
   * runnerUsergroupId
   */
  public ProcessNodeVo setRunnerUsergroupId(long runnerUsergroupId) {
    this.runnerUsergroupId = runnerUsergroupId;
    setRunnerUsergroupIdIsSet(true);
    return this;
  }

  public void unsetRunnerUsergroupId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RUNNERUSERGROUPID_ISSET_ID);
  }

  /** Returns true if field runnerUsergroupId is set (has been assigned a value) and false otherwise */
  public boolean isSetRunnerUsergroupId() {
    return EncodingUtils.testBit(__isset_bitfield, __RUNNERUSERGROUPID_ISSET_ID);
  }

  public void setRunnerUsergroupIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RUNNERUSERGROUPID_ISSET_ID, value);
  }

  /**
   * runnerOrgLevel
   */
  public String getRunnerOrgLevel() {
    return this.runnerOrgLevel;
  }

  /**
   * runnerOrgLevel
   */
  public ProcessNodeVo setRunnerOrgLevel(String runnerOrgLevel) {
    this.runnerOrgLevel = runnerOrgLevel;
    return this;
  }

  public void unsetRunnerOrgLevel() {
    this.runnerOrgLevel = null;
  }

  /** Returns true if field runnerOrgLevel is set (has been assigned a value) and false otherwise */
  public boolean isSetRunnerOrgLevel() {
    return this.runnerOrgLevel != null;
  }

  public void setRunnerOrgLevelIsSet(boolean value) {
    if (!value) {
      this.runnerOrgLevel = null;
    }
  }

  /**
   * isMultiselect
   */
  public boolean isIsMultiselect() {
    return this.isMultiselect;
  }

  /**
   * isMultiselect
   */
  public ProcessNodeVo setIsMultiselect(boolean isMultiselect) {
    this.isMultiselect = isMultiselect;
    setIsMultiselectIsSet(true);
    return this;
  }

  public void unsetIsMultiselect() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISMULTISELECT_ISSET_ID);
  }

  /** Returns true if field isMultiselect is set (has been assigned a value) and false otherwise */
  public boolean isSetIsMultiselect() {
    return EncodingUtils.testBit(__isset_bitfield, __ISMULTISELECT_ISSET_ID);
  }

  public void setIsMultiselectIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISMULTISELECT_ISSET_ID, value);
  }

  /**
   * isOtherMan
   */
  public boolean isIsOtherMan() {
    return this.isOtherMan;
  }

  /**
   * isOtherMan
   */
  public ProcessNodeVo setIsOtherMan(boolean isOtherMan) {
    this.isOtherMan = isOtherMan;
    setIsOtherManIsSet(true);
    return this;
  }

  public void unsetIsOtherMan() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISOTHERMAN_ISSET_ID);
  }

  /** Returns true if field isOtherMan is set (has been assigned a value) and false otherwise */
  public boolean isSetIsOtherMan() {
    return EncodingUtils.testBit(__isset_bitfield, __ISOTHERMAN_ISSET_ID);
  }

  public void setIsOtherManIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISOTHERMAN_ISSET_ID, value);
  }

  /**
   * isAssignMan
   */
  public boolean isIsAssignMan() {
    return this.isAssignMan;
  }

  /**
   * isAssignMan
   */
  public ProcessNodeVo setIsAssignMan(boolean isAssignMan) {
    this.isAssignMan = isAssignMan;
    setIsAssignManIsSet(true);
    return this;
  }

  public void unsetIsAssignMan() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISASSIGNMAN_ISSET_ID);
  }

  /** Returns true if field isAssignMan is set (has been assigned a value) and false otherwise */
  public boolean isSetIsAssignMan() {
    return EncodingUtils.testBit(__isset_bitfield, __ISASSIGNMAN_ISSET_ID);
  }

  public void setIsAssignManIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISASSIGNMAN_ISSET_ID, value);
  }

  /**
   * isRevoke
   */
  public boolean isIsRevoke() {
    return this.isRevoke;
  }

  /**
   * isRevoke
   */
  public ProcessNodeVo setIsRevoke(boolean isRevoke) {
    this.isRevoke = isRevoke;
    setIsRevokeIsSet(true);
    return this;
  }

  public void unsetIsRevoke() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISREVOKE_ISSET_ID);
  }

  /** Returns true if field isRevoke is set (has been assigned a value) and false otherwise */
  public boolean isSetIsRevoke() {
    return EncodingUtils.testBit(__isset_bitfield, __ISREVOKE_ISSET_ID);
  }

  public void setIsRevokeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISREVOKE_ISSET_ID, value);
  }

  /**
   * isFallback
   */
  public boolean isIsFallback() {
    return this.isFallback;
  }

  /**
   * isFallback
   */
  public ProcessNodeVo setIsFallback(boolean isFallback) {
    this.isFallback = isFallback;
    setIsFallbackIsSet(true);
    return this;
  }

  public void unsetIsFallback() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISFALLBACK_ISSET_ID);
  }

  /** Returns true if field isFallback is set (has been assigned a value) and false otherwise */
  public boolean isSetIsFallback() {
    return EncodingUtils.testBit(__isset_bitfield, __ISFALLBACK_ISSET_ID);
  }

  public void setIsFallbackIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISFALLBACK_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((Long)value);
      }
      break;

    case UPDATE_TIME:
      if (value == null) {
        unsetUpdateTime();
      } else {
        setUpdateTime((Long)value);
      }
      break;

    case CLIENT_ID:
      if (value == null) {
        unsetClientId();
      } else {
        setClientId((String)value);
      }
      break;

    case PROCESS_ID:
      if (value == null) {
        unsetProcessId();
      } else {
        setProcessId((String)value);
      }
      break;

    case NODE_ID:
      if (value == null) {
        unsetNodeId();
      } else {
        setNodeId((String)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case PRE_NODE_ID:
      if (value == null) {
        unsetPreNodeId();
      } else {
        setPreNodeId((String)value);
      }
      break;

    case NEXT_NODE_ID:
      if (value == null) {
        unsetNextNodeId();
      } else {
        setNextNodeId((String)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((String)value);
      }
      break;

    case NODE_LOGIC:
      if (value == null) {
        unsetNodeLogic();
      } else {
        setNodeLogic((String)value);
      }
      break;

    case RUNNER_FLAG:
      if (value == null) {
        unsetRunnerFlag();
      } else {
        setRunnerFlag((String)value);
      }
      break;

    case NEXT_RUNNER_ORG:
      if (value == null) {
        unsetNextRunnerOrg();
      } else {
        setNextRunnerOrg((String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((String)value);
      }
      break;

    case RUNNER_USER_ID:
      if (value == null) {
        unsetRunnerUserId();
      } else {
        setRunnerUserId((Long)value);
      }
      break;

    case RUNNER_POST_ID:
      if (value == null) {
        unsetRunnerPostId();
      } else {
        setRunnerPostId((Long)value);
      }
      break;

    case RUNNER_DEPART_ID:
      if (value == null) {
        unsetRunnerDepartId();
      } else {
        setRunnerDepartId((Long)value);
      }
      break;

    case RUNNER_USERGROUP_ID:
      if (value == null) {
        unsetRunnerUsergroupId();
      } else {
        setRunnerUsergroupId((Long)value);
      }
      break;

    case RUNNER_ORG_LEVEL:
      if (value == null) {
        unsetRunnerOrgLevel();
      } else {
        setRunnerOrgLevel((String)value);
      }
      break;

    case IS_MULTISELECT:
      if (value == null) {
        unsetIsMultiselect();
      } else {
        setIsMultiselect((Boolean)value);
      }
      break;

    case IS_OTHER_MAN:
      if (value == null) {
        unsetIsOtherMan();
      } else {
        setIsOtherMan((Boolean)value);
      }
      break;

    case IS_ASSIGN_MAN:
      if (value == null) {
        unsetIsAssignMan();
      } else {
        setIsAssignMan((Boolean)value);
      }
      break;

    case IS_REVOKE:
      if (value == null) {
        unsetIsRevoke();
      } else {
        setIsRevoke((Boolean)value);
      }
      break;

    case IS_FALLBACK:
      if (value == null) {
        unsetIsFallback();
      } else {
        setIsFallback((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Long.valueOf(getId());

    case CREATE_TIME:
      return Long.valueOf(getCreateTime());

    case UPDATE_TIME:
      return Long.valueOf(getUpdateTime());

    case CLIENT_ID:
      return getClientId();

    case PROCESS_ID:
      return getProcessId();

    case NODE_ID:
      return getNodeId();

    case NAME:
      return getName();

    case PRE_NODE_ID:
      return getPreNodeId();

    case NEXT_NODE_ID:
      return getNextNodeId();

    case TYPE:
      return getType();

    case NODE_LOGIC:
      return getNodeLogic();

    case RUNNER_FLAG:
      return getRunnerFlag();

    case NEXT_RUNNER_ORG:
      return getNextRunnerOrg();

    case STATUS:
      return getStatus();

    case RUNNER_USER_ID:
      return Long.valueOf(getRunnerUserId());

    case RUNNER_POST_ID:
      return Long.valueOf(getRunnerPostId());

    case RUNNER_DEPART_ID:
      return Long.valueOf(getRunnerDepartId());

    case RUNNER_USERGROUP_ID:
      return Long.valueOf(getRunnerUsergroupId());

    case RUNNER_ORG_LEVEL:
      return getRunnerOrgLevel();

    case IS_MULTISELECT:
      return Boolean.valueOf(isIsMultiselect());

    case IS_OTHER_MAN:
      return Boolean.valueOf(isIsOtherMan());

    case IS_ASSIGN_MAN:
      return Boolean.valueOf(isIsAssignMan());

    case IS_REVOKE:
      return Boolean.valueOf(isIsRevoke());

    case IS_FALLBACK:
      return Boolean.valueOf(isIsFallback());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case CREATE_TIME:
      return isSetCreateTime();
    case UPDATE_TIME:
      return isSetUpdateTime();
    case CLIENT_ID:
      return isSetClientId();
    case PROCESS_ID:
      return isSetProcessId();
    case NODE_ID:
      return isSetNodeId();
    case NAME:
      return isSetName();
    case PRE_NODE_ID:
      return isSetPreNodeId();
    case NEXT_NODE_ID:
      return isSetNextNodeId();
    case TYPE:
      return isSetType();
    case NODE_LOGIC:
      return isSetNodeLogic();
    case RUNNER_FLAG:
      return isSetRunnerFlag();
    case NEXT_RUNNER_ORG:
      return isSetNextRunnerOrg();
    case STATUS:
      return isSetStatus();
    case RUNNER_USER_ID:
      return isSetRunnerUserId();
    case RUNNER_POST_ID:
      return isSetRunnerPostId();
    case RUNNER_DEPART_ID:
      return isSetRunnerDepartId();
    case RUNNER_USERGROUP_ID:
      return isSetRunnerUsergroupId();
    case RUNNER_ORG_LEVEL:
      return isSetRunnerOrgLevel();
    case IS_MULTISELECT:
      return isSetIsMultiselect();
    case IS_OTHER_MAN:
      return isSetIsOtherMan();
    case IS_ASSIGN_MAN:
      return isSetIsAssignMan();
    case IS_REVOKE:
      return isSetIsRevoke();
    case IS_FALLBACK:
      return isSetIsFallback();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ProcessNodeVo)
      return this.equals((ProcessNodeVo)that);
    return false;
  }

  public boolean equals(ProcessNodeVo that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_createTime = true && this.isSetCreateTime();
    boolean that_present_createTime = true && that.isSetCreateTime();
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (this.createTime != that.createTime)
        return false;
    }

    boolean this_present_updateTime = true && this.isSetUpdateTime();
    boolean that_present_updateTime = true && that.isSetUpdateTime();
    if (this_present_updateTime || that_present_updateTime) {
      if (!(this_present_updateTime && that_present_updateTime))
        return false;
      if (this.updateTime != that.updateTime)
        return false;
    }

    boolean this_present_clientId = true && this.isSetClientId();
    boolean that_present_clientId = true && that.isSetClientId();
    if (this_present_clientId || that_present_clientId) {
      if (!(this_present_clientId && that_present_clientId))
        return false;
      if (!this.clientId.equals(that.clientId))
        return false;
    }

    boolean this_present_processId = true && this.isSetProcessId();
    boolean that_present_processId = true && that.isSetProcessId();
    if (this_present_processId || that_present_processId) {
      if (!(this_present_processId && that_present_processId))
        return false;
      if (!this.processId.equals(that.processId))
        return false;
    }

    boolean this_present_nodeId = true && this.isSetNodeId();
    boolean that_present_nodeId = true && that.isSetNodeId();
    if (this_present_nodeId || that_present_nodeId) {
      if (!(this_present_nodeId && that_present_nodeId))
        return false;
      if (!this.nodeId.equals(that.nodeId))
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_preNodeId = true && this.isSetPreNodeId();
    boolean that_present_preNodeId = true && that.isSetPreNodeId();
    if (this_present_preNodeId || that_present_preNodeId) {
      if (!(this_present_preNodeId && that_present_preNodeId))
        return false;
      if (!this.preNodeId.equals(that.preNodeId))
        return false;
    }

    boolean this_present_nextNodeId = true && this.isSetNextNodeId();
    boolean that_present_nextNodeId = true && that.isSetNextNodeId();
    if (this_present_nextNodeId || that_present_nextNodeId) {
      if (!(this_present_nextNodeId && that_present_nextNodeId))
        return false;
      if (!this.nextNodeId.equals(that.nextNodeId))
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_nodeLogic = true && this.isSetNodeLogic();
    boolean that_present_nodeLogic = true && that.isSetNodeLogic();
    if (this_present_nodeLogic || that_present_nodeLogic) {
      if (!(this_present_nodeLogic && that_present_nodeLogic))
        return false;
      if (!this.nodeLogic.equals(that.nodeLogic))
        return false;
    }

    boolean this_present_runnerFlag = true && this.isSetRunnerFlag();
    boolean that_present_runnerFlag = true && that.isSetRunnerFlag();
    if (this_present_runnerFlag || that_present_runnerFlag) {
      if (!(this_present_runnerFlag && that_present_runnerFlag))
        return false;
      if (!this.runnerFlag.equals(that.runnerFlag))
        return false;
    }

    boolean this_present_nextRunnerOrg = true && this.isSetNextRunnerOrg();
    boolean that_present_nextRunnerOrg = true && that.isSetNextRunnerOrg();
    if (this_present_nextRunnerOrg || that_present_nextRunnerOrg) {
      if (!(this_present_nextRunnerOrg && that_present_nextRunnerOrg))
        return false;
      if (!this.nextRunnerOrg.equals(that.nextRunnerOrg))
        return false;
    }

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    boolean this_present_runnerUserId = true && this.isSetRunnerUserId();
    boolean that_present_runnerUserId = true && that.isSetRunnerUserId();
    if (this_present_runnerUserId || that_present_runnerUserId) {
      if (!(this_present_runnerUserId && that_present_runnerUserId))
        return false;
      if (this.runnerUserId != that.runnerUserId)
        return false;
    }

    boolean this_present_runnerPostId = true && this.isSetRunnerPostId();
    boolean that_present_runnerPostId = true && that.isSetRunnerPostId();
    if (this_present_runnerPostId || that_present_runnerPostId) {
      if (!(this_present_runnerPostId && that_present_runnerPostId))
        return false;
      if (this.runnerPostId != that.runnerPostId)
        return false;
    }

    boolean this_present_runnerDepartId = true && this.isSetRunnerDepartId();
    boolean that_present_runnerDepartId = true && that.isSetRunnerDepartId();
    if (this_present_runnerDepartId || that_present_runnerDepartId) {
      if (!(this_present_runnerDepartId && that_present_runnerDepartId))
        return false;
      if (this.runnerDepartId != that.runnerDepartId)
        return false;
    }

    boolean this_present_runnerUsergroupId = true && this.isSetRunnerUsergroupId();
    boolean that_present_runnerUsergroupId = true && that.isSetRunnerUsergroupId();
    if (this_present_runnerUsergroupId || that_present_runnerUsergroupId) {
      if (!(this_present_runnerUsergroupId && that_present_runnerUsergroupId))
        return false;
      if (this.runnerUsergroupId != that.runnerUsergroupId)
        return false;
    }

    boolean this_present_runnerOrgLevel = true && this.isSetRunnerOrgLevel();
    boolean that_present_runnerOrgLevel = true && that.isSetRunnerOrgLevel();
    if (this_present_runnerOrgLevel || that_present_runnerOrgLevel) {
      if (!(this_present_runnerOrgLevel && that_present_runnerOrgLevel))
        return false;
      if (!this.runnerOrgLevel.equals(that.runnerOrgLevel))
        return false;
    }

    boolean this_present_isMultiselect = true && this.isSetIsMultiselect();
    boolean that_present_isMultiselect = true && that.isSetIsMultiselect();
    if (this_present_isMultiselect || that_present_isMultiselect) {
      if (!(this_present_isMultiselect && that_present_isMultiselect))
        return false;
      if (this.isMultiselect != that.isMultiselect)
        return false;
    }

    boolean this_present_isOtherMan = true && this.isSetIsOtherMan();
    boolean that_present_isOtherMan = true && that.isSetIsOtherMan();
    if (this_present_isOtherMan || that_present_isOtherMan) {
      if (!(this_present_isOtherMan && that_present_isOtherMan))
        return false;
      if (this.isOtherMan != that.isOtherMan)
        return false;
    }

    boolean this_present_isAssignMan = true && this.isSetIsAssignMan();
    boolean that_present_isAssignMan = true && that.isSetIsAssignMan();
    if (this_present_isAssignMan || that_present_isAssignMan) {
      if (!(this_present_isAssignMan && that_present_isAssignMan))
        return false;
      if (this.isAssignMan != that.isAssignMan)
        return false;
    }

    boolean this_present_isRevoke = true && this.isSetIsRevoke();
    boolean that_present_isRevoke = true && that.isSetIsRevoke();
    if (this_present_isRevoke || that_present_isRevoke) {
      if (!(this_present_isRevoke && that_present_isRevoke))
        return false;
      if (this.isRevoke != that.isRevoke)
        return false;
    }

    boolean this_present_isFallback = true && this.isSetIsFallback();
    boolean that_present_isFallback = true && that.isSetIsFallback();
    if (this_present_isFallback || that_present_isFallback) {
      if (!(this_present_isFallback && that_present_isFallback))
        return false;
      if (this.isFallback != that.isFallback)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true && (isSetId());
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_createTime = true && (isSetCreateTime());
    list.add(present_createTime);
    if (present_createTime)
      list.add(createTime);

    boolean present_updateTime = true && (isSetUpdateTime());
    list.add(present_updateTime);
    if (present_updateTime)
      list.add(updateTime);

    boolean present_clientId = true && (isSetClientId());
    list.add(present_clientId);
    if (present_clientId)
      list.add(clientId);

    boolean present_processId = true && (isSetProcessId());
    list.add(present_processId);
    if (present_processId)
      list.add(processId);

    boolean present_nodeId = true && (isSetNodeId());
    list.add(present_nodeId);
    if (present_nodeId)
      list.add(nodeId);

    boolean present_name = true && (isSetName());
    list.add(present_name);
    if (present_name)
      list.add(name);

    boolean present_preNodeId = true && (isSetPreNodeId());
    list.add(present_preNodeId);
    if (present_preNodeId)
      list.add(preNodeId);

    boolean present_nextNodeId = true && (isSetNextNodeId());
    list.add(present_nextNodeId);
    if (present_nextNodeId)
      list.add(nextNodeId);

    boolean present_type = true && (isSetType());
    list.add(present_type);
    if (present_type)
      list.add(type);

    boolean present_nodeLogic = true && (isSetNodeLogic());
    list.add(present_nodeLogic);
    if (present_nodeLogic)
      list.add(nodeLogic);

    boolean present_runnerFlag = true && (isSetRunnerFlag());
    list.add(present_runnerFlag);
    if (present_runnerFlag)
      list.add(runnerFlag);

    boolean present_nextRunnerOrg = true && (isSetNextRunnerOrg());
    list.add(present_nextRunnerOrg);
    if (present_nextRunnerOrg)
      list.add(nextRunnerOrg);

    boolean present_status = true && (isSetStatus());
    list.add(present_status);
    if (present_status)
      list.add(status);

    boolean present_runnerUserId = true && (isSetRunnerUserId());
    list.add(present_runnerUserId);
    if (present_runnerUserId)
      list.add(runnerUserId);

    boolean present_runnerPostId = true && (isSetRunnerPostId());
    list.add(present_runnerPostId);
    if (present_runnerPostId)
      list.add(runnerPostId);

    boolean present_runnerDepartId = true && (isSetRunnerDepartId());
    list.add(present_runnerDepartId);
    if (present_runnerDepartId)
      list.add(runnerDepartId);

    boolean present_runnerUsergroupId = true && (isSetRunnerUsergroupId());
    list.add(present_runnerUsergroupId);
    if (present_runnerUsergroupId)
      list.add(runnerUsergroupId);

    boolean present_runnerOrgLevel = true && (isSetRunnerOrgLevel());
    list.add(present_runnerOrgLevel);
    if (present_runnerOrgLevel)
      list.add(runnerOrgLevel);

    boolean present_isMultiselect = true && (isSetIsMultiselect());
    list.add(present_isMultiselect);
    if (present_isMultiselect)
      list.add(isMultiselect);

    boolean present_isOtherMan = true && (isSetIsOtherMan());
    list.add(present_isOtherMan);
    if (present_isOtherMan)
      list.add(isOtherMan);

    boolean present_isAssignMan = true && (isSetIsAssignMan());
    list.add(present_isAssignMan);
    if (present_isAssignMan)
      list.add(isAssignMan);

    boolean present_isRevoke = true && (isSetIsRevoke());
    list.add(present_isRevoke);
    if (present_isRevoke)
      list.add(isRevoke);

    boolean present_isFallback = true && (isSetIsFallback());
    list.add(present_isFallback);
    if (present_isFallback)
      list.add(isFallback);

    return list.hashCode();
  }

  @Override
  public int compareTo(ProcessNodeVo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateTime()).compareTo(other.isSetUpdateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateTime, other.updateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClientId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProcessId()).compareTo(other.isSetProcessId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProcessId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.processId, other.processId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNodeId()).compareTo(other.isSetNodeId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNodeId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodeId, other.nodeId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPreNodeId()).compareTo(other.isSetPreNodeId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPreNodeId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.preNodeId, other.preNodeId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNextNodeId()).compareTo(other.isSetNextNodeId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNextNodeId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nextNodeId, other.nextNodeId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNodeLogic()).compareTo(other.isSetNodeLogic());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNodeLogic()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodeLogic, other.nodeLogic);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRunnerFlag()).compareTo(other.isSetRunnerFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRunnerFlag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.runnerFlag, other.runnerFlag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNextRunnerOrg()).compareTo(other.isSetNextRunnerOrg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNextRunnerOrg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nextRunnerOrg, other.nextRunnerOrg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRunnerUserId()).compareTo(other.isSetRunnerUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRunnerUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.runnerUserId, other.runnerUserId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRunnerPostId()).compareTo(other.isSetRunnerPostId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRunnerPostId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.runnerPostId, other.runnerPostId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRunnerDepartId()).compareTo(other.isSetRunnerDepartId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRunnerDepartId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.runnerDepartId, other.runnerDepartId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRunnerUsergroupId()).compareTo(other.isSetRunnerUsergroupId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRunnerUsergroupId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.runnerUsergroupId, other.runnerUsergroupId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRunnerOrgLevel()).compareTo(other.isSetRunnerOrgLevel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRunnerOrgLevel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.runnerOrgLevel, other.runnerOrgLevel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsMultiselect()).compareTo(other.isSetIsMultiselect());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsMultiselect()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isMultiselect, other.isMultiselect);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsOtherMan()).compareTo(other.isSetIsOtherMan());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsOtherMan()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isOtherMan, other.isOtherMan);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsAssignMan()).compareTo(other.isSetIsAssignMan());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsAssignMan()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isAssignMan, other.isAssignMan);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsRevoke()).compareTo(other.isSetIsRevoke());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsRevoke()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isRevoke, other.isRevoke);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsFallback()).compareTo(other.isSetIsFallback());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsFallback()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isFallback, other.isFallback);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ProcessNodeVo(");
    boolean first = true;

    if (isSetId()) {
      sb.append("id:");
      sb.append(this.id);
      first = false;
    }
    if (isSetCreateTime()) {
      if (!first) sb.append(", ");
      sb.append("createTime:");
      sb.append(this.createTime);
      first = false;
    }
    if (isSetUpdateTime()) {
      if (!first) sb.append(", ");
      sb.append("updateTime:");
      sb.append(this.updateTime);
      first = false;
    }
    if (isSetClientId()) {
      if (!first) sb.append(", ");
      sb.append("clientId:");
      if (this.clientId == null) {
        sb.append("null");
      } else {
        sb.append(this.clientId);
      }
      first = false;
    }
    if (isSetProcessId()) {
      if (!first) sb.append(", ");
      sb.append("processId:");
      if (this.processId == null) {
        sb.append("null");
      } else {
        sb.append(this.processId);
      }
      first = false;
    }
    if (isSetNodeId()) {
      if (!first) sb.append(", ");
      sb.append("nodeId:");
      if (this.nodeId == null) {
        sb.append("null");
      } else {
        sb.append(this.nodeId);
      }
      first = false;
    }
    if (isSetName()) {
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
    }
    if (isSetPreNodeId()) {
      if (!first) sb.append(", ");
      sb.append("preNodeId:");
      if (this.preNodeId == null) {
        sb.append("null");
      } else {
        sb.append(this.preNodeId);
      }
      first = false;
    }
    if (isSetNextNodeId()) {
      if (!first) sb.append(", ");
      sb.append("nextNodeId:");
      if (this.nextNodeId == null) {
        sb.append("null");
      } else {
        sb.append(this.nextNodeId);
      }
      first = false;
    }
    if (isSetType()) {
      if (!first) sb.append(", ");
      sb.append("type:");
      if (this.type == null) {
        sb.append("null");
      } else {
        sb.append(this.type);
      }
      first = false;
    }
    if (isSetNodeLogic()) {
      if (!first) sb.append(", ");
      sb.append("nodeLogic:");
      if (this.nodeLogic == null) {
        sb.append("null");
      } else {
        sb.append(this.nodeLogic);
      }
      first = false;
    }
    if (isSetRunnerFlag()) {
      if (!first) sb.append(", ");
      sb.append("runnerFlag:");
      if (this.runnerFlag == null) {
        sb.append("null");
      } else {
        sb.append(this.runnerFlag);
      }
      first = false;
    }
    if (isSetNextRunnerOrg()) {
      if (!first) sb.append(", ");
      sb.append("nextRunnerOrg:");
      if (this.nextRunnerOrg == null) {
        sb.append("null");
      } else {
        sb.append(this.nextRunnerOrg);
      }
      first = false;
    }
    if (isSetStatus()) {
      if (!first) sb.append(", ");
      sb.append("status:");
      if (this.status == null) {
        sb.append("null");
      } else {
        sb.append(this.status);
      }
      first = false;
    }
    if (isSetRunnerUserId()) {
      if (!first) sb.append(", ");
      sb.append("runnerUserId:");
      sb.append(this.runnerUserId);
      first = false;
    }
    if (isSetRunnerPostId()) {
      if (!first) sb.append(", ");
      sb.append("runnerPostId:");
      sb.append(this.runnerPostId);
      first = false;
    }
    if (isSetRunnerDepartId()) {
      if (!first) sb.append(", ");
      sb.append("runnerDepartId:");
      sb.append(this.runnerDepartId);
      first = false;
    }
    if (isSetRunnerUsergroupId()) {
      if (!first) sb.append(", ");
      sb.append("runnerUsergroupId:");
      sb.append(this.runnerUsergroupId);
      first = false;
    }
    if (isSetRunnerOrgLevel()) {
      if (!first) sb.append(", ");
      sb.append("runnerOrgLevel:");
      if (this.runnerOrgLevel == null) {
        sb.append("null");
      } else {
        sb.append(this.runnerOrgLevel);
      }
      first = false;
    }
    if (isSetIsMultiselect()) {
      if (!first) sb.append(", ");
      sb.append("isMultiselect:");
      sb.append(this.isMultiselect);
      first = false;
    }
    if (isSetIsOtherMan()) {
      if (!first) sb.append(", ");
      sb.append("isOtherMan:");
      sb.append(this.isOtherMan);
      first = false;
    }
    if (isSetIsAssignMan()) {
      if (!first) sb.append(", ");
      sb.append("isAssignMan:");
      sb.append(this.isAssignMan);
      first = false;
    }
    if (isSetIsRevoke()) {
      if (!first) sb.append(", ");
      sb.append("isRevoke:");
      sb.append(this.isRevoke);
      first = false;
    }
    if (isSetIsFallback()) {
      if (!first) sb.append(", ");
      sb.append("isFallback:");
      sb.append(this.isFallback);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ProcessNodeVoStandardSchemeFactory implements SchemeFactory {
    public ProcessNodeVoStandardScheme getScheme() {
      return new ProcessNodeVoStandardScheme();
    }
  }

  private static class ProcessNodeVoStandardScheme extends StandardScheme<ProcessNodeVo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ProcessNodeVo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createTime = iprot.readI64();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // UPDATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.updateTime = iprot.readI64();
              struct.setUpdateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CLIENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clientId = iprot.readString();
              struct.setClientIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PROCESS_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.processId = iprot.readString();
              struct.setProcessIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // NODE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.nodeId = iprot.readString();
              struct.setNodeIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PRE_NODE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.preNodeId = iprot.readString();
              struct.setPreNodeIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // NEXT_NODE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.nextNodeId = iprot.readString();
              struct.setNextNodeIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.type = iprot.readString();
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // NODE_LOGIC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.nodeLogic = iprot.readString();
              struct.setNodeLogicIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // RUNNER_FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.runnerFlag = iprot.readString();
              struct.setRunnerFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // NEXT_RUNNER_ORG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.nextRunnerOrg = iprot.readString();
              struct.setNextRunnerOrgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.status = iprot.readString();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // RUNNER_USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.runnerUserId = iprot.readI64();
              struct.setRunnerUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // RUNNER_POST_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.runnerPostId = iprot.readI64();
              struct.setRunnerPostIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // RUNNER_DEPART_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.runnerDepartId = iprot.readI64();
              struct.setRunnerDepartIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // RUNNER_USERGROUP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.runnerUsergroupId = iprot.readI64();
              struct.setRunnerUsergroupIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // RUNNER_ORG_LEVEL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.runnerOrgLevel = iprot.readString();
              struct.setRunnerOrgLevelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // IS_MULTISELECT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isMultiselect = iprot.readBool();
              struct.setIsMultiselectIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // IS_OTHER_MAN
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isOtherMan = iprot.readBool();
              struct.setIsOtherManIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // IS_ASSIGN_MAN
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isAssignMan = iprot.readBool();
              struct.setIsAssignManIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // IS_REVOKE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isRevoke = iprot.readBool();
              struct.setIsRevokeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // IS_FALLBACK
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isFallback = iprot.readBool();
              struct.setIsFallbackIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ProcessNodeVo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetId()) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI64(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCreateTime()) {
        oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
        oprot.writeI64(struct.createTime);
        oprot.writeFieldEnd();
      }
      if (struct.isSetUpdateTime()) {
        oprot.writeFieldBegin(UPDATE_TIME_FIELD_DESC);
        oprot.writeI64(struct.updateTime);
        oprot.writeFieldEnd();
      }
      if (struct.clientId != null) {
        if (struct.isSetClientId()) {
          oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
          oprot.writeString(struct.clientId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.processId != null) {
        if (struct.isSetProcessId()) {
          oprot.writeFieldBegin(PROCESS_ID_FIELD_DESC);
          oprot.writeString(struct.processId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.nodeId != null) {
        if (struct.isSetNodeId()) {
          oprot.writeFieldBegin(NODE_ID_FIELD_DESC);
          oprot.writeString(struct.nodeId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.name != null) {
        if (struct.isSetName()) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.preNodeId != null) {
        if (struct.isSetPreNodeId()) {
          oprot.writeFieldBegin(PRE_NODE_ID_FIELD_DESC);
          oprot.writeString(struct.preNodeId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.nextNodeId != null) {
        if (struct.isSetNextNodeId()) {
          oprot.writeFieldBegin(NEXT_NODE_ID_FIELD_DESC);
          oprot.writeString(struct.nextNodeId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.type != null) {
        if (struct.isSetType()) {
          oprot.writeFieldBegin(TYPE_FIELD_DESC);
          oprot.writeString(struct.type);
          oprot.writeFieldEnd();
        }
      }
      if (struct.nodeLogic != null) {
        if (struct.isSetNodeLogic()) {
          oprot.writeFieldBegin(NODE_LOGIC_FIELD_DESC);
          oprot.writeString(struct.nodeLogic);
          oprot.writeFieldEnd();
        }
      }
      if (struct.runnerFlag != null) {
        if (struct.isSetRunnerFlag()) {
          oprot.writeFieldBegin(RUNNER_FLAG_FIELD_DESC);
          oprot.writeString(struct.runnerFlag);
          oprot.writeFieldEnd();
        }
      }
      if (struct.nextRunnerOrg != null) {
        if (struct.isSetNextRunnerOrg()) {
          oprot.writeFieldBegin(NEXT_RUNNER_ORG_FIELD_DESC);
          oprot.writeString(struct.nextRunnerOrg);
          oprot.writeFieldEnd();
        }
      }
      if (struct.status != null) {
        if (struct.isSetStatus()) {
          oprot.writeFieldBegin(STATUS_FIELD_DESC);
          oprot.writeString(struct.status);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetRunnerUserId()) {
        oprot.writeFieldBegin(RUNNER_USER_ID_FIELD_DESC);
        oprot.writeI64(struct.runnerUserId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetRunnerPostId()) {
        oprot.writeFieldBegin(RUNNER_POST_ID_FIELD_DESC);
        oprot.writeI64(struct.runnerPostId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetRunnerDepartId()) {
        oprot.writeFieldBegin(RUNNER_DEPART_ID_FIELD_DESC);
        oprot.writeI64(struct.runnerDepartId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetRunnerUsergroupId()) {
        oprot.writeFieldBegin(RUNNER_USERGROUP_ID_FIELD_DESC);
        oprot.writeI64(struct.runnerUsergroupId);
        oprot.writeFieldEnd();
      }
      if (struct.runnerOrgLevel != null) {
        if (struct.isSetRunnerOrgLevel()) {
          oprot.writeFieldBegin(RUNNER_ORG_LEVEL_FIELD_DESC);
          oprot.writeString(struct.runnerOrgLevel);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIsMultiselect()) {
        oprot.writeFieldBegin(IS_MULTISELECT_FIELD_DESC);
        oprot.writeBool(struct.isMultiselect);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIsOtherMan()) {
        oprot.writeFieldBegin(IS_OTHER_MAN_FIELD_DESC);
        oprot.writeBool(struct.isOtherMan);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIsAssignMan()) {
        oprot.writeFieldBegin(IS_ASSIGN_MAN_FIELD_DESC);
        oprot.writeBool(struct.isAssignMan);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIsRevoke()) {
        oprot.writeFieldBegin(IS_REVOKE_FIELD_DESC);
        oprot.writeBool(struct.isRevoke);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIsFallback()) {
        oprot.writeFieldBegin(IS_FALLBACK_FIELD_DESC);
        oprot.writeBool(struct.isFallback);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ProcessNodeVoTupleSchemeFactory implements SchemeFactory {
    public ProcessNodeVoTupleScheme getScheme() {
      return new ProcessNodeVoTupleScheme();
    }
  }

  private static class ProcessNodeVoTupleScheme extends TupleScheme<ProcessNodeVo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ProcessNodeVo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(1);
      }
      if (struct.isSetUpdateTime()) {
        optionals.set(2);
      }
      if (struct.isSetClientId()) {
        optionals.set(3);
      }
      if (struct.isSetProcessId()) {
        optionals.set(4);
      }
      if (struct.isSetNodeId()) {
        optionals.set(5);
      }
      if (struct.isSetName()) {
        optionals.set(6);
      }
      if (struct.isSetPreNodeId()) {
        optionals.set(7);
      }
      if (struct.isSetNextNodeId()) {
        optionals.set(8);
      }
      if (struct.isSetType()) {
        optionals.set(9);
      }
      if (struct.isSetNodeLogic()) {
        optionals.set(10);
      }
      if (struct.isSetRunnerFlag()) {
        optionals.set(11);
      }
      if (struct.isSetNextRunnerOrg()) {
        optionals.set(12);
      }
      if (struct.isSetStatus()) {
        optionals.set(13);
      }
      if (struct.isSetRunnerUserId()) {
        optionals.set(14);
      }
      if (struct.isSetRunnerPostId()) {
        optionals.set(15);
      }
      if (struct.isSetRunnerDepartId()) {
        optionals.set(16);
      }
      if (struct.isSetRunnerUsergroupId()) {
        optionals.set(17);
      }
      if (struct.isSetRunnerOrgLevel()) {
        optionals.set(18);
      }
      if (struct.isSetIsMultiselect()) {
        optionals.set(19);
      }
      if (struct.isSetIsOtherMan()) {
        optionals.set(20);
      }
      if (struct.isSetIsAssignMan()) {
        optionals.set(21);
      }
      if (struct.isSetIsRevoke()) {
        optionals.set(22);
      }
      if (struct.isSetIsFallback()) {
        optionals.set(23);
      }
      oprot.writeBitSet(optionals, 24);
      if (struct.isSetId()) {
        oprot.writeI64(struct.id);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeI64(struct.createTime);
      }
      if (struct.isSetUpdateTime()) {
        oprot.writeI64(struct.updateTime);
      }
      if (struct.isSetClientId()) {
        oprot.writeString(struct.clientId);
      }
      if (struct.isSetProcessId()) {
        oprot.writeString(struct.processId);
      }
      if (struct.isSetNodeId()) {
        oprot.writeString(struct.nodeId);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetPreNodeId()) {
        oprot.writeString(struct.preNodeId);
      }
      if (struct.isSetNextNodeId()) {
        oprot.writeString(struct.nextNodeId);
      }
      if (struct.isSetType()) {
        oprot.writeString(struct.type);
      }
      if (struct.isSetNodeLogic()) {
        oprot.writeString(struct.nodeLogic);
      }
      if (struct.isSetRunnerFlag()) {
        oprot.writeString(struct.runnerFlag);
      }
      if (struct.isSetNextRunnerOrg()) {
        oprot.writeString(struct.nextRunnerOrg);
      }
      if (struct.isSetStatus()) {
        oprot.writeString(struct.status);
      }
      if (struct.isSetRunnerUserId()) {
        oprot.writeI64(struct.runnerUserId);
      }
      if (struct.isSetRunnerPostId()) {
        oprot.writeI64(struct.runnerPostId);
      }
      if (struct.isSetRunnerDepartId()) {
        oprot.writeI64(struct.runnerDepartId);
      }
      if (struct.isSetRunnerUsergroupId()) {
        oprot.writeI64(struct.runnerUsergroupId);
      }
      if (struct.isSetRunnerOrgLevel()) {
        oprot.writeString(struct.runnerOrgLevel);
      }
      if (struct.isSetIsMultiselect()) {
        oprot.writeBool(struct.isMultiselect);
      }
      if (struct.isSetIsOtherMan()) {
        oprot.writeBool(struct.isOtherMan);
      }
      if (struct.isSetIsAssignMan()) {
        oprot.writeBool(struct.isAssignMan);
      }
      if (struct.isSetIsRevoke()) {
        oprot.writeBool(struct.isRevoke);
      }
      if (struct.isSetIsFallback()) {
        oprot.writeBool(struct.isFallback);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ProcessNodeVo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(24);
      if (incoming.get(0)) {
        struct.id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.createTime = iprot.readI64();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.updateTime = iprot.readI64();
        struct.setUpdateTimeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.clientId = iprot.readString();
        struct.setClientIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.processId = iprot.readString();
        struct.setProcessIdIsSet(true);
      }
      if (incoming.get(5)) {
        struct.nodeId = iprot.readString();
        struct.setNodeIdIsSet(true);
      }
      if (incoming.get(6)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(7)) {
        struct.preNodeId = iprot.readString();
        struct.setPreNodeIdIsSet(true);
      }
      if (incoming.get(8)) {
        struct.nextNodeId = iprot.readString();
        struct.setNextNodeIdIsSet(true);
      }
      if (incoming.get(9)) {
        struct.type = iprot.readString();
        struct.setTypeIsSet(true);
      }
      if (incoming.get(10)) {
        struct.nodeLogic = iprot.readString();
        struct.setNodeLogicIsSet(true);
      }
      if (incoming.get(11)) {
        struct.runnerFlag = iprot.readString();
        struct.setRunnerFlagIsSet(true);
      }
      if (incoming.get(12)) {
        struct.nextRunnerOrg = iprot.readString();
        struct.setNextRunnerOrgIsSet(true);
      }
      if (incoming.get(13)) {
        struct.status = iprot.readString();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(14)) {
        struct.runnerUserId = iprot.readI64();
        struct.setRunnerUserIdIsSet(true);
      }
      if (incoming.get(15)) {
        struct.runnerPostId = iprot.readI64();
        struct.setRunnerPostIdIsSet(true);
      }
      if (incoming.get(16)) {
        struct.runnerDepartId = iprot.readI64();
        struct.setRunnerDepartIdIsSet(true);
      }
      if (incoming.get(17)) {
        struct.runnerUsergroupId = iprot.readI64();
        struct.setRunnerUsergroupIdIsSet(true);
      }
      if (incoming.get(18)) {
        struct.runnerOrgLevel = iprot.readString();
        struct.setRunnerOrgLevelIsSet(true);
      }
      if (incoming.get(19)) {
        struct.isMultiselect = iprot.readBool();
        struct.setIsMultiselectIsSet(true);
      }
      if (incoming.get(20)) {
        struct.isOtherMan = iprot.readBool();
        struct.setIsOtherManIsSet(true);
      }
      if (incoming.get(21)) {
        struct.isAssignMan = iprot.readBool();
        struct.setIsAssignManIsSet(true);
      }
      if (incoming.get(22)) {
        struct.isRevoke = iprot.readBool();
        struct.setIsRevokeIsSet(true);
      }
      if (incoming.get(23)) {
        struct.isFallback = iprot.readBool();
        struct.setIsFallbackIsSet(true);
      }
    }
  }

}

