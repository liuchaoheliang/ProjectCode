/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.vo.refund;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 退款信息
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class RefundInfoVo implements org.apache.thrift.TBase<RefundInfoVo, RefundInfoVo._Fields>, java.io.Serializable, Cloneable, Comparable<RefundInfoVo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RefundInfoVo");

  private static final org.apache.thrift.protocol.TField REFUND_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("refundId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField ORDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("orderId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField REQUEST_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("requestTime", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField REFUND_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("refundStatus", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField REFUND_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("refundAmount", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField REFUND_POINTS_FIELD_DESC = new org.apache.thrift.protocol.TField("refundPoints", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField REASON_FIELD_DESC = new org.apache.thrift.protocol.TField("reason", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField SUB_ORDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("subOrderId", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField MERCHANT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("merchantId", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField MERCHANT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("merchantName", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField REFUND_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("refundTime", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField PRODUCT_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("productList", org.apache.thrift.protocol.TType.LIST, (short)12);
  private static final org.apache.thrift.protocol.TField PAY_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("payList", org.apache.thrift.protocol.TType.LIST, (short)13);
  private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField IS_VIP_REFUND_FIELD_DESC = new org.apache.thrift.protocol.TField("isVipRefund", org.apache.thrift.protocol.TType.STRING, (short)15);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new RefundInfoVoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new RefundInfoVoTupleSchemeFactory());
  }

  /**
   * 退款ID
   */
  public String refundId; // required
  /**
   * 原订单号
   */
  public String orderId; // required
  /**
   * 退款申请时间
   */
  public String requestTime; // required
  /**
   * 退款状态
   */
  public String refundStatus; // required
  /**
   * 退款金额
   */
  public double refundAmount; // required
  /**
   * 退还积分
   */
  public double refundPoints; // required
  /**
   * 退款原因
   */
  public String reason; // required
  /**
   * 原子订单号
   */
  public String subOrderId; // required
  /**
   * 商户ID
   */
  public String merchantId; // required
  /**
   * 商户名
   */
  public String merchantName; // required
  /**
   * 商户名
   */
  public String refundTime; // required
  /**
   * 退款商品列表
   */
  public List<RefundProductVo> productList; // required
  /**
   * 退款商品列表
   */
  public List<RefundPaymentVo> payList; // required
  /**
   * 银行端ID
   */
  public String clientId; // required
  /**
   * 是否是VIP资格的退款
   */
  public String isVipRefund; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 退款ID
     */
    REFUND_ID((short)1, "refundId"),
    /**
     * 原订单号
     */
    ORDER_ID((short)2, "orderId"),
    /**
     * 退款申请时间
     */
    REQUEST_TIME((short)3, "requestTime"),
    /**
     * 退款状态
     */
    REFUND_STATUS((short)4, "refundStatus"),
    /**
     * 退款金额
     */
    REFUND_AMOUNT((short)5, "refundAmount"),
    /**
     * 退还积分
     */
    REFUND_POINTS((short)6, "refundPoints"),
    /**
     * 退款原因
     */
    REASON((short)7, "reason"),
    /**
     * 原子订单号
     */
    SUB_ORDER_ID((short)8, "subOrderId"),
    /**
     * 商户ID
     */
    MERCHANT_ID((short)9, "merchantId"),
    /**
     * 商户名
     */
    MERCHANT_NAME((short)10, "merchantName"),
    /**
     * 商户名
     */
    REFUND_TIME((short)11, "refundTime"),
    /**
     * 退款商品列表
     */
    PRODUCT_LIST((short)12, "productList"),
    /**
     * 退款商品列表
     */
    PAY_LIST((short)13, "payList"),
    /**
     * 银行端ID
     */
    CLIENT_ID((short)14, "clientId"),
    /**
     * 是否是VIP资格的退款
     */
    IS_VIP_REFUND((short)15, "isVipRefund");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // REFUND_ID
          return REFUND_ID;
        case 2: // ORDER_ID
          return ORDER_ID;
        case 3: // REQUEST_TIME
          return REQUEST_TIME;
        case 4: // REFUND_STATUS
          return REFUND_STATUS;
        case 5: // REFUND_AMOUNT
          return REFUND_AMOUNT;
        case 6: // REFUND_POINTS
          return REFUND_POINTS;
        case 7: // REASON
          return REASON;
        case 8: // SUB_ORDER_ID
          return SUB_ORDER_ID;
        case 9: // MERCHANT_ID
          return MERCHANT_ID;
        case 10: // MERCHANT_NAME
          return MERCHANT_NAME;
        case 11: // REFUND_TIME
          return REFUND_TIME;
        case 12: // PRODUCT_LIST
          return PRODUCT_LIST;
        case 13: // PAY_LIST
          return PAY_LIST;
        case 14: // CLIENT_ID
          return CLIENT_ID;
        case 15: // IS_VIP_REFUND
          return IS_VIP_REFUND;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __REFUNDAMOUNT_ISSET_ID = 0;
  private static final int __REFUNDPOINTS_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.REFUND_ID, new org.apache.thrift.meta_data.FieldMetaData("refundId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORDER_ID, new org.apache.thrift.meta_data.FieldMetaData("orderId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REQUEST_TIME, new org.apache.thrift.meta_data.FieldMetaData("requestTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REFUND_STATUS, new org.apache.thrift.meta_data.FieldMetaData("refundStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REFUND_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("refundAmount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.REFUND_POINTS, new org.apache.thrift.meta_data.FieldMetaData("refundPoints", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.REASON, new org.apache.thrift.meta_data.FieldMetaData("reason", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SUB_ORDER_ID, new org.apache.thrift.meta_data.FieldMetaData("subOrderId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MERCHANT_ID, new org.apache.thrift.meta_data.FieldMetaData("merchantId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MERCHANT_NAME, new org.apache.thrift.meta_data.FieldMetaData("merchantName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REFUND_TIME, new org.apache.thrift.meta_data.FieldMetaData("refundTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRODUCT_LIST, new org.apache.thrift.meta_data.FieldMetaData("productList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RefundProductVo.class))));
    tmpMap.put(_Fields.PAY_LIST, new org.apache.thrift.meta_data.FieldMetaData("payList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RefundPaymentVo.class))));
    tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_VIP_REFUND, new org.apache.thrift.meta_data.FieldMetaData("isVipRefund", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RefundInfoVo.class, metaDataMap);
  }

  public RefundInfoVo() {
  }

  public RefundInfoVo(
    String refundId,
    String orderId,
    String requestTime,
    String refundStatus,
    double refundAmount,
    double refundPoints,
    String reason,
    String subOrderId,
    String merchantId,
    String merchantName,
    String refundTime,
    List<RefundProductVo> productList,
    List<RefundPaymentVo> payList,
    String clientId,
    String isVipRefund)
  {
    this();
    this.refundId = refundId;
    this.orderId = orderId;
    this.requestTime = requestTime;
    this.refundStatus = refundStatus;
    this.refundAmount = refundAmount;
    setRefundAmountIsSet(true);
    this.refundPoints = refundPoints;
    setRefundPointsIsSet(true);
    this.reason = reason;
    this.subOrderId = subOrderId;
    this.merchantId = merchantId;
    this.merchantName = merchantName;
    this.refundTime = refundTime;
    this.productList = productList;
    this.payList = payList;
    this.clientId = clientId;
    this.isVipRefund = isVipRefund;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RefundInfoVo(RefundInfoVo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetRefundId()) {
      this.refundId = other.refundId;
    }
    if (other.isSetOrderId()) {
      this.orderId = other.orderId;
    }
    if (other.isSetRequestTime()) {
      this.requestTime = other.requestTime;
    }
    if (other.isSetRefundStatus()) {
      this.refundStatus = other.refundStatus;
    }
    this.refundAmount = other.refundAmount;
    this.refundPoints = other.refundPoints;
    if (other.isSetReason()) {
      this.reason = other.reason;
    }
    if (other.isSetSubOrderId()) {
      this.subOrderId = other.subOrderId;
    }
    if (other.isSetMerchantId()) {
      this.merchantId = other.merchantId;
    }
    if (other.isSetMerchantName()) {
      this.merchantName = other.merchantName;
    }
    if (other.isSetRefundTime()) {
      this.refundTime = other.refundTime;
    }
    if (other.isSetProductList()) {
      List<RefundProductVo> __this__productList = new ArrayList<RefundProductVo>(other.productList.size());
      for (RefundProductVo other_element : other.productList) {
        __this__productList.add(new RefundProductVo(other_element));
      }
      this.productList = __this__productList;
    }
    if (other.isSetPayList()) {
      List<RefundPaymentVo> __this__payList = new ArrayList<RefundPaymentVo>(other.payList.size());
      for (RefundPaymentVo other_element : other.payList) {
        __this__payList.add(new RefundPaymentVo(other_element));
      }
      this.payList = __this__payList;
    }
    if (other.isSetClientId()) {
      this.clientId = other.clientId;
    }
    if (other.isSetIsVipRefund()) {
      this.isVipRefund = other.isVipRefund;
    }
  }

  public RefundInfoVo deepCopy() {
    return new RefundInfoVo(this);
  }

  @Override
  public void clear() {
    this.refundId = null;
    this.orderId = null;
    this.requestTime = null;
    this.refundStatus = null;
    setRefundAmountIsSet(false);
    this.refundAmount = 0.0;
    setRefundPointsIsSet(false);
    this.refundPoints = 0.0;
    this.reason = null;
    this.subOrderId = null;
    this.merchantId = null;
    this.merchantName = null;
    this.refundTime = null;
    this.productList = null;
    this.payList = null;
    this.clientId = null;
    this.isVipRefund = null;
  }

  /**
   * 退款ID
   */
  public String getRefundId() {
    return this.refundId;
  }

  /**
   * 退款ID
   */
  public RefundInfoVo setRefundId(String refundId) {
    this.refundId = refundId;
    return this;
  }

  public void unsetRefundId() {
    this.refundId = null;
  }

  /** Returns true if field refundId is set (has been assigned a value) and false otherwise */
  public boolean isSetRefundId() {
    return this.refundId != null;
  }

  public void setRefundIdIsSet(boolean value) {
    if (!value) {
      this.refundId = null;
    }
  }

  /**
   * 原订单号
   */
  public String getOrderId() {
    return this.orderId;
  }

  /**
   * 原订单号
   */
  public RefundInfoVo setOrderId(String orderId) {
    this.orderId = orderId;
    return this;
  }

  public void unsetOrderId() {
    this.orderId = null;
  }

  /** Returns true if field orderId is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderId() {
    return this.orderId != null;
  }

  public void setOrderIdIsSet(boolean value) {
    if (!value) {
      this.orderId = null;
    }
  }

  /**
   * 退款申请时间
   */
  public String getRequestTime() {
    return this.requestTime;
  }

  /**
   * 退款申请时间
   */
  public RefundInfoVo setRequestTime(String requestTime) {
    this.requestTime = requestTime;
    return this;
  }

  public void unsetRequestTime() {
    this.requestTime = null;
  }

  /** Returns true if field requestTime is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestTime() {
    return this.requestTime != null;
  }

  public void setRequestTimeIsSet(boolean value) {
    if (!value) {
      this.requestTime = null;
    }
  }

  /**
   * 退款状态
   */
  public String getRefundStatus() {
    return this.refundStatus;
  }

  /**
   * 退款状态
   */
  public RefundInfoVo setRefundStatus(String refundStatus) {
    this.refundStatus = refundStatus;
    return this;
  }

  public void unsetRefundStatus() {
    this.refundStatus = null;
  }

  /** Returns true if field refundStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetRefundStatus() {
    return this.refundStatus != null;
  }

  public void setRefundStatusIsSet(boolean value) {
    if (!value) {
      this.refundStatus = null;
    }
  }

  /**
   * 退款金额
   */
  public double getRefundAmount() {
    return this.refundAmount;
  }

  /**
   * 退款金额
   */
  public RefundInfoVo setRefundAmount(double refundAmount) {
    this.refundAmount = refundAmount;
    setRefundAmountIsSet(true);
    return this;
  }

  public void unsetRefundAmount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REFUNDAMOUNT_ISSET_ID);
  }

  /** Returns true if field refundAmount is set (has been assigned a value) and false otherwise */
  public boolean isSetRefundAmount() {
    return EncodingUtils.testBit(__isset_bitfield, __REFUNDAMOUNT_ISSET_ID);
  }

  public void setRefundAmountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REFUNDAMOUNT_ISSET_ID, value);
  }

  /**
   * 退还积分
   */
  public double getRefundPoints() {
    return this.refundPoints;
  }

  /**
   * 退还积分
   */
  public RefundInfoVo setRefundPoints(double refundPoints) {
    this.refundPoints = refundPoints;
    setRefundPointsIsSet(true);
    return this;
  }

  public void unsetRefundPoints() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REFUNDPOINTS_ISSET_ID);
  }

  /** Returns true if field refundPoints is set (has been assigned a value) and false otherwise */
  public boolean isSetRefundPoints() {
    return EncodingUtils.testBit(__isset_bitfield, __REFUNDPOINTS_ISSET_ID);
  }

  public void setRefundPointsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REFUNDPOINTS_ISSET_ID, value);
  }

  /**
   * 退款原因
   */
  public String getReason() {
    return this.reason;
  }

  /**
   * 退款原因
   */
  public RefundInfoVo setReason(String reason) {
    this.reason = reason;
    return this;
  }

  public void unsetReason() {
    this.reason = null;
  }

  /** Returns true if field reason is set (has been assigned a value) and false otherwise */
  public boolean isSetReason() {
    return this.reason != null;
  }

  public void setReasonIsSet(boolean value) {
    if (!value) {
      this.reason = null;
    }
  }

  /**
   * 原子订单号
   */
  public String getSubOrderId() {
    return this.subOrderId;
  }

  /**
   * 原子订单号
   */
  public RefundInfoVo setSubOrderId(String subOrderId) {
    this.subOrderId = subOrderId;
    return this;
  }

  public void unsetSubOrderId() {
    this.subOrderId = null;
  }

  /** Returns true if field subOrderId is set (has been assigned a value) and false otherwise */
  public boolean isSetSubOrderId() {
    return this.subOrderId != null;
  }

  public void setSubOrderIdIsSet(boolean value) {
    if (!value) {
      this.subOrderId = null;
    }
  }

  /**
   * 商户ID
   */
  public String getMerchantId() {
    return this.merchantId;
  }

  /**
   * 商户ID
   */
  public RefundInfoVo setMerchantId(String merchantId) {
    this.merchantId = merchantId;
    return this;
  }

  public void unsetMerchantId() {
    this.merchantId = null;
  }

  /** Returns true if field merchantId is set (has been assigned a value) and false otherwise */
  public boolean isSetMerchantId() {
    return this.merchantId != null;
  }

  public void setMerchantIdIsSet(boolean value) {
    if (!value) {
      this.merchantId = null;
    }
  }

  /**
   * 商户名
   */
  public String getMerchantName() {
    return this.merchantName;
  }

  /**
   * 商户名
   */
  public RefundInfoVo setMerchantName(String merchantName) {
    this.merchantName = merchantName;
    return this;
  }

  public void unsetMerchantName() {
    this.merchantName = null;
  }

  /** Returns true if field merchantName is set (has been assigned a value) and false otherwise */
  public boolean isSetMerchantName() {
    return this.merchantName != null;
  }

  public void setMerchantNameIsSet(boolean value) {
    if (!value) {
      this.merchantName = null;
    }
  }

  /**
   * 商户名
   */
  public String getRefundTime() {
    return this.refundTime;
  }

  /**
   * 商户名
   */
  public RefundInfoVo setRefundTime(String refundTime) {
    this.refundTime = refundTime;
    return this;
  }

  public void unsetRefundTime() {
    this.refundTime = null;
  }

  /** Returns true if field refundTime is set (has been assigned a value) and false otherwise */
  public boolean isSetRefundTime() {
    return this.refundTime != null;
  }

  public void setRefundTimeIsSet(boolean value) {
    if (!value) {
      this.refundTime = null;
    }
  }

  public int getProductListSize() {
    return (this.productList == null) ? 0 : this.productList.size();
  }

  public java.util.Iterator<RefundProductVo> getProductListIterator() {
    return (this.productList == null) ? null : this.productList.iterator();
  }

  public void addToProductList(RefundProductVo elem) {
    if (this.productList == null) {
      this.productList = new ArrayList<RefundProductVo>();
    }
    this.productList.add(elem);
  }

  /**
   * 退款商品列表
   */
  public List<RefundProductVo> getProductList() {
    return this.productList;
  }

  /**
   * 退款商品列表
   */
  public RefundInfoVo setProductList(List<RefundProductVo> productList) {
    this.productList = productList;
    return this;
  }

  public void unsetProductList() {
    this.productList = null;
  }

  /** Returns true if field productList is set (has been assigned a value) and false otherwise */
  public boolean isSetProductList() {
    return this.productList != null;
  }

  public void setProductListIsSet(boolean value) {
    if (!value) {
      this.productList = null;
    }
  }

  public int getPayListSize() {
    return (this.payList == null) ? 0 : this.payList.size();
  }

  public java.util.Iterator<RefundPaymentVo> getPayListIterator() {
    return (this.payList == null) ? null : this.payList.iterator();
  }

  public void addToPayList(RefundPaymentVo elem) {
    if (this.payList == null) {
      this.payList = new ArrayList<RefundPaymentVo>();
    }
    this.payList.add(elem);
  }

  /**
   * 退款商品列表
   */
  public List<RefundPaymentVo> getPayList() {
    return this.payList;
  }

  /**
   * 退款商品列表
   */
  public RefundInfoVo setPayList(List<RefundPaymentVo> payList) {
    this.payList = payList;
    return this;
  }

  public void unsetPayList() {
    this.payList = null;
  }

  /** Returns true if field payList is set (has been assigned a value) and false otherwise */
  public boolean isSetPayList() {
    return this.payList != null;
  }

  public void setPayListIsSet(boolean value) {
    if (!value) {
      this.payList = null;
    }
  }

  /**
   * 银行端ID
   */
  public String getClientId() {
    return this.clientId;
  }

  /**
   * 银行端ID
   */
  public RefundInfoVo setClientId(String clientId) {
    this.clientId = clientId;
    return this;
  }

  public void unsetClientId() {
    this.clientId = null;
  }

  /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
  public boolean isSetClientId() {
    return this.clientId != null;
  }

  public void setClientIdIsSet(boolean value) {
    if (!value) {
      this.clientId = null;
    }
  }

  /**
   * 是否是VIP资格的退款
   */
  public String getIsVipRefund() {
    return this.isVipRefund;
  }

  /**
   * 是否是VIP资格的退款
   */
  public RefundInfoVo setIsVipRefund(String isVipRefund) {
    this.isVipRefund = isVipRefund;
    return this;
  }

  public void unsetIsVipRefund() {
    this.isVipRefund = null;
  }

  /** Returns true if field isVipRefund is set (has been assigned a value) and false otherwise */
  public boolean isSetIsVipRefund() {
    return this.isVipRefund != null;
  }

  public void setIsVipRefundIsSet(boolean value) {
    if (!value) {
      this.isVipRefund = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case REFUND_ID:
      if (value == null) {
        unsetRefundId();
      } else {
        setRefundId((String)value);
      }
      break;

    case ORDER_ID:
      if (value == null) {
        unsetOrderId();
      } else {
        setOrderId((String)value);
      }
      break;

    case REQUEST_TIME:
      if (value == null) {
        unsetRequestTime();
      } else {
        setRequestTime((String)value);
      }
      break;

    case REFUND_STATUS:
      if (value == null) {
        unsetRefundStatus();
      } else {
        setRefundStatus((String)value);
      }
      break;

    case REFUND_AMOUNT:
      if (value == null) {
        unsetRefundAmount();
      } else {
        setRefundAmount((Double)value);
      }
      break;

    case REFUND_POINTS:
      if (value == null) {
        unsetRefundPoints();
      } else {
        setRefundPoints((Double)value);
      }
      break;

    case REASON:
      if (value == null) {
        unsetReason();
      } else {
        setReason((String)value);
      }
      break;

    case SUB_ORDER_ID:
      if (value == null) {
        unsetSubOrderId();
      } else {
        setSubOrderId((String)value);
      }
      break;

    case MERCHANT_ID:
      if (value == null) {
        unsetMerchantId();
      } else {
        setMerchantId((String)value);
      }
      break;

    case MERCHANT_NAME:
      if (value == null) {
        unsetMerchantName();
      } else {
        setMerchantName((String)value);
      }
      break;

    case REFUND_TIME:
      if (value == null) {
        unsetRefundTime();
      } else {
        setRefundTime((String)value);
      }
      break;

    case PRODUCT_LIST:
      if (value == null) {
        unsetProductList();
      } else {
        setProductList((List<RefundProductVo>)value);
      }
      break;

    case PAY_LIST:
      if (value == null) {
        unsetPayList();
      } else {
        setPayList((List<RefundPaymentVo>)value);
      }
      break;

    case CLIENT_ID:
      if (value == null) {
        unsetClientId();
      } else {
        setClientId((String)value);
      }
      break;

    case IS_VIP_REFUND:
      if (value == null) {
        unsetIsVipRefund();
      } else {
        setIsVipRefund((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case REFUND_ID:
      return getRefundId();

    case ORDER_ID:
      return getOrderId();

    case REQUEST_TIME:
      return getRequestTime();

    case REFUND_STATUS:
      return getRefundStatus();

    case REFUND_AMOUNT:
      return Double.valueOf(getRefundAmount());

    case REFUND_POINTS:
      return Double.valueOf(getRefundPoints());

    case REASON:
      return getReason();

    case SUB_ORDER_ID:
      return getSubOrderId();

    case MERCHANT_ID:
      return getMerchantId();

    case MERCHANT_NAME:
      return getMerchantName();

    case REFUND_TIME:
      return getRefundTime();

    case PRODUCT_LIST:
      return getProductList();

    case PAY_LIST:
      return getPayList();

    case CLIENT_ID:
      return getClientId();

    case IS_VIP_REFUND:
      return getIsVipRefund();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case REFUND_ID:
      return isSetRefundId();
    case ORDER_ID:
      return isSetOrderId();
    case REQUEST_TIME:
      return isSetRequestTime();
    case REFUND_STATUS:
      return isSetRefundStatus();
    case REFUND_AMOUNT:
      return isSetRefundAmount();
    case REFUND_POINTS:
      return isSetRefundPoints();
    case REASON:
      return isSetReason();
    case SUB_ORDER_ID:
      return isSetSubOrderId();
    case MERCHANT_ID:
      return isSetMerchantId();
    case MERCHANT_NAME:
      return isSetMerchantName();
    case REFUND_TIME:
      return isSetRefundTime();
    case PRODUCT_LIST:
      return isSetProductList();
    case PAY_LIST:
      return isSetPayList();
    case CLIENT_ID:
      return isSetClientId();
    case IS_VIP_REFUND:
      return isSetIsVipRefund();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RefundInfoVo)
      return this.equals((RefundInfoVo)that);
    return false;
  }

  public boolean equals(RefundInfoVo that) {
    if (that == null)
      return false;

    boolean this_present_refundId = true && this.isSetRefundId();
    boolean that_present_refundId = true && that.isSetRefundId();
    if (this_present_refundId || that_present_refundId) {
      if (!(this_present_refundId && that_present_refundId))
        return false;
      if (!this.refundId.equals(that.refundId))
        return false;
    }

    boolean this_present_orderId = true && this.isSetOrderId();
    boolean that_present_orderId = true && that.isSetOrderId();
    if (this_present_orderId || that_present_orderId) {
      if (!(this_present_orderId && that_present_orderId))
        return false;
      if (!this.orderId.equals(that.orderId))
        return false;
    }

    boolean this_present_requestTime = true && this.isSetRequestTime();
    boolean that_present_requestTime = true && that.isSetRequestTime();
    if (this_present_requestTime || that_present_requestTime) {
      if (!(this_present_requestTime && that_present_requestTime))
        return false;
      if (!this.requestTime.equals(that.requestTime))
        return false;
    }

    boolean this_present_refundStatus = true && this.isSetRefundStatus();
    boolean that_present_refundStatus = true && that.isSetRefundStatus();
    if (this_present_refundStatus || that_present_refundStatus) {
      if (!(this_present_refundStatus && that_present_refundStatus))
        return false;
      if (!this.refundStatus.equals(that.refundStatus))
        return false;
    }

    boolean this_present_refundAmount = true;
    boolean that_present_refundAmount = true;
    if (this_present_refundAmount || that_present_refundAmount) {
      if (!(this_present_refundAmount && that_present_refundAmount))
        return false;
      if (this.refundAmount != that.refundAmount)
        return false;
    }

    boolean this_present_refundPoints = true;
    boolean that_present_refundPoints = true;
    if (this_present_refundPoints || that_present_refundPoints) {
      if (!(this_present_refundPoints && that_present_refundPoints))
        return false;
      if (this.refundPoints != that.refundPoints)
        return false;
    }

    boolean this_present_reason = true && this.isSetReason();
    boolean that_present_reason = true && that.isSetReason();
    if (this_present_reason || that_present_reason) {
      if (!(this_present_reason && that_present_reason))
        return false;
      if (!this.reason.equals(that.reason))
        return false;
    }

    boolean this_present_subOrderId = true && this.isSetSubOrderId();
    boolean that_present_subOrderId = true && that.isSetSubOrderId();
    if (this_present_subOrderId || that_present_subOrderId) {
      if (!(this_present_subOrderId && that_present_subOrderId))
        return false;
      if (!this.subOrderId.equals(that.subOrderId))
        return false;
    }

    boolean this_present_merchantId = true && this.isSetMerchantId();
    boolean that_present_merchantId = true && that.isSetMerchantId();
    if (this_present_merchantId || that_present_merchantId) {
      if (!(this_present_merchantId && that_present_merchantId))
        return false;
      if (!this.merchantId.equals(that.merchantId))
        return false;
    }

    boolean this_present_merchantName = true && this.isSetMerchantName();
    boolean that_present_merchantName = true && that.isSetMerchantName();
    if (this_present_merchantName || that_present_merchantName) {
      if (!(this_present_merchantName && that_present_merchantName))
        return false;
      if (!this.merchantName.equals(that.merchantName))
        return false;
    }

    boolean this_present_refundTime = true && this.isSetRefundTime();
    boolean that_present_refundTime = true && that.isSetRefundTime();
    if (this_present_refundTime || that_present_refundTime) {
      if (!(this_present_refundTime && that_present_refundTime))
        return false;
      if (!this.refundTime.equals(that.refundTime))
        return false;
    }

    boolean this_present_productList = true && this.isSetProductList();
    boolean that_present_productList = true && that.isSetProductList();
    if (this_present_productList || that_present_productList) {
      if (!(this_present_productList && that_present_productList))
        return false;
      if (!this.productList.equals(that.productList))
        return false;
    }

    boolean this_present_payList = true && this.isSetPayList();
    boolean that_present_payList = true && that.isSetPayList();
    if (this_present_payList || that_present_payList) {
      if (!(this_present_payList && that_present_payList))
        return false;
      if (!this.payList.equals(that.payList))
        return false;
    }

    boolean this_present_clientId = true && this.isSetClientId();
    boolean that_present_clientId = true && that.isSetClientId();
    if (this_present_clientId || that_present_clientId) {
      if (!(this_present_clientId && that_present_clientId))
        return false;
      if (!this.clientId.equals(that.clientId))
        return false;
    }

    boolean this_present_isVipRefund = true && this.isSetIsVipRefund();
    boolean that_present_isVipRefund = true && that.isSetIsVipRefund();
    if (this_present_isVipRefund || that_present_isVipRefund) {
      if (!(this_present_isVipRefund && that_present_isVipRefund))
        return false;
      if (!this.isVipRefund.equals(that.isVipRefund))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_refundId = true && (isSetRefundId());
    list.add(present_refundId);
    if (present_refundId)
      list.add(refundId);

    boolean present_orderId = true && (isSetOrderId());
    list.add(present_orderId);
    if (present_orderId)
      list.add(orderId);

    boolean present_requestTime = true && (isSetRequestTime());
    list.add(present_requestTime);
    if (present_requestTime)
      list.add(requestTime);

    boolean present_refundStatus = true && (isSetRefundStatus());
    list.add(present_refundStatus);
    if (present_refundStatus)
      list.add(refundStatus);

    boolean present_refundAmount = true;
    list.add(present_refundAmount);
    if (present_refundAmount)
      list.add(refundAmount);

    boolean present_refundPoints = true;
    list.add(present_refundPoints);
    if (present_refundPoints)
      list.add(refundPoints);

    boolean present_reason = true && (isSetReason());
    list.add(present_reason);
    if (present_reason)
      list.add(reason);

    boolean present_subOrderId = true && (isSetSubOrderId());
    list.add(present_subOrderId);
    if (present_subOrderId)
      list.add(subOrderId);

    boolean present_merchantId = true && (isSetMerchantId());
    list.add(present_merchantId);
    if (present_merchantId)
      list.add(merchantId);

    boolean present_merchantName = true && (isSetMerchantName());
    list.add(present_merchantName);
    if (present_merchantName)
      list.add(merchantName);

    boolean present_refundTime = true && (isSetRefundTime());
    list.add(present_refundTime);
    if (present_refundTime)
      list.add(refundTime);

    boolean present_productList = true && (isSetProductList());
    list.add(present_productList);
    if (present_productList)
      list.add(productList);

    boolean present_payList = true && (isSetPayList());
    list.add(present_payList);
    if (present_payList)
      list.add(payList);

    boolean present_clientId = true && (isSetClientId());
    list.add(present_clientId);
    if (present_clientId)
      list.add(clientId);

    boolean present_isVipRefund = true && (isSetIsVipRefund());
    list.add(present_isVipRefund);
    if (present_isVipRefund)
      list.add(isVipRefund);

    return list.hashCode();
  }

  @Override
  public int compareTo(RefundInfoVo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetRefundId()).compareTo(other.isSetRefundId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRefundId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refundId, other.refundId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderId()).compareTo(other.isSetOrderId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderId, other.orderId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequestTime()).compareTo(other.isSetRequestTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestTime, other.requestTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRefundStatus()).compareTo(other.isSetRefundStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRefundStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refundStatus, other.refundStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRefundAmount()).compareTo(other.isSetRefundAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRefundAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refundAmount, other.refundAmount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRefundPoints()).compareTo(other.isSetRefundPoints());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRefundPoints()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refundPoints, other.refundPoints);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReason()).compareTo(other.isSetReason());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReason()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reason, other.reason);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubOrderId()).compareTo(other.isSetSubOrderId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubOrderId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subOrderId, other.subOrderId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMerchantId()).compareTo(other.isSetMerchantId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMerchantId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchantId, other.merchantId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMerchantName()).compareTo(other.isSetMerchantName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMerchantName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchantName, other.merchantName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRefundTime()).compareTo(other.isSetRefundTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRefundTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refundTime, other.refundTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductList()).compareTo(other.isSetProductList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productList, other.productList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPayList()).compareTo(other.isSetPayList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPayList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.payList, other.payList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClientId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsVipRefund()).compareTo(other.isSetIsVipRefund());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsVipRefund()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isVipRefund, other.isVipRefund);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("RefundInfoVo(");
    boolean first = true;

    sb.append("refundId:");
    if (this.refundId == null) {
      sb.append("null");
    } else {
      sb.append(this.refundId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("orderId:");
    if (this.orderId == null) {
      sb.append("null");
    } else {
      sb.append(this.orderId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("requestTime:");
    if (this.requestTime == null) {
      sb.append("null");
    } else {
      sb.append(this.requestTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("refundStatus:");
    if (this.refundStatus == null) {
      sb.append("null");
    } else {
      sb.append(this.refundStatus);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("refundAmount:");
    sb.append(this.refundAmount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("refundPoints:");
    sb.append(this.refundPoints);
    first = false;
    if (!first) sb.append(", ");
    sb.append("reason:");
    if (this.reason == null) {
      sb.append("null");
    } else {
      sb.append(this.reason);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("subOrderId:");
    if (this.subOrderId == null) {
      sb.append("null");
    } else {
      sb.append(this.subOrderId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("merchantId:");
    if (this.merchantId == null) {
      sb.append("null");
    } else {
      sb.append(this.merchantId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("merchantName:");
    if (this.merchantName == null) {
      sb.append("null");
    } else {
      sb.append(this.merchantName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("refundTime:");
    if (this.refundTime == null) {
      sb.append("null");
    } else {
      sb.append(this.refundTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("productList:");
    if (this.productList == null) {
      sb.append("null");
    } else {
      sb.append(this.productList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("payList:");
    if (this.payList == null) {
      sb.append("null");
    } else {
      sb.append(this.payList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("clientId:");
    if (this.clientId == null) {
      sb.append("null");
    } else {
      sb.append(this.clientId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isVipRefund:");
    if (this.isVipRefund == null) {
      sb.append("null");
    } else {
      sb.append(this.isVipRefund);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RefundInfoVoStandardSchemeFactory implements SchemeFactory {
    public RefundInfoVoStandardScheme getScheme() {
      return new RefundInfoVoStandardScheme();
    }
  }

  private static class RefundInfoVoStandardScheme extends StandardScheme<RefundInfoVo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RefundInfoVo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // REFUND_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.refundId = iprot.readString();
              struct.setRefundIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ORDER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orderId = iprot.readString();
              struct.setOrderIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // REQUEST_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.requestTime = iprot.readString();
              struct.setRequestTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // REFUND_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.refundStatus = iprot.readString();
              struct.setRefundStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // REFUND_AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.refundAmount = iprot.readDouble();
              struct.setRefundAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // REFUND_POINTS
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.refundPoints = iprot.readDouble();
              struct.setRefundPointsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // REASON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.reason = iprot.readString();
              struct.setReasonIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // SUB_ORDER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.subOrderId = iprot.readString();
              struct.setSubOrderIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // MERCHANT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.merchantId = iprot.readString();
              struct.setMerchantIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // MERCHANT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.merchantName = iprot.readString();
              struct.setMerchantNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // REFUND_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.refundTime = iprot.readString();
              struct.setRefundTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // PRODUCT_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                struct.productList = new ArrayList<RefundProductVo>(_list8.size);
                RefundProductVo _elem9;
                for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                {
                  _elem9 = new RefundProductVo();
                  _elem9.read(iprot);
                  struct.productList.add(_elem9);
                }
                iprot.readListEnd();
              }
              struct.setProductListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // PAY_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list11 = iprot.readListBegin();
                struct.payList = new ArrayList<RefundPaymentVo>(_list11.size);
                RefundPaymentVo _elem12;
                for (int _i13 = 0; _i13 < _list11.size; ++_i13)
                {
                  _elem12 = new RefundPaymentVo();
                  _elem12.read(iprot);
                  struct.payList.add(_elem12);
                }
                iprot.readListEnd();
              }
              struct.setPayListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // CLIENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clientId = iprot.readString();
              struct.setClientIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // IS_VIP_REFUND
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.isVipRefund = iprot.readString();
              struct.setIsVipRefundIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RefundInfoVo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.refundId != null) {
        oprot.writeFieldBegin(REFUND_ID_FIELD_DESC);
        oprot.writeString(struct.refundId);
        oprot.writeFieldEnd();
      }
      if (struct.orderId != null) {
        oprot.writeFieldBegin(ORDER_ID_FIELD_DESC);
        oprot.writeString(struct.orderId);
        oprot.writeFieldEnd();
      }
      if (struct.requestTime != null) {
        oprot.writeFieldBegin(REQUEST_TIME_FIELD_DESC);
        oprot.writeString(struct.requestTime);
        oprot.writeFieldEnd();
      }
      if (struct.refundStatus != null) {
        oprot.writeFieldBegin(REFUND_STATUS_FIELD_DESC);
        oprot.writeString(struct.refundStatus);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(REFUND_AMOUNT_FIELD_DESC);
      oprot.writeDouble(struct.refundAmount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REFUND_POINTS_FIELD_DESC);
      oprot.writeDouble(struct.refundPoints);
      oprot.writeFieldEnd();
      if (struct.reason != null) {
        oprot.writeFieldBegin(REASON_FIELD_DESC);
        oprot.writeString(struct.reason);
        oprot.writeFieldEnd();
      }
      if (struct.subOrderId != null) {
        oprot.writeFieldBegin(SUB_ORDER_ID_FIELD_DESC);
        oprot.writeString(struct.subOrderId);
        oprot.writeFieldEnd();
      }
      if (struct.merchantId != null) {
        oprot.writeFieldBegin(MERCHANT_ID_FIELD_DESC);
        oprot.writeString(struct.merchantId);
        oprot.writeFieldEnd();
      }
      if (struct.merchantName != null) {
        oprot.writeFieldBegin(MERCHANT_NAME_FIELD_DESC);
        oprot.writeString(struct.merchantName);
        oprot.writeFieldEnd();
      }
      if (struct.refundTime != null) {
        oprot.writeFieldBegin(REFUND_TIME_FIELD_DESC);
        oprot.writeString(struct.refundTime);
        oprot.writeFieldEnd();
      }
      if (struct.productList != null) {
        oprot.writeFieldBegin(PRODUCT_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.productList.size()));
          for (RefundProductVo _iter14 : struct.productList)
          {
            _iter14.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.payList != null) {
        oprot.writeFieldBegin(PAY_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.payList.size()));
          for (RefundPaymentVo _iter15 : struct.payList)
          {
            _iter15.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.clientId != null) {
        oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
        oprot.writeString(struct.clientId);
        oprot.writeFieldEnd();
      }
      if (struct.isVipRefund != null) {
        oprot.writeFieldBegin(IS_VIP_REFUND_FIELD_DESC);
        oprot.writeString(struct.isVipRefund);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RefundInfoVoTupleSchemeFactory implements SchemeFactory {
    public RefundInfoVoTupleScheme getScheme() {
      return new RefundInfoVoTupleScheme();
    }
  }

  private static class RefundInfoVoTupleScheme extends TupleScheme<RefundInfoVo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RefundInfoVo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetRefundId()) {
        optionals.set(0);
      }
      if (struct.isSetOrderId()) {
        optionals.set(1);
      }
      if (struct.isSetRequestTime()) {
        optionals.set(2);
      }
      if (struct.isSetRefundStatus()) {
        optionals.set(3);
      }
      if (struct.isSetRefundAmount()) {
        optionals.set(4);
      }
      if (struct.isSetRefundPoints()) {
        optionals.set(5);
      }
      if (struct.isSetReason()) {
        optionals.set(6);
      }
      if (struct.isSetSubOrderId()) {
        optionals.set(7);
      }
      if (struct.isSetMerchantId()) {
        optionals.set(8);
      }
      if (struct.isSetMerchantName()) {
        optionals.set(9);
      }
      if (struct.isSetRefundTime()) {
        optionals.set(10);
      }
      if (struct.isSetProductList()) {
        optionals.set(11);
      }
      if (struct.isSetPayList()) {
        optionals.set(12);
      }
      if (struct.isSetClientId()) {
        optionals.set(13);
      }
      if (struct.isSetIsVipRefund()) {
        optionals.set(14);
      }
      oprot.writeBitSet(optionals, 15);
      if (struct.isSetRefundId()) {
        oprot.writeString(struct.refundId);
      }
      if (struct.isSetOrderId()) {
        oprot.writeString(struct.orderId);
      }
      if (struct.isSetRequestTime()) {
        oprot.writeString(struct.requestTime);
      }
      if (struct.isSetRefundStatus()) {
        oprot.writeString(struct.refundStatus);
      }
      if (struct.isSetRefundAmount()) {
        oprot.writeDouble(struct.refundAmount);
      }
      if (struct.isSetRefundPoints()) {
        oprot.writeDouble(struct.refundPoints);
      }
      if (struct.isSetReason()) {
        oprot.writeString(struct.reason);
      }
      if (struct.isSetSubOrderId()) {
        oprot.writeString(struct.subOrderId);
      }
      if (struct.isSetMerchantId()) {
        oprot.writeString(struct.merchantId);
      }
      if (struct.isSetMerchantName()) {
        oprot.writeString(struct.merchantName);
      }
      if (struct.isSetRefundTime()) {
        oprot.writeString(struct.refundTime);
      }
      if (struct.isSetProductList()) {
        {
          oprot.writeI32(struct.productList.size());
          for (RefundProductVo _iter16 : struct.productList)
          {
            _iter16.write(oprot);
          }
        }
      }
      if (struct.isSetPayList()) {
        {
          oprot.writeI32(struct.payList.size());
          for (RefundPaymentVo _iter17 : struct.payList)
          {
            _iter17.write(oprot);
          }
        }
      }
      if (struct.isSetClientId()) {
        oprot.writeString(struct.clientId);
      }
      if (struct.isSetIsVipRefund()) {
        oprot.writeString(struct.isVipRefund);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RefundInfoVo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(15);
      if (incoming.get(0)) {
        struct.refundId = iprot.readString();
        struct.setRefundIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.orderId = iprot.readString();
        struct.setOrderIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.requestTime = iprot.readString();
        struct.setRequestTimeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.refundStatus = iprot.readString();
        struct.setRefundStatusIsSet(true);
      }
      if (incoming.get(4)) {
        struct.refundAmount = iprot.readDouble();
        struct.setRefundAmountIsSet(true);
      }
      if (incoming.get(5)) {
        struct.refundPoints = iprot.readDouble();
        struct.setRefundPointsIsSet(true);
      }
      if (incoming.get(6)) {
        struct.reason = iprot.readString();
        struct.setReasonIsSet(true);
      }
      if (incoming.get(7)) {
        struct.subOrderId = iprot.readString();
        struct.setSubOrderIdIsSet(true);
      }
      if (incoming.get(8)) {
        struct.merchantId = iprot.readString();
        struct.setMerchantIdIsSet(true);
      }
      if (incoming.get(9)) {
        struct.merchantName = iprot.readString();
        struct.setMerchantNameIsSet(true);
      }
      if (incoming.get(10)) {
        struct.refundTime = iprot.readString();
        struct.setRefundTimeIsSet(true);
      }
      if (incoming.get(11)) {
        {
          org.apache.thrift.protocol.TList _list18 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.productList = new ArrayList<RefundProductVo>(_list18.size);
          RefundProductVo _elem19;
          for (int _i20 = 0; _i20 < _list18.size; ++_i20)
          {
            _elem19 = new RefundProductVo();
            _elem19.read(iprot);
            struct.productList.add(_elem19);
          }
        }
        struct.setProductListIsSet(true);
      }
      if (incoming.get(12)) {
        {
          org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.payList = new ArrayList<RefundPaymentVo>(_list21.size);
          RefundPaymentVo _elem22;
          for (int _i23 = 0; _i23 < _list21.size; ++_i23)
          {
            _elem22 = new RefundPaymentVo();
            _elem22.read(iprot);
            struct.payList.add(_elem22);
          }
        }
        struct.setPayListIsSet(true);
      }
      if (incoming.get(13)) {
        struct.clientId = iprot.readString();
        struct.setClientIdIsSet(true);
      }
      if (incoming.get(14)) {
        struct.isVipRefund = iprot.readString();
        struct.setIsVipRefundIsSet(true);
      }
    }
  }

}

