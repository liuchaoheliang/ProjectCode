/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class ProductCategoryService {

  /**
   * ProductCategoryService
   */
  public interface Iface extends com.froad.thrift.monitor.service.BizMonitorService.Iface {

    /**
     * 增加 ProductCategory
     * @param OriginVo
     * @param ProductCategoryVo
     * @return AddProductCategoryVoRes
     * 
     * @param originVo
     * @param productCategoryVo
     */
    public com.froad.thrift.vo.AddProductCategoryVoRes addProductCategory(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.ProductCategoryVo productCategoryVo) throws org.apache.thrift.TException;

    /**
     * 删除 ProductCategory
     * @param OriginVo
     * @param ProductCategoryVo
     * @return ResultVo
     * 
     * @param originVo
     * @param productCategoryVo
     */
    public com.froad.thrift.vo.ResultVo deleteProductCategory(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.ProductCategoryVo productCategoryVo) throws org.apache.thrift.TException;

    /**
     * 修改 ProductCategory
     * @param OriginVo
     * @param ProductCategoryVo
     * @return ResultVo
     * 
     * @param originVo
     * @param productCategoryVo
     */
    public com.froad.thrift.vo.ResultVo updateProductCategory(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.ProductCategoryVo productCategoryVo) throws org.apache.thrift.TException;

    /**
     * 查询 ProductCategory
     * @param productCategory
     * @return ProductCategoryVo
     * 
     * @param productCategoryVo
     */
    public com.froad.thrift.vo.ProductCategoryVo getProductCategoryById(com.froad.thrift.vo.ProductCategoryVo productCategoryVo) throws org.apache.thrift.TException;

    /**
     * 同一个客户端同一个路径下面是否已经存在ProductCategory
     * @param productCategory
     * @return boolean
     * 
     * @param productCategoryVo
     */
    public boolean isProductCategoryExist(com.froad.thrift.vo.ProductCategoryVo productCategoryVo) throws org.apache.thrift.TException;

    /**
     * 分页查询 ProductCategory
     * @param productCategoryVo
     * @param pageVo
     * @return ProductCategoryPageVo
     * 
     * @param productCategoryVo
     * @param pageVo
     */
    public com.froad.thrift.vo.ProductCategoryPageVo findCategorysByPage(com.froad.thrift.vo.ProductCategoryVo productCategoryVo, com.froad.thrift.vo.PageVo pageVo) throws org.apache.thrift.TException;

    /**
     * 分页查询 ProductCategory 特惠商品分类首页商品分类查询-H5用户端
     * @param productCategoryVo
     * @param pageVo
     * @return ProductCategoryPageVo
     * 
     * @param productCategoryVo
     * @param pageVo
     */
    public com.froad.thrift.vo.ProductCategoryPageVo queryProductCategorys(com.froad.thrift.vo.ProductCategoryVo productCategoryVo, com.froad.thrift.vo.PageVo pageVo) throws org.apache.thrift.TException;

    /**
     * 查询商品分类列表
     * @param clientId
     * @return list<ProductCategoryVo>
     * 
     * @param clientId
     */
    public List<com.froad.thrift.vo.ProductCategoryVo> findCategorys(String clientId) throws org.apache.thrift.TException;

    /**
     * 批量增加 ProductCategory
     * @param list<ProductCategoryVo>
     * @return List<AddProductCategoryVoRes>
     * 
     * @param originVo
     * @param productCategoryVos
     */
    public List<com.froad.thrift.vo.AddProductCategoryVoRes> addProductCategoryBatch(com.froad.thrift.vo.OriginVo originVo, List<com.froad.thrift.vo.ProductCategoryVo> productCategoryVos) throws org.apache.thrift.TException;

    /**
     * 查询商品分类--特惠商品分类首页商品分类查询-H5用户端
     * @param clientId 客户端ID
     * @param parentId 商品分类ID
     * @param areaId 地区ID
     * @return list<ProductCategoryVo>
     * 
     * @param clientId
     * @param parentId
     * @param areaId
     */
    public List<com.froad.thrift.vo.ProductCategoryVo> queryH5ProductCategorys(String clientId, long parentId, long areaId) throws org.apache.thrift.TException;

    /**
     * 分级查询商品分类--新加特惠商品分类商户管理平台用到
     * @param clientId 客户端ID
     * @param parentId 商品分类ID
     * @return list<ProductCategoryVo>
     * 
     * @param clientId
     * @param parentId
     */
    public List<com.froad.thrift.vo.ProductCategoryVo> queryManageProductCategorys(String clientId, long parentId) throws org.apache.thrift.TException;

    /**
     * H5精品商城商品分类查询
     * @param clientId 客户端ID
     * @param parentId 商品分类ID
     * @return list<ProductCategoryVo>
     * 
     * @param clientId
     * @param parentId
     */
    public List<com.froad.thrift.vo.ProductCategoryVo> queryBoutiqueGoodsCategorys(String clientId, long parentId) throws org.apache.thrift.TException;

    /**
     * H5类目推荐的商品分类查询
     * @param clientId 客户端ID
     * @param isMall 是否是精品商城的商品分类
     * @return list<ProductCategoryVo>
     * 
     * @param clientId
     * @param isMall
     */
    public List<com.froad.thrift.vo.ProductCategoryVo> queryRecommendProductCategorys(String clientId, boolean isMall) throws org.apache.thrift.TException;

    /**
     * 根据id集合查询商品分类集合
     * @param clientId 客户端ID
     * @param categoryIds 商品分类id集合
     * @return list<ProductCategoryVo>
     * 
     * @param clientId
     * @param categoryIds
     */
    public List<com.froad.thrift.vo.ProductCategoryVo> getProductCategoryByIds(String clientId, List<String> categoryIds) throws org.apache.thrift.TException;

  }

  public interface AsyncIface extends com.froad.thrift.monitor.service.BizMonitorService .AsyncIface {

    public void addProductCategory(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.ProductCategoryVo productCategoryVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteProductCategory(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.ProductCategoryVo productCategoryVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateProductCategory(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.ProductCategoryVo productCategoryVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getProductCategoryById(com.froad.thrift.vo.ProductCategoryVo productCategoryVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void isProductCategoryExist(com.froad.thrift.vo.ProductCategoryVo productCategoryVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void findCategorysByPage(com.froad.thrift.vo.ProductCategoryVo productCategoryVo, com.froad.thrift.vo.PageVo pageVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryProductCategorys(com.froad.thrift.vo.ProductCategoryVo productCategoryVo, com.froad.thrift.vo.PageVo pageVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void findCategorys(String clientId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addProductCategoryBatch(com.froad.thrift.vo.OriginVo originVo, List<com.froad.thrift.vo.ProductCategoryVo> productCategoryVos, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryH5ProductCategorys(String clientId, long parentId, long areaId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryManageProductCategorys(String clientId, long parentId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryBoutiqueGoodsCategorys(String clientId, long parentId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryRecommendProductCategorys(String clientId, boolean isMall, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getProductCategoryByIds(String clientId, List<String> categoryIds, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends com.froad.thrift.monitor.service.BizMonitorService.Client implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public com.froad.thrift.vo.AddProductCategoryVoRes addProductCategory(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.ProductCategoryVo productCategoryVo) throws org.apache.thrift.TException
    {
      send_addProductCategory(originVo, productCategoryVo);
      return recv_addProductCategory();
    }

    public void send_addProductCategory(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.ProductCategoryVo productCategoryVo) throws org.apache.thrift.TException
    {
      addProductCategory_args args = new addProductCategory_args();
      args.setOriginVo(originVo);
      args.setProductCategoryVo(productCategoryVo);
      sendBase("addProductCategory", args);
    }

    public com.froad.thrift.vo.AddProductCategoryVoRes recv_addProductCategory() throws org.apache.thrift.TException
    {
      addProductCategory_result result = new addProductCategory_result();
      receiveBase(result, "addProductCategory");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addProductCategory failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo deleteProductCategory(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.ProductCategoryVo productCategoryVo) throws org.apache.thrift.TException
    {
      send_deleteProductCategory(originVo, productCategoryVo);
      return recv_deleteProductCategory();
    }

    public void send_deleteProductCategory(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.ProductCategoryVo productCategoryVo) throws org.apache.thrift.TException
    {
      deleteProductCategory_args args = new deleteProductCategory_args();
      args.setOriginVo(originVo);
      args.setProductCategoryVo(productCategoryVo);
      sendBase("deleteProductCategory", args);
    }

    public com.froad.thrift.vo.ResultVo recv_deleteProductCategory() throws org.apache.thrift.TException
    {
      deleteProductCategory_result result = new deleteProductCategory_result();
      receiveBase(result, "deleteProductCategory");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteProductCategory failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo updateProductCategory(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.ProductCategoryVo productCategoryVo) throws org.apache.thrift.TException
    {
      send_updateProductCategory(originVo, productCategoryVo);
      return recv_updateProductCategory();
    }

    public void send_updateProductCategory(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.ProductCategoryVo productCategoryVo) throws org.apache.thrift.TException
    {
      updateProductCategory_args args = new updateProductCategory_args();
      args.setOriginVo(originVo);
      args.setProductCategoryVo(productCategoryVo);
      sendBase("updateProductCategory", args);
    }

    public com.froad.thrift.vo.ResultVo recv_updateProductCategory() throws org.apache.thrift.TException
    {
      updateProductCategory_result result = new updateProductCategory_result();
      receiveBase(result, "updateProductCategory");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateProductCategory failed: unknown result");
    }

    public com.froad.thrift.vo.ProductCategoryVo getProductCategoryById(com.froad.thrift.vo.ProductCategoryVo productCategoryVo) throws org.apache.thrift.TException
    {
      send_getProductCategoryById(productCategoryVo);
      return recv_getProductCategoryById();
    }

    public void send_getProductCategoryById(com.froad.thrift.vo.ProductCategoryVo productCategoryVo) throws org.apache.thrift.TException
    {
      getProductCategoryById_args args = new getProductCategoryById_args();
      args.setProductCategoryVo(productCategoryVo);
      sendBase("getProductCategoryById", args);
    }

    public com.froad.thrift.vo.ProductCategoryVo recv_getProductCategoryById() throws org.apache.thrift.TException
    {
      getProductCategoryById_result result = new getProductCategoryById_result();
      receiveBase(result, "getProductCategoryById");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getProductCategoryById failed: unknown result");
    }

    public boolean isProductCategoryExist(com.froad.thrift.vo.ProductCategoryVo productCategoryVo) throws org.apache.thrift.TException
    {
      send_isProductCategoryExist(productCategoryVo);
      return recv_isProductCategoryExist();
    }

    public void send_isProductCategoryExist(com.froad.thrift.vo.ProductCategoryVo productCategoryVo) throws org.apache.thrift.TException
    {
      isProductCategoryExist_args args = new isProductCategoryExist_args();
      args.setProductCategoryVo(productCategoryVo);
      sendBase("isProductCategoryExist", args);
    }

    public boolean recv_isProductCategoryExist() throws org.apache.thrift.TException
    {
      isProductCategoryExist_result result = new isProductCategoryExist_result();
      receiveBase(result, "isProductCategoryExist");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "isProductCategoryExist failed: unknown result");
    }

    public com.froad.thrift.vo.ProductCategoryPageVo findCategorysByPage(com.froad.thrift.vo.ProductCategoryVo productCategoryVo, com.froad.thrift.vo.PageVo pageVo) throws org.apache.thrift.TException
    {
      send_findCategorysByPage(productCategoryVo, pageVo);
      return recv_findCategorysByPage();
    }

    public void send_findCategorysByPage(com.froad.thrift.vo.ProductCategoryVo productCategoryVo, com.froad.thrift.vo.PageVo pageVo) throws org.apache.thrift.TException
    {
      findCategorysByPage_args args = new findCategorysByPage_args();
      args.setProductCategoryVo(productCategoryVo);
      args.setPageVo(pageVo);
      sendBase("findCategorysByPage", args);
    }

    public com.froad.thrift.vo.ProductCategoryPageVo recv_findCategorysByPage() throws org.apache.thrift.TException
    {
      findCategorysByPage_result result = new findCategorysByPage_result();
      receiveBase(result, "findCategorysByPage");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findCategorysByPage failed: unknown result");
    }

    public com.froad.thrift.vo.ProductCategoryPageVo queryProductCategorys(com.froad.thrift.vo.ProductCategoryVo productCategoryVo, com.froad.thrift.vo.PageVo pageVo) throws org.apache.thrift.TException
    {
      send_queryProductCategorys(productCategoryVo, pageVo);
      return recv_queryProductCategorys();
    }

    public void send_queryProductCategorys(com.froad.thrift.vo.ProductCategoryVo productCategoryVo, com.froad.thrift.vo.PageVo pageVo) throws org.apache.thrift.TException
    {
      queryProductCategorys_args args = new queryProductCategorys_args();
      args.setProductCategoryVo(productCategoryVo);
      args.setPageVo(pageVo);
      sendBase("queryProductCategorys", args);
    }

    public com.froad.thrift.vo.ProductCategoryPageVo recv_queryProductCategorys() throws org.apache.thrift.TException
    {
      queryProductCategorys_result result = new queryProductCategorys_result();
      receiveBase(result, "queryProductCategorys");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryProductCategorys failed: unknown result");
    }

    public List<com.froad.thrift.vo.ProductCategoryVo> findCategorys(String clientId) throws org.apache.thrift.TException
    {
      send_findCategorys(clientId);
      return recv_findCategorys();
    }

    public void send_findCategorys(String clientId) throws org.apache.thrift.TException
    {
      findCategorys_args args = new findCategorys_args();
      args.setClientId(clientId);
      sendBase("findCategorys", args);
    }

    public List<com.froad.thrift.vo.ProductCategoryVo> recv_findCategorys() throws org.apache.thrift.TException
    {
      findCategorys_result result = new findCategorys_result();
      receiveBase(result, "findCategorys");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findCategorys failed: unknown result");
    }

    public List<com.froad.thrift.vo.AddProductCategoryVoRes> addProductCategoryBatch(com.froad.thrift.vo.OriginVo originVo, List<com.froad.thrift.vo.ProductCategoryVo> productCategoryVos) throws org.apache.thrift.TException
    {
      send_addProductCategoryBatch(originVo, productCategoryVos);
      return recv_addProductCategoryBatch();
    }

    public void send_addProductCategoryBatch(com.froad.thrift.vo.OriginVo originVo, List<com.froad.thrift.vo.ProductCategoryVo> productCategoryVos) throws org.apache.thrift.TException
    {
      addProductCategoryBatch_args args = new addProductCategoryBatch_args();
      args.setOriginVo(originVo);
      args.setProductCategoryVos(productCategoryVos);
      sendBase("addProductCategoryBatch", args);
    }

    public List<com.froad.thrift.vo.AddProductCategoryVoRes> recv_addProductCategoryBatch() throws org.apache.thrift.TException
    {
      addProductCategoryBatch_result result = new addProductCategoryBatch_result();
      receiveBase(result, "addProductCategoryBatch");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addProductCategoryBatch failed: unknown result");
    }

    public List<com.froad.thrift.vo.ProductCategoryVo> queryH5ProductCategorys(String clientId, long parentId, long areaId) throws org.apache.thrift.TException
    {
      send_queryH5ProductCategorys(clientId, parentId, areaId);
      return recv_queryH5ProductCategorys();
    }

    public void send_queryH5ProductCategorys(String clientId, long parentId, long areaId) throws org.apache.thrift.TException
    {
      queryH5ProductCategorys_args args = new queryH5ProductCategorys_args();
      args.setClientId(clientId);
      args.setParentId(parentId);
      args.setAreaId(areaId);
      sendBase("queryH5ProductCategorys", args);
    }

    public List<com.froad.thrift.vo.ProductCategoryVo> recv_queryH5ProductCategorys() throws org.apache.thrift.TException
    {
      queryH5ProductCategorys_result result = new queryH5ProductCategorys_result();
      receiveBase(result, "queryH5ProductCategorys");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryH5ProductCategorys failed: unknown result");
    }

    public List<com.froad.thrift.vo.ProductCategoryVo> queryManageProductCategorys(String clientId, long parentId) throws org.apache.thrift.TException
    {
      send_queryManageProductCategorys(clientId, parentId);
      return recv_queryManageProductCategorys();
    }

    public void send_queryManageProductCategorys(String clientId, long parentId) throws org.apache.thrift.TException
    {
      queryManageProductCategorys_args args = new queryManageProductCategorys_args();
      args.setClientId(clientId);
      args.setParentId(parentId);
      sendBase("queryManageProductCategorys", args);
    }

    public List<com.froad.thrift.vo.ProductCategoryVo> recv_queryManageProductCategorys() throws org.apache.thrift.TException
    {
      queryManageProductCategorys_result result = new queryManageProductCategorys_result();
      receiveBase(result, "queryManageProductCategorys");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryManageProductCategorys failed: unknown result");
    }

    public List<com.froad.thrift.vo.ProductCategoryVo> queryBoutiqueGoodsCategorys(String clientId, long parentId) throws org.apache.thrift.TException
    {
      send_queryBoutiqueGoodsCategorys(clientId, parentId);
      return recv_queryBoutiqueGoodsCategorys();
    }

    public void send_queryBoutiqueGoodsCategorys(String clientId, long parentId) throws org.apache.thrift.TException
    {
      queryBoutiqueGoodsCategorys_args args = new queryBoutiqueGoodsCategorys_args();
      args.setClientId(clientId);
      args.setParentId(parentId);
      sendBase("queryBoutiqueGoodsCategorys", args);
    }

    public List<com.froad.thrift.vo.ProductCategoryVo> recv_queryBoutiqueGoodsCategorys() throws org.apache.thrift.TException
    {
      queryBoutiqueGoodsCategorys_result result = new queryBoutiqueGoodsCategorys_result();
      receiveBase(result, "queryBoutiqueGoodsCategorys");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryBoutiqueGoodsCategorys failed: unknown result");
    }

    public List<com.froad.thrift.vo.ProductCategoryVo> queryRecommendProductCategorys(String clientId, boolean isMall) throws org.apache.thrift.TException
    {
      send_queryRecommendProductCategorys(clientId, isMall);
      return recv_queryRecommendProductCategorys();
    }

    public void send_queryRecommendProductCategorys(String clientId, boolean isMall) throws org.apache.thrift.TException
    {
      queryRecommendProductCategorys_args args = new queryRecommendProductCategorys_args();
      args.setClientId(clientId);
      args.setIsMall(isMall);
      sendBase("queryRecommendProductCategorys", args);
    }

    public List<com.froad.thrift.vo.ProductCategoryVo> recv_queryRecommendProductCategorys() throws org.apache.thrift.TException
    {
      queryRecommendProductCategorys_result result = new queryRecommendProductCategorys_result();
      receiveBase(result, "queryRecommendProductCategorys");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryRecommendProductCategorys failed: unknown result");
    }

    public List<com.froad.thrift.vo.ProductCategoryVo> getProductCategoryByIds(String clientId, List<String> categoryIds) throws org.apache.thrift.TException
    {
      send_getProductCategoryByIds(clientId, categoryIds);
      return recv_getProductCategoryByIds();
    }

    public void send_getProductCategoryByIds(String clientId, List<String> categoryIds) throws org.apache.thrift.TException
    {
      getProductCategoryByIds_args args = new getProductCategoryByIds_args();
      args.setClientId(clientId);
      args.setCategoryIds(categoryIds);
      sendBase("getProductCategoryByIds", args);
    }

    public List<com.froad.thrift.vo.ProductCategoryVo> recv_getProductCategoryByIds() throws org.apache.thrift.TException
    {
      getProductCategoryByIds_result result = new getProductCategoryByIds_result();
      receiveBase(result, "getProductCategoryByIds");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getProductCategoryByIds failed: unknown result");
    }

  }
  public static class AsyncClient extends com.froad.thrift.monitor.service.BizMonitorService.AsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void addProductCategory(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.ProductCategoryVo productCategoryVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addProductCategory_call method_call = new addProductCategory_call(originVo, productCategoryVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addProductCategory_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.OriginVo originVo;
      private com.froad.thrift.vo.ProductCategoryVo productCategoryVo;
      public addProductCategory_call(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.ProductCategoryVo productCategoryVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.originVo = originVo;
        this.productCategoryVo = productCategoryVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addProductCategory", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addProductCategory_args args = new addProductCategory_args();
        args.setOriginVo(originVo);
        args.setProductCategoryVo(productCategoryVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.AddProductCategoryVoRes getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addProductCategory();
      }
    }

    public void deleteProductCategory(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.ProductCategoryVo productCategoryVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteProductCategory_call method_call = new deleteProductCategory_call(originVo, productCategoryVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteProductCategory_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.OriginVo originVo;
      private com.froad.thrift.vo.ProductCategoryVo productCategoryVo;
      public deleteProductCategory_call(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.ProductCategoryVo productCategoryVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.originVo = originVo;
        this.productCategoryVo = productCategoryVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteProductCategory", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteProductCategory_args args = new deleteProductCategory_args();
        args.setOriginVo(originVo);
        args.setProductCategoryVo(productCategoryVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteProductCategory();
      }
    }

    public void updateProductCategory(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.ProductCategoryVo productCategoryVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateProductCategory_call method_call = new updateProductCategory_call(originVo, productCategoryVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateProductCategory_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.OriginVo originVo;
      private com.froad.thrift.vo.ProductCategoryVo productCategoryVo;
      public updateProductCategory_call(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.ProductCategoryVo productCategoryVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.originVo = originVo;
        this.productCategoryVo = productCategoryVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateProductCategory", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateProductCategory_args args = new updateProductCategory_args();
        args.setOriginVo(originVo);
        args.setProductCategoryVo(productCategoryVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateProductCategory();
      }
    }

    public void getProductCategoryById(com.froad.thrift.vo.ProductCategoryVo productCategoryVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getProductCategoryById_call method_call = new getProductCategoryById_call(productCategoryVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getProductCategoryById_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.ProductCategoryVo productCategoryVo;
      public getProductCategoryById_call(com.froad.thrift.vo.ProductCategoryVo productCategoryVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.productCategoryVo = productCategoryVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getProductCategoryById", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getProductCategoryById_args args = new getProductCategoryById_args();
        args.setProductCategoryVo(productCategoryVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ProductCategoryVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getProductCategoryById();
      }
    }

    public void isProductCategoryExist(com.froad.thrift.vo.ProductCategoryVo productCategoryVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      isProductCategoryExist_call method_call = new isProductCategoryExist_call(productCategoryVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class isProductCategoryExist_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.ProductCategoryVo productCategoryVo;
      public isProductCategoryExist_call(com.froad.thrift.vo.ProductCategoryVo productCategoryVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.productCategoryVo = productCategoryVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("isProductCategoryExist", org.apache.thrift.protocol.TMessageType.CALL, 0));
        isProductCategoryExist_args args = new isProductCategoryExist_args();
        args.setProductCategoryVo(productCategoryVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_isProductCategoryExist();
      }
    }

    public void findCategorysByPage(com.froad.thrift.vo.ProductCategoryVo productCategoryVo, com.froad.thrift.vo.PageVo pageVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findCategorysByPage_call method_call = new findCategorysByPage_call(productCategoryVo, pageVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findCategorysByPage_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.ProductCategoryVo productCategoryVo;
      private com.froad.thrift.vo.PageVo pageVo;
      public findCategorysByPage_call(com.froad.thrift.vo.ProductCategoryVo productCategoryVo, com.froad.thrift.vo.PageVo pageVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.productCategoryVo = productCategoryVo;
        this.pageVo = pageVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findCategorysByPage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findCategorysByPage_args args = new findCategorysByPage_args();
        args.setProductCategoryVo(productCategoryVo);
        args.setPageVo(pageVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ProductCategoryPageVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findCategorysByPage();
      }
    }

    public void queryProductCategorys(com.froad.thrift.vo.ProductCategoryVo productCategoryVo, com.froad.thrift.vo.PageVo pageVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryProductCategorys_call method_call = new queryProductCategorys_call(productCategoryVo, pageVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryProductCategorys_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.ProductCategoryVo productCategoryVo;
      private com.froad.thrift.vo.PageVo pageVo;
      public queryProductCategorys_call(com.froad.thrift.vo.ProductCategoryVo productCategoryVo, com.froad.thrift.vo.PageVo pageVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.productCategoryVo = productCategoryVo;
        this.pageVo = pageVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryProductCategorys", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryProductCategorys_args args = new queryProductCategorys_args();
        args.setProductCategoryVo(productCategoryVo);
        args.setPageVo(pageVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ProductCategoryPageVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryProductCategorys();
      }
    }

    public void findCategorys(String clientId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findCategorys_call method_call = new findCategorys_call(clientId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findCategorys_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String clientId;
      public findCategorys_call(String clientId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.clientId = clientId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findCategorys", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findCategorys_args args = new findCategorys_args();
        args.setClientId(clientId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.froad.thrift.vo.ProductCategoryVo> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findCategorys();
      }
    }

    public void addProductCategoryBatch(com.froad.thrift.vo.OriginVo originVo, List<com.froad.thrift.vo.ProductCategoryVo> productCategoryVos, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addProductCategoryBatch_call method_call = new addProductCategoryBatch_call(originVo, productCategoryVos, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addProductCategoryBatch_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.OriginVo originVo;
      private List<com.froad.thrift.vo.ProductCategoryVo> productCategoryVos;
      public addProductCategoryBatch_call(com.froad.thrift.vo.OriginVo originVo, List<com.froad.thrift.vo.ProductCategoryVo> productCategoryVos, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.originVo = originVo;
        this.productCategoryVos = productCategoryVos;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addProductCategoryBatch", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addProductCategoryBatch_args args = new addProductCategoryBatch_args();
        args.setOriginVo(originVo);
        args.setProductCategoryVos(productCategoryVos);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.froad.thrift.vo.AddProductCategoryVoRes> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addProductCategoryBatch();
      }
    }

    public void queryH5ProductCategorys(String clientId, long parentId, long areaId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryH5ProductCategorys_call method_call = new queryH5ProductCategorys_call(clientId, parentId, areaId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryH5ProductCategorys_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String clientId;
      private long parentId;
      private long areaId;
      public queryH5ProductCategorys_call(String clientId, long parentId, long areaId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.clientId = clientId;
        this.parentId = parentId;
        this.areaId = areaId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryH5ProductCategorys", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryH5ProductCategorys_args args = new queryH5ProductCategorys_args();
        args.setClientId(clientId);
        args.setParentId(parentId);
        args.setAreaId(areaId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.froad.thrift.vo.ProductCategoryVo> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryH5ProductCategorys();
      }
    }

    public void queryManageProductCategorys(String clientId, long parentId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryManageProductCategorys_call method_call = new queryManageProductCategorys_call(clientId, parentId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryManageProductCategorys_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String clientId;
      private long parentId;
      public queryManageProductCategorys_call(String clientId, long parentId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.clientId = clientId;
        this.parentId = parentId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryManageProductCategorys", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryManageProductCategorys_args args = new queryManageProductCategorys_args();
        args.setClientId(clientId);
        args.setParentId(parentId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.froad.thrift.vo.ProductCategoryVo> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryManageProductCategorys();
      }
    }

    public void queryBoutiqueGoodsCategorys(String clientId, long parentId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryBoutiqueGoodsCategorys_call method_call = new queryBoutiqueGoodsCategorys_call(clientId, parentId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryBoutiqueGoodsCategorys_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String clientId;
      private long parentId;
      public queryBoutiqueGoodsCategorys_call(String clientId, long parentId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.clientId = clientId;
        this.parentId = parentId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryBoutiqueGoodsCategorys", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryBoutiqueGoodsCategorys_args args = new queryBoutiqueGoodsCategorys_args();
        args.setClientId(clientId);
        args.setParentId(parentId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.froad.thrift.vo.ProductCategoryVo> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryBoutiqueGoodsCategorys();
      }
    }

    public void queryRecommendProductCategorys(String clientId, boolean isMall, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryRecommendProductCategorys_call method_call = new queryRecommendProductCategorys_call(clientId, isMall, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryRecommendProductCategorys_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String clientId;
      private boolean isMall;
      public queryRecommendProductCategorys_call(String clientId, boolean isMall, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.clientId = clientId;
        this.isMall = isMall;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryRecommendProductCategorys", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryRecommendProductCategorys_args args = new queryRecommendProductCategorys_args();
        args.setClientId(clientId);
        args.setIsMall(isMall);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.froad.thrift.vo.ProductCategoryVo> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryRecommendProductCategorys();
      }
    }

    public void getProductCategoryByIds(String clientId, List<String> categoryIds, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getProductCategoryByIds_call method_call = new getProductCategoryByIds_call(clientId, categoryIds, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getProductCategoryByIds_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String clientId;
      private List<String> categoryIds;
      public getProductCategoryByIds_call(String clientId, List<String> categoryIds, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.clientId = clientId;
        this.categoryIds = categoryIds;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getProductCategoryByIds", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getProductCategoryByIds_args args = new getProductCategoryByIds_args();
        args.setClientId(clientId);
        args.setCategoryIds(categoryIds);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.froad.thrift.vo.ProductCategoryVo> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getProductCategoryByIds();
      }
    }

  }

  public static class Processor<I extends Iface> extends com.froad.thrift.monitor.service.BizMonitorService.Processor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("addProductCategory", new addProductCategory());
      processMap.put("deleteProductCategory", new deleteProductCategory());
      processMap.put("updateProductCategory", new updateProductCategory());
      processMap.put("getProductCategoryById", new getProductCategoryById());
      processMap.put("isProductCategoryExist", new isProductCategoryExist());
      processMap.put("findCategorysByPage", new findCategorysByPage());
      processMap.put("queryProductCategorys", new queryProductCategorys());
      processMap.put("findCategorys", new findCategorys());
      processMap.put("addProductCategoryBatch", new addProductCategoryBatch());
      processMap.put("queryH5ProductCategorys", new queryH5ProductCategorys());
      processMap.put("queryManageProductCategorys", new queryManageProductCategorys());
      processMap.put("queryBoutiqueGoodsCategorys", new queryBoutiqueGoodsCategorys());
      processMap.put("queryRecommendProductCategorys", new queryRecommendProductCategorys());
      processMap.put("getProductCategoryByIds", new getProductCategoryByIds());
      return processMap;
    }

    public static class addProductCategory<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addProductCategory_args> {
      public addProductCategory() {
        super("addProductCategory");
      }

      public addProductCategory_args getEmptyArgsInstance() {
        return new addProductCategory_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addProductCategory_result getResult(I iface, addProductCategory_args args) throws org.apache.thrift.TException {
        addProductCategory_result result = new addProductCategory_result();
        result.success = iface.addProductCategory(args.originVo, args.productCategoryVo);
        return result;
      }
    }

    public static class deleteProductCategory<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteProductCategory_args> {
      public deleteProductCategory() {
        super("deleteProductCategory");
      }

      public deleteProductCategory_args getEmptyArgsInstance() {
        return new deleteProductCategory_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteProductCategory_result getResult(I iface, deleteProductCategory_args args) throws org.apache.thrift.TException {
        deleteProductCategory_result result = new deleteProductCategory_result();
        result.success = iface.deleteProductCategory(args.originVo, args.productCategoryVo);
        return result;
      }
    }

    public static class updateProductCategory<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateProductCategory_args> {
      public updateProductCategory() {
        super("updateProductCategory");
      }

      public updateProductCategory_args getEmptyArgsInstance() {
        return new updateProductCategory_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateProductCategory_result getResult(I iface, updateProductCategory_args args) throws org.apache.thrift.TException {
        updateProductCategory_result result = new updateProductCategory_result();
        result.success = iface.updateProductCategory(args.originVo, args.productCategoryVo);
        return result;
      }
    }

    public static class getProductCategoryById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getProductCategoryById_args> {
      public getProductCategoryById() {
        super("getProductCategoryById");
      }

      public getProductCategoryById_args getEmptyArgsInstance() {
        return new getProductCategoryById_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getProductCategoryById_result getResult(I iface, getProductCategoryById_args args) throws org.apache.thrift.TException {
        getProductCategoryById_result result = new getProductCategoryById_result();
        result.success = iface.getProductCategoryById(args.productCategoryVo);
        return result;
      }
    }

    public static class isProductCategoryExist<I extends Iface> extends org.apache.thrift.ProcessFunction<I, isProductCategoryExist_args> {
      public isProductCategoryExist() {
        super("isProductCategoryExist");
      }

      public isProductCategoryExist_args getEmptyArgsInstance() {
        return new isProductCategoryExist_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public isProductCategoryExist_result getResult(I iface, isProductCategoryExist_args args) throws org.apache.thrift.TException {
        isProductCategoryExist_result result = new isProductCategoryExist_result();
        result.success = iface.isProductCategoryExist(args.productCategoryVo);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class findCategorysByPage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findCategorysByPage_args> {
      public findCategorysByPage() {
        super("findCategorysByPage");
      }

      public findCategorysByPage_args getEmptyArgsInstance() {
        return new findCategorysByPage_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findCategorysByPage_result getResult(I iface, findCategorysByPage_args args) throws org.apache.thrift.TException {
        findCategorysByPage_result result = new findCategorysByPage_result();
        result.success = iface.findCategorysByPage(args.productCategoryVo, args.pageVo);
        return result;
      }
    }

    public static class queryProductCategorys<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryProductCategorys_args> {
      public queryProductCategorys() {
        super("queryProductCategorys");
      }

      public queryProductCategorys_args getEmptyArgsInstance() {
        return new queryProductCategorys_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryProductCategorys_result getResult(I iface, queryProductCategorys_args args) throws org.apache.thrift.TException {
        queryProductCategorys_result result = new queryProductCategorys_result();
        result.success = iface.queryProductCategorys(args.productCategoryVo, args.pageVo);
        return result;
      }
    }

    public static class findCategorys<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findCategorys_args> {
      public findCategorys() {
        super("findCategorys");
      }

      public findCategorys_args getEmptyArgsInstance() {
        return new findCategorys_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findCategorys_result getResult(I iface, findCategorys_args args) throws org.apache.thrift.TException {
        findCategorys_result result = new findCategorys_result();
        result.success = iface.findCategorys(args.clientId);
        return result;
      }
    }

    public static class addProductCategoryBatch<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addProductCategoryBatch_args> {
      public addProductCategoryBatch() {
        super("addProductCategoryBatch");
      }

      public addProductCategoryBatch_args getEmptyArgsInstance() {
        return new addProductCategoryBatch_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addProductCategoryBatch_result getResult(I iface, addProductCategoryBatch_args args) throws org.apache.thrift.TException {
        addProductCategoryBatch_result result = new addProductCategoryBatch_result();
        result.success = iface.addProductCategoryBatch(args.originVo, args.productCategoryVos);
        return result;
      }
    }

    public static class queryH5ProductCategorys<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryH5ProductCategorys_args> {
      public queryH5ProductCategorys() {
        super("queryH5ProductCategorys");
      }

      public queryH5ProductCategorys_args getEmptyArgsInstance() {
        return new queryH5ProductCategorys_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryH5ProductCategorys_result getResult(I iface, queryH5ProductCategorys_args args) throws org.apache.thrift.TException {
        queryH5ProductCategorys_result result = new queryH5ProductCategorys_result();
        result.success = iface.queryH5ProductCategorys(args.clientId, args.parentId, args.areaId);
        return result;
      }
    }

    public static class queryManageProductCategorys<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryManageProductCategorys_args> {
      public queryManageProductCategorys() {
        super("queryManageProductCategorys");
      }

      public queryManageProductCategorys_args getEmptyArgsInstance() {
        return new queryManageProductCategorys_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryManageProductCategorys_result getResult(I iface, queryManageProductCategorys_args args) throws org.apache.thrift.TException {
        queryManageProductCategorys_result result = new queryManageProductCategorys_result();
        result.success = iface.queryManageProductCategorys(args.clientId, args.parentId);
        return result;
      }
    }

    public static class queryBoutiqueGoodsCategorys<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryBoutiqueGoodsCategorys_args> {
      public queryBoutiqueGoodsCategorys() {
        super("queryBoutiqueGoodsCategorys");
      }

      public queryBoutiqueGoodsCategorys_args getEmptyArgsInstance() {
        return new queryBoutiqueGoodsCategorys_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryBoutiqueGoodsCategorys_result getResult(I iface, queryBoutiqueGoodsCategorys_args args) throws org.apache.thrift.TException {
        queryBoutiqueGoodsCategorys_result result = new queryBoutiqueGoodsCategorys_result();
        result.success = iface.queryBoutiqueGoodsCategorys(args.clientId, args.parentId);
        return result;
      }
    }

    public static class queryRecommendProductCategorys<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryRecommendProductCategorys_args> {
      public queryRecommendProductCategorys() {
        super("queryRecommendProductCategorys");
      }

      public queryRecommendProductCategorys_args getEmptyArgsInstance() {
        return new queryRecommendProductCategorys_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryRecommendProductCategorys_result getResult(I iface, queryRecommendProductCategorys_args args) throws org.apache.thrift.TException {
        queryRecommendProductCategorys_result result = new queryRecommendProductCategorys_result();
        result.success = iface.queryRecommendProductCategorys(args.clientId, args.isMall);
        return result;
      }
    }

    public static class getProductCategoryByIds<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getProductCategoryByIds_args> {
      public getProductCategoryByIds() {
        super("getProductCategoryByIds");
      }

      public getProductCategoryByIds_args getEmptyArgsInstance() {
        return new getProductCategoryByIds_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getProductCategoryByIds_result getResult(I iface, getProductCategoryByIds_args args) throws org.apache.thrift.TException {
        getProductCategoryByIds_result result = new getProductCategoryByIds_result();
        result.success = iface.getProductCategoryByIds(args.clientId, args.categoryIds);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends com.froad.thrift.monitor.service.BizMonitorService.AsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("addProductCategory", new addProductCategory());
      processMap.put("deleteProductCategory", new deleteProductCategory());
      processMap.put("updateProductCategory", new updateProductCategory());
      processMap.put("getProductCategoryById", new getProductCategoryById());
      processMap.put("isProductCategoryExist", new isProductCategoryExist());
      processMap.put("findCategorysByPage", new findCategorysByPage());
      processMap.put("queryProductCategorys", new queryProductCategorys());
      processMap.put("findCategorys", new findCategorys());
      processMap.put("addProductCategoryBatch", new addProductCategoryBatch());
      processMap.put("queryH5ProductCategorys", new queryH5ProductCategorys());
      processMap.put("queryManageProductCategorys", new queryManageProductCategorys());
      processMap.put("queryBoutiqueGoodsCategorys", new queryBoutiqueGoodsCategorys());
      processMap.put("queryRecommendProductCategorys", new queryRecommendProductCategorys());
      processMap.put("getProductCategoryByIds", new getProductCategoryByIds());
      return processMap;
    }

    public static class addProductCategory<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addProductCategory_args, com.froad.thrift.vo.AddProductCategoryVoRes> {
      public addProductCategory() {
        super("addProductCategory");
      }

      public addProductCategory_args getEmptyArgsInstance() {
        return new addProductCategory_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.AddProductCategoryVoRes> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.AddProductCategoryVoRes>() { 
          public void onComplete(com.froad.thrift.vo.AddProductCategoryVoRes o) {
            addProductCategory_result result = new addProductCategory_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addProductCategory_result result = new addProductCategory_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addProductCategory_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.AddProductCategoryVoRes> resultHandler) throws TException {
        iface.addProductCategory(args.originVo, args.productCategoryVo,resultHandler);
      }
    }

    public static class deleteProductCategory<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteProductCategory_args, com.froad.thrift.vo.ResultVo> {
      public deleteProductCategory() {
        super("deleteProductCategory");
      }

      public deleteProductCategory_args getEmptyArgsInstance() {
        return new deleteProductCategory_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            deleteProductCategory_result result = new deleteProductCategory_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteProductCategory_result result = new deleteProductCategory_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteProductCategory_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.deleteProductCategory(args.originVo, args.productCategoryVo,resultHandler);
      }
    }

    public static class updateProductCategory<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateProductCategory_args, com.froad.thrift.vo.ResultVo> {
      public updateProductCategory() {
        super("updateProductCategory");
      }

      public updateProductCategory_args getEmptyArgsInstance() {
        return new updateProductCategory_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            updateProductCategory_result result = new updateProductCategory_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateProductCategory_result result = new updateProductCategory_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateProductCategory_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.updateProductCategory(args.originVo, args.productCategoryVo,resultHandler);
      }
    }

    public static class getProductCategoryById<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getProductCategoryById_args, com.froad.thrift.vo.ProductCategoryVo> {
      public getProductCategoryById() {
        super("getProductCategoryById");
      }

      public getProductCategoryById_args getEmptyArgsInstance() {
        return new getProductCategoryById_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ProductCategoryVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ProductCategoryVo>() { 
          public void onComplete(com.froad.thrift.vo.ProductCategoryVo o) {
            getProductCategoryById_result result = new getProductCategoryById_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getProductCategoryById_result result = new getProductCategoryById_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getProductCategoryById_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ProductCategoryVo> resultHandler) throws TException {
        iface.getProductCategoryById(args.productCategoryVo,resultHandler);
      }
    }

    public static class isProductCategoryExist<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, isProductCategoryExist_args, Boolean> {
      public isProductCategoryExist() {
        super("isProductCategoryExist");
      }

      public isProductCategoryExist_args getEmptyArgsInstance() {
        return new isProductCategoryExist_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            isProductCategoryExist_result result = new isProductCategoryExist_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            isProductCategoryExist_result result = new isProductCategoryExist_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, isProductCategoryExist_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.isProductCategoryExist(args.productCategoryVo,resultHandler);
      }
    }

    public static class findCategorysByPage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findCategorysByPage_args, com.froad.thrift.vo.ProductCategoryPageVo> {
      public findCategorysByPage() {
        super("findCategorysByPage");
      }

      public findCategorysByPage_args getEmptyArgsInstance() {
        return new findCategorysByPage_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ProductCategoryPageVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ProductCategoryPageVo>() { 
          public void onComplete(com.froad.thrift.vo.ProductCategoryPageVo o) {
            findCategorysByPage_result result = new findCategorysByPage_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            findCategorysByPage_result result = new findCategorysByPage_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findCategorysByPage_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ProductCategoryPageVo> resultHandler) throws TException {
        iface.findCategorysByPage(args.productCategoryVo, args.pageVo,resultHandler);
      }
    }

    public static class queryProductCategorys<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryProductCategorys_args, com.froad.thrift.vo.ProductCategoryPageVo> {
      public queryProductCategorys() {
        super("queryProductCategorys");
      }

      public queryProductCategorys_args getEmptyArgsInstance() {
        return new queryProductCategorys_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ProductCategoryPageVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ProductCategoryPageVo>() { 
          public void onComplete(com.froad.thrift.vo.ProductCategoryPageVo o) {
            queryProductCategorys_result result = new queryProductCategorys_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryProductCategorys_result result = new queryProductCategorys_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryProductCategorys_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ProductCategoryPageVo> resultHandler) throws TException {
        iface.queryProductCategorys(args.productCategoryVo, args.pageVo,resultHandler);
      }
    }

    public static class findCategorys<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findCategorys_args, List<com.froad.thrift.vo.ProductCategoryVo>> {
      public findCategorys() {
        super("findCategorys");
      }

      public findCategorys_args getEmptyArgsInstance() {
        return new findCategorys_args();
      }

      public AsyncMethodCallback<List<com.froad.thrift.vo.ProductCategoryVo>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.froad.thrift.vo.ProductCategoryVo>>() { 
          public void onComplete(List<com.froad.thrift.vo.ProductCategoryVo> o) {
            findCategorys_result result = new findCategorys_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            findCategorys_result result = new findCategorys_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findCategorys_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.froad.thrift.vo.ProductCategoryVo>> resultHandler) throws TException {
        iface.findCategorys(args.clientId,resultHandler);
      }
    }

    public static class addProductCategoryBatch<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addProductCategoryBatch_args, List<com.froad.thrift.vo.AddProductCategoryVoRes>> {
      public addProductCategoryBatch() {
        super("addProductCategoryBatch");
      }

      public addProductCategoryBatch_args getEmptyArgsInstance() {
        return new addProductCategoryBatch_args();
      }

      public AsyncMethodCallback<List<com.froad.thrift.vo.AddProductCategoryVoRes>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.froad.thrift.vo.AddProductCategoryVoRes>>() { 
          public void onComplete(List<com.froad.thrift.vo.AddProductCategoryVoRes> o) {
            addProductCategoryBatch_result result = new addProductCategoryBatch_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addProductCategoryBatch_result result = new addProductCategoryBatch_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addProductCategoryBatch_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.froad.thrift.vo.AddProductCategoryVoRes>> resultHandler) throws TException {
        iface.addProductCategoryBatch(args.originVo, args.productCategoryVos,resultHandler);
      }
    }

    public static class queryH5ProductCategorys<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryH5ProductCategorys_args, List<com.froad.thrift.vo.ProductCategoryVo>> {
      public queryH5ProductCategorys() {
        super("queryH5ProductCategorys");
      }

      public queryH5ProductCategorys_args getEmptyArgsInstance() {
        return new queryH5ProductCategorys_args();
      }

      public AsyncMethodCallback<List<com.froad.thrift.vo.ProductCategoryVo>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.froad.thrift.vo.ProductCategoryVo>>() { 
          public void onComplete(List<com.froad.thrift.vo.ProductCategoryVo> o) {
            queryH5ProductCategorys_result result = new queryH5ProductCategorys_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryH5ProductCategorys_result result = new queryH5ProductCategorys_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryH5ProductCategorys_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.froad.thrift.vo.ProductCategoryVo>> resultHandler) throws TException {
        iface.queryH5ProductCategorys(args.clientId, args.parentId, args.areaId,resultHandler);
      }
    }

    public static class queryManageProductCategorys<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryManageProductCategorys_args, List<com.froad.thrift.vo.ProductCategoryVo>> {
      public queryManageProductCategorys() {
        super("queryManageProductCategorys");
      }

      public queryManageProductCategorys_args getEmptyArgsInstance() {
        return new queryManageProductCategorys_args();
      }

      public AsyncMethodCallback<List<com.froad.thrift.vo.ProductCategoryVo>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.froad.thrift.vo.ProductCategoryVo>>() { 
          public void onComplete(List<com.froad.thrift.vo.ProductCategoryVo> o) {
            queryManageProductCategorys_result result = new queryManageProductCategorys_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryManageProductCategorys_result result = new queryManageProductCategorys_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryManageProductCategorys_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.froad.thrift.vo.ProductCategoryVo>> resultHandler) throws TException {
        iface.queryManageProductCategorys(args.clientId, args.parentId,resultHandler);
      }
    }

    public static class queryBoutiqueGoodsCategorys<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryBoutiqueGoodsCategorys_args, List<com.froad.thrift.vo.ProductCategoryVo>> {
      public queryBoutiqueGoodsCategorys() {
        super("queryBoutiqueGoodsCategorys");
      }

      public queryBoutiqueGoodsCategorys_args getEmptyArgsInstance() {
        return new queryBoutiqueGoodsCategorys_args();
      }

      public AsyncMethodCallback<List<com.froad.thrift.vo.ProductCategoryVo>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.froad.thrift.vo.ProductCategoryVo>>() { 
          public void onComplete(List<com.froad.thrift.vo.ProductCategoryVo> o) {
            queryBoutiqueGoodsCategorys_result result = new queryBoutiqueGoodsCategorys_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryBoutiqueGoodsCategorys_result result = new queryBoutiqueGoodsCategorys_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryBoutiqueGoodsCategorys_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.froad.thrift.vo.ProductCategoryVo>> resultHandler) throws TException {
        iface.queryBoutiqueGoodsCategorys(args.clientId, args.parentId,resultHandler);
      }
    }

    public static class queryRecommendProductCategorys<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryRecommendProductCategorys_args, List<com.froad.thrift.vo.ProductCategoryVo>> {
      public queryRecommendProductCategorys() {
        super("queryRecommendProductCategorys");
      }

      public queryRecommendProductCategorys_args getEmptyArgsInstance() {
        return new queryRecommendProductCategorys_args();
      }

      public AsyncMethodCallback<List<com.froad.thrift.vo.ProductCategoryVo>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.froad.thrift.vo.ProductCategoryVo>>() { 
          public void onComplete(List<com.froad.thrift.vo.ProductCategoryVo> o) {
            queryRecommendProductCategorys_result result = new queryRecommendProductCategorys_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryRecommendProductCategorys_result result = new queryRecommendProductCategorys_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryRecommendProductCategorys_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.froad.thrift.vo.ProductCategoryVo>> resultHandler) throws TException {
        iface.queryRecommendProductCategorys(args.clientId, args.isMall,resultHandler);
      }
    }

    public static class getProductCategoryByIds<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getProductCategoryByIds_args, List<com.froad.thrift.vo.ProductCategoryVo>> {
      public getProductCategoryByIds() {
        super("getProductCategoryByIds");
      }

      public getProductCategoryByIds_args getEmptyArgsInstance() {
        return new getProductCategoryByIds_args();
      }

      public AsyncMethodCallback<List<com.froad.thrift.vo.ProductCategoryVo>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.froad.thrift.vo.ProductCategoryVo>>() { 
          public void onComplete(List<com.froad.thrift.vo.ProductCategoryVo> o) {
            getProductCategoryByIds_result result = new getProductCategoryByIds_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getProductCategoryByIds_result result = new getProductCategoryByIds_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getProductCategoryByIds_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.froad.thrift.vo.ProductCategoryVo>> resultHandler) throws TException {
        iface.getProductCategoryByIds(args.clientId, args.categoryIds,resultHandler);
      }
    }

  }

  public static class addProductCategory_args implements org.apache.thrift.TBase<addProductCategory_args, addProductCategory_args._Fields>, java.io.Serializable, Cloneable, Comparable<addProductCategory_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addProductCategory_args");

    private static final org.apache.thrift.protocol.TField ORIGIN_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("originVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PRODUCT_CATEGORY_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("productCategoryVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addProductCategory_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addProductCategory_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OriginVo originVo; // required
    public com.froad.thrift.vo.ProductCategoryVo productCategoryVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORIGIN_VO((short)1, "originVo"),
      PRODUCT_CATEGORY_VO((short)2, "productCategoryVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORIGIN_VO
            return ORIGIN_VO;
          case 2: // PRODUCT_CATEGORY_VO
            return PRODUCT_CATEGORY_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORIGIN_VO, new org.apache.thrift.meta_data.FieldMetaData("originVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OriginVo.class)));
      tmpMap.put(_Fields.PRODUCT_CATEGORY_VO, new org.apache.thrift.meta_data.FieldMetaData("productCategoryVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ProductCategoryVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addProductCategory_args.class, metaDataMap);
    }

    public addProductCategory_args() {
    }

    public addProductCategory_args(
      com.froad.thrift.vo.OriginVo originVo,
      com.froad.thrift.vo.ProductCategoryVo productCategoryVo)
    {
      this();
      this.originVo = originVo;
      this.productCategoryVo = productCategoryVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addProductCategory_args(addProductCategory_args other) {
      if (other.isSetOriginVo()) {
        this.originVo = new com.froad.thrift.vo.OriginVo(other.originVo);
      }
      if (other.isSetProductCategoryVo()) {
        this.productCategoryVo = new com.froad.thrift.vo.ProductCategoryVo(other.productCategoryVo);
      }
    }

    public addProductCategory_args deepCopy() {
      return new addProductCategory_args(this);
    }

    @Override
    public void clear() {
      this.originVo = null;
      this.productCategoryVo = null;
    }

    public com.froad.thrift.vo.OriginVo getOriginVo() {
      return this.originVo;
    }

    public addProductCategory_args setOriginVo(com.froad.thrift.vo.OriginVo originVo) {
      this.originVo = originVo;
      return this;
    }

    public void unsetOriginVo() {
      this.originVo = null;
    }

    /** Returns true if field originVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginVo() {
      return this.originVo != null;
    }

    public void setOriginVoIsSet(boolean value) {
      if (!value) {
        this.originVo = null;
      }
    }

    public com.froad.thrift.vo.ProductCategoryVo getProductCategoryVo() {
      return this.productCategoryVo;
    }

    public addProductCategory_args setProductCategoryVo(com.froad.thrift.vo.ProductCategoryVo productCategoryVo) {
      this.productCategoryVo = productCategoryVo;
      return this;
    }

    public void unsetProductCategoryVo() {
      this.productCategoryVo = null;
    }

    /** Returns true if field productCategoryVo is set (has been assigned a value) and false otherwise */
    public boolean isSetProductCategoryVo() {
      return this.productCategoryVo != null;
    }

    public void setProductCategoryVoIsSet(boolean value) {
      if (!value) {
        this.productCategoryVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORIGIN_VO:
        if (value == null) {
          unsetOriginVo();
        } else {
          setOriginVo((com.froad.thrift.vo.OriginVo)value);
        }
        break;

      case PRODUCT_CATEGORY_VO:
        if (value == null) {
          unsetProductCategoryVo();
        } else {
          setProductCategoryVo((com.froad.thrift.vo.ProductCategoryVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORIGIN_VO:
        return getOriginVo();

      case PRODUCT_CATEGORY_VO:
        return getProductCategoryVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORIGIN_VO:
        return isSetOriginVo();
      case PRODUCT_CATEGORY_VO:
        return isSetProductCategoryVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addProductCategory_args)
        return this.equals((addProductCategory_args)that);
      return false;
    }

    public boolean equals(addProductCategory_args that) {
      if (that == null)
        return false;

      boolean this_present_originVo = true && this.isSetOriginVo();
      boolean that_present_originVo = true && that.isSetOriginVo();
      if (this_present_originVo || that_present_originVo) {
        if (!(this_present_originVo && that_present_originVo))
          return false;
        if (!this.originVo.equals(that.originVo))
          return false;
      }

      boolean this_present_productCategoryVo = true && this.isSetProductCategoryVo();
      boolean that_present_productCategoryVo = true && that.isSetProductCategoryVo();
      if (this_present_productCategoryVo || that_present_productCategoryVo) {
        if (!(this_present_productCategoryVo && that_present_productCategoryVo))
          return false;
        if (!this.productCategoryVo.equals(that.productCategoryVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_originVo = true && (isSetOriginVo());
      list.add(present_originVo);
      if (present_originVo)
        list.add(originVo);

      boolean present_productCategoryVo = true && (isSetProductCategoryVo());
      list.add(present_productCategoryVo);
      if (present_productCategoryVo)
        list.add(productCategoryVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(addProductCategory_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOriginVo()).compareTo(other.isSetOriginVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originVo, other.originVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetProductCategoryVo()).compareTo(other.isSetProductCategoryVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProductCategoryVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productCategoryVo, other.productCategoryVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addProductCategory_args(");
      boolean first = true;

      sb.append("originVo:");
      if (this.originVo == null) {
        sb.append("null");
      } else {
        sb.append(this.originVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("productCategoryVo:");
      if (this.productCategoryVo == null) {
        sb.append("null");
      } else {
        sb.append(this.productCategoryVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (originVo != null) {
        originVo.validate();
      }
      if (productCategoryVo != null) {
        productCategoryVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addProductCategory_argsStandardSchemeFactory implements SchemeFactory {
      public addProductCategory_argsStandardScheme getScheme() {
        return new addProductCategory_argsStandardScheme();
      }
    }

    private static class addProductCategory_argsStandardScheme extends StandardScheme<addProductCategory_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addProductCategory_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORIGIN_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.originVo = new com.froad.thrift.vo.OriginVo();
                struct.originVo.read(iprot);
                struct.setOriginVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PRODUCT_CATEGORY_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.productCategoryVo = new com.froad.thrift.vo.ProductCategoryVo();
                struct.productCategoryVo.read(iprot);
                struct.setProductCategoryVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addProductCategory_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.originVo != null) {
          oprot.writeFieldBegin(ORIGIN_VO_FIELD_DESC);
          struct.originVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.productCategoryVo != null) {
          oprot.writeFieldBegin(PRODUCT_CATEGORY_VO_FIELD_DESC);
          struct.productCategoryVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addProductCategory_argsTupleSchemeFactory implements SchemeFactory {
      public addProductCategory_argsTupleScheme getScheme() {
        return new addProductCategory_argsTupleScheme();
      }
    }

    private static class addProductCategory_argsTupleScheme extends TupleScheme<addProductCategory_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addProductCategory_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOriginVo()) {
          optionals.set(0);
        }
        if (struct.isSetProductCategoryVo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOriginVo()) {
          struct.originVo.write(oprot);
        }
        if (struct.isSetProductCategoryVo()) {
          struct.productCategoryVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addProductCategory_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.originVo = new com.froad.thrift.vo.OriginVo();
          struct.originVo.read(iprot);
          struct.setOriginVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.productCategoryVo = new com.froad.thrift.vo.ProductCategoryVo();
          struct.productCategoryVo.read(iprot);
          struct.setProductCategoryVoIsSet(true);
        }
      }
    }

  }

  public static class addProductCategory_result implements org.apache.thrift.TBase<addProductCategory_result, addProductCategory_result._Fields>, java.io.Serializable, Cloneable, Comparable<addProductCategory_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addProductCategory_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addProductCategory_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addProductCategory_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.AddProductCategoryVoRes success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.AddProductCategoryVoRes.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addProductCategory_result.class, metaDataMap);
    }

    public addProductCategory_result() {
    }

    public addProductCategory_result(
      com.froad.thrift.vo.AddProductCategoryVoRes success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addProductCategory_result(addProductCategory_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.AddProductCategoryVoRes(other.success);
      }
    }

    public addProductCategory_result deepCopy() {
      return new addProductCategory_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.AddProductCategoryVoRes getSuccess() {
      return this.success;
    }

    public addProductCategory_result setSuccess(com.froad.thrift.vo.AddProductCategoryVoRes success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.AddProductCategoryVoRes)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addProductCategory_result)
        return this.equals((addProductCategory_result)that);
      return false;
    }

    public boolean equals(addProductCategory_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(addProductCategory_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addProductCategory_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addProductCategory_resultStandardSchemeFactory implements SchemeFactory {
      public addProductCategory_resultStandardScheme getScheme() {
        return new addProductCategory_resultStandardScheme();
      }
    }

    private static class addProductCategory_resultStandardScheme extends StandardScheme<addProductCategory_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addProductCategory_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.AddProductCategoryVoRes();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addProductCategory_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addProductCategory_resultTupleSchemeFactory implements SchemeFactory {
      public addProductCategory_resultTupleScheme getScheme() {
        return new addProductCategory_resultTupleScheme();
      }
    }

    private static class addProductCategory_resultTupleScheme extends TupleScheme<addProductCategory_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addProductCategory_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addProductCategory_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.AddProductCategoryVoRes();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class deleteProductCategory_args implements org.apache.thrift.TBase<deleteProductCategory_args, deleteProductCategory_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteProductCategory_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteProductCategory_args");

    private static final org.apache.thrift.protocol.TField ORIGIN_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("originVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PRODUCT_CATEGORY_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("productCategoryVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteProductCategory_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteProductCategory_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OriginVo originVo; // required
    public com.froad.thrift.vo.ProductCategoryVo productCategoryVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORIGIN_VO((short)1, "originVo"),
      PRODUCT_CATEGORY_VO((short)2, "productCategoryVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORIGIN_VO
            return ORIGIN_VO;
          case 2: // PRODUCT_CATEGORY_VO
            return PRODUCT_CATEGORY_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORIGIN_VO, new org.apache.thrift.meta_data.FieldMetaData("originVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OriginVo.class)));
      tmpMap.put(_Fields.PRODUCT_CATEGORY_VO, new org.apache.thrift.meta_data.FieldMetaData("productCategoryVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ProductCategoryVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteProductCategory_args.class, metaDataMap);
    }

    public deleteProductCategory_args() {
    }

    public deleteProductCategory_args(
      com.froad.thrift.vo.OriginVo originVo,
      com.froad.thrift.vo.ProductCategoryVo productCategoryVo)
    {
      this();
      this.originVo = originVo;
      this.productCategoryVo = productCategoryVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteProductCategory_args(deleteProductCategory_args other) {
      if (other.isSetOriginVo()) {
        this.originVo = new com.froad.thrift.vo.OriginVo(other.originVo);
      }
      if (other.isSetProductCategoryVo()) {
        this.productCategoryVo = new com.froad.thrift.vo.ProductCategoryVo(other.productCategoryVo);
      }
    }

    public deleteProductCategory_args deepCopy() {
      return new deleteProductCategory_args(this);
    }

    @Override
    public void clear() {
      this.originVo = null;
      this.productCategoryVo = null;
    }

    public com.froad.thrift.vo.OriginVo getOriginVo() {
      return this.originVo;
    }

    public deleteProductCategory_args setOriginVo(com.froad.thrift.vo.OriginVo originVo) {
      this.originVo = originVo;
      return this;
    }

    public void unsetOriginVo() {
      this.originVo = null;
    }

    /** Returns true if field originVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginVo() {
      return this.originVo != null;
    }

    public void setOriginVoIsSet(boolean value) {
      if (!value) {
        this.originVo = null;
      }
    }

    public com.froad.thrift.vo.ProductCategoryVo getProductCategoryVo() {
      return this.productCategoryVo;
    }

    public deleteProductCategory_args setProductCategoryVo(com.froad.thrift.vo.ProductCategoryVo productCategoryVo) {
      this.productCategoryVo = productCategoryVo;
      return this;
    }

    public void unsetProductCategoryVo() {
      this.productCategoryVo = null;
    }

    /** Returns true if field productCategoryVo is set (has been assigned a value) and false otherwise */
    public boolean isSetProductCategoryVo() {
      return this.productCategoryVo != null;
    }

    public void setProductCategoryVoIsSet(boolean value) {
      if (!value) {
        this.productCategoryVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORIGIN_VO:
        if (value == null) {
          unsetOriginVo();
        } else {
          setOriginVo((com.froad.thrift.vo.OriginVo)value);
        }
        break;

      case PRODUCT_CATEGORY_VO:
        if (value == null) {
          unsetProductCategoryVo();
        } else {
          setProductCategoryVo((com.froad.thrift.vo.ProductCategoryVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORIGIN_VO:
        return getOriginVo();

      case PRODUCT_CATEGORY_VO:
        return getProductCategoryVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORIGIN_VO:
        return isSetOriginVo();
      case PRODUCT_CATEGORY_VO:
        return isSetProductCategoryVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteProductCategory_args)
        return this.equals((deleteProductCategory_args)that);
      return false;
    }

    public boolean equals(deleteProductCategory_args that) {
      if (that == null)
        return false;

      boolean this_present_originVo = true && this.isSetOriginVo();
      boolean that_present_originVo = true && that.isSetOriginVo();
      if (this_present_originVo || that_present_originVo) {
        if (!(this_present_originVo && that_present_originVo))
          return false;
        if (!this.originVo.equals(that.originVo))
          return false;
      }

      boolean this_present_productCategoryVo = true && this.isSetProductCategoryVo();
      boolean that_present_productCategoryVo = true && that.isSetProductCategoryVo();
      if (this_present_productCategoryVo || that_present_productCategoryVo) {
        if (!(this_present_productCategoryVo && that_present_productCategoryVo))
          return false;
        if (!this.productCategoryVo.equals(that.productCategoryVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_originVo = true && (isSetOriginVo());
      list.add(present_originVo);
      if (present_originVo)
        list.add(originVo);

      boolean present_productCategoryVo = true && (isSetProductCategoryVo());
      list.add(present_productCategoryVo);
      if (present_productCategoryVo)
        list.add(productCategoryVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteProductCategory_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOriginVo()).compareTo(other.isSetOriginVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originVo, other.originVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetProductCategoryVo()).compareTo(other.isSetProductCategoryVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProductCategoryVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productCategoryVo, other.productCategoryVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteProductCategory_args(");
      boolean first = true;

      sb.append("originVo:");
      if (this.originVo == null) {
        sb.append("null");
      } else {
        sb.append(this.originVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("productCategoryVo:");
      if (this.productCategoryVo == null) {
        sb.append("null");
      } else {
        sb.append(this.productCategoryVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (originVo != null) {
        originVo.validate();
      }
      if (productCategoryVo != null) {
        productCategoryVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteProductCategory_argsStandardSchemeFactory implements SchemeFactory {
      public deleteProductCategory_argsStandardScheme getScheme() {
        return new deleteProductCategory_argsStandardScheme();
      }
    }

    private static class deleteProductCategory_argsStandardScheme extends StandardScheme<deleteProductCategory_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteProductCategory_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORIGIN_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.originVo = new com.froad.thrift.vo.OriginVo();
                struct.originVo.read(iprot);
                struct.setOriginVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PRODUCT_CATEGORY_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.productCategoryVo = new com.froad.thrift.vo.ProductCategoryVo();
                struct.productCategoryVo.read(iprot);
                struct.setProductCategoryVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteProductCategory_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.originVo != null) {
          oprot.writeFieldBegin(ORIGIN_VO_FIELD_DESC);
          struct.originVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.productCategoryVo != null) {
          oprot.writeFieldBegin(PRODUCT_CATEGORY_VO_FIELD_DESC);
          struct.productCategoryVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteProductCategory_argsTupleSchemeFactory implements SchemeFactory {
      public deleteProductCategory_argsTupleScheme getScheme() {
        return new deleteProductCategory_argsTupleScheme();
      }
    }

    private static class deleteProductCategory_argsTupleScheme extends TupleScheme<deleteProductCategory_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteProductCategory_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOriginVo()) {
          optionals.set(0);
        }
        if (struct.isSetProductCategoryVo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOriginVo()) {
          struct.originVo.write(oprot);
        }
        if (struct.isSetProductCategoryVo()) {
          struct.productCategoryVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteProductCategory_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.originVo = new com.froad.thrift.vo.OriginVo();
          struct.originVo.read(iprot);
          struct.setOriginVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.productCategoryVo = new com.froad.thrift.vo.ProductCategoryVo();
          struct.productCategoryVo.read(iprot);
          struct.setProductCategoryVoIsSet(true);
        }
      }
    }

  }

  public static class deleteProductCategory_result implements org.apache.thrift.TBase<deleteProductCategory_result, deleteProductCategory_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteProductCategory_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteProductCategory_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteProductCategory_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteProductCategory_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteProductCategory_result.class, metaDataMap);
    }

    public deleteProductCategory_result() {
    }

    public deleteProductCategory_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteProductCategory_result(deleteProductCategory_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public deleteProductCategory_result deepCopy() {
      return new deleteProductCategory_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public deleteProductCategory_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteProductCategory_result)
        return this.equals((deleteProductCategory_result)that);
      return false;
    }

    public boolean equals(deleteProductCategory_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteProductCategory_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteProductCategory_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteProductCategory_resultStandardSchemeFactory implements SchemeFactory {
      public deleteProductCategory_resultStandardScheme getScheme() {
        return new deleteProductCategory_resultStandardScheme();
      }
    }

    private static class deleteProductCategory_resultStandardScheme extends StandardScheme<deleteProductCategory_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteProductCategory_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteProductCategory_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteProductCategory_resultTupleSchemeFactory implements SchemeFactory {
      public deleteProductCategory_resultTupleScheme getScheme() {
        return new deleteProductCategory_resultTupleScheme();
      }
    }

    private static class deleteProductCategory_resultTupleScheme extends TupleScheme<deleteProductCategory_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteProductCategory_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteProductCategory_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateProductCategory_args implements org.apache.thrift.TBase<updateProductCategory_args, updateProductCategory_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateProductCategory_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateProductCategory_args");

    private static final org.apache.thrift.protocol.TField ORIGIN_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("originVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PRODUCT_CATEGORY_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("productCategoryVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateProductCategory_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateProductCategory_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OriginVo originVo; // required
    public com.froad.thrift.vo.ProductCategoryVo productCategoryVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORIGIN_VO((short)1, "originVo"),
      PRODUCT_CATEGORY_VO((short)2, "productCategoryVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORIGIN_VO
            return ORIGIN_VO;
          case 2: // PRODUCT_CATEGORY_VO
            return PRODUCT_CATEGORY_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORIGIN_VO, new org.apache.thrift.meta_data.FieldMetaData("originVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OriginVo.class)));
      tmpMap.put(_Fields.PRODUCT_CATEGORY_VO, new org.apache.thrift.meta_data.FieldMetaData("productCategoryVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ProductCategoryVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateProductCategory_args.class, metaDataMap);
    }

    public updateProductCategory_args() {
    }

    public updateProductCategory_args(
      com.froad.thrift.vo.OriginVo originVo,
      com.froad.thrift.vo.ProductCategoryVo productCategoryVo)
    {
      this();
      this.originVo = originVo;
      this.productCategoryVo = productCategoryVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateProductCategory_args(updateProductCategory_args other) {
      if (other.isSetOriginVo()) {
        this.originVo = new com.froad.thrift.vo.OriginVo(other.originVo);
      }
      if (other.isSetProductCategoryVo()) {
        this.productCategoryVo = new com.froad.thrift.vo.ProductCategoryVo(other.productCategoryVo);
      }
    }

    public updateProductCategory_args deepCopy() {
      return new updateProductCategory_args(this);
    }

    @Override
    public void clear() {
      this.originVo = null;
      this.productCategoryVo = null;
    }

    public com.froad.thrift.vo.OriginVo getOriginVo() {
      return this.originVo;
    }

    public updateProductCategory_args setOriginVo(com.froad.thrift.vo.OriginVo originVo) {
      this.originVo = originVo;
      return this;
    }

    public void unsetOriginVo() {
      this.originVo = null;
    }

    /** Returns true if field originVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginVo() {
      return this.originVo != null;
    }

    public void setOriginVoIsSet(boolean value) {
      if (!value) {
        this.originVo = null;
      }
    }

    public com.froad.thrift.vo.ProductCategoryVo getProductCategoryVo() {
      return this.productCategoryVo;
    }

    public updateProductCategory_args setProductCategoryVo(com.froad.thrift.vo.ProductCategoryVo productCategoryVo) {
      this.productCategoryVo = productCategoryVo;
      return this;
    }

    public void unsetProductCategoryVo() {
      this.productCategoryVo = null;
    }

    /** Returns true if field productCategoryVo is set (has been assigned a value) and false otherwise */
    public boolean isSetProductCategoryVo() {
      return this.productCategoryVo != null;
    }

    public void setProductCategoryVoIsSet(boolean value) {
      if (!value) {
        this.productCategoryVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORIGIN_VO:
        if (value == null) {
          unsetOriginVo();
        } else {
          setOriginVo((com.froad.thrift.vo.OriginVo)value);
        }
        break;

      case PRODUCT_CATEGORY_VO:
        if (value == null) {
          unsetProductCategoryVo();
        } else {
          setProductCategoryVo((com.froad.thrift.vo.ProductCategoryVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORIGIN_VO:
        return getOriginVo();

      case PRODUCT_CATEGORY_VO:
        return getProductCategoryVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORIGIN_VO:
        return isSetOriginVo();
      case PRODUCT_CATEGORY_VO:
        return isSetProductCategoryVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateProductCategory_args)
        return this.equals((updateProductCategory_args)that);
      return false;
    }

    public boolean equals(updateProductCategory_args that) {
      if (that == null)
        return false;

      boolean this_present_originVo = true && this.isSetOriginVo();
      boolean that_present_originVo = true && that.isSetOriginVo();
      if (this_present_originVo || that_present_originVo) {
        if (!(this_present_originVo && that_present_originVo))
          return false;
        if (!this.originVo.equals(that.originVo))
          return false;
      }

      boolean this_present_productCategoryVo = true && this.isSetProductCategoryVo();
      boolean that_present_productCategoryVo = true && that.isSetProductCategoryVo();
      if (this_present_productCategoryVo || that_present_productCategoryVo) {
        if (!(this_present_productCategoryVo && that_present_productCategoryVo))
          return false;
        if (!this.productCategoryVo.equals(that.productCategoryVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_originVo = true && (isSetOriginVo());
      list.add(present_originVo);
      if (present_originVo)
        list.add(originVo);

      boolean present_productCategoryVo = true && (isSetProductCategoryVo());
      list.add(present_productCategoryVo);
      if (present_productCategoryVo)
        list.add(productCategoryVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateProductCategory_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOriginVo()).compareTo(other.isSetOriginVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originVo, other.originVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetProductCategoryVo()).compareTo(other.isSetProductCategoryVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProductCategoryVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productCategoryVo, other.productCategoryVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateProductCategory_args(");
      boolean first = true;

      sb.append("originVo:");
      if (this.originVo == null) {
        sb.append("null");
      } else {
        sb.append(this.originVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("productCategoryVo:");
      if (this.productCategoryVo == null) {
        sb.append("null");
      } else {
        sb.append(this.productCategoryVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (originVo != null) {
        originVo.validate();
      }
      if (productCategoryVo != null) {
        productCategoryVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateProductCategory_argsStandardSchemeFactory implements SchemeFactory {
      public updateProductCategory_argsStandardScheme getScheme() {
        return new updateProductCategory_argsStandardScheme();
      }
    }

    private static class updateProductCategory_argsStandardScheme extends StandardScheme<updateProductCategory_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateProductCategory_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORIGIN_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.originVo = new com.froad.thrift.vo.OriginVo();
                struct.originVo.read(iprot);
                struct.setOriginVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PRODUCT_CATEGORY_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.productCategoryVo = new com.froad.thrift.vo.ProductCategoryVo();
                struct.productCategoryVo.read(iprot);
                struct.setProductCategoryVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateProductCategory_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.originVo != null) {
          oprot.writeFieldBegin(ORIGIN_VO_FIELD_DESC);
          struct.originVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.productCategoryVo != null) {
          oprot.writeFieldBegin(PRODUCT_CATEGORY_VO_FIELD_DESC);
          struct.productCategoryVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateProductCategory_argsTupleSchemeFactory implements SchemeFactory {
      public updateProductCategory_argsTupleScheme getScheme() {
        return new updateProductCategory_argsTupleScheme();
      }
    }

    private static class updateProductCategory_argsTupleScheme extends TupleScheme<updateProductCategory_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateProductCategory_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOriginVo()) {
          optionals.set(0);
        }
        if (struct.isSetProductCategoryVo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOriginVo()) {
          struct.originVo.write(oprot);
        }
        if (struct.isSetProductCategoryVo()) {
          struct.productCategoryVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateProductCategory_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.originVo = new com.froad.thrift.vo.OriginVo();
          struct.originVo.read(iprot);
          struct.setOriginVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.productCategoryVo = new com.froad.thrift.vo.ProductCategoryVo();
          struct.productCategoryVo.read(iprot);
          struct.setProductCategoryVoIsSet(true);
        }
      }
    }

  }

  public static class updateProductCategory_result implements org.apache.thrift.TBase<updateProductCategory_result, updateProductCategory_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateProductCategory_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateProductCategory_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateProductCategory_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateProductCategory_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateProductCategory_result.class, metaDataMap);
    }

    public updateProductCategory_result() {
    }

    public updateProductCategory_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateProductCategory_result(updateProductCategory_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public updateProductCategory_result deepCopy() {
      return new updateProductCategory_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public updateProductCategory_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateProductCategory_result)
        return this.equals((updateProductCategory_result)that);
      return false;
    }

    public boolean equals(updateProductCategory_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateProductCategory_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateProductCategory_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateProductCategory_resultStandardSchemeFactory implements SchemeFactory {
      public updateProductCategory_resultStandardScheme getScheme() {
        return new updateProductCategory_resultStandardScheme();
      }
    }

    private static class updateProductCategory_resultStandardScheme extends StandardScheme<updateProductCategory_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateProductCategory_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateProductCategory_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateProductCategory_resultTupleSchemeFactory implements SchemeFactory {
      public updateProductCategory_resultTupleScheme getScheme() {
        return new updateProductCategory_resultTupleScheme();
      }
    }

    private static class updateProductCategory_resultTupleScheme extends TupleScheme<updateProductCategory_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateProductCategory_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateProductCategory_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getProductCategoryById_args implements org.apache.thrift.TBase<getProductCategoryById_args, getProductCategoryById_args._Fields>, java.io.Serializable, Cloneable, Comparable<getProductCategoryById_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProductCategoryById_args");

    private static final org.apache.thrift.protocol.TField PRODUCT_CATEGORY_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("productCategoryVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getProductCategoryById_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getProductCategoryById_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ProductCategoryVo productCategoryVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PRODUCT_CATEGORY_VO((short)1, "productCategoryVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PRODUCT_CATEGORY_VO
            return PRODUCT_CATEGORY_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PRODUCT_CATEGORY_VO, new org.apache.thrift.meta_data.FieldMetaData("productCategoryVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ProductCategoryVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProductCategoryById_args.class, metaDataMap);
    }

    public getProductCategoryById_args() {
    }

    public getProductCategoryById_args(
      com.froad.thrift.vo.ProductCategoryVo productCategoryVo)
    {
      this();
      this.productCategoryVo = productCategoryVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProductCategoryById_args(getProductCategoryById_args other) {
      if (other.isSetProductCategoryVo()) {
        this.productCategoryVo = new com.froad.thrift.vo.ProductCategoryVo(other.productCategoryVo);
      }
    }

    public getProductCategoryById_args deepCopy() {
      return new getProductCategoryById_args(this);
    }

    @Override
    public void clear() {
      this.productCategoryVo = null;
    }

    public com.froad.thrift.vo.ProductCategoryVo getProductCategoryVo() {
      return this.productCategoryVo;
    }

    public getProductCategoryById_args setProductCategoryVo(com.froad.thrift.vo.ProductCategoryVo productCategoryVo) {
      this.productCategoryVo = productCategoryVo;
      return this;
    }

    public void unsetProductCategoryVo() {
      this.productCategoryVo = null;
    }

    /** Returns true if field productCategoryVo is set (has been assigned a value) and false otherwise */
    public boolean isSetProductCategoryVo() {
      return this.productCategoryVo != null;
    }

    public void setProductCategoryVoIsSet(boolean value) {
      if (!value) {
        this.productCategoryVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PRODUCT_CATEGORY_VO:
        if (value == null) {
          unsetProductCategoryVo();
        } else {
          setProductCategoryVo((com.froad.thrift.vo.ProductCategoryVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PRODUCT_CATEGORY_VO:
        return getProductCategoryVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PRODUCT_CATEGORY_VO:
        return isSetProductCategoryVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getProductCategoryById_args)
        return this.equals((getProductCategoryById_args)that);
      return false;
    }

    public boolean equals(getProductCategoryById_args that) {
      if (that == null)
        return false;

      boolean this_present_productCategoryVo = true && this.isSetProductCategoryVo();
      boolean that_present_productCategoryVo = true && that.isSetProductCategoryVo();
      if (this_present_productCategoryVo || that_present_productCategoryVo) {
        if (!(this_present_productCategoryVo && that_present_productCategoryVo))
          return false;
        if (!this.productCategoryVo.equals(that.productCategoryVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_productCategoryVo = true && (isSetProductCategoryVo());
      list.add(present_productCategoryVo);
      if (present_productCategoryVo)
        list.add(productCategoryVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(getProductCategoryById_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProductCategoryVo()).compareTo(other.isSetProductCategoryVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProductCategoryVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productCategoryVo, other.productCategoryVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getProductCategoryById_args(");
      boolean first = true;

      sb.append("productCategoryVo:");
      if (this.productCategoryVo == null) {
        sb.append("null");
      } else {
        sb.append(this.productCategoryVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (productCategoryVo != null) {
        productCategoryVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getProductCategoryById_argsStandardSchemeFactory implements SchemeFactory {
      public getProductCategoryById_argsStandardScheme getScheme() {
        return new getProductCategoryById_argsStandardScheme();
      }
    }

    private static class getProductCategoryById_argsStandardScheme extends StandardScheme<getProductCategoryById_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getProductCategoryById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PRODUCT_CATEGORY_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.productCategoryVo = new com.froad.thrift.vo.ProductCategoryVo();
                struct.productCategoryVo.read(iprot);
                struct.setProductCategoryVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getProductCategoryById_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.productCategoryVo != null) {
          oprot.writeFieldBegin(PRODUCT_CATEGORY_VO_FIELD_DESC);
          struct.productCategoryVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getProductCategoryById_argsTupleSchemeFactory implements SchemeFactory {
      public getProductCategoryById_argsTupleScheme getScheme() {
        return new getProductCategoryById_argsTupleScheme();
      }
    }

    private static class getProductCategoryById_argsTupleScheme extends TupleScheme<getProductCategoryById_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getProductCategoryById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProductCategoryVo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetProductCategoryVo()) {
          struct.productCategoryVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getProductCategoryById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.productCategoryVo = new com.froad.thrift.vo.ProductCategoryVo();
          struct.productCategoryVo.read(iprot);
          struct.setProductCategoryVoIsSet(true);
        }
      }
    }

  }

  public static class getProductCategoryById_result implements org.apache.thrift.TBase<getProductCategoryById_result, getProductCategoryById_result._Fields>, java.io.Serializable, Cloneable, Comparable<getProductCategoryById_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProductCategoryById_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getProductCategoryById_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getProductCategoryById_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ProductCategoryVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ProductCategoryVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProductCategoryById_result.class, metaDataMap);
    }

    public getProductCategoryById_result() {
    }

    public getProductCategoryById_result(
      com.froad.thrift.vo.ProductCategoryVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProductCategoryById_result(getProductCategoryById_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ProductCategoryVo(other.success);
      }
    }

    public getProductCategoryById_result deepCopy() {
      return new getProductCategoryById_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ProductCategoryVo getSuccess() {
      return this.success;
    }

    public getProductCategoryById_result setSuccess(com.froad.thrift.vo.ProductCategoryVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ProductCategoryVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getProductCategoryById_result)
        return this.equals((getProductCategoryById_result)that);
      return false;
    }

    public boolean equals(getProductCategoryById_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getProductCategoryById_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getProductCategoryById_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getProductCategoryById_resultStandardSchemeFactory implements SchemeFactory {
      public getProductCategoryById_resultStandardScheme getScheme() {
        return new getProductCategoryById_resultStandardScheme();
      }
    }

    private static class getProductCategoryById_resultStandardScheme extends StandardScheme<getProductCategoryById_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getProductCategoryById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ProductCategoryVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getProductCategoryById_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getProductCategoryById_resultTupleSchemeFactory implements SchemeFactory {
      public getProductCategoryById_resultTupleScheme getScheme() {
        return new getProductCategoryById_resultTupleScheme();
      }
    }

    private static class getProductCategoryById_resultTupleScheme extends TupleScheme<getProductCategoryById_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getProductCategoryById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getProductCategoryById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ProductCategoryVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class isProductCategoryExist_args implements org.apache.thrift.TBase<isProductCategoryExist_args, isProductCategoryExist_args._Fields>, java.io.Serializable, Cloneable, Comparable<isProductCategoryExist_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("isProductCategoryExist_args");

    private static final org.apache.thrift.protocol.TField PRODUCT_CATEGORY_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("productCategoryVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new isProductCategoryExist_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new isProductCategoryExist_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ProductCategoryVo productCategoryVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PRODUCT_CATEGORY_VO((short)1, "productCategoryVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PRODUCT_CATEGORY_VO
            return PRODUCT_CATEGORY_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PRODUCT_CATEGORY_VO, new org.apache.thrift.meta_data.FieldMetaData("productCategoryVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ProductCategoryVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(isProductCategoryExist_args.class, metaDataMap);
    }

    public isProductCategoryExist_args() {
    }

    public isProductCategoryExist_args(
      com.froad.thrift.vo.ProductCategoryVo productCategoryVo)
    {
      this();
      this.productCategoryVo = productCategoryVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public isProductCategoryExist_args(isProductCategoryExist_args other) {
      if (other.isSetProductCategoryVo()) {
        this.productCategoryVo = new com.froad.thrift.vo.ProductCategoryVo(other.productCategoryVo);
      }
    }

    public isProductCategoryExist_args deepCopy() {
      return new isProductCategoryExist_args(this);
    }

    @Override
    public void clear() {
      this.productCategoryVo = null;
    }

    public com.froad.thrift.vo.ProductCategoryVo getProductCategoryVo() {
      return this.productCategoryVo;
    }

    public isProductCategoryExist_args setProductCategoryVo(com.froad.thrift.vo.ProductCategoryVo productCategoryVo) {
      this.productCategoryVo = productCategoryVo;
      return this;
    }

    public void unsetProductCategoryVo() {
      this.productCategoryVo = null;
    }

    /** Returns true if field productCategoryVo is set (has been assigned a value) and false otherwise */
    public boolean isSetProductCategoryVo() {
      return this.productCategoryVo != null;
    }

    public void setProductCategoryVoIsSet(boolean value) {
      if (!value) {
        this.productCategoryVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PRODUCT_CATEGORY_VO:
        if (value == null) {
          unsetProductCategoryVo();
        } else {
          setProductCategoryVo((com.froad.thrift.vo.ProductCategoryVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PRODUCT_CATEGORY_VO:
        return getProductCategoryVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PRODUCT_CATEGORY_VO:
        return isSetProductCategoryVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof isProductCategoryExist_args)
        return this.equals((isProductCategoryExist_args)that);
      return false;
    }

    public boolean equals(isProductCategoryExist_args that) {
      if (that == null)
        return false;

      boolean this_present_productCategoryVo = true && this.isSetProductCategoryVo();
      boolean that_present_productCategoryVo = true && that.isSetProductCategoryVo();
      if (this_present_productCategoryVo || that_present_productCategoryVo) {
        if (!(this_present_productCategoryVo && that_present_productCategoryVo))
          return false;
        if (!this.productCategoryVo.equals(that.productCategoryVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_productCategoryVo = true && (isSetProductCategoryVo());
      list.add(present_productCategoryVo);
      if (present_productCategoryVo)
        list.add(productCategoryVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(isProductCategoryExist_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProductCategoryVo()).compareTo(other.isSetProductCategoryVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProductCategoryVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productCategoryVo, other.productCategoryVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("isProductCategoryExist_args(");
      boolean first = true;

      sb.append("productCategoryVo:");
      if (this.productCategoryVo == null) {
        sb.append("null");
      } else {
        sb.append(this.productCategoryVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (productCategoryVo != null) {
        productCategoryVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class isProductCategoryExist_argsStandardSchemeFactory implements SchemeFactory {
      public isProductCategoryExist_argsStandardScheme getScheme() {
        return new isProductCategoryExist_argsStandardScheme();
      }
    }

    private static class isProductCategoryExist_argsStandardScheme extends StandardScheme<isProductCategoryExist_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, isProductCategoryExist_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PRODUCT_CATEGORY_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.productCategoryVo = new com.froad.thrift.vo.ProductCategoryVo();
                struct.productCategoryVo.read(iprot);
                struct.setProductCategoryVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, isProductCategoryExist_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.productCategoryVo != null) {
          oprot.writeFieldBegin(PRODUCT_CATEGORY_VO_FIELD_DESC);
          struct.productCategoryVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class isProductCategoryExist_argsTupleSchemeFactory implements SchemeFactory {
      public isProductCategoryExist_argsTupleScheme getScheme() {
        return new isProductCategoryExist_argsTupleScheme();
      }
    }

    private static class isProductCategoryExist_argsTupleScheme extends TupleScheme<isProductCategoryExist_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, isProductCategoryExist_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProductCategoryVo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetProductCategoryVo()) {
          struct.productCategoryVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, isProductCategoryExist_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.productCategoryVo = new com.froad.thrift.vo.ProductCategoryVo();
          struct.productCategoryVo.read(iprot);
          struct.setProductCategoryVoIsSet(true);
        }
      }
    }

  }

  public static class isProductCategoryExist_result implements org.apache.thrift.TBase<isProductCategoryExist_result, isProductCategoryExist_result._Fields>, java.io.Serializable, Cloneable, Comparable<isProductCategoryExist_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("isProductCategoryExist_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new isProductCategoryExist_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new isProductCategoryExist_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(isProductCategoryExist_result.class, metaDataMap);
    }

    public isProductCategoryExist_result() {
    }

    public isProductCategoryExist_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public isProductCategoryExist_result(isProductCategoryExist_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public isProductCategoryExist_result deepCopy() {
      return new isProductCategoryExist_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public isProductCategoryExist_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof isProductCategoryExist_result)
        return this.equals((isProductCategoryExist_result)that);
      return false;
    }

    public boolean equals(isProductCategoryExist_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(isProductCategoryExist_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("isProductCategoryExist_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class isProductCategoryExist_resultStandardSchemeFactory implements SchemeFactory {
      public isProductCategoryExist_resultStandardScheme getScheme() {
        return new isProductCategoryExist_resultStandardScheme();
      }
    }

    private static class isProductCategoryExist_resultStandardScheme extends StandardScheme<isProductCategoryExist_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, isProductCategoryExist_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, isProductCategoryExist_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class isProductCategoryExist_resultTupleSchemeFactory implements SchemeFactory {
      public isProductCategoryExist_resultTupleScheme getScheme() {
        return new isProductCategoryExist_resultTupleScheme();
      }
    }

    private static class isProductCategoryExist_resultTupleScheme extends TupleScheme<isProductCategoryExist_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, isProductCategoryExist_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, isProductCategoryExist_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class findCategorysByPage_args implements org.apache.thrift.TBase<findCategorysByPage_args, findCategorysByPage_args._Fields>, java.io.Serializable, Cloneable, Comparable<findCategorysByPage_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findCategorysByPage_args");

    private static final org.apache.thrift.protocol.TField PRODUCT_CATEGORY_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("productCategoryVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PAGE_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("pageVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findCategorysByPage_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findCategorysByPage_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ProductCategoryVo productCategoryVo; // required
    public com.froad.thrift.vo.PageVo pageVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PRODUCT_CATEGORY_VO((short)1, "productCategoryVo"),
      PAGE_VO((short)2, "pageVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PRODUCT_CATEGORY_VO
            return PRODUCT_CATEGORY_VO;
          case 2: // PAGE_VO
            return PAGE_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PRODUCT_CATEGORY_VO, new org.apache.thrift.meta_data.FieldMetaData("productCategoryVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ProductCategoryVo.class)));
      tmpMap.put(_Fields.PAGE_VO, new org.apache.thrift.meta_data.FieldMetaData("pageVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.PageVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findCategorysByPage_args.class, metaDataMap);
    }

    public findCategorysByPage_args() {
    }

    public findCategorysByPage_args(
      com.froad.thrift.vo.ProductCategoryVo productCategoryVo,
      com.froad.thrift.vo.PageVo pageVo)
    {
      this();
      this.productCategoryVo = productCategoryVo;
      this.pageVo = pageVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findCategorysByPage_args(findCategorysByPage_args other) {
      if (other.isSetProductCategoryVo()) {
        this.productCategoryVo = new com.froad.thrift.vo.ProductCategoryVo(other.productCategoryVo);
      }
      if (other.isSetPageVo()) {
        this.pageVo = new com.froad.thrift.vo.PageVo(other.pageVo);
      }
    }

    public findCategorysByPage_args deepCopy() {
      return new findCategorysByPage_args(this);
    }

    @Override
    public void clear() {
      this.productCategoryVo = null;
      this.pageVo = null;
    }

    public com.froad.thrift.vo.ProductCategoryVo getProductCategoryVo() {
      return this.productCategoryVo;
    }

    public findCategorysByPage_args setProductCategoryVo(com.froad.thrift.vo.ProductCategoryVo productCategoryVo) {
      this.productCategoryVo = productCategoryVo;
      return this;
    }

    public void unsetProductCategoryVo() {
      this.productCategoryVo = null;
    }

    /** Returns true if field productCategoryVo is set (has been assigned a value) and false otherwise */
    public boolean isSetProductCategoryVo() {
      return this.productCategoryVo != null;
    }

    public void setProductCategoryVoIsSet(boolean value) {
      if (!value) {
        this.productCategoryVo = null;
      }
    }

    public com.froad.thrift.vo.PageVo getPageVo() {
      return this.pageVo;
    }

    public findCategorysByPage_args setPageVo(com.froad.thrift.vo.PageVo pageVo) {
      this.pageVo = pageVo;
      return this;
    }

    public void unsetPageVo() {
      this.pageVo = null;
    }

    /** Returns true if field pageVo is set (has been assigned a value) and false otherwise */
    public boolean isSetPageVo() {
      return this.pageVo != null;
    }

    public void setPageVoIsSet(boolean value) {
      if (!value) {
        this.pageVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PRODUCT_CATEGORY_VO:
        if (value == null) {
          unsetProductCategoryVo();
        } else {
          setProductCategoryVo((com.froad.thrift.vo.ProductCategoryVo)value);
        }
        break;

      case PAGE_VO:
        if (value == null) {
          unsetPageVo();
        } else {
          setPageVo((com.froad.thrift.vo.PageVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PRODUCT_CATEGORY_VO:
        return getProductCategoryVo();

      case PAGE_VO:
        return getPageVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PRODUCT_CATEGORY_VO:
        return isSetProductCategoryVo();
      case PAGE_VO:
        return isSetPageVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findCategorysByPage_args)
        return this.equals((findCategorysByPage_args)that);
      return false;
    }

    public boolean equals(findCategorysByPage_args that) {
      if (that == null)
        return false;

      boolean this_present_productCategoryVo = true && this.isSetProductCategoryVo();
      boolean that_present_productCategoryVo = true && that.isSetProductCategoryVo();
      if (this_present_productCategoryVo || that_present_productCategoryVo) {
        if (!(this_present_productCategoryVo && that_present_productCategoryVo))
          return false;
        if (!this.productCategoryVo.equals(that.productCategoryVo))
          return false;
      }

      boolean this_present_pageVo = true && this.isSetPageVo();
      boolean that_present_pageVo = true && that.isSetPageVo();
      if (this_present_pageVo || that_present_pageVo) {
        if (!(this_present_pageVo && that_present_pageVo))
          return false;
        if (!this.pageVo.equals(that.pageVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_productCategoryVo = true && (isSetProductCategoryVo());
      list.add(present_productCategoryVo);
      if (present_productCategoryVo)
        list.add(productCategoryVo);

      boolean present_pageVo = true && (isSetPageVo());
      list.add(present_pageVo);
      if (present_pageVo)
        list.add(pageVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(findCategorysByPage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProductCategoryVo()).compareTo(other.isSetProductCategoryVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProductCategoryVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productCategoryVo, other.productCategoryVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageVo()).compareTo(other.isSetPageVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageVo, other.pageVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findCategorysByPage_args(");
      boolean first = true;

      sb.append("productCategoryVo:");
      if (this.productCategoryVo == null) {
        sb.append("null");
      } else {
        sb.append(this.productCategoryVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageVo:");
      if (this.pageVo == null) {
        sb.append("null");
      } else {
        sb.append(this.pageVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (productCategoryVo != null) {
        productCategoryVo.validate();
      }
      if (pageVo != null) {
        pageVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findCategorysByPage_argsStandardSchemeFactory implements SchemeFactory {
      public findCategorysByPage_argsStandardScheme getScheme() {
        return new findCategorysByPage_argsStandardScheme();
      }
    }

    private static class findCategorysByPage_argsStandardScheme extends StandardScheme<findCategorysByPage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findCategorysByPage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PRODUCT_CATEGORY_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.productCategoryVo = new com.froad.thrift.vo.ProductCategoryVo();
                struct.productCategoryVo.read(iprot);
                struct.setProductCategoryVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PAGE_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.pageVo = new com.froad.thrift.vo.PageVo();
                struct.pageVo.read(iprot);
                struct.setPageVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findCategorysByPage_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.productCategoryVo != null) {
          oprot.writeFieldBegin(PRODUCT_CATEGORY_VO_FIELD_DESC);
          struct.productCategoryVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.pageVo != null) {
          oprot.writeFieldBegin(PAGE_VO_FIELD_DESC);
          struct.pageVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findCategorysByPage_argsTupleSchemeFactory implements SchemeFactory {
      public findCategorysByPage_argsTupleScheme getScheme() {
        return new findCategorysByPage_argsTupleScheme();
      }
    }

    private static class findCategorysByPage_argsTupleScheme extends TupleScheme<findCategorysByPage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findCategorysByPage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProductCategoryVo()) {
          optionals.set(0);
        }
        if (struct.isSetPageVo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetProductCategoryVo()) {
          struct.productCategoryVo.write(oprot);
        }
        if (struct.isSetPageVo()) {
          struct.pageVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findCategorysByPage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.productCategoryVo = new com.froad.thrift.vo.ProductCategoryVo();
          struct.productCategoryVo.read(iprot);
          struct.setProductCategoryVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.pageVo = new com.froad.thrift.vo.PageVo();
          struct.pageVo.read(iprot);
          struct.setPageVoIsSet(true);
        }
      }
    }

  }

  public static class findCategorysByPage_result implements org.apache.thrift.TBase<findCategorysByPage_result, findCategorysByPage_result._Fields>, java.io.Serializable, Cloneable, Comparable<findCategorysByPage_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findCategorysByPage_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findCategorysByPage_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findCategorysByPage_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ProductCategoryPageVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ProductCategoryPageVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findCategorysByPage_result.class, metaDataMap);
    }

    public findCategorysByPage_result() {
    }

    public findCategorysByPage_result(
      com.froad.thrift.vo.ProductCategoryPageVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findCategorysByPage_result(findCategorysByPage_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ProductCategoryPageVo(other.success);
      }
    }

    public findCategorysByPage_result deepCopy() {
      return new findCategorysByPage_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ProductCategoryPageVo getSuccess() {
      return this.success;
    }

    public findCategorysByPage_result setSuccess(com.froad.thrift.vo.ProductCategoryPageVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ProductCategoryPageVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findCategorysByPage_result)
        return this.equals((findCategorysByPage_result)that);
      return false;
    }

    public boolean equals(findCategorysByPage_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(findCategorysByPage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findCategorysByPage_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findCategorysByPage_resultStandardSchemeFactory implements SchemeFactory {
      public findCategorysByPage_resultStandardScheme getScheme() {
        return new findCategorysByPage_resultStandardScheme();
      }
    }

    private static class findCategorysByPage_resultStandardScheme extends StandardScheme<findCategorysByPage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findCategorysByPage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ProductCategoryPageVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findCategorysByPage_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findCategorysByPage_resultTupleSchemeFactory implements SchemeFactory {
      public findCategorysByPage_resultTupleScheme getScheme() {
        return new findCategorysByPage_resultTupleScheme();
      }
    }

    private static class findCategorysByPage_resultTupleScheme extends TupleScheme<findCategorysByPage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findCategorysByPage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findCategorysByPage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ProductCategoryPageVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryProductCategorys_args implements org.apache.thrift.TBase<queryProductCategorys_args, queryProductCategorys_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryProductCategorys_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryProductCategorys_args");

    private static final org.apache.thrift.protocol.TField PRODUCT_CATEGORY_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("productCategoryVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PAGE_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("pageVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryProductCategorys_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryProductCategorys_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ProductCategoryVo productCategoryVo; // required
    public com.froad.thrift.vo.PageVo pageVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PRODUCT_CATEGORY_VO((short)1, "productCategoryVo"),
      PAGE_VO((short)2, "pageVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PRODUCT_CATEGORY_VO
            return PRODUCT_CATEGORY_VO;
          case 2: // PAGE_VO
            return PAGE_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PRODUCT_CATEGORY_VO, new org.apache.thrift.meta_data.FieldMetaData("productCategoryVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ProductCategoryVo.class)));
      tmpMap.put(_Fields.PAGE_VO, new org.apache.thrift.meta_data.FieldMetaData("pageVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.PageVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryProductCategorys_args.class, metaDataMap);
    }

    public queryProductCategorys_args() {
    }

    public queryProductCategorys_args(
      com.froad.thrift.vo.ProductCategoryVo productCategoryVo,
      com.froad.thrift.vo.PageVo pageVo)
    {
      this();
      this.productCategoryVo = productCategoryVo;
      this.pageVo = pageVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryProductCategorys_args(queryProductCategorys_args other) {
      if (other.isSetProductCategoryVo()) {
        this.productCategoryVo = new com.froad.thrift.vo.ProductCategoryVo(other.productCategoryVo);
      }
      if (other.isSetPageVo()) {
        this.pageVo = new com.froad.thrift.vo.PageVo(other.pageVo);
      }
    }

    public queryProductCategorys_args deepCopy() {
      return new queryProductCategorys_args(this);
    }

    @Override
    public void clear() {
      this.productCategoryVo = null;
      this.pageVo = null;
    }

    public com.froad.thrift.vo.ProductCategoryVo getProductCategoryVo() {
      return this.productCategoryVo;
    }

    public queryProductCategorys_args setProductCategoryVo(com.froad.thrift.vo.ProductCategoryVo productCategoryVo) {
      this.productCategoryVo = productCategoryVo;
      return this;
    }

    public void unsetProductCategoryVo() {
      this.productCategoryVo = null;
    }

    /** Returns true if field productCategoryVo is set (has been assigned a value) and false otherwise */
    public boolean isSetProductCategoryVo() {
      return this.productCategoryVo != null;
    }

    public void setProductCategoryVoIsSet(boolean value) {
      if (!value) {
        this.productCategoryVo = null;
      }
    }

    public com.froad.thrift.vo.PageVo getPageVo() {
      return this.pageVo;
    }

    public queryProductCategorys_args setPageVo(com.froad.thrift.vo.PageVo pageVo) {
      this.pageVo = pageVo;
      return this;
    }

    public void unsetPageVo() {
      this.pageVo = null;
    }

    /** Returns true if field pageVo is set (has been assigned a value) and false otherwise */
    public boolean isSetPageVo() {
      return this.pageVo != null;
    }

    public void setPageVoIsSet(boolean value) {
      if (!value) {
        this.pageVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PRODUCT_CATEGORY_VO:
        if (value == null) {
          unsetProductCategoryVo();
        } else {
          setProductCategoryVo((com.froad.thrift.vo.ProductCategoryVo)value);
        }
        break;

      case PAGE_VO:
        if (value == null) {
          unsetPageVo();
        } else {
          setPageVo((com.froad.thrift.vo.PageVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PRODUCT_CATEGORY_VO:
        return getProductCategoryVo();

      case PAGE_VO:
        return getPageVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PRODUCT_CATEGORY_VO:
        return isSetProductCategoryVo();
      case PAGE_VO:
        return isSetPageVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryProductCategorys_args)
        return this.equals((queryProductCategorys_args)that);
      return false;
    }

    public boolean equals(queryProductCategorys_args that) {
      if (that == null)
        return false;

      boolean this_present_productCategoryVo = true && this.isSetProductCategoryVo();
      boolean that_present_productCategoryVo = true && that.isSetProductCategoryVo();
      if (this_present_productCategoryVo || that_present_productCategoryVo) {
        if (!(this_present_productCategoryVo && that_present_productCategoryVo))
          return false;
        if (!this.productCategoryVo.equals(that.productCategoryVo))
          return false;
      }

      boolean this_present_pageVo = true && this.isSetPageVo();
      boolean that_present_pageVo = true && that.isSetPageVo();
      if (this_present_pageVo || that_present_pageVo) {
        if (!(this_present_pageVo && that_present_pageVo))
          return false;
        if (!this.pageVo.equals(that.pageVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_productCategoryVo = true && (isSetProductCategoryVo());
      list.add(present_productCategoryVo);
      if (present_productCategoryVo)
        list.add(productCategoryVo);

      boolean present_pageVo = true && (isSetPageVo());
      list.add(present_pageVo);
      if (present_pageVo)
        list.add(pageVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryProductCategorys_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProductCategoryVo()).compareTo(other.isSetProductCategoryVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProductCategoryVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productCategoryVo, other.productCategoryVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageVo()).compareTo(other.isSetPageVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageVo, other.pageVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryProductCategorys_args(");
      boolean first = true;

      sb.append("productCategoryVo:");
      if (this.productCategoryVo == null) {
        sb.append("null");
      } else {
        sb.append(this.productCategoryVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageVo:");
      if (this.pageVo == null) {
        sb.append("null");
      } else {
        sb.append(this.pageVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (productCategoryVo != null) {
        productCategoryVo.validate();
      }
      if (pageVo != null) {
        pageVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryProductCategorys_argsStandardSchemeFactory implements SchemeFactory {
      public queryProductCategorys_argsStandardScheme getScheme() {
        return new queryProductCategorys_argsStandardScheme();
      }
    }

    private static class queryProductCategorys_argsStandardScheme extends StandardScheme<queryProductCategorys_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryProductCategorys_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PRODUCT_CATEGORY_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.productCategoryVo = new com.froad.thrift.vo.ProductCategoryVo();
                struct.productCategoryVo.read(iprot);
                struct.setProductCategoryVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PAGE_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.pageVo = new com.froad.thrift.vo.PageVo();
                struct.pageVo.read(iprot);
                struct.setPageVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryProductCategorys_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.productCategoryVo != null) {
          oprot.writeFieldBegin(PRODUCT_CATEGORY_VO_FIELD_DESC);
          struct.productCategoryVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.pageVo != null) {
          oprot.writeFieldBegin(PAGE_VO_FIELD_DESC);
          struct.pageVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryProductCategorys_argsTupleSchemeFactory implements SchemeFactory {
      public queryProductCategorys_argsTupleScheme getScheme() {
        return new queryProductCategorys_argsTupleScheme();
      }
    }

    private static class queryProductCategorys_argsTupleScheme extends TupleScheme<queryProductCategorys_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryProductCategorys_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProductCategoryVo()) {
          optionals.set(0);
        }
        if (struct.isSetPageVo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetProductCategoryVo()) {
          struct.productCategoryVo.write(oprot);
        }
        if (struct.isSetPageVo()) {
          struct.pageVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryProductCategorys_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.productCategoryVo = new com.froad.thrift.vo.ProductCategoryVo();
          struct.productCategoryVo.read(iprot);
          struct.setProductCategoryVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.pageVo = new com.froad.thrift.vo.PageVo();
          struct.pageVo.read(iprot);
          struct.setPageVoIsSet(true);
        }
      }
    }

  }

  public static class queryProductCategorys_result implements org.apache.thrift.TBase<queryProductCategorys_result, queryProductCategorys_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryProductCategorys_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryProductCategorys_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryProductCategorys_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryProductCategorys_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ProductCategoryPageVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ProductCategoryPageVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryProductCategorys_result.class, metaDataMap);
    }

    public queryProductCategorys_result() {
    }

    public queryProductCategorys_result(
      com.froad.thrift.vo.ProductCategoryPageVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryProductCategorys_result(queryProductCategorys_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ProductCategoryPageVo(other.success);
      }
    }

    public queryProductCategorys_result deepCopy() {
      return new queryProductCategorys_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ProductCategoryPageVo getSuccess() {
      return this.success;
    }

    public queryProductCategorys_result setSuccess(com.froad.thrift.vo.ProductCategoryPageVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ProductCategoryPageVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryProductCategorys_result)
        return this.equals((queryProductCategorys_result)that);
      return false;
    }

    public boolean equals(queryProductCategorys_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryProductCategorys_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryProductCategorys_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryProductCategorys_resultStandardSchemeFactory implements SchemeFactory {
      public queryProductCategorys_resultStandardScheme getScheme() {
        return new queryProductCategorys_resultStandardScheme();
      }
    }

    private static class queryProductCategorys_resultStandardScheme extends StandardScheme<queryProductCategorys_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryProductCategorys_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ProductCategoryPageVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryProductCategorys_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryProductCategorys_resultTupleSchemeFactory implements SchemeFactory {
      public queryProductCategorys_resultTupleScheme getScheme() {
        return new queryProductCategorys_resultTupleScheme();
      }
    }

    private static class queryProductCategorys_resultTupleScheme extends TupleScheme<queryProductCategorys_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryProductCategorys_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryProductCategorys_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ProductCategoryPageVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class findCategorys_args implements org.apache.thrift.TBase<findCategorys_args, findCategorys_args._Fields>, java.io.Serializable, Cloneable, Comparable<findCategorys_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findCategorys_args");

    private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findCategorys_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findCategorys_argsTupleSchemeFactory());
    }

    public String clientId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CLIENT_ID((short)1, "clientId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CLIENT_ID
            return CLIENT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findCategorys_args.class, metaDataMap);
    }

    public findCategorys_args() {
    }

    public findCategorys_args(
      String clientId)
    {
      this();
      this.clientId = clientId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findCategorys_args(findCategorys_args other) {
      if (other.isSetClientId()) {
        this.clientId = other.clientId;
      }
    }

    public findCategorys_args deepCopy() {
      return new findCategorys_args(this);
    }

    @Override
    public void clear() {
      this.clientId = null;
    }

    public String getClientId() {
      return this.clientId;
    }

    public findCategorys_args setClientId(String clientId) {
      this.clientId = clientId;
      return this;
    }

    public void unsetClientId() {
      this.clientId = null;
    }

    /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
    public boolean isSetClientId() {
      return this.clientId != null;
    }

    public void setClientIdIsSet(boolean value) {
      if (!value) {
        this.clientId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CLIENT_ID:
        if (value == null) {
          unsetClientId();
        } else {
          setClientId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CLIENT_ID:
        return getClientId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CLIENT_ID:
        return isSetClientId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findCategorys_args)
        return this.equals((findCategorys_args)that);
      return false;
    }

    public boolean equals(findCategorys_args that) {
      if (that == null)
        return false;

      boolean this_present_clientId = true && this.isSetClientId();
      boolean that_present_clientId = true && that.isSetClientId();
      if (this_present_clientId || that_present_clientId) {
        if (!(this_present_clientId && that_present_clientId))
          return false;
        if (!this.clientId.equals(that.clientId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_clientId = true && (isSetClientId());
      list.add(present_clientId);
      if (present_clientId)
        list.add(clientId);

      return list.hashCode();
    }

    @Override
    public int compareTo(findCategorys_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findCategorys_args(");
      boolean first = true;

      sb.append("clientId:");
      if (this.clientId == null) {
        sb.append("null");
      } else {
        sb.append(this.clientId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findCategorys_argsStandardSchemeFactory implements SchemeFactory {
      public findCategorys_argsStandardScheme getScheme() {
        return new findCategorys_argsStandardScheme();
      }
    }

    private static class findCategorys_argsStandardScheme extends StandardScheme<findCategorys_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findCategorys_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CLIENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clientId = iprot.readString();
                struct.setClientIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findCategorys_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.clientId != null) {
          oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
          oprot.writeString(struct.clientId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findCategorys_argsTupleSchemeFactory implements SchemeFactory {
      public findCategorys_argsTupleScheme getScheme() {
        return new findCategorys_argsTupleScheme();
      }
    }

    private static class findCategorys_argsTupleScheme extends TupleScheme<findCategorys_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findCategorys_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetClientId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetClientId()) {
          oprot.writeString(struct.clientId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findCategorys_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.clientId = iprot.readString();
          struct.setClientIdIsSet(true);
        }
      }
    }

  }

  public static class findCategorys_result implements org.apache.thrift.TBase<findCategorys_result, findCategorys_result._Fields>, java.io.Serializable, Cloneable, Comparable<findCategorys_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findCategorys_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findCategorys_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findCategorys_resultTupleSchemeFactory());
    }

    public List<com.froad.thrift.vo.ProductCategoryVo> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ProductCategoryVo.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findCategorys_result.class, metaDataMap);
    }

    public findCategorys_result() {
    }

    public findCategorys_result(
      List<com.froad.thrift.vo.ProductCategoryVo> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findCategorys_result(findCategorys_result other) {
      if (other.isSetSuccess()) {
        List<com.froad.thrift.vo.ProductCategoryVo> __this__success = new ArrayList<com.froad.thrift.vo.ProductCategoryVo>(other.success.size());
        for (com.froad.thrift.vo.ProductCategoryVo other_element : other.success) {
          __this__success.add(new com.froad.thrift.vo.ProductCategoryVo(other_element));
        }
        this.success = __this__success;
      }
    }

    public findCategorys_result deepCopy() {
      return new findCategorys_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.froad.thrift.vo.ProductCategoryVo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.froad.thrift.vo.ProductCategoryVo elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.froad.thrift.vo.ProductCategoryVo>();
      }
      this.success.add(elem);
    }

    public List<com.froad.thrift.vo.ProductCategoryVo> getSuccess() {
      return this.success;
    }

    public findCategorys_result setSuccess(List<com.froad.thrift.vo.ProductCategoryVo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.froad.thrift.vo.ProductCategoryVo>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findCategorys_result)
        return this.equals((findCategorys_result)that);
      return false;
    }

    public boolean equals(findCategorys_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(findCategorys_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findCategorys_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findCategorys_resultStandardSchemeFactory implements SchemeFactory {
      public findCategorys_resultStandardScheme getScheme() {
        return new findCategorys_resultStandardScheme();
      }
    }

    private static class findCategorys_resultStandardScheme extends StandardScheme<findCategorys_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findCategorys_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.success = new ArrayList<com.froad.thrift.vo.ProductCategoryVo>(_list0.size);
                  com.froad.thrift.vo.ProductCategoryVo _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    _elem1 = new com.froad.thrift.vo.ProductCategoryVo();
                    _elem1.read(iprot);
                    struct.success.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findCategorys_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.froad.thrift.vo.ProductCategoryVo _iter3 : struct.success)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findCategorys_resultTupleSchemeFactory implements SchemeFactory {
      public findCategorys_resultTupleScheme getScheme() {
        return new findCategorys_resultTupleScheme();
      }
    }

    private static class findCategorys_resultTupleScheme extends TupleScheme<findCategorys_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findCategorys_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.froad.thrift.vo.ProductCategoryVo _iter4 : struct.success)
            {
              _iter4.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findCategorys_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.froad.thrift.vo.ProductCategoryVo>(_list5.size);
            com.froad.thrift.vo.ProductCategoryVo _elem6;
            for (int _i7 = 0; _i7 < _list5.size; ++_i7)
            {
              _elem6 = new com.froad.thrift.vo.ProductCategoryVo();
              _elem6.read(iprot);
              struct.success.add(_elem6);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class addProductCategoryBatch_args implements org.apache.thrift.TBase<addProductCategoryBatch_args, addProductCategoryBatch_args._Fields>, java.io.Serializable, Cloneable, Comparable<addProductCategoryBatch_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addProductCategoryBatch_args");

    private static final org.apache.thrift.protocol.TField ORIGIN_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("originVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PRODUCT_CATEGORY_VOS_FIELD_DESC = new org.apache.thrift.protocol.TField("productCategoryVos", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addProductCategoryBatch_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addProductCategoryBatch_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OriginVo originVo; // required
    public List<com.froad.thrift.vo.ProductCategoryVo> productCategoryVos; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORIGIN_VO((short)1, "originVo"),
      PRODUCT_CATEGORY_VOS((short)2, "productCategoryVos");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORIGIN_VO
            return ORIGIN_VO;
          case 2: // PRODUCT_CATEGORY_VOS
            return PRODUCT_CATEGORY_VOS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORIGIN_VO, new org.apache.thrift.meta_data.FieldMetaData("originVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OriginVo.class)));
      tmpMap.put(_Fields.PRODUCT_CATEGORY_VOS, new org.apache.thrift.meta_data.FieldMetaData("productCategoryVos", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ProductCategoryVo.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addProductCategoryBatch_args.class, metaDataMap);
    }

    public addProductCategoryBatch_args() {
    }

    public addProductCategoryBatch_args(
      com.froad.thrift.vo.OriginVo originVo,
      List<com.froad.thrift.vo.ProductCategoryVo> productCategoryVos)
    {
      this();
      this.originVo = originVo;
      this.productCategoryVos = productCategoryVos;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addProductCategoryBatch_args(addProductCategoryBatch_args other) {
      if (other.isSetOriginVo()) {
        this.originVo = new com.froad.thrift.vo.OriginVo(other.originVo);
      }
      if (other.isSetProductCategoryVos()) {
        List<com.froad.thrift.vo.ProductCategoryVo> __this__productCategoryVos = new ArrayList<com.froad.thrift.vo.ProductCategoryVo>(other.productCategoryVos.size());
        for (com.froad.thrift.vo.ProductCategoryVo other_element : other.productCategoryVos) {
          __this__productCategoryVos.add(new com.froad.thrift.vo.ProductCategoryVo(other_element));
        }
        this.productCategoryVos = __this__productCategoryVos;
      }
    }

    public addProductCategoryBatch_args deepCopy() {
      return new addProductCategoryBatch_args(this);
    }

    @Override
    public void clear() {
      this.originVo = null;
      this.productCategoryVos = null;
    }

    public com.froad.thrift.vo.OriginVo getOriginVo() {
      return this.originVo;
    }

    public addProductCategoryBatch_args setOriginVo(com.froad.thrift.vo.OriginVo originVo) {
      this.originVo = originVo;
      return this;
    }

    public void unsetOriginVo() {
      this.originVo = null;
    }

    /** Returns true if field originVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginVo() {
      return this.originVo != null;
    }

    public void setOriginVoIsSet(boolean value) {
      if (!value) {
        this.originVo = null;
      }
    }

    public int getProductCategoryVosSize() {
      return (this.productCategoryVos == null) ? 0 : this.productCategoryVos.size();
    }

    public java.util.Iterator<com.froad.thrift.vo.ProductCategoryVo> getProductCategoryVosIterator() {
      return (this.productCategoryVos == null) ? null : this.productCategoryVos.iterator();
    }

    public void addToProductCategoryVos(com.froad.thrift.vo.ProductCategoryVo elem) {
      if (this.productCategoryVos == null) {
        this.productCategoryVos = new ArrayList<com.froad.thrift.vo.ProductCategoryVo>();
      }
      this.productCategoryVos.add(elem);
    }

    public List<com.froad.thrift.vo.ProductCategoryVo> getProductCategoryVos() {
      return this.productCategoryVos;
    }

    public addProductCategoryBatch_args setProductCategoryVos(List<com.froad.thrift.vo.ProductCategoryVo> productCategoryVos) {
      this.productCategoryVos = productCategoryVos;
      return this;
    }

    public void unsetProductCategoryVos() {
      this.productCategoryVos = null;
    }

    /** Returns true if field productCategoryVos is set (has been assigned a value) and false otherwise */
    public boolean isSetProductCategoryVos() {
      return this.productCategoryVos != null;
    }

    public void setProductCategoryVosIsSet(boolean value) {
      if (!value) {
        this.productCategoryVos = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORIGIN_VO:
        if (value == null) {
          unsetOriginVo();
        } else {
          setOriginVo((com.froad.thrift.vo.OriginVo)value);
        }
        break;

      case PRODUCT_CATEGORY_VOS:
        if (value == null) {
          unsetProductCategoryVos();
        } else {
          setProductCategoryVos((List<com.froad.thrift.vo.ProductCategoryVo>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORIGIN_VO:
        return getOriginVo();

      case PRODUCT_CATEGORY_VOS:
        return getProductCategoryVos();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORIGIN_VO:
        return isSetOriginVo();
      case PRODUCT_CATEGORY_VOS:
        return isSetProductCategoryVos();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addProductCategoryBatch_args)
        return this.equals((addProductCategoryBatch_args)that);
      return false;
    }

    public boolean equals(addProductCategoryBatch_args that) {
      if (that == null)
        return false;

      boolean this_present_originVo = true && this.isSetOriginVo();
      boolean that_present_originVo = true && that.isSetOriginVo();
      if (this_present_originVo || that_present_originVo) {
        if (!(this_present_originVo && that_present_originVo))
          return false;
        if (!this.originVo.equals(that.originVo))
          return false;
      }

      boolean this_present_productCategoryVos = true && this.isSetProductCategoryVos();
      boolean that_present_productCategoryVos = true && that.isSetProductCategoryVos();
      if (this_present_productCategoryVos || that_present_productCategoryVos) {
        if (!(this_present_productCategoryVos && that_present_productCategoryVos))
          return false;
        if (!this.productCategoryVos.equals(that.productCategoryVos))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_originVo = true && (isSetOriginVo());
      list.add(present_originVo);
      if (present_originVo)
        list.add(originVo);

      boolean present_productCategoryVos = true && (isSetProductCategoryVos());
      list.add(present_productCategoryVos);
      if (present_productCategoryVos)
        list.add(productCategoryVos);

      return list.hashCode();
    }

    @Override
    public int compareTo(addProductCategoryBatch_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOriginVo()).compareTo(other.isSetOriginVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originVo, other.originVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetProductCategoryVos()).compareTo(other.isSetProductCategoryVos());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProductCategoryVos()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productCategoryVos, other.productCategoryVos);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addProductCategoryBatch_args(");
      boolean first = true;

      sb.append("originVo:");
      if (this.originVo == null) {
        sb.append("null");
      } else {
        sb.append(this.originVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("productCategoryVos:");
      if (this.productCategoryVos == null) {
        sb.append("null");
      } else {
        sb.append(this.productCategoryVos);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (originVo != null) {
        originVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addProductCategoryBatch_argsStandardSchemeFactory implements SchemeFactory {
      public addProductCategoryBatch_argsStandardScheme getScheme() {
        return new addProductCategoryBatch_argsStandardScheme();
      }
    }

    private static class addProductCategoryBatch_argsStandardScheme extends StandardScheme<addProductCategoryBatch_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addProductCategoryBatch_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORIGIN_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.originVo = new com.froad.thrift.vo.OriginVo();
                struct.originVo.read(iprot);
                struct.setOriginVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PRODUCT_CATEGORY_VOS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.productCategoryVos = new ArrayList<com.froad.thrift.vo.ProductCategoryVo>(_list8.size);
                  com.froad.thrift.vo.ProductCategoryVo _elem9;
                  for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                  {
                    _elem9 = new com.froad.thrift.vo.ProductCategoryVo();
                    _elem9.read(iprot);
                    struct.productCategoryVos.add(_elem9);
                  }
                  iprot.readListEnd();
                }
                struct.setProductCategoryVosIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addProductCategoryBatch_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.originVo != null) {
          oprot.writeFieldBegin(ORIGIN_VO_FIELD_DESC);
          struct.originVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.productCategoryVos != null) {
          oprot.writeFieldBegin(PRODUCT_CATEGORY_VOS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.productCategoryVos.size()));
            for (com.froad.thrift.vo.ProductCategoryVo _iter11 : struct.productCategoryVos)
            {
              _iter11.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addProductCategoryBatch_argsTupleSchemeFactory implements SchemeFactory {
      public addProductCategoryBatch_argsTupleScheme getScheme() {
        return new addProductCategoryBatch_argsTupleScheme();
      }
    }

    private static class addProductCategoryBatch_argsTupleScheme extends TupleScheme<addProductCategoryBatch_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addProductCategoryBatch_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOriginVo()) {
          optionals.set(0);
        }
        if (struct.isSetProductCategoryVos()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOriginVo()) {
          struct.originVo.write(oprot);
        }
        if (struct.isSetProductCategoryVos()) {
          {
            oprot.writeI32(struct.productCategoryVos.size());
            for (com.froad.thrift.vo.ProductCategoryVo _iter12 : struct.productCategoryVos)
            {
              _iter12.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addProductCategoryBatch_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.originVo = new com.froad.thrift.vo.OriginVo();
          struct.originVo.read(iprot);
          struct.setOriginVoIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.productCategoryVos = new ArrayList<com.froad.thrift.vo.ProductCategoryVo>(_list13.size);
            com.froad.thrift.vo.ProductCategoryVo _elem14;
            for (int _i15 = 0; _i15 < _list13.size; ++_i15)
            {
              _elem14 = new com.froad.thrift.vo.ProductCategoryVo();
              _elem14.read(iprot);
              struct.productCategoryVos.add(_elem14);
            }
          }
          struct.setProductCategoryVosIsSet(true);
        }
      }
    }

  }

  public static class addProductCategoryBatch_result implements org.apache.thrift.TBase<addProductCategoryBatch_result, addProductCategoryBatch_result._Fields>, java.io.Serializable, Cloneable, Comparable<addProductCategoryBatch_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addProductCategoryBatch_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addProductCategoryBatch_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addProductCategoryBatch_resultTupleSchemeFactory());
    }

    public List<com.froad.thrift.vo.AddProductCategoryVoRes> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.AddProductCategoryVoRes.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addProductCategoryBatch_result.class, metaDataMap);
    }

    public addProductCategoryBatch_result() {
    }

    public addProductCategoryBatch_result(
      List<com.froad.thrift.vo.AddProductCategoryVoRes> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addProductCategoryBatch_result(addProductCategoryBatch_result other) {
      if (other.isSetSuccess()) {
        List<com.froad.thrift.vo.AddProductCategoryVoRes> __this__success = new ArrayList<com.froad.thrift.vo.AddProductCategoryVoRes>(other.success.size());
        for (com.froad.thrift.vo.AddProductCategoryVoRes other_element : other.success) {
          __this__success.add(new com.froad.thrift.vo.AddProductCategoryVoRes(other_element));
        }
        this.success = __this__success;
      }
    }

    public addProductCategoryBatch_result deepCopy() {
      return new addProductCategoryBatch_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.froad.thrift.vo.AddProductCategoryVoRes> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.froad.thrift.vo.AddProductCategoryVoRes elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.froad.thrift.vo.AddProductCategoryVoRes>();
      }
      this.success.add(elem);
    }

    public List<com.froad.thrift.vo.AddProductCategoryVoRes> getSuccess() {
      return this.success;
    }

    public addProductCategoryBatch_result setSuccess(List<com.froad.thrift.vo.AddProductCategoryVoRes> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.froad.thrift.vo.AddProductCategoryVoRes>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addProductCategoryBatch_result)
        return this.equals((addProductCategoryBatch_result)that);
      return false;
    }

    public boolean equals(addProductCategoryBatch_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(addProductCategoryBatch_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addProductCategoryBatch_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addProductCategoryBatch_resultStandardSchemeFactory implements SchemeFactory {
      public addProductCategoryBatch_resultStandardScheme getScheme() {
        return new addProductCategoryBatch_resultStandardScheme();
      }
    }

    private static class addProductCategoryBatch_resultStandardScheme extends StandardScheme<addProductCategoryBatch_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addProductCategoryBatch_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                  struct.success = new ArrayList<com.froad.thrift.vo.AddProductCategoryVoRes>(_list16.size);
                  com.froad.thrift.vo.AddProductCategoryVoRes _elem17;
                  for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                  {
                    _elem17 = new com.froad.thrift.vo.AddProductCategoryVoRes();
                    _elem17.read(iprot);
                    struct.success.add(_elem17);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addProductCategoryBatch_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.froad.thrift.vo.AddProductCategoryVoRes _iter19 : struct.success)
            {
              _iter19.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addProductCategoryBatch_resultTupleSchemeFactory implements SchemeFactory {
      public addProductCategoryBatch_resultTupleScheme getScheme() {
        return new addProductCategoryBatch_resultTupleScheme();
      }
    }

    private static class addProductCategoryBatch_resultTupleScheme extends TupleScheme<addProductCategoryBatch_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addProductCategoryBatch_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.froad.thrift.vo.AddProductCategoryVoRes _iter20 : struct.success)
            {
              _iter20.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addProductCategoryBatch_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.froad.thrift.vo.AddProductCategoryVoRes>(_list21.size);
            com.froad.thrift.vo.AddProductCategoryVoRes _elem22;
            for (int _i23 = 0; _i23 < _list21.size; ++_i23)
            {
              _elem22 = new com.froad.thrift.vo.AddProductCategoryVoRes();
              _elem22.read(iprot);
              struct.success.add(_elem22);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryH5ProductCategorys_args implements org.apache.thrift.TBase<queryH5ProductCategorys_args, queryH5ProductCategorys_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryH5ProductCategorys_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryH5ProductCategorys_args");

    private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PARENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("parentId", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField AREA_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("areaId", org.apache.thrift.protocol.TType.I64, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryH5ProductCategorys_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryH5ProductCategorys_argsTupleSchemeFactory());
    }

    public String clientId; // required
    public long parentId; // required
    public long areaId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CLIENT_ID((short)1, "clientId"),
      PARENT_ID((short)2, "parentId"),
      AREA_ID((short)3, "areaId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CLIENT_ID
            return CLIENT_ID;
          case 2: // PARENT_ID
            return PARENT_ID;
          case 3: // AREA_ID
            return AREA_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PARENTID_ISSET_ID = 0;
    private static final int __AREAID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PARENT_ID, new org.apache.thrift.meta_data.FieldMetaData("parentId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.AREA_ID, new org.apache.thrift.meta_data.FieldMetaData("areaId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryH5ProductCategorys_args.class, metaDataMap);
    }

    public queryH5ProductCategorys_args() {
    }

    public queryH5ProductCategorys_args(
      String clientId,
      long parentId,
      long areaId)
    {
      this();
      this.clientId = clientId;
      this.parentId = parentId;
      setParentIdIsSet(true);
      this.areaId = areaId;
      setAreaIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryH5ProductCategorys_args(queryH5ProductCategorys_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetClientId()) {
        this.clientId = other.clientId;
      }
      this.parentId = other.parentId;
      this.areaId = other.areaId;
    }

    public queryH5ProductCategorys_args deepCopy() {
      return new queryH5ProductCategorys_args(this);
    }

    @Override
    public void clear() {
      this.clientId = null;
      setParentIdIsSet(false);
      this.parentId = 0;
      setAreaIdIsSet(false);
      this.areaId = 0;
    }

    public String getClientId() {
      return this.clientId;
    }

    public queryH5ProductCategorys_args setClientId(String clientId) {
      this.clientId = clientId;
      return this;
    }

    public void unsetClientId() {
      this.clientId = null;
    }

    /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
    public boolean isSetClientId() {
      return this.clientId != null;
    }

    public void setClientIdIsSet(boolean value) {
      if (!value) {
        this.clientId = null;
      }
    }

    public long getParentId() {
      return this.parentId;
    }

    public queryH5ProductCategorys_args setParentId(long parentId) {
      this.parentId = parentId;
      setParentIdIsSet(true);
      return this;
    }

    public void unsetParentId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PARENTID_ISSET_ID);
    }

    /** Returns true if field parentId is set (has been assigned a value) and false otherwise */
    public boolean isSetParentId() {
      return EncodingUtils.testBit(__isset_bitfield, __PARENTID_ISSET_ID);
    }

    public void setParentIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PARENTID_ISSET_ID, value);
    }

    public long getAreaId() {
      return this.areaId;
    }

    public queryH5ProductCategorys_args setAreaId(long areaId) {
      this.areaId = areaId;
      setAreaIdIsSet(true);
      return this;
    }

    public void unsetAreaId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AREAID_ISSET_ID);
    }

    /** Returns true if field areaId is set (has been assigned a value) and false otherwise */
    public boolean isSetAreaId() {
      return EncodingUtils.testBit(__isset_bitfield, __AREAID_ISSET_ID);
    }

    public void setAreaIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AREAID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CLIENT_ID:
        if (value == null) {
          unsetClientId();
        } else {
          setClientId((String)value);
        }
        break;

      case PARENT_ID:
        if (value == null) {
          unsetParentId();
        } else {
          setParentId((Long)value);
        }
        break;

      case AREA_ID:
        if (value == null) {
          unsetAreaId();
        } else {
          setAreaId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CLIENT_ID:
        return getClientId();

      case PARENT_ID:
        return Long.valueOf(getParentId());

      case AREA_ID:
        return Long.valueOf(getAreaId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CLIENT_ID:
        return isSetClientId();
      case PARENT_ID:
        return isSetParentId();
      case AREA_ID:
        return isSetAreaId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryH5ProductCategorys_args)
        return this.equals((queryH5ProductCategorys_args)that);
      return false;
    }

    public boolean equals(queryH5ProductCategorys_args that) {
      if (that == null)
        return false;

      boolean this_present_clientId = true && this.isSetClientId();
      boolean that_present_clientId = true && that.isSetClientId();
      if (this_present_clientId || that_present_clientId) {
        if (!(this_present_clientId && that_present_clientId))
          return false;
        if (!this.clientId.equals(that.clientId))
          return false;
      }

      boolean this_present_parentId = true;
      boolean that_present_parentId = true;
      if (this_present_parentId || that_present_parentId) {
        if (!(this_present_parentId && that_present_parentId))
          return false;
        if (this.parentId != that.parentId)
          return false;
      }

      boolean this_present_areaId = true;
      boolean that_present_areaId = true;
      if (this_present_areaId || that_present_areaId) {
        if (!(this_present_areaId && that_present_areaId))
          return false;
        if (this.areaId != that.areaId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_clientId = true && (isSetClientId());
      list.add(present_clientId);
      if (present_clientId)
        list.add(clientId);

      boolean present_parentId = true;
      list.add(present_parentId);
      if (present_parentId)
        list.add(parentId);

      boolean present_areaId = true;
      list.add(present_areaId);
      if (present_areaId)
        list.add(areaId);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryH5ProductCategorys_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetParentId()).compareTo(other.isSetParentId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParentId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parentId, other.parentId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAreaId()).compareTo(other.isSetAreaId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAreaId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.areaId, other.areaId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryH5ProductCategorys_args(");
      boolean first = true;

      sb.append("clientId:");
      if (this.clientId == null) {
        sb.append("null");
      } else {
        sb.append(this.clientId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("parentId:");
      sb.append(this.parentId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("areaId:");
      sb.append(this.areaId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryH5ProductCategorys_argsStandardSchemeFactory implements SchemeFactory {
      public queryH5ProductCategorys_argsStandardScheme getScheme() {
        return new queryH5ProductCategorys_argsStandardScheme();
      }
    }

    private static class queryH5ProductCategorys_argsStandardScheme extends StandardScheme<queryH5ProductCategorys_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryH5ProductCategorys_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CLIENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clientId = iprot.readString();
                struct.setClientIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PARENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.parentId = iprot.readI64();
                struct.setParentIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // AREA_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.areaId = iprot.readI64();
                struct.setAreaIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryH5ProductCategorys_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.clientId != null) {
          oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
          oprot.writeString(struct.clientId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PARENT_ID_FIELD_DESC);
        oprot.writeI64(struct.parentId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(AREA_ID_FIELD_DESC);
        oprot.writeI64(struct.areaId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryH5ProductCategorys_argsTupleSchemeFactory implements SchemeFactory {
      public queryH5ProductCategorys_argsTupleScheme getScheme() {
        return new queryH5ProductCategorys_argsTupleScheme();
      }
    }

    private static class queryH5ProductCategorys_argsTupleScheme extends TupleScheme<queryH5ProductCategorys_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryH5ProductCategorys_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetClientId()) {
          optionals.set(0);
        }
        if (struct.isSetParentId()) {
          optionals.set(1);
        }
        if (struct.isSetAreaId()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetClientId()) {
          oprot.writeString(struct.clientId);
        }
        if (struct.isSetParentId()) {
          oprot.writeI64(struct.parentId);
        }
        if (struct.isSetAreaId()) {
          oprot.writeI64(struct.areaId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryH5ProductCategorys_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.clientId = iprot.readString();
          struct.setClientIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.parentId = iprot.readI64();
          struct.setParentIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.areaId = iprot.readI64();
          struct.setAreaIdIsSet(true);
        }
      }
    }

  }

  public static class queryH5ProductCategorys_result implements org.apache.thrift.TBase<queryH5ProductCategorys_result, queryH5ProductCategorys_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryH5ProductCategorys_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryH5ProductCategorys_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryH5ProductCategorys_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryH5ProductCategorys_resultTupleSchemeFactory());
    }

    public List<com.froad.thrift.vo.ProductCategoryVo> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ProductCategoryVo.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryH5ProductCategorys_result.class, metaDataMap);
    }

    public queryH5ProductCategorys_result() {
    }

    public queryH5ProductCategorys_result(
      List<com.froad.thrift.vo.ProductCategoryVo> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryH5ProductCategorys_result(queryH5ProductCategorys_result other) {
      if (other.isSetSuccess()) {
        List<com.froad.thrift.vo.ProductCategoryVo> __this__success = new ArrayList<com.froad.thrift.vo.ProductCategoryVo>(other.success.size());
        for (com.froad.thrift.vo.ProductCategoryVo other_element : other.success) {
          __this__success.add(new com.froad.thrift.vo.ProductCategoryVo(other_element));
        }
        this.success = __this__success;
      }
    }

    public queryH5ProductCategorys_result deepCopy() {
      return new queryH5ProductCategorys_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.froad.thrift.vo.ProductCategoryVo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.froad.thrift.vo.ProductCategoryVo elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.froad.thrift.vo.ProductCategoryVo>();
      }
      this.success.add(elem);
    }

    public List<com.froad.thrift.vo.ProductCategoryVo> getSuccess() {
      return this.success;
    }

    public queryH5ProductCategorys_result setSuccess(List<com.froad.thrift.vo.ProductCategoryVo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.froad.thrift.vo.ProductCategoryVo>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryH5ProductCategorys_result)
        return this.equals((queryH5ProductCategorys_result)that);
      return false;
    }

    public boolean equals(queryH5ProductCategorys_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryH5ProductCategorys_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryH5ProductCategorys_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryH5ProductCategorys_resultStandardSchemeFactory implements SchemeFactory {
      public queryH5ProductCategorys_resultStandardScheme getScheme() {
        return new queryH5ProductCategorys_resultStandardScheme();
      }
    }

    private static class queryH5ProductCategorys_resultStandardScheme extends StandardScheme<queryH5ProductCategorys_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryH5ProductCategorys_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                  struct.success = new ArrayList<com.froad.thrift.vo.ProductCategoryVo>(_list24.size);
                  com.froad.thrift.vo.ProductCategoryVo _elem25;
                  for (int _i26 = 0; _i26 < _list24.size; ++_i26)
                  {
                    _elem25 = new com.froad.thrift.vo.ProductCategoryVo();
                    _elem25.read(iprot);
                    struct.success.add(_elem25);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryH5ProductCategorys_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.froad.thrift.vo.ProductCategoryVo _iter27 : struct.success)
            {
              _iter27.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryH5ProductCategorys_resultTupleSchemeFactory implements SchemeFactory {
      public queryH5ProductCategorys_resultTupleScheme getScheme() {
        return new queryH5ProductCategorys_resultTupleScheme();
      }
    }

    private static class queryH5ProductCategorys_resultTupleScheme extends TupleScheme<queryH5ProductCategorys_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryH5ProductCategorys_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.froad.thrift.vo.ProductCategoryVo _iter28 : struct.success)
            {
              _iter28.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryH5ProductCategorys_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.froad.thrift.vo.ProductCategoryVo>(_list29.size);
            com.froad.thrift.vo.ProductCategoryVo _elem30;
            for (int _i31 = 0; _i31 < _list29.size; ++_i31)
            {
              _elem30 = new com.froad.thrift.vo.ProductCategoryVo();
              _elem30.read(iprot);
              struct.success.add(_elem30);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryManageProductCategorys_args implements org.apache.thrift.TBase<queryManageProductCategorys_args, queryManageProductCategorys_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryManageProductCategorys_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryManageProductCategorys_args");

    private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PARENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("parentId", org.apache.thrift.protocol.TType.I64, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryManageProductCategorys_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryManageProductCategorys_argsTupleSchemeFactory());
    }

    public String clientId; // required
    public long parentId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CLIENT_ID((short)1, "clientId"),
      PARENT_ID((short)2, "parentId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CLIENT_ID
            return CLIENT_ID;
          case 2: // PARENT_ID
            return PARENT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PARENTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PARENT_ID, new org.apache.thrift.meta_data.FieldMetaData("parentId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryManageProductCategorys_args.class, metaDataMap);
    }

    public queryManageProductCategorys_args() {
    }

    public queryManageProductCategorys_args(
      String clientId,
      long parentId)
    {
      this();
      this.clientId = clientId;
      this.parentId = parentId;
      setParentIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryManageProductCategorys_args(queryManageProductCategorys_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetClientId()) {
        this.clientId = other.clientId;
      }
      this.parentId = other.parentId;
    }

    public queryManageProductCategorys_args deepCopy() {
      return new queryManageProductCategorys_args(this);
    }

    @Override
    public void clear() {
      this.clientId = null;
      setParentIdIsSet(false);
      this.parentId = 0;
    }

    public String getClientId() {
      return this.clientId;
    }

    public queryManageProductCategorys_args setClientId(String clientId) {
      this.clientId = clientId;
      return this;
    }

    public void unsetClientId() {
      this.clientId = null;
    }

    /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
    public boolean isSetClientId() {
      return this.clientId != null;
    }

    public void setClientIdIsSet(boolean value) {
      if (!value) {
        this.clientId = null;
      }
    }

    public long getParentId() {
      return this.parentId;
    }

    public queryManageProductCategorys_args setParentId(long parentId) {
      this.parentId = parentId;
      setParentIdIsSet(true);
      return this;
    }

    public void unsetParentId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PARENTID_ISSET_ID);
    }

    /** Returns true if field parentId is set (has been assigned a value) and false otherwise */
    public boolean isSetParentId() {
      return EncodingUtils.testBit(__isset_bitfield, __PARENTID_ISSET_ID);
    }

    public void setParentIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PARENTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CLIENT_ID:
        if (value == null) {
          unsetClientId();
        } else {
          setClientId((String)value);
        }
        break;

      case PARENT_ID:
        if (value == null) {
          unsetParentId();
        } else {
          setParentId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CLIENT_ID:
        return getClientId();

      case PARENT_ID:
        return Long.valueOf(getParentId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CLIENT_ID:
        return isSetClientId();
      case PARENT_ID:
        return isSetParentId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryManageProductCategorys_args)
        return this.equals((queryManageProductCategorys_args)that);
      return false;
    }

    public boolean equals(queryManageProductCategorys_args that) {
      if (that == null)
        return false;

      boolean this_present_clientId = true && this.isSetClientId();
      boolean that_present_clientId = true && that.isSetClientId();
      if (this_present_clientId || that_present_clientId) {
        if (!(this_present_clientId && that_present_clientId))
          return false;
        if (!this.clientId.equals(that.clientId))
          return false;
      }

      boolean this_present_parentId = true;
      boolean that_present_parentId = true;
      if (this_present_parentId || that_present_parentId) {
        if (!(this_present_parentId && that_present_parentId))
          return false;
        if (this.parentId != that.parentId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_clientId = true && (isSetClientId());
      list.add(present_clientId);
      if (present_clientId)
        list.add(clientId);

      boolean present_parentId = true;
      list.add(present_parentId);
      if (present_parentId)
        list.add(parentId);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryManageProductCategorys_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetParentId()).compareTo(other.isSetParentId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParentId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parentId, other.parentId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryManageProductCategorys_args(");
      boolean first = true;

      sb.append("clientId:");
      if (this.clientId == null) {
        sb.append("null");
      } else {
        sb.append(this.clientId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("parentId:");
      sb.append(this.parentId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryManageProductCategorys_argsStandardSchemeFactory implements SchemeFactory {
      public queryManageProductCategorys_argsStandardScheme getScheme() {
        return new queryManageProductCategorys_argsStandardScheme();
      }
    }

    private static class queryManageProductCategorys_argsStandardScheme extends StandardScheme<queryManageProductCategorys_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryManageProductCategorys_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CLIENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clientId = iprot.readString();
                struct.setClientIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PARENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.parentId = iprot.readI64();
                struct.setParentIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryManageProductCategorys_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.clientId != null) {
          oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
          oprot.writeString(struct.clientId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PARENT_ID_FIELD_DESC);
        oprot.writeI64(struct.parentId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryManageProductCategorys_argsTupleSchemeFactory implements SchemeFactory {
      public queryManageProductCategorys_argsTupleScheme getScheme() {
        return new queryManageProductCategorys_argsTupleScheme();
      }
    }

    private static class queryManageProductCategorys_argsTupleScheme extends TupleScheme<queryManageProductCategorys_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryManageProductCategorys_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetClientId()) {
          optionals.set(0);
        }
        if (struct.isSetParentId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetClientId()) {
          oprot.writeString(struct.clientId);
        }
        if (struct.isSetParentId()) {
          oprot.writeI64(struct.parentId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryManageProductCategorys_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.clientId = iprot.readString();
          struct.setClientIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.parentId = iprot.readI64();
          struct.setParentIdIsSet(true);
        }
      }
    }

  }

  public static class queryManageProductCategorys_result implements org.apache.thrift.TBase<queryManageProductCategorys_result, queryManageProductCategorys_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryManageProductCategorys_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryManageProductCategorys_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryManageProductCategorys_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryManageProductCategorys_resultTupleSchemeFactory());
    }

    public List<com.froad.thrift.vo.ProductCategoryVo> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ProductCategoryVo.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryManageProductCategorys_result.class, metaDataMap);
    }

    public queryManageProductCategorys_result() {
    }

    public queryManageProductCategorys_result(
      List<com.froad.thrift.vo.ProductCategoryVo> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryManageProductCategorys_result(queryManageProductCategorys_result other) {
      if (other.isSetSuccess()) {
        List<com.froad.thrift.vo.ProductCategoryVo> __this__success = new ArrayList<com.froad.thrift.vo.ProductCategoryVo>(other.success.size());
        for (com.froad.thrift.vo.ProductCategoryVo other_element : other.success) {
          __this__success.add(new com.froad.thrift.vo.ProductCategoryVo(other_element));
        }
        this.success = __this__success;
      }
    }

    public queryManageProductCategorys_result deepCopy() {
      return new queryManageProductCategorys_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.froad.thrift.vo.ProductCategoryVo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.froad.thrift.vo.ProductCategoryVo elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.froad.thrift.vo.ProductCategoryVo>();
      }
      this.success.add(elem);
    }

    public List<com.froad.thrift.vo.ProductCategoryVo> getSuccess() {
      return this.success;
    }

    public queryManageProductCategorys_result setSuccess(List<com.froad.thrift.vo.ProductCategoryVo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.froad.thrift.vo.ProductCategoryVo>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryManageProductCategorys_result)
        return this.equals((queryManageProductCategorys_result)that);
      return false;
    }

    public boolean equals(queryManageProductCategorys_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryManageProductCategorys_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryManageProductCategorys_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryManageProductCategorys_resultStandardSchemeFactory implements SchemeFactory {
      public queryManageProductCategorys_resultStandardScheme getScheme() {
        return new queryManageProductCategorys_resultStandardScheme();
      }
    }

    private static class queryManageProductCategorys_resultStandardScheme extends StandardScheme<queryManageProductCategorys_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryManageProductCategorys_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                  struct.success = new ArrayList<com.froad.thrift.vo.ProductCategoryVo>(_list32.size);
                  com.froad.thrift.vo.ProductCategoryVo _elem33;
                  for (int _i34 = 0; _i34 < _list32.size; ++_i34)
                  {
                    _elem33 = new com.froad.thrift.vo.ProductCategoryVo();
                    _elem33.read(iprot);
                    struct.success.add(_elem33);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryManageProductCategorys_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.froad.thrift.vo.ProductCategoryVo _iter35 : struct.success)
            {
              _iter35.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryManageProductCategorys_resultTupleSchemeFactory implements SchemeFactory {
      public queryManageProductCategorys_resultTupleScheme getScheme() {
        return new queryManageProductCategorys_resultTupleScheme();
      }
    }

    private static class queryManageProductCategorys_resultTupleScheme extends TupleScheme<queryManageProductCategorys_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryManageProductCategorys_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.froad.thrift.vo.ProductCategoryVo _iter36 : struct.success)
            {
              _iter36.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryManageProductCategorys_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list37 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.froad.thrift.vo.ProductCategoryVo>(_list37.size);
            com.froad.thrift.vo.ProductCategoryVo _elem38;
            for (int _i39 = 0; _i39 < _list37.size; ++_i39)
            {
              _elem38 = new com.froad.thrift.vo.ProductCategoryVo();
              _elem38.read(iprot);
              struct.success.add(_elem38);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryBoutiqueGoodsCategorys_args implements org.apache.thrift.TBase<queryBoutiqueGoodsCategorys_args, queryBoutiqueGoodsCategorys_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryBoutiqueGoodsCategorys_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryBoutiqueGoodsCategorys_args");

    private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PARENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("parentId", org.apache.thrift.protocol.TType.I64, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryBoutiqueGoodsCategorys_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryBoutiqueGoodsCategorys_argsTupleSchemeFactory());
    }

    public String clientId; // required
    public long parentId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CLIENT_ID((short)1, "clientId"),
      PARENT_ID((short)2, "parentId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CLIENT_ID
            return CLIENT_ID;
          case 2: // PARENT_ID
            return PARENT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PARENTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PARENT_ID, new org.apache.thrift.meta_data.FieldMetaData("parentId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryBoutiqueGoodsCategorys_args.class, metaDataMap);
    }

    public queryBoutiqueGoodsCategorys_args() {
    }

    public queryBoutiqueGoodsCategorys_args(
      String clientId,
      long parentId)
    {
      this();
      this.clientId = clientId;
      this.parentId = parentId;
      setParentIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryBoutiqueGoodsCategorys_args(queryBoutiqueGoodsCategorys_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetClientId()) {
        this.clientId = other.clientId;
      }
      this.parentId = other.parentId;
    }

    public queryBoutiqueGoodsCategorys_args deepCopy() {
      return new queryBoutiqueGoodsCategorys_args(this);
    }

    @Override
    public void clear() {
      this.clientId = null;
      setParentIdIsSet(false);
      this.parentId = 0;
    }

    public String getClientId() {
      return this.clientId;
    }

    public queryBoutiqueGoodsCategorys_args setClientId(String clientId) {
      this.clientId = clientId;
      return this;
    }

    public void unsetClientId() {
      this.clientId = null;
    }

    /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
    public boolean isSetClientId() {
      return this.clientId != null;
    }

    public void setClientIdIsSet(boolean value) {
      if (!value) {
        this.clientId = null;
      }
    }

    public long getParentId() {
      return this.parentId;
    }

    public queryBoutiqueGoodsCategorys_args setParentId(long parentId) {
      this.parentId = parentId;
      setParentIdIsSet(true);
      return this;
    }

    public void unsetParentId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PARENTID_ISSET_ID);
    }

    /** Returns true if field parentId is set (has been assigned a value) and false otherwise */
    public boolean isSetParentId() {
      return EncodingUtils.testBit(__isset_bitfield, __PARENTID_ISSET_ID);
    }

    public void setParentIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PARENTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CLIENT_ID:
        if (value == null) {
          unsetClientId();
        } else {
          setClientId((String)value);
        }
        break;

      case PARENT_ID:
        if (value == null) {
          unsetParentId();
        } else {
          setParentId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CLIENT_ID:
        return getClientId();

      case PARENT_ID:
        return Long.valueOf(getParentId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CLIENT_ID:
        return isSetClientId();
      case PARENT_ID:
        return isSetParentId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryBoutiqueGoodsCategorys_args)
        return this.equals((queryBoutiqueGoodsCategorys_args)that);
      return false;
    }

    public boolean equals(queryBoutiqueGoodsCategorys_args that) {
      if (that == null)
        return false;

      boolean this_present_clientId = true && this.isSetClientId();
      boolean that_present_clientId = true && that.isSetClientId();
      if (this_present_clientId || that_present_clientId) {
        if (!(this_present_clientId && that_present_clientId))
          return false;
        if (!this.clientId.equals(that.clientId))
          return false;
      }

      boolean this_present_parentId = true;
      boolean that_present_parentId = true;
      if (this_present_parentId || that_present_parentId) {
        if (!(this_present_parentId && that_present_parentId))
          return false;
        if (this.parentId != that.parentId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_clientId = true && (isSetClientId());
      list.add(present_clientId);
      if (present_clientId)
        list.add(clientId);

      boolean present_parentId = true;
      list.add(present_parentId);
      if (present_parentId)
        list.add(parentId);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryBoutiqueGoodsCategorys_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetParentId()).compareTo(other.isSetParentId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParentId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parentId, other.parentId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryBoutiqueGoodsCategorys_args(");
      boolean first = true;

      sb.append("clientId:");
      if (this.clientId == null) {
        sb.append("null");
      } else {
        sb.append(this.clientId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("parentId:");
      sb.append(this.parentId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryBoutiqueGoodsCategorys_argsStandardSchemeFactory implements SchemeFactory {
      public queryBoutiqueGoodsCategorys_argsStandardScheme getScheme() {
        return new queryBoutiqueGoodsCategorys_argsStandardScheme();
      }
    }

    private static class queryBoutiqueGoodsCategorys_argsStandardScheme extends StandardScheme<queryBoutiqueGoodsCategorys_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryBoutiqueGoodsCategorys_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CLIENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clientId = iprot.readString();
                struct.setClientIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PARENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.parentId = iprot.readI64();
                struct.setParentIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryBoutiqueGoodsCategorys_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.clientId != null) {
          oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
          oprot.writeString(struct.clientId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PARENT_ID_FIELD_DESC);
        oprot.writeI64(struct.parentId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryBoutiqueGoodsCategorys_argsTupleSchemeFactory implements SchemeFactory {
      public queryBoutiqueGoodsCategorys_argsTupleScheme getScheme() {
        return new queryBoutiqueGoodsCategorys_argsTupleScheme();
      }
    }

    private static class queryBoutiqueGoodsCategorys_argsTupleScheme extends TupleScheme<queryBoutiqueGoodsCategorys_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryBoutiqueGoodsCategorys_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetClientId()) {
          optionals.set(0);
        }
        if (struct.isSetParentId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetClientId()) {
          oprot.writeString(struct.clientId);
        }
        if (struct.isSetParentId()) {
          oprot.writeI64(struct.parentId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryBoutiqueGoodsCategorys_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.clientId = iprot.readString();
          struct.setClientIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.parentId = iprot.readI64();
          struct.setParentIdIsSet(true);
        }
      }
    }

  }

  public static class queryBoutiqueGoodsCategorys_result implements org.apache.thrift.TBase<queryBoutiqueGoodsCategorys_result, queryBoutiqueGoodsCategorys_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryBoutiqueGoodsCategorys_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryBoutiqueGoodsCategorys_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryBoutiqueGoodsCategorys_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryBoutiqueGoodsCategorys_resultTupleSchemeFactory());
    }

    public List<com.froad.thrift.vo.ProductCategoryVo> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ProductCategoryVo.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryBoutiqueGoodsCategorys_result.class, metaDataMap);
    }

    public queryBoutiqueGoodsCategorys_result() {
    }

    public queryBoutiqueGoodsCategorys_result(
      List<com.froad.thrift.vo.ProductCategoryVo> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryBoutiqueGoodsCategorys_result(queryBoutiqueGoodsCategorys_result other) {
      if (other.isSetSuccess()) {
        List<com.froad.thrift.vo.ProductCategoryVo> __this__success = new ArrayList<com.froad.thrift.vo.ProductCategoryVo>(other.success.size());
        for (com.froad.thrift.vo.ProductCategoryVo other_element : other.success) {
          __this__success.add(new com.froad.thrift.vo.ProductCategoryVo(other_element));
        }
        this.success = __this__success;
      }
    }

    public queryBoutiqueGoodsCategorys_result deepCopy() {
      return new queryBoutiqueGoodsCategorys_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.froad.thrift.vo.ProductCategoryVo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.froad.thrift.vo.ProductCategoryVo elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.froad.thrift.vo.ProductCategoryVo>();
      }
      this.success.add(elem);
    }

    public List<com.froad.thrift.vo.ProductCategoryVo> getSuccess() {
      return this.success;
    }

    public queryBoutiqueGoodsCategorys_result setSuccess(List<com.froad.thrift.vo.ProductCategoryVo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.froad.thrift.vo.ProductCategoryVo>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryBoutiqueGoodsCategorys_result)
        return this.equals((queryBoutiqueGoodsCategorys_result)that);
      return false;
    }

    public boolean equals(queryBoutiqueGoodsCategorys_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryBoutiqueGoodsCategorys_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryBoutiqueGoodsCategorys_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryBoutiqueGoodsCategorys_resultStandardSchemeFactory implements SchemeFactory {
      public queryBoutiqueGoodsCategorys_resultStandardScheme getScheme() {
        return new queryBoutiqueGoodsCategorys_resultStandardScheme();
      }
    }

    private static class queryBoutiqueGoodsCategorys_resultStandardScheme extends StandardScheme<queryBoutiqueGoodsCategorys_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryBoutiqueGoodsCategorys_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list40 = iprot.readListBegin();
                  struct.success = new ArrayList<com.froad.thrift.vo.ProductCategoryVo>(_list40.size);
                  com.froad.thrift.vo.ProductCategoryVo _elem41;
                  for (int _i42 = 0; _i42 < _list40.size; ++_i42)
                  {
                    _elem41 = new com.froad.thrift.vo.ProductCategoryVo();
                    _elem41.read(iprot);
                    struct.success.add(_elem41);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryBoutiqueGoodsCategorys_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.froad.thrift.vo.ProductCategoryVo _iter43 : struct.success)
            {
              _iter43.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryBoutiqueGoodsCategorys_resultTupleSchemeFactory implements SchemeFactory {
      public queryBoutiqueGoodsCategorys_resultTupleScheme getScheme() {
        return new queryBoutiqueGoodsCategorys_resultTupleScheme();
      }
    }

    private static class queryBoutiqueGoodsCategorys_resultTupleScheme extends TupleScheme<queryBoutiqueGoodsCategorys_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryBoutiqueGoodsCategorys_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.froad.thrift.vo.ProductCategoryVo _iter44 : struct.success)
            {
              _iter44.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryBoutiqueGoodsCategorys_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.froad.thrift.vo.ProductCategoryVo>(_list45.size);
            com.froad.thrift.vo.ProductCategoryVo _elem46;
            for (int _i47 = 0; _i47 < _list45.size; ++_i47)
            {
              _elem46 = new com.froad.thrift.vo.ProductCategoryVo();
              _elem46.read(iprot);
              struct.success.add(_elem46);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryRecommendProductCategorys_args implements org.apache.thrift.TBase<queryRecommendProductCategorys_args, queryRecommendProductCategorys_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryRecommendProductCategorys_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryRecommendProductCategorys_args");

    private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField IS_MALL_FIELD_DESC = new org.apache.thrift.protocol.TField("isMall", org.apache.thrift.protocol.TType.BOOL, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryRecommendProductCategorys_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryRecommendProductCategorys_argsTupleSchemeFactory());
    }

    public String clientId; // required
    public boolean isMall; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CLIENT_ID((short)1, "clientId"),
      IS_MALL((short)2, "isMall");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CLIENT_ID
            return CLIENT_ID;
          case 2: // IS_MALL
            return IS_MALL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ISMALL_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.IS_MALL, new org.apache.thrift.meta_data.FieldMetaData("isMall", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryRecommendProductCategorys_args.class, metaDataMap);
    }

    public queryRecommendProductCategorys_args() {
    }

    public queryRecommendProductCategorys_args(
      String clientId,
      boolean isMall)
    {
      this();
      this.clientId = clientId;
      this.isMall = isMall;
      setIsMallIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryRecommendProductCategorys_args(queryRecommendProductCategorys_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetClientId()) {
        this.clientId = other.clientId;
      }
      this.isMall = other.isMall;
    }

    public queryRecommendProductCategorys_args deepCopy() {
      return new queryRecommendProductCategorys_args(this);
    }

    @Override
    public void clear() {
      this.clientId = null;
      setIsMallIsSet(false);
      this.isMall = false;
    }

    public String getClientId() {
      return this.clientId;
    }

    public queryRecommendProductCategorys_args setClientId(String clientId) {
      this.clientId = clientId;
      return this;
    }

    public void unsetClientId() {
      this.clientId = null;
    }

    /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
    public boolean isSetClientId() {
      return this.clientId != null;
    }

    public void setClientIdIsSet(boolean value) {
      if (!value) {
        this.clientId = null;
      }
    }

    public boolean isIsMall() {
      return this.isMall;
    }

    public queryRecommendProductCategorys_args setIsMall(boolean isMall) {
      this.isMall = isMall;
      setIsMallIsSet(true);
      return this;
    }

    public void unsetIsMall() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISMALL_ISSET_ID);
    }

    /** Returns true if field isMall is set (has been assigned a value) and false otherwise */
    public boolean isSetIsMall() {
      return EncodingUtils.testBit(__isset_bitfield, __ISMALL_ISSET_ID);
    }

    public void setIsMallIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISMALL_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CLIENT_ID:
        if (value == null) {
          unsetClientId();
        } else {
          setClientId((String)value);
        }
        break;

      case IS_MALL:
        if (value == null) {
          unsetIsMall();
        } else {
          setIsMall((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CLIENT_ID:
        return getClientId();

      case IS_MALL:
        return Boolean.valueOf(isIsMall());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CLIENT_ID:
        return isSetClientId();
      case IS_MALL:
        return isSetIsMall();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryRecommendProductCategorys_args)
        return this.equals((queryRecommendProductCategorys_args)that);
      return false;
    }

    public boolean equals(queryRecommendProductCategorys_args that) {
      if (that == null)
        return false;

      boolean this_present_clientId = true && this.isSetClientId();
      boolean that_present_clientId = true && that.isSetClientId();
      if (this_present_clientId || that_present_clientId) {
        if (!(this_present_clientId && that_present_clientId))
          return false;
        if (!this.clientId.equals(that.clientId))
          return false;
      }

      boolean this_present_isMall = true;
      boolean that_present_isMall = true;
      if (this_present_isMall || that_present_isMall) {
        if (!(this_present_isMall && that_present_isMall))
          return false;
        if (this.isMall != that.isMall)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_clientId = true && (isSetClientId());
      list.add(present_clientId);
      if (present_clientId)
        list.add(clientId);

      boolean present_isMall = true;
      list.add(present_isMall);
      if (present_isMall)
        list.add(isMall);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryRecommendProductCategorys_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIsMall()).compareTo(other.isSetIsMall());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIsMall()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isMall, other.isMall);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryRecommendProductCategorys_args(");
      boolean first = true;

      sb.append("clientId:");
      if (this.clientId == null) {
        sb.append("null");
      } else {
        sb.append(this.clientId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("isMall:");
      sb.append(this.isMall);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryRecommendProductCategorys_argsStandardSchemeFactory implements SchemeFactory {
      public queryRecommendProductCategorys_argsStandardScheme getScheme() {
        return new queryRecommendProductCategorys_argsStandardScheme();
      }
    }

    private static class queryRecommendProductCategorys_argsStandardScheme extends StandardScheme<queryRecommendProductCategorys_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryRecommendProductCategorys_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CLIENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clientId = iprot.readString();
                struct.setClientIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // IS_MALL
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.isMall = iprot.readBool();
                struct.setIsMallIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryRecommendProductCategorys_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.clientId != null) {
          oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
          oprot.writeString(struct.clientId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(IS_MALL_FIELD_DESC);
        oprot.writeBool(struct.isMall);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryRecommendProductCategorys_argsTupleSchemeFactory implements SchemeFactory {
      public queryRecommendProductCategorys_argsTupleScheme getScheme() {
        return new queryRecommendProductCategorys_argsTupleScheme();
      }
    }

    private static class queryRecommendProductCategorys_argsTupleScheme extends TupleScheme<queryRecommendProductCategorys_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryRecommendProductCategorys_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetClientId()) {
          optionals.set(0);
        }
        if (struct.isSetIsMall()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetClientId()) {
          oprot.writeString(struct.clientId);
        }
        if (struct.isSetIsMall()) {
          oprot.writeBool(struct.isMall);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryRecommendProductCategorys_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.clientId = iprot.readString();
          struct.setClientIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.isMall = iprot.readBool();
          struct.setIsMallIsSet(true);
        }
      }
    }

  }

  public static class queryRecommendProductCategorys_result implements org.apache.thrift.TBase<queryRecommendProductCategorys_result, queryRecommendProductCategorys_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryRecommendProductCategorys_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryRecommendProductCategorys_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryRecommendProductCategorys_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryRecommendProductCategorys_resultTupleSchemeFactory());
    }

    public List<com.froad.thrift.vo.ProductCategoryVo> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ProductCategoryVo.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryRecommendProductCategorys_result.class, metaDataMap);
    }

    public queryRecommendProductCategorys_result() {
    }

    public queryRecommendProductCategorys_result(
      List<com.froad.thrift.vo.ProductCategoryVo> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryRecommendProductCategorys_result(queryRecommendProductCategorys_result other) {
      if (other.isSetSuccess()) {
        List<com.froad.thrift.vo.ProductCategoryVo> __this__success = new ArrayList<com.froad.thrift.vo.ProductCategoryVo>(other.success.size());
        for (com.froad.thrift.vo.ProductCategoryVo other_element : other.success) {
          __this__success.add(new com.froad.thrift.vo.ProductCategoryVo(other_element));
        }
        this.success = __this__success;
      }
    }

    public queryRecommendProductCategorys_result deepCopy() {
      return new queryRecommendProductCategorys_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.froad.thrift.vo.ProductCategoryVo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.froad.thrift.vo.ProductCategoryVo elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.froad.thrift.vo.ProductCategoryVo>();
      }
      this.success.add(elem);
    }

    public List<com.froad.thrift.vo.ProductCategoryVo> getSuccess() {
      return this.success;
    }

    public queryRecommendProductCategorys_result setSuccess(List<com.froad.thrift.vo.ProductCategoryVo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.froad.thrift.vo.ProductCategoryVo>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryRecommendProductCategorys_result)
        return this.equals((queryRecommendProductCategorys_result)that);
      return false;
    }

    public boolean equals(queryRecommendProductCategorys_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryRecommendProductCategorys_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryRecommendProductCategorys_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryRecommendProductCategorys_resultStandardSchemeFactory implements SchemeFactory {
      public queryRecommendProductCategorys_resultStandardScheme getScheme() {
        return new queryRecommendProductCategorys_resultStandardScheme();
      }
    }

    private static class queryRecommendProductCategorys_resultStandardScheme extends StandardScheme<queryRecommendProductCategorys_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryRecommendProductCategorys_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list48 = iprot.readListBegin();
                  struct.success = new ArrayList<com.froad.thrift.vo.ProductCategoryVo>(_list48.size);
                  com.froad.thrift.vo.ProductCategoryVo _elem49;
                  for (int _i50 = 0; _i50 < _list48.size; ++_i50)
                  {
                    _elem49 = new com.froad.thrift.vo.ProductCategoryVo();
                    _elem49.read(iprot);
                    struct.success.add(_elem49);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryRecommendProductCategorys_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.froad.thrift.vo.ProductCategoryVo _iter51 : struct.success)
            {
              _iter51.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryRecommendProductCategorys_resultTupleSchemeFactory implements SchemeFactory {
      public queryRecommendProductCategorys_resultTupleScheme getScheme() {
        return new queryRecommendProductCategorys_resultTupleScheme();
      }
    }

    private static class queryRecommendProductCategorys_resultTupleScheme extends TupleScheme<queryRecommendProductCategorys_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryRecommendProductCategorys_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.froad.thrift.vo.ProductCategoryVo _iter52 : struct.success)
            {
              _iter52.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryRecommendProductCategorys_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list53 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.froad.thrift.vo.ProductCategoryVo>(_list53.size);
            com.froad.thrift.vo.ProductCategoryVo _elem54;
            for (int _i55 = 0; _i55 < _list53.size; ++_i55)
            {
              _elem54 = new com.froad.thrift.vo.ProductCategoryVo();
              _elem54.read(iprot);
              struct.success.add(_elem54);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getProductCategoryByIds_args implements org.apache.thrift.TBase<getProductCategoryByIds_args, getProductCategoryByIds_args._Fields>, java.io.Serializable, Cloneable, Comparable<getProductCategoryByIds_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProductCategoryByIds_args");

    private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField CATEGORY_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("categoryIds", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getProductCategoryByIds_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getProductCategoryByIds_argsTupleSchemeFactory());
    }

    public String clientId; // required
    public List<String> categoryIds; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CLIENT_ID((short)1, "clientId"),
      CATEGORY_IDS((short)2, "categoryIds");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CLIENT_ID
            return CLIENT_ID;
          case 2: // CATEGORY_IDS
            return CATEGORY_IDS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CATEGORY_IDS, new org.apache.thrift.meta_data.FieldMetaData("categoryIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProductCategoryByIds_args.class, metaDataMap);
    }

    public getProductCategoryByIds_args() {
    }

    public getProductCategoryByIds_args(
      String clientId,
      List<String> categoryIds)
    {
      this();
      this.clientId = clientId;
      this.categoryIds = categoryIds;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProductCategoryByIds_args(getProductCategoryByIds_args other) {
      if (other.isSetClientId()) {
        this.clientId = other.clientId;
      }
      if (other.isSetCategoryIds()) {
        List<String> __this__categoryIds = new ArrayList<String>(other.categoryIds);
        this.categoryIds = __this__categoryIds;
      }
    }

    public getProductCategoryByIds_args deepCopy() {
      return new getProductCategoryByIds_args(this);
    }

    @Override
    public void clear() {
      this.clientId = null;
      this.categoryIds = null;
    }

    public String getClientId() {
      return this.clientId;
    }

    public getProductCategoryByIds_args setClientId(String clientId) {
      this.clientId = clientId;
      return this;
    }

    public void unsetClientId() {
      this.clientId = null;
    }

    /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
    public boolean isSetClientId() {
      return this.clientId != null;
    }

    public void setClientIdIsSet(boolean value) {
      if (!value) {
        this.clientId = null;
      }
    }

    public int getCategoryIdsSize() {
      return (this.categoryIds == null) ? 0 : this.categoryIds.size();
    }

    public java.util.Iterator<String> getCategoryIdsIterator() {
      return (this.categoryIds == null) ? null : this.categoryIds.iterator();
    }

    public void addToCategoryIds(String elem) {
      if (this.categoryIds == null) {
        this.categoryIds = new ArrayList<String>();
      }
      this.categoryIds.add(elem);
    }

    public List<String> getCategoryIds() {
      return this.categoryIds;
    }

    public getProductCategoryByIds_args setCategoryIds(List<String> categoryIds) {
      this.categoryIds = categoryIds;
      return this;
    }

    public void unsetCategoryIds() {
      this.categoryIds = null;
    }

    /** Returns true if field categoryIds is set (has been assigned a value) and false otherwise */
    public boolean isSetCategoryIds() {
      return this.categoryIds != null;
    }

    public void setCategoryIdsIsSet(boolean value) {
      if (!value) {
        this.categoryIds = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CLIENT_ID:
        if (value == null) {
          unsetClientId();
        } else {
          setClientId((String)value);
        }
        break;

      case CATEGORY_IDS:
        if (value == null) {
          unsetCategoryIds();
        } else {
          setCategoryIds((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CLIENT_ID:
        return getClientId();

      case CATEGORY_IDS:
        return getCategoryIds();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CLIENT_ID:
        return isSetClientId();
      case CATEGORY_IDS:
        return isSetCategoryIds();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getProductCategoryByIds_args)
        return this.equals((getProductCategoryByIds_args)that);
      return false;
    }

    public boolean equals(getProductCategoryByIds_args that) {
      if (that == null)
        return false;

      boolean this_present_clientId = true && this.isSetClientId();
      boolean that_present_clientId = true && that.isSetClientId();
      if (this_present_clientId || that_present_clientId) {
        if (!(this_present_clientId && that_present_clientId))
          return false;
        if (!this.clientId.equals(that.clientId))
          return false;
      }

      boolean this_present_categoryIds = true && this.isSetCategoryIds();
      boolean that_present_categoryIds = true && that.isSetCategoryIds();
      if (this_present_categoryIds || that_present_categoryIds) {
        if (!(this_present_categoryIds && that_present_categoryIds))
          return false;
        if (!this.categoryIds.equals(that.categoryIds))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_clientId = true && (isSetClientId());
      list.add(present_clientId);
      if (present_clientId)
        list.add(clientId);

      boolean present_categoryIds = true && (isSetCategoryIds());
      list.add(present_categoryIds);
      if (present_categoryIds)
        list.add(categoryIds);

      return list.hashCode();
    }

    @Override
    public int compareTo(getProductCategoryByIds_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCategoryIds()).compareTo(other.isSetCategoryIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCategoryIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.categoryIds, other.categoryIds);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getProductCategoryByIds_args(");
      boolean first = true;

      sb.append("clientId:");
      if (this.clientId == null) {
        sb.append("null");
      } else {
        sb.append(this.clientId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("categoryIds:");
      if (this.categoryIds == null) {
        sb.append("null");
      } else {
        sb.append(this.categoryIds);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getProductCategoryByIds_argsStandardSchemeFactory implements SchemeFactory {
      public getProductCategoryByIds_argsStandardScheme getScheme() {
        return new getProductCategoryByIds_argsStandardScheme();
      }
    }

    private static class getProductCategoryByIds_argsStandardScheme extends StandardScheme<getProductCategoryByIds_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getProductCategoryByIds_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CLIENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clientId = iprot.readString();
                struct.setClientIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CATEGORY_IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list56 = iprot.readListBegin();
                  struct.categoryIds = new ArrayList<String>(_list56.size);
                  String _elem57;
                  for (int _i58 = 0; _i58 < _list56.size; ++_i58)
                  {
                    _elem57 = iprot.readString();
                    struct.categoryIds.add(_elem57);
                  }
                  iprot.readListEnd();
                }
                struct.setCategoryIdsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getProductCategoryByIds_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.clientId != null) {
          oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
          oprot.writeString(struct.clientId);
          oprot.writeFieldEnd();
        }
        if (struct.categoryIds != null) {
          oprot.writeFieldBegin(CATEGORY_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.categoryIds.size()));
            for (String _iter59 : struct.categoryIds)
            {
              oprot.writeString(_iter59);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getProductCategoryByIds_argsTupleSchemeFactory implements SchemeFactory {
      public getProductCategoryByIds_argsTupleScheme getScheme() {
        return new getProductCategoryByIds_argsTupleScheme();
      }
    }

    private static class getProductCategoryByIds_argsTupleScheme extends TupleScheme<getProductCategoryByIds_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getProductCategoryByIds_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetClientId()) {
          optionals.set(0);
        }
        if (struct.isSetCategoryIds()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetClientId()) {
          oprot.writeString(struct.clientId);
        }
        if (struct.isSetCategoryIds()) {
          {
            oprot.writeI32(struct.categoryIds.size());
            for (String _iter60 : struct.categoryIds)
            {
              oprot.writeString(_iter60);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getProductCategoryByIds_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.clientId = iprot.readString();
          struct.setClientIdIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list61 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.categoryIds = new ArrayList<String>(_list61.size);
            String _elem62;
            for (int _i63 = 0; _i63 < _list61.size; ++_i63)
            {
              _elem62 = iprot.readString();
              struct.categoryIds.add(_elem62);
            }
          }
          struct.setCategoryIdsIsSet(true);
        }
      }
    }

  }

  public static class getProductCategoryByIds_result implements org.apache.thrift.TBase<getProductCategoryByIds_result, getProductCategoryByIds_result._Fields>, java.io.Serializable, Cloneable, Comparable<getProductCategoryByIds_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProductCategoryByIds_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getProductCategoryByIds_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getProductCategoryByIds_resultTupleSchemeFactory());
    }

    public List<com.froad.thrift.vo.ProductCategoryVo> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ProductCategoryVo.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProductCategoryByIds_result.class, metaDataMap);
    }

    public getProductCategoryByIds_result() {
    }

    public getProductCategoryByIds_result(
      List<com.froad.thrift.vo.ProductCategoryVo> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProductCategoryByIds_result(getProductCategoryByIds_result other) {
      if (other.isSetSuccess()) {
        List<com.froad.thrift.vo.ProductCategoryVo> __this__success = new ArrayList<com.froad.thrift.vo.ProductCategoryVo>(other.success.size());
        for (com.froad.thrift.vo.ProductCategoryVo other_element : other.success) {
          __this__success.add(new com.froad.thrift.vo.ProductCategoryVo(other_element));
        }
        this.success = __this__success;
      }
    }

    public getProductCategoryByIds_result deepCopy() {
      return new getProductCategoryByIds_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.froad.thrift.vo.ProductCategoryVo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.froad.thrift.vo.ProductCategoryVo elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.froad.thrift.vo.ProductCategoryVo>();
      }
      this.success.add(elem);
    }

    public List<com.froad.thrift.vo.ProductCategoryVo> getSuccess() {
      return this.success;
    }

    public getProductCategoryByIds_result setSuccess(List<com.froad.thrift.vo.ProductCategoryVo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.froad.thrift.vo.ProductCategoryVo>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getProductCategoryByIds_result)
        return this.equals((getProductCategoryByIds_result)that);
      return false;
    }

    public boolean equals(getProductCategoryByIds_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getProductCategoryByIds_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getProductCategoryByIds_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getProductCategoryByIds_resultStandardSchemeFactory implements SchemeFactory {
      public getProductCategoryByIds_resultStandardScheme getScheme() {
        return new getProductCategoryByIds_resultStandardScheme();
      }
    }

    private static class getProductCategoryByIds_resultStandardScheme extends StandardScheme<getProductCategoryByIds_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getProductCategoryByIds_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list64 = iprot.readListBegin();
                  struct.success = new ArrayList<com.froad.thrift.vo.ProductCategoryVo>(_list64.size);
                  com.froad.thrift.vo.ProductCategoryVo _elem65;
                  for (int _i66 = 0; _i66 < _list64.size; ++_i66)
                  {
                    _elem65 = new com.froad.thrift.vo.ProductCategoryVo();
                    _elem65.read(iprot);
                    struct.success.add(_elem65);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getProductCategoryByIds_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.froad.thrift.vo.ProductCategoryVo _iter67 : struct.success)
            {
              _iter67.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getProductCategoryByIds_resultTupleSchemeFactory implements SchemeFactory {
      public getProductCategoryByIds_resultTupleScheme getScheme() {
        return new getProductCategoryByIds_resultTupleScheme();
      }
    }

    private static class getProductCategoryByIds_resultTupleScheme extends TupleScheme<getProductCategoryByIds_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getProductCategoryByIds_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.froad.thrift.vo.ProductCategoryVo _iter68 : struct.success)
            {
              _iter68.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getProductCategoryByIds_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list69 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.froad.thrift.vo.ProductCategoryVo>(_list69.size);
            com.froad.thrift.vo.ProductCategoryVo _elem70;
            for (int _i71 = 0; _i71 < _list69.size; ++_i71)
            {
              _elem70 = new com.froad.thrift.vo.ProductCategoryVo();
              _elem70.read(iprot);
              struct.success.add(_elem70);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
