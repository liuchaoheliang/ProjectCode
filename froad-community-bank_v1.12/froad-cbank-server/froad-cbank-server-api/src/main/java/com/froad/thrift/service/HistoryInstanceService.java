/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class HistoryInstanceService {

  /**
   * HistoryInstanceService
   */
  public interface Iface extends com.froad.thrift.monitor.service.BizMonitorService.Iface {

    /**
     * 增加 HistoryInstance
     * @param originVo 源信息对象
     * @param historyInstanceVo
     * @return long    主键ID
     * 
     * @param originVo
     * @param historyInstanceVo
     */
    public long addHistoryInstance(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.HistoryInstanceVo historyInstanceVo) throws org.apache.thrift.TException;

    /**
     * 删除 HistoryInstance
     * @param originVo 源信息对象
     * @param historyInstanceVo
     * @return boolean
     * 
     * @param originVo
     * @param historyInstanceVo
     */
    public boolean deleteHistoryInstance(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.HistoryInstanceVo historyInstanceVo) throws org.apache.thrift.TException;

    /**
     * 根据id删除单个 HistoryInstance
     * @param originVo 源信息对象
     * @param id
     * @return HistoryInstanceVo
     * 
     * @param originVo
     * @param id
     */
    public boolean deleteHistoryInstanceById(com.froad.thrift.vo.OriginVo originVo, long id) throws org.apache.thrift.TException;

    /**
     * 修改 HistoryInstance
     * @param originVo 源信息对象
     * @param historyInstanceVo
     * @return boolean
     * 
     * @param originVo
     * @param historyInstanceVo
     */
    public boolean updateHistoryInstance(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.HistoryInstanceVo historyInstanceVo) throws org.apache.thrift.TException;

    /**
     * 根据id修改单个 HistoryInstance
     * @param originVo 源信息对象
     * @param id
     * @return HistoryInstanceVo
     * 
     * @param originVo
     * @param historyInstanceVo
     */
    public boolean updateHistoryInstanceById(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.HistoryInstanceVo historyInstanceVo) throws org.apache.thrift.TException;

    /**
     * 根据id查询单个 HistoryInstance
     * @param id
     * @return HistoryInstanceVo
     * 
     * @param id
     */
    public com.froad.thrift.vo.HistoryInstanceVo getHistoryInstanceById(long id) throws org.apache.thrift.TException;

    /**
     * 根据条件查询一个 HistoryInstance
     * @param historyInstanceVo
     * @return HistoryInstanceVo
     * 
     * @param historyInstanceVo
     */
    public com.froad.thrift.vo.HistoryInstanceVo getOneHistoryInstance(com.froad.thrift.vo.HistoryInstanceVo historyInstanceVo) throws org.apache.thrift.TException;

    /**
     * 根据条件统计 HistoryInstance
     * @param historyInstanceVo
     * @return int
     * 
     * @param historyInstanceVo
     */
    public int countHistoryInstance(com.froad.thrift.vo.HistoryInstanceVo historyInstanceVo) throws org.apache.thrift.TException;

    /**
     * 查询 HistoryInstance
     * @param historyInstanceVo
     * @return List<HistoryInstanceVo>
     * 
     * @param historyInstanceVo
     */
    public List<com.froad.thrift.vo.HistoryInstanceVo> getHistoryInstance(com.froad.thrift.vo.HistoryInstanceVo historyInstanceVo) throws org.apache.thrift.TException;

    /**
     * 分页查询 HistoryInstance
     * @param historyInstanceVo
     * @return HistoryInstancePageVoRes
     * 
     * @param page
     * @param historyInstanceVo
     */
    public com.froad.thrift.vo.HistoryInstancePageVoRes getHistoryInstanceByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.HistoryInstanceVo historyInstanceVo) throws org.apache.thrift.TException;

  }

  public interface AsyncIface extends com.froad.thrift.monitor.service.BizMonitorService .AsyncIface {

    public void addHistoryInstance(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.HistoryInstanceVo historyInstanceVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteHistoryInstance(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.HistoryInstanceVo historyInstanceVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteHistoryInstanceById(com.froad.thrift.vo.OriginVo originVo, long id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateHistoryInstance(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.HistoryInstanceVo historyInstanceVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateHistoryInstanceById(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.HistoryInstanceVo historyInstanceVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getHistoryInstanceById(long id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getOneHistoryInstance(com.froad.thrift.vo.HistoryInstanceVo historyInstanceVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void countHistoryInstance(com.froad.thrift.vo.HistoryInstanceVo historyInstanceVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getHistoryInstance(com.froad.thrift.vo.HistoryInstanceVo historyInstanceVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getHistoryInstanceByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.HistoryInstanceVo historyInstanceVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends com.froad.thrift.monitor.service.BizMonitorService.Client implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public long addHistoryInstance(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.HistoryInstanceVo historyInstanceVo) throws org.apache.thrift.TException
    {
      send_addHistoryInstance(originVo, historyInstanceVo);
      return recv_addHistoryInstance();
    }

    public void send_addHistoryInstance(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.HistoryInstanceVo historyInstanceVo) throws org.apache.thrift.TException
    {
      addHistoryInstance_args args = new addHistoryInstance_args();
      args.setOriginVo(originVo);
      args.setHistoryInstanceVo(historyInstanceVo);
      sendBase("addHistoryInstance", args);
    }

    public long recv_addHistoryInstance() throws org.apache.thrift.TException
    {
      addHistoryInstance_result result = new addHistoryInstance_result();
      receiveBase(result, "addHistoryInstance");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addHistoryInstance failed: unknown result");
    }

    public boolean deleteHistoryInstance(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.HistoryInstanceVo historyInstanceVo) throws org.apache.thrift.TException
    {
      send_deleteHistoryInstance(originVo, historyInstanceVo);
      return recv_deleteHistoryInstance();
    }

    public void send_deleteHistoryInstance(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.HistoryInstanceVo historyInstanceVo) throws org.apache.thrift.TException
    {
      deleteHistoryInstance_args args = new deleteHistoryInstance_args();
      args.setOriginVo(originVo);
      args.setHistoryInstanceVo(historyInstanceVo);
      sendBase("deleteHistoryInstance", args);
    }

    public boolean recv_deleteHistoryInstance() throws org.apache.thrift.TException
    {
      deleteHistoryInstance_result result = new deleteHistoryInstance_result();
      receiveBase(result, "deleteHistoryInstance");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteHistoryInstance failed: unknown result");
    }

    public boolean deleteHistoryInstanceById(com.froad.thrift.vo.OriginVo originVo, long id) throws org.apache.thrift.TException
    {
      send_deleteHistoryInstanceById(originVo, id);
      return recv_deleteHistoryInstanceById();
    }

    public void send_deleteHistoryInstanceById(com.froad.thrift.vo.OriginVo originVo, long id) throws org.apache.thrift.TException
    {
      deleteHistoryInstanceById_args args = new deleteHistoryInstanceById_args();
      args.setOriginVo(originVo);
      args.setId(id);
      sendBase("deleteHistoryInstanceById", args);
    }

    public boolean recv_deleteHistoryInstanceById() throws org.apache.thrift.TException
    {
      deleteHistoryInstanceById_result result = new deleteHistoryInstanceById_result();
      receiveBase(result, "deleteHistoryInstanceById");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteHistoryInstanceById failed: unknown result");
    }

    public boolean updateHistoryInstance(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.HistoryInstanceVo historyInstanceVo) throws org.apache.thrift.TException
    {
      send_updateHistoryInstance(originVo, historyInstanceVo);
      return recv_updateHistoryInstance();
    }

    public void send_updateHistoryInstance(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.HistoryInstanceVo historyInstanceVo) throws org.apache.thrift.TException
    {
      updateHistoryInstance_args args = new updateHistoryInstance_args();
      args.setOriginVo(originVo);
      args.setHistoryInstanceVo(historyInstanceVo);
      sendBase("updateHistoryInstance", args);
    }

    public boolean recv_updateHistoryInstance() throws org.apache.thrift.TException
    {
      updateHistoryInstance_result result = new updateHistoryInstance_result();
      receiveBase(result, "updateHistoryInstance");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateHistoryInstance failed: unknown result");
    }

    public boolean updateHistoryInstanceById(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.HistoryInstanceVo historyInstanceVo) throws org.apache.thrift.TException
    {
      send_updateHistoryInstanceById(originVo, historyInstanceVo);
      return recv_updateHistoryInstanceById();
    }

    public void send_updateHistoryInstanceById(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.HistoryInstanceVo historyInstanceVo) throws org.apache.thrift.TException
    {
      updateHistoryInstanceById_args args = new updateHistoryInstanceById_args();
      args.setOriginVo(originVo);
      args.setHistoryInstanceVo(historyInstanceVo);
      sendBase("updateHistoryInstanceById", args);
    }

    public boolean recv_updateHistoryInstanceById() throws org.apache.thrift.TException
    {
      updateHistoryInstanceById_result result = new updateHistoryInstanceById_result();
      receiveBase(result, "updateHistoryInstanceById");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateHistoryInstanceById failed: unknown result");
    }

    public com.froad.thrift.vo.HistoryInstanceVo getHistoryInstanceById(long id) throws org.apache.thrift.TException
    {
      send_getHistoryInstanceById(id);
      return recv_getHistoryInstanceById();
    }

    public void send_getHistoryInstanceById(long id) throws org.apache.thrift.TException
    {
      getHistoryInstanceById_args args = new getHistoryInstanceById_args();
      args.setId(id);
      sendBase("getHistoryInstanceById", args);
    }

    public com.froad.thrift.vo.HistoryInstanceVo recv_getHistoryInstanceById() throws org.apache.thrift.TException
    {
      getHistoryInstanceById_result result = new getHistoryInstanceById_result();
      receiveBase(result, "getHistoryInstanceById");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getHistoryInstanceById failed: unknown result");
    }

    public com.froad.thrift.vo.HistoryInstanceVo getOneHistoryInstance(com.froad.thrift.vo.HistoryInstanceVo historyInstanceVo) throws org.apache.thrift.TException
    {
      send_getOneHistoryInstance(historyInstanceVo);
      return recv_getOneHistoryInstance();
    }

    public void send_getOneHistoryInstance(com.froad.thrift.vo.HistoryInstanceVo historyInstanceVo) throws org.apache.thrift.TException
    {
      getOneHistoryInstance_args args = new getOneHistoryInstance_args();
      args.setHistoryInstanceVo(historyInstanceVo);
      sendBase("getOneHistoryInstance", args);
    }

    public com.froad.thrift.vo.HistoryInstanceVo recv_getOneHistoryInstance() throws org.apache.thrift.TException
    {
      getOneHistoryInstance_result result = new getOneHistoryInstance_result();
      receiveBase(result, "getOneHistoryInstance");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getOneHistoryInstance failed: unknown result");
    }

    public int countHistoryInstance(com.froad.thrift.vo.HistoryInstanceVo historyInstanceVo) throws org.apache.thrift.TException
    {
      send_countHistoryInstance(historyInstanceVo);
      return recv_countHistoryInstance();
    }

    public void send_countHistoryInstance(com.froad.thrift.vo.HistoryInstanceVo historyInstanceVo) throws org.apache.thrift.TException
    {
      countHistoryInstance_args args = new countHistoryInstance_args();
      args.setHistoryInstanceVo(historyInstanceVo);
      sendBase("countHistoryInstance", args);
    }

    public int recv_countHistoryInstance() throws org.apache.thrift.TException
    {
      countHistoryInstance_result result = new countHistoryInstance_result();
      receiveBase(result, "countHistoryInstance");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "countHistoryInstance failed: unknown result");
    }

    public List<com.froad.thrift.vo.HistoryInstanceVo> getHistoryInstance(com.froad.thrift.vo.HistoryInstanceVo historyInstanceVo) throws org.apache.thrift.TException
    {
      send_getHistoryInstance(historyInstanceVo);
      return recv_getHistoryInstance();
    }

    public void send_getHistoryInstance(com.froad.thrift.vo.HistoryInstanceVo historyInstanceVo) throws org.apache.thrift.TException
    {
      getHistoryInstance_args args = new getHistoryInstance_args();
      args.setHistoryInstanceVo(historyInstanceVo);
      sendBase("getHistoryInstance", args);
    }

    public List<com.froad.thrift.vo.HistoryInstanceVo> recv_getHistoryInstance() throws org.apache.thrift.TException
    {
      getHistoryInstance_result result = new getHistoryInstance_result();
      receiveBase(result, "getHistoryInstance");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getHistoryInstance failed: unknown result");
    }

    public com.froad.thrift.vo.HistoryInstancePageVoRes getHistoryInstanceByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.HistoryInstanceVo historyInstanceVo) throws org.apache.thrift.TException
    {
      send_getHistoryInstanceByPage(page, historyInstanceVo);
      return recv_getHistoryInstanceByPage();
    }

    public void send_getHistoryInstanceByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.HistoryInstanceVo historyInstanceVo) throws org.apache.thrift.TException
    {
      getHistoryInstanceByPage_args args = new getHistoryInstanceByPage_args();
      args.setPage(page);
      args.setHistoryInstanceVo(historyInstanceVo);
      sendBase("getHistoryInstanceByPage", args);
    }

    public com.froad.thrift.vo.HistoryInstancePageVoRes recv_getHistoryInstanceByPage() throws org.apache.thrift.TException
    {
      getHistoryInstanceByPage_result result = new getHistoryInstanceByPage_result();
      receiveBase(result, "getHistoryInstanceByPage");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getHistoryInstanceByPage failed: unknown result");
    }

  }
  public static class AsyncClient extends com.froad.thrift.monitor.service.BizMonitorService.AsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void addHistoryInstance(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.HistoryInstanceVo historyInstanceVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addHistoryInstance_call method_call = new addHistoryInstance_call(originVo, historyInstanceVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addHistoryInstance_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.OriginVo originVo;
      private com.froad.thrift.vo.HistoryInstanceVo historyInstanceVo;
      public addHistoryInstance_call(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.HistoryInstanceVo historyInstanceVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.originVo = originVo;
        this.historyInstanceVo = historyInstanceVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addHistoryInstance", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addHistoryInstance_args args = new addHistoryInstance_args();
        args.setOriginVo(originVo);
        args.setHistoryInstanceVo(historyInstanceVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addHistoryInstance();
      }
    }

    public void deleteHistoryInstance(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.HistoryInstanceVo historyInstanceVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteHistoryInstance_call method_call = new deleteHistoryInstance_call(originVo, historyInstanceVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteHistoryInstance_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.OriginVo originVo;
      private com.froad.thrift.vo.HistoryInstanceVo historyInstanceVo;
      public deleteHistoryInstance_call(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.HistoryInstanceVo historyInstanceVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.originVo = originVo;
        this.historyInstanceVo = historyInstanceVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteHistoryInstance", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteHistoryInstance_args args = new deleteHistoryInstance_args();
        args.setOriginVo(originVo);
        args.setHistoryInstanceVo(historyInstanceVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteHistoryInstance();
      }
    }

    public void deleteHistoryInstanceById(com.froad.thrift.vo.OriginVo originVo, long id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteHistoryInstanceById_call method_call = new deleteHistoryInstanceById_call(originVo, id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteHistoryInstanceById_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.OriginVo originVo;
      private long id;
      public deleteHistoryInstanceById_call(com.froad.thrift.vo.OriginVo originVo, long id, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.originVo = originVo;
        this.id = id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteHistoryInstanceById", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteHistoryInstanceById_args args = new deleteHistoryInstanceById_args();
        args.setOriginVo(originVo);
        args.setId(id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteHistoryInstanceById();
      }
    }

    public void updateHistoryInstance(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.HistoryInstanceVo historyInstanceVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateHistoryInstance_call method_call = new updateHistoryInstance_call(originVo, historyInstanceVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateHistoryInstance_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.OriginVo originVo;
      private com.froad.thrift.vo.HistoryInstanceVo historyInstanceVo;
      public updateHistoryInstance_call(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.HistoryInstanceVo historyInstanceVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.originVo = originVo;
        this.historyInstanceVo = historyInstanceVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateHistoryInstance", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateHistoryInstance_args args = new updateHistoryInstance_args();
        args.setOriginVo(originVo);
        args.setHistoryInstanceVo(historyInstanceVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateHistoryInstance();
      }
    }

    public void updateHistoryInstanceById(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.HistoryInstanceVo historyInstanceVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateHistoryInstanceById_call method_call = new updateHistoryInstanceById_call(originVo, historyInstanceVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateHistoryInstanceById_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.OriginVo originVo;
      private com.froad.thrift.vo.HistoryInstanceVo historyInstanceVo;
      public updateHistoryInstanceById_call(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.HistoryInstanceVo historyInstanceVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.originVo = originVo;
        this.historyInstanceVo = historyInstanceVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateHistoryInstanceById", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateHistoryInstanceById_args args = new updateHistoryInstanceById_args();
        args.setOriginVo(originVo);
        args.setHistoryInstanceVo(historyInstanceVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateHistoryInstanceById();
      }
    }

    public void getHistoryInstanceById(long id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getHistoryInstanceById_call method_call = new getHistoryInstanceById_call(id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getHistoryInstanceById_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long id;
      public getHistoryInstanceById_call(long id, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getHistoryInstanceById", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getHistoryInstanceById_args args = new getHistoryInstanceById_args();
        args.setId(id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.HistoryInstanceVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getHistoryInstanceById();
      }
    }

    public void getOneHistoryInstance(com.froad.thrift.vo.HistoryInstanceVo historyInstanceVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getOneHistoryInstance_call method_call = new getOneHistoryInstance_call(historyInstanceVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getOneHistoryInstance_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.HistoryInstanceVo historyInstanceVo;
      public getOneHistoryInstance_call(com.froad.thrift.vo.HistoryInstanceVo historyInstanceVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.historyInstanceVo = historyInstanceVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getOneHistoryInstance", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getOneHistoryInstance_args args = new getOneHistoryInstance_args();
        args.setHistoryInstanceVo(historyInstanceVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.HistoryInstanceVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getOneHistoryInstance();
      }
    }

    public void countHistoryInstance(com.froad.thrift.vo.HistoryInstanceVo historyInstanceVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      countHistoryInstance_call method_call = new countHistoryInstance_call(historyInstanceVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class countHistoryInstance_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.HistoryInstanceVo historyInstanceVo;
      public countHistoryInstance_call(com.froad.thrift.vo.HistoryInstanceVo historyInstanceVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.historyInstanceVo = historyInstanceVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("countHistoryInstance", org.apache.thrift.protocol.TMessageType.CALL, 0));
        countHistoryInstance_args args = new countHistoryInstance_args();
        args.setHistoryInstanceVo(historyInstanceVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_countHistoryInstance();
      }
    }

    public void getHistoryInstance(com.froad.thrift.vo.HistoryInstanceVo historyInstanceVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getHistoryInstance_call method_call = new getHistoryInstance_call(historyInstanceVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getHistoryInstance_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.HistoryInstanceVo historyInstanceVo;
      public getHistoryInstance_call(com.froad.thrift.vo.HistoryInstanceVo historyInstanceVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.historyInstanceVo = historyInstanceVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getHistoryInstance", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getHistoryInstance_args args = new getHistoryInstance_args();
        args.setHistoryInstanceVo(historyInstanceVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.froad.thrift.vo.HistoryInstanceVo> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getHistoryInstance();
      }
    }

    public void getHistoryInstanceByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.HistoryInstanceVo historyInstanceVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getHistoryInstanceByPage_call method_call = new getHistoryInstanceByPage_call(page, historyInstanceVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getHistoryInstanceByPage_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.PageVo page;
      private com.froad.thrift.vo.HistoryInstanceVo historyInstanceVo;
      public getHistoryInstanceByPage_call(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.HistoryInstanceVo historyInstanceVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.page = page;
        this.historyInstanceVo = historyInstanceVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getHistoryInstanceByPage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getHistoryInstanceByPage_args args = new getHistoryInstanceByPage_args();
        args.setPage(page);
        args.setHistoryInstanceVo(historyInstanceVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.HistoryInstancePageVoRes getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getHistoryInstanceByPage();
      }
    }

  }

  public static class Processor<I extends Iface> extends com.froad.thrift.monitor.service.BizMonitorService.Processor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("addHistoryInstance", new addHistoryInstance());
      processMap.put("deleteHistoryInstance", new deleteHistoryInstance());
      processMap.put("deleteHistoryInstanceById", new deleteHistoryInstanceById());
      processMap.put("updateHistoryInstance", new updateHistoryInstance());
      processMap.put("updateHistoryInstanceById", new updateHistoryInstanceById());
      processMap.put("getHistoryInstanceById", new getHistoryInstanceById());
      processMap.put("getOneHistoryInstance", new getOneHistoryInstance());
      processMap.put("countHistoryInstance", new countHistoryInstance());
      processMap.put("getHistoryInstance", new getHistoryInstance());
      processMap.put("getHistoryInstanceByPage", new getHistoryInstanceByPage());
      return processMap;
    }

    public static class addHistoryInstance<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addHistoryInstance_args> {
      public addHistoryInstance() {
        super("addHistoryInstance");
      }

      public addHistoryInstance_args getEmptyArgsInstance() {
        return new addHistoryInstance_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addHistoryInstance_result getResult(I iface, addHistoryInstance_args args) throws org.apache.thrift.TException {
        addHistoryInstance_result result = new addHistoryInstance_result();
        result.success = iface.addHistoryInstance(args.originVo, args.historyInstanceVo);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class deleteHistoryInstance<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteHistoryInstance_args> {
      public deleteHistoryInstance() {
        super("deleteHistoryInstance");
      }

      public deleteHistoryInstance_args getEmptyArgsInstance() {
        return new deleteHistoryInstance_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteHistoryInstance_result getResult(I iface, deleteHistoryInstance_args args) throws org.apache.thrift.TException {
        deleteHistoryInstance_result result = new deleteHistoryInstance_result();
        result.success = iface.deleteHistoryInstance(args.originVo, args.historyInstanceVo);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class deleteHistoryInstanceById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteHistoryInstanceById_args> {
      public deleteHistoryInstanceById() {
        super("deleteHistoryInstanceById");
      }

      public deleteHistoryInstanceById_args getEmptyArgsInstance() {
        return new deleteHistoryInstanceById_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteHistoryInstanceById_result getResult(I iface, deleteHistoryInstanceById_args args) throws org.apache.thrift.TException {
        deleteHistoryInstanceById_result result = new deleteHistoryInstanceById_result();
        result.success = iface.deleteHistoryInstanceById(args.originVo, args.id);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class updateHistoryInstance<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateHistoryInstance_args> {
      public updateHistoryInstance() {
        super("updateHistoryInstance");
      }

      public updateHistoryInstance_args getEmptyArgsInstance() {
        return new updateHistoryInstance_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateHistoryInstance_result getResult(I iface, updateHistoryInstance_args args) throws org.apache.thrift.TException {
        updateHistoryInstance_result result = new updateHistoryInstance_result();
        result.success = iface.updateHistoryInstance(args.originVo, args.historyInstanceVo);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class updateHistoryInstanceById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateHistoryInstanceById_args> {
      public updateHistoryInstanceById() {
        super("updateHistoryInstanceById");
      }

      public updateHistoryInstanceById_args getEmptyArgsInstance() {
        return new updateHistoryInstanceById_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateHistoryInstanceById_result getResult(I iface, updateHistoryInstanceById_args args) throws org.apache.thrift.TException {
        updateHistoryInstanceById_result result = new updateHistoryInstanceById_result();
        result.success = iface.updateHistoryInstanceById(args.originVo, args.historyInstanceVo);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getHistoryInstanceById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getHistoryInstanceById_args> {
      public getHistoryInstanceById() {
        super("getHistoryInstanceById");
      }

      public getHistoryInstanceById_args getEmptyArgsInstance() {
        return new getHistoryInstanceById_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getHistoryInstanceById_result getResult(I iface, getHistoryInstanceById_args args) throws org.apache.thrift.TException {
        getHistoryInstanceById_result result = new getHistoryInstanceById_result();
        result.success = iface.getHistoryInstanceById(args.id);
        return result;
      }
    }

    public static class getOneHistoryInstance<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getOneHistoryInstance_args> {
      public getOneHistoryInstance() {
        super("getOneHistoryInstance");
      }

      public getOneHistoryInstance_args getEmptyArgsInstance() {
        return new getOneHistoryInstance_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getOneHistoryInstance_result getResult(I iface, getOneHistoryInstance_args args) throws org.apache.thrift.TException {
        getOneHistoryInstance_result result = new getOneHistoryInstance_result();
        result.success = iface.getOneHistoryInstance(args.historyInstanceVo);
        return result;
      }
    }

    public static class countHistoryInstance<I extends Iface> extends org.apache.thrift.ProcessFunction<I, countHistoryInstance_args> {
      public countHistoryInstance() {
        super("countHistoryInstance");
      }

      public countHistoryInstance_args getEmptyArgsInstance() {
        return new countHistoryInstance_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public countHistoryInstance_result getResult(I iface, countHistoryInstance_args args) throws org.apache.thrift.TException {
        countHistoryInstance_result result = new countHistoryInstance_result();
        result.success = iface.countHistoryInstance(args.historyInstanceVo);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getHistoryInstance<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getHistoryInstance_args> {
      public getHistoryInstance() {
        super("getHistoryInstance");
      }

      public getHistoryInstance_args getEmptyArgsInstance() {
        return new getHistoryInstance_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getHistoryInstance_result getResult(I iface, getHistoryInstance_args args) throws org.apache.thrift.TException {
        getHistoryInstance_result result = new getHistoryInstance_result();
        result.success = iface.getHistoryInstance(args.historyInstanceVo);
        return result;
      }
    }

    public static class getHistoryInstanceByPage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getHistoryInstanceByPage_args> {
      public getHistoryInstanceByPage() {
        super("getHistoryInstanceByPage");
      }

      public getHistoryInstanceByPage_args getEmptyArgsInstance() {
        return new getHistoryInstanceByPage_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getHistoryInstanceByPage_result getResult(I iface, getHistoryInstanceByPage_args args) throws org.apache.thrift.TException {
        getHistoryInstanceByPage_result result = new getHistoryInstanceByPage_result();
        result.success = iface.getHistoryInstanceByPage(args.page, args.historyInstanceVo);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends com.froad.thrift.monitor.service.BizMonitorService.AsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("addHistoryInstance", new addHistoryInstance());
      processMap.put("deleteHistoryInstance", new deleteHistoryInstance());
      processMap.put("deleteHistoryInstanceById", new deleteHistoryInstanceById());
      processMap.put("updateHistoryInstance", new updateHistoryInstance());
      processMap.put("updateHistoryInstanceById", new updateHistoryInstanceById());
      processMap.put("getHistoryInstanceById", new getHistoryInstanceById());
      processMap.put("getOneHistoryInstance", new getOneHistoryInstance());
      processMap.put("countHistoryInstance", new countHistoryInstance());
      processMap.put("getHistoryInstance", new getHistoryInstance());
      processMap.put("getHistoryInstanceByPage", new getHistoryInstanceByPage());
      return processMap;
    }

    public static class addHistoryInstance<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addHistoryInstance_args, Long> {
      public addHistoryInstance() {
        super("addHistoryInstance");
      }

      public addHistoryInstance_args getEmptyArgsInstance() {
        return new addHistoryInstance_args();
      }

      public AsyncMethodCallback<Long> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Long>() { 
          public void onComplete(Long o) {
            addHistoryInstance_result result = new addHistoryInstance_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addHistoryInstance_result result = new addHistoryInstance_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addHistoryInstance_args args, org.apache.thrift.async.AsyncMethodCallback<Long> resultHandler) throws TException {
        iface.addHistoryInstance(args.originVo, args.historyInstanceVo,resultHandler);
      }
    }

    public static class deleteHistoryInstance<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteHistoryInstance_args, Boolean> {
      public deleteHistoryInstance() {
        super("deleteHistoryInstance");
      }

      public deleteHistoryInstance_args getEmptyArgsInstance() {
        return new deleteHistoryInstance_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            deleteHistoryInstance_result result = new deleteHistoryInstance_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteHistoryInstance_result result = new deleteHistoryInstance_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteHistoryInstance_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.deleteHistoryInstance(args.originVo, args.historyInstanceVo,resultHandler);
      }
    }

    public static class deleteHistoryInstanceById<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteHistoryInstanceById_args, Boolean> {
      public deleteHistoryInstanceById() {
        super("deleteHistoryInstanceById");
      }

      public deleteHistoryInstanceById_args getEmptyArgsInstance() {
        return new deleteHistoryInstanceById_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            deleteHistoryInstanceById_result result = new deleteHistoryInstanceById_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteHistoryInstanceById_result result = new deleteHistoryInstanceById_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteHistoryInstanceById_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.deleteHistoryInstanceById(args.originVo, args.id,resultHandler);
      }
    }

    public static class updateHistoryInstance<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateHistoryInstance_args, Boolean> {
      public updateHistoryInstance() {
        super("updateHistoryInstance");
      }

      public updateHistoryInstance_args getEmptyArgsInstance() {
        return new updateHistoryInstance_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            updateHistoryInstance_result result = new updateHistoryInstance_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateHistoryInstance_result result = new updateHistoryInstance_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateHistoryInstance_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.updateHistoryInstance(args.originVo, args.historyInstanceVo,resultHandler);
      }
    }

    public static class updateHistoryInstanceById<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateHistoryInstanceById_args, Boolean> {
      public updateHistoryInstanceById() {
        super("updateHistoryInstanceById");
      }

      public updateHistoryInstanceById_args getEmptyArgsInstance() {
        return new updateHistoryInstanceById_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            updateHistoryInstanceById_result result = new updateHistoryInstanceById_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateHistoryInstanceById_result result = new updateHistoryInstanceById_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateHistoryInstanceById_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.updateHistoryInstanceById(args.originVo, args.historyInstanceVo,resultHandler);
      }
    }

    public static class getHistoryInstanceById<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getHistoryInstanceById_args, com.froad.thrift.vo.HistoryInstanceVo> {
      public getHistoryInstanceById() {
        super("getHistoryInstanceById");
      }

      public getHistoryInstanceById_args getEmptyArgsInstance() {
        return new getHistoryInstanceById_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.HistoryInstanceVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.HistoryInstanceVo>() { 
          public void onComplete(com.froad.thrift.vo.HistoryInstanceVo o) {
            getHistoryInstanceById_result result = new getHistoryInstanceById_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getHistoryInstanceById_result result = new getHistoryInstanceById_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getHistoryInstanceById_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.HistoryInstanceVo> resultHandler) throws TException {
        iface.getHistoryInstanceById(args.id,resultHandler);
      }
    }

    public static class getOneHistoryInstance<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getOneHistoryInstance_args, com.froad.thrift.vo.HistoryInstanceVo> {
      public getOneHistoryInstance() {
        super("getOneHistoryInstance");
      }

      public getOneHistoryInstance_args getEmptyArgsInstance() {
        return new getOneHistoryInstance_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.HistoryInstanceVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.HistoryInstanceVo>() { 
          public void onComplete(com.froad.thrift.vo.HistoryInstanceVo o) {
            getOneHistoryInstance_result result = new getOneHistoryInstance_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getOneHistoryInstance_result result = new getOneHistoryInstance_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getOneHistoryInstance_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.HistoryInstanceVo> resultHandler) throws TException {
        iface.getOneHistoryInstance(args.historyInstanceVo,resultHandler);
      }
    }

    public static class countHistoryInstance<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, countHistoryInstance_args, Integer> {
      public countHistoryInstance() {
        super("countHistoryInstance");
      }

      public countHistoryInstance_args getEmptyArgsInstance() {
        return new countHistoryInstance_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            countHistoryInstance_result result = new countHistoryInstance_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            countHistoryInstance_result result = new countHistoryInstance_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, countHistoryInstance_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.countHistoryInstance(args.historyInstanceVo,resultHandler);
      }
    }

    public static class getHistoryInstance<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getHistoryInstance_args, List<com.froad.thrift.vo.HistoryInstanceVo>> {
      public getHistoryInstance() {
        super("getHistoryInstance");
      }

      public getHistoryInstance_args getEmptyArgsInstance() {
        return new getHistoryInstance_args();
      }

      public AsyncMethodCallback<List<com.froad.thrift.vo.HistoryInstanceVo>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.froad.thrift.vo.HistoryInstanceVo>>() { 
          public void onComplete(List<com.froad.thrift.vo.HistoryInstanceVo> o) {
            getHistoryInstance_result result = new getHistoryInstance_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getHistoryInstance_result result = new getHistoryInstance_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getHistoryInstance_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.froad.thrift.vo.HistoryInstanceVo>> resultHandler) throws TException {
        iface.getHistoryInstance(args.historyInstanceVo,resultHandler);
      }
    }

    public static class getHistoryInstanceByPage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getHistoryInstanceByPage_args, com.froad.thrift.vo.HistoryInstancePageVoRes> {
      public getHistoryInstanceByPage() {
        super("getHistoryInstanceByPage");
      }

      public getHistoryInstanceByPage_args getEmptyArgsInstance() {
        return new getHistoryInstanceByPage_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.HistoryInstancePageVoRes> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.HistoryInstancePageVoRes>() { 
          public void onComplete(com.froad.thrift.vo.HistoryInstancePageVoRes o) {
            getHistoryInstanceByPage_result result = new getHistoryInstanceByPage_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getHistoryInstanceByPage_result result = new getHistoryInstanceByPage_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getHistoryInstanceByPage_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.HistoryInstancePageVoRes> resultHandler) throws TException {
        iface.getHistoryInstanceByPage(args.page, args.historyInstanceVo,resultHandler);
      }
    }

  }

  public static class addHistoryInstance_args implements org.apache.thrift.TBase<addHistoryInstance_args, addHistoryInstance_args._Fields>, java.io.Serializable, Cloneable, Comparable<addHistoryInstance_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addHistoryInstance_args");

    private static final org.apache.thrift.protocol.TField ORIGIN_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("originVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField HISTORY_INSTANCE_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("historyInstanceVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addHistoryInstance_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addHistoryInstance_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OriginVo originVo; // required
    public com.froad.thrift.vo.HistoryInstanceVo historyInstanceVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORIGIN_VO((short)1, "originVo"),
      HISTORY_INSTANCE_VO((short)2, "historyInstanceVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORIGIN_VO
            return ORIGIN_VO;
          case 2: // HISTORY_INSTANCE_VO
            return HISTORY_INSTANCE_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORIGIN_VO, new org.apache.thrift.meta_data.FieldMetaData("originVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OriginVo.class)));
      tmpMap.put(_Fields.HISTORY_INSTANCE_VO, new org.apache.thrift.meta_data.FieldMetaData("historyInstanceVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.HistoryInstanceVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addHistoryInstance_args.class, metaDataMap);
    }

    public addHistoryInstance_args() {
    }

    public addHistoryInstance_args(
      com.froad.thrift.vo.OriginVo originVo,
      com.froad.thrift.vo.HistoryInstanceVo historyInstanceVo)
    {
      this();
      this.originVo = originVo;
      this.historyInstanceVo = historyInstanceVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addHistoryInstance_args(addHistoryInstance_args other) {
      if (other.isSetOriginVo()) {
        this.originVo = new com.froad.thrift.vo.OriginVo(other.originVo);
      }
      if (other.isSetHistoryInstanceVo()) {
        this.historyInstanceVo = new com.froad.thrift.vo.HistoryInstanceVo(other.historyInstanceVo);
      }
    }

    public addHistoryInstance_args deepCopy() {
      return new addHistoryInstance_args(this);
    }

    @Override
    public void clear() {
      this.originVo = null;
      this.historyInstanceVo = null;
    }

    public com.froad.thrift.vo.OriginVo getOriginVo() {
      return this.originVo;
    }

    public addHistoryInstance_args setOriginVo(com.froad.thrift.vo.OriginVo originVo) {
      this.originVo = originVo;
      return this;
    }

    public void unsetOriginVo() {
      this.originVo = null;
    }

    /** Returns true if field originVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginVo() {
      return this.originVo != null;
    }

    public void setOriginVoIsSet(boolean value) {
      if (!value) {
        this.originVo = null;
      }
    }

    public com.froad.thrift.vo.HistoryInstanceVo getHistoryInstanceVo() {
      return this.historyInstanceVo;
    }

    public addHistoryInstance_args setHistoryInstanceVo(com.froad.thrift.vo.HistoryInstanceVo historyInstanceVo) {
      this.historyInstanceVo = historyInstanceVo;
      return this;
    }

    public void unsetHistoryInstanceVo() {
      this.historyInstanceVo = null;
    }

    /** Returns true if field historyInstanceVo is set (has been assigned a value) and false otherwise */
    public boolean isSetHistoryInstanceVo() {
      return this.historyInstanceVo != null;
    }

    public void setHistoryInstanceVoIsSet(boolean value) {
      if (!value) {
        this.historyInstanceVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORIGIN_VO:
        if (value == null) {
          unsetOriginVo();
        } else {
          setOriginVo((com.froad.thrift.vo.OriginVo)value);
        }
        break;

      case HISTORY_INSTANCE_VO:
        if (value == null) {
          unsetHistoryInstanceVo();
        } else {
          setHistoryInstanceVo((com.froad.thrift.vo.HistoryInstanceVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORIGIN_VO:
        return getOriginVo();

      case HISTORY_INSTANCE_VO:
        return getHistoryInstanceVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORIGIN_VO:
        return isSetOriginVo();
      case HISTORY_INSTANCE_VO:
        return isSetHistoryInstanceVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addHistoryInstance_args)
        return this.equals((addHistoryInstance_args)that);
      return false;
    }

    public boolean equals(addHistoryInstance_args that) {
      if (that == null)
        return false;

      boolean this_present_originVo = true && this.isSetOriginVo();
      boolean that_present_originVo = true && that.isSetOriginVo();
      if (this_present_originVo || that_present_originVo) {
        if (!(this_present_originVo && that_present_originVo))
          return false;
        if (!this.originVo.equals(that.originVo))
          return false;
      }

      boolean this_present_historyInstanceVo = true && this.isSetHistoryInstanceVo();
      boolean that_present_historyInstanceVo = true && that.isSetHistoryInstanceVo();
      if (this_present_historyInstanceVo || that_present_historyInstanceVo) {
        if (!(this_present_historyInstanceVo && that_present_historyInstanceVo))
          return false;
        if (!this.historyInstanceVo.equals(that.historyInstanceVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_originVo = true && (isSetOriginVo());
      list.add(present_originVo);
      if (present_originVo)
        list.add(originVo);

      boolean present_historyInstanceVo = true && (isSetHistoryInstanceVo());
      list.add(present_historyInstanceVo);
      if (present_historyInstanceVo)
        list.add(historyInstanceVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(addHistoryInstance_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOriginVo()).compareTo(other.isSetOriginVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originVo, other.originVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetHistoryInstanceVo()).compareTo(other.isSetHistoryInstanceVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHistoryInstanceVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.historyInstanceVo, other.historyInstanceVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addHistoryInstance_args(");
      boolean first = true;

      sb.append("originVo:");
      if (this.originVo == null) {
        sb.append("null");
      } else {
        sb.append(this.originVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("historyInstanceVo:");
      if (this.historyInstanceVo == null) {
        sb.append("null");
      } else {
        sb.append(this.historyInstanceVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (originVo != null) {
        originVo.validate();
      }
      if (historyInstanceVo != null) {
        historyInstanceVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addHistoryInstance_argsStandardSchemeFactory implements SchemeFactory {
      public addHistoryInstance_argsStandardScheme getScheme() {
        return new addHistoryInstance_argsStandardScheme();
      }
    }

    private static class addHistoryInstance_argsStandardScheme extends StandardScheme<addHistoryInstance_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addHistoryInstance_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORIGIN_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.originVo = new com.froad.thrift.vo.OriginVo();
                struct.originVo.read(iprot);
                struct.setOriginVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // HISTORY_INSTANCE_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.historyInstanceVo = new com.froad.thrift.vo.HistoryInstanceVo();
                struct.historyInstanceVo.read(iprot);
                struct.setHistoryInstanceVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addHistoryInstance_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.originVo != null) {
          oprot.writeFieldBegin(ORIGIN_VO_FIELD_DESC);
          struct.originVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.historyInstanceVo != null) {
          oprot.writeFieldBegin(HISTORY_INSTANCE_VO_FIELD_DESC);
          struct.historyInstanceVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addHistoryInstance_argsTupleSchemeFactory implements SchemeFactory {
      public addHistoryInstance_argsTupleScheme getScheme() {
        return new addHistoryInstance_argsTupleScheme();
      }
    }

    private static class addHistoryInstance_argsTupleScheme extends TupleScheme<addHistoryInstance_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addHistoryInstance_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOriginVo()) {
          optionals.set(0);
        }
        if (struct.isSetHistoryInstanceVo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOriginVo()) {
          struct.originVo.write(oprot);
        }
        if (struct.isSetHistoryInstanceVo()) {
          struct.historyInstanceVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addHistoryInstance_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.originVo = new com.froad.thrift.vo.OriginVo();
          struct.originVo.read(iprot);
          struct.setOriginVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.historyInstanceVo = new com.froad.thrift.vo.HistoryInstanceVo();
          struct.historyInstanceVo.read(iprot);
          struct.setHistoryInstanceVoIsSet(true);
        }
      }
    }

  }

  public static class addHistoryInstance_result implements org.apache.thrift.TBase<addHistoryInstance_result, addHistoryInstance_result._Fields>, java.io.Serializable, Cloneable, Comparable<addHistoryInstance_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addHistoryInstance_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addHistoryInstance_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addHistoryInstance_resultTupleSchemeFactory());
    }

    public long success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addHistoryInstance_result.class, metaDataMap);
    }

    public addHistoryInstance_result() {
    }

    public addHistoryInstance_result(
      long success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addHistoryInstance_result(addHistoryInstance_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public addHistoryInstance_result deepCopy() {
      return new addHistoryInstance_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public long getSuccess() {
      return this.success;
    }

    public addHistoryInstance_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Long.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addHistoryInstance_result)
        return this.equals((addHistoryInstance_result)that);
      return false;
    }

    public boolean equals(addHistoryInstance_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(addHistoryInstance_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addHistoryInstance_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addHistoryInstance_resultStandardSchemeFactory implements SchemeFactory {
      public addHistoryInstance_resultStandardScheme getScheme() {
        return new addHistoryInstance_resultStandardScheme();
      }
    }

    private static class addHistoryInstance_resultStandardScheme extends StandardScheme<addHistoryInstance_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addHistoryInstance_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addHistoryInstance_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addHistoryInstance_resultTupleSchemeFactory implements SchemeFactory {
      public addHistoryInstance_resultTupleScheme getScheme() {
        return new addHistoryInstance_resultTupleScheme();
      }
    }

    private static class addHistoryInstance_resultTupleScheme extends TupleScheme<addHistoryInstance_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addHistoryInstance_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addHistoryInstance_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class deleteHistoryInstance_args implements org.apache.thrift.TBase<deleteHistoryInstance_args, deleteHistoryInstance_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteHistoryInstance_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteHistoryInstance_args");

    private static final org.apache.thrift.protocol.TField ORIGIN_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("originVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField HISTORY_INSTANCE_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("historyInstanceVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteHistoryInstance_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteHistoryInstance_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OriginVo originVo; // required
    public com.froad.thrift.vo.HistoryInstanceVo historyInstanceVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORIGIN_VO((short)1, "originVo"),
      HISTORY_INSTANCE_VO((short)2, "historyInstanceVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORIGIN_VO
            return ORIGIN_VO;
          case 2: // HISTORY_INSTANCE_VO
            return HISTORY_INSTANCE_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORIGIN_VO, new org.apache.thrift.meta_data.FieldMetaData("originVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OriginVo.class)));
      tmpMap.put(_Fields.HISTORY_INSTANCE_VO, new org.apache.thrift.meta_data.FieldMetaData("historyInstanceVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.HistoryInstanceVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteHistoryInstance_args.class, metaDataMap);
    }

    public deleteHistoryInstance_args() {
    }

    public deleteHistoryInstance_args(
      com.froad.thrift.vo.OriginVo originVo,
      com.froad.thrift.vo.HistoryInstanceVo historyInstanceVo)
    {
      this();
      this.originVo = originVo;
      this.historyInstanceVo = historyInstanceVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteHistoryInstance_args(deleteHistoryInstance_args other) {
      if (other.isSetOriginVo()) {
        this.originVo = new com.froad.thrift.vo.OriginVo(other.originVo);
      }
      if (other.isSetHistoryInstanceVo()) {
        this.historyInstanceVo = new com.froad.thrift.vo.HistoryInstanceVo(other.historyInstanceVo);
      }
    }

    public deleteHistoryInstance_args deepCopy() {
      return new deleteHistoryInstance_args(this);
    }

    @Override
    public void clear() {
      this.originVo = null;
      this.historyInstanceVo = null;
    }

    public com.froad.thrift.vo.OriginVo getOriginVo() {
      return this.originVo;
    }

    public deleteHistoryInstance_args setOriginVo(com.froad.thrift.vo.OriginVo originVo) {
      this.originVo = originVo;
      return this;
    }

    public void unsetOriginVo() {
      this.originVo = null;
    }

    /** Returns true if field originVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginVo() {
      return this.originVo != null;
    }

    public void setOriginVoIsSet(boolean value) {
      if (!value) {
        this.originVo = null;
      }
    }

    public com.froad.thrift.vo.HistoryInstanceVo getHistoryInstanceVo() {
      return this.historyInstanceVo;
    }

    public deleteHistoryInstance_args setHistoryInstanceVo(com.froad.thrift.vo.HistoryInstanceVo historyInstanceVo) {
      this.historyInstanceVo = historyInstanceVo;
      return this;
    }

    public void unsetHistoryInstanceVo() {
      this.historyInstanceVo = null;
    }

    /** Returns true if field historyInstanceVo is set (has been assigned a value) and false otherwise */
    public boolean isSetHistoryInstanceVo() {
      return this.historyInstanceVo != null;
    }

    public void setHistoryInstanceVoIsSet(boolean value) {
      if (!value) {
        this.historyInstanceVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORIGIN_VO:
        if (value == null) {
          unsetOriginVo();
        } else {
          setOriginVo((com.froad.thrift.vo.OriginVo)value);
        }
        break;

      case HISTORY_INSTANCE_VO:
        if (value == null) {
          unsetHistoryInstanceVo();
        } else {
          setHistoryInstanceVo((com.froad.thrift.vo.HistoryInstanceVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORIGIN_VO:
        return getOriginVo();

      case HISTORY_INSTANCE_VO:
        return getHistoryInstanceVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORIGIN_VO:
        return isSetOriginVo();
      case HISTORY_INSTANCE_VO:
        return isSetHistoryInstanceVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteHistoryInstance_args)
        return this.equals((deleteHistoryInstance_args)that);
      return false;
    }

    public boolean equals(deleteHistoryInstance_args that) {
      if (that == null)
        return false;

      boolean this_present_originVo = true && this.isSetOriginVo();
      boolean that_present_originVo = true && that.isSetOriginVo();
      if (this_present_originVo || that_present_originVo) {
        if (!(this_present_originVo && that_present_originVo))
          return false;
        if (!this.originVo.equals(that.originVo))
          return false;
      }

      boolean this_present_historyInstanceVo = true && this.isSetHistoryInstanceVo();
      boolean that_present_historyInstanceVo = true && that.isSetHistoryInstanceVo();
      if (this_present_historyInstanceVo || that_present_historyInstanceVo) {
        if (!(this_present_historyInstanceVo && that_present_historyInstanceVo))
          return false;
        if (!this.historyInstanceVo.equals(that.historyInstanceVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_originVo = true && (isSetOriginVo());
      list.add(present_originVo);
      if (present_originVo)
        list.add(originVo);

      boolean present_historyInstanceVo = true && (isSetHistoryInstanceVo());
      list.add(present_historyInstanceVo);
      if (present_historyInstanceVo)
        list.add(historyInstanceVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteHistoryInstance_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOriginVo()).compareTo(other.isSetOriginVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originVo, other.originVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetHistoryInstanceVo()).compareTo(other.isSetHistoryInstanceVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHistoryInstanceVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.historyInstanceVo, other.historyInstanceVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteHistoryInstance_args(");
      boolean first = true;

      sb.append("originVo:");
      if (this.originVo == null) {
        sb.append("null");
      } else {
        sb.append(this.originVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("historyInstanceVo:");
      if (this.historyInstanceVo == null) {
        sb.append("null");
      } else {
        sb.append(this.historyInstanceVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (originVo != null) {
        originVo.validate();
      }
      if (historyInstanceVo != null) {
        historyInstanceVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteHistoryInstance_argsStandardSchemeFactory implements SchemeFactory {
      public deleteHistoryInstance_argsStandardScheme getScheme() {
        return new deleteHistoryInstance_argsStandardScheme();
      }
    }

    private static class deleteHistoryInstance_argsStandardScheme extends StandardScheme<deleteHistoryInstance_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteHistoryInstance_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORIGIN_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.originVo = new com.froad.thrift.vo.OriginVo();
                struct.originVo.read(iprot);
                struct.setOriginVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // HISTORY_INSTANCE_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.historyInstanceVo = new com.froad.thrift.vo.HistoryInstanceVo();
                struct.historyInstanceVo.read(iprot);
                struct.setHistoryInstanceVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteHistoryInstance_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.originVo != null) {
          oprot.writeFieldBegin(ORIGIN_VO_FIELD_DESC);
          struct.originVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.historyInstanceVo != null) {
          oprot.writeFieldBegin(HISTORY_INSTANCE_VO_FIELD_DESC);
          struct.historyInstanceVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteHistoryInstance_argsTupleSchemeFactory implements SchemeFactory {
      public deleteHistoryInstance_argsTupleScheme getScheme() {
        return new deleteHistoryInstance_argsTupleScheme();
      }
    }

    private static class deleteHistoryInstance_argsTupleScheme extends TupleScheme<deleteHistoryInstance_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteHistoryInstance_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOriginVo()) {
          optionals.set(0);
        }
        if (struct.isSetHistoryInstanceVo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOriginVo()) {
          struct.originVo.write(oprot);
        }
        if (struct.isSetHistoryInstanceVo()) {
          struct.historyInstanceVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteHistoryInstance_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.originVo = new com.froad.thrift.vo.OriginVo();
          struct.originVo.read(iprot);
          struct.setOriginVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.historyInstanceVo = new com.froad.thrift.vo.HistoryInstanceVo();
          struct.historyInstanceVo.read(iprot);
          struct.setHistoryInstanceVoIsSet(true);
        }
      }
    }

  }

  public static class deleteHistoryInstance_result implements org.apache.thrift.TBase<deleteHistoryInstance_result, deleteHistoryInstance_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteHistoryInstance_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteHistoryInstance_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteHistoryInstance_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteHistoryInstance_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteHistoryInstance_result.class, metaDataMap);
    }

    public deleteHistoryInstance_result() {
    }

    public deleteHistoryInstance_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteHistoryInstance_result(deleteHistoryInstance_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public deleteHistoryInstance_result deepCopy() {
      return new deleteHistoryInstance_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public deleteHistoryInstance_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteHistoryInstance_result)
        return this.equals((deleteHistoryInstance_result)that);
      return false;
    }

    public boolean equals(deleteHistoryInstance_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteHistoryInstance_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteHistoryInstance_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteHistoryInstance_resultStandardSchemeFactory implements SchemeFactory {
      public deleteHistoryInstance_resultStandardScheme getScheme() {
        return new deleteHistoryInstance_resultStandardScheme();
      }
    }

    private static class deleteHistoryInstance_resultStandardScheme extends StandardScheme<deleteHistoryInstance_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteHistoryInstance_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteHistoryInstance_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteHistoryInstance_resultTupleSchemeFactory implements SchemeFactory {
      public deleteHistoryInstance_resultTupleScheme getScheme() {
        return new deleteHistoryInstance_resultTupleScheme();
      }
    }

    private static class deleteHistoryInstance_resultTupleScheme extends TupleScheme<deleteHistoryInstance_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteHistoryInstance_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteHistoryInstance_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class deleteHistoryInstanceById_args implements org.apache.thrift.TBase<deleteHistoryInstanceById_args, deleteHistoryInstanceById_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteHistoryInstanceById_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteHistoryInstanceById_args");

    private static final org.apache.thrift.protocol.TField ORIGIN_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("originVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteHistoryInstanceById_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteHistoryInstanceById_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OriginVo originVo; // required
    public long id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORIGIN_VO((short)1, "originVo"),
      ID((short)2, "id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORIGIN_VO
            return ORIGIN_VO;
          case 2: // ID
            return ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORIGIN_VO, new org.apache.thrift.meta_data.FieldMetaData("originVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OriginVo.class)));
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteHistoryInstanceById_args.class, metaDataMap);
    }

    public deleteHistoryInstanceById_args() {
    }

    public deleteHistoryInstanceById_args(
      com.froad.thrift.vo.OriginVo originVo,
      long id)
    {
      this();
      this.originVo = originVo;
      this.id = id;
      setIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteHistoryInstanceById_args(deleteHistoryInstanceById_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetOriginVo()) {
        this.originVo = new com.froad.thrift.vo.OriginVo(other.originVo);
      }
      this.id = other.id;
    }

    public deleteHistoryInstanceById_args deepCopy() {
      return new deleteHistoryInstanceById_args(this);
    }

    @Override
    public void clear() {
      this.originVo = null;
      setIdIsSet(false);
      this.id = 0;
    }

    public com.froad.thrift.vo.OriginVo getOriginVo() {
      return this.originVo;
    }

    public deleteHistoryInstanceById_args setOriginVo(com.froad.thrift.vo.OriginVo originVo) {
      this.originVo = originVo;
      return this;
    }

    public void unsetOriginVo() {
      this.originVo = null;
    }

    /** Returns true if field originVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginVo() {
      return this.originVo != null;
    }

    public void setOriginVoIsSet(boolean value) {
      if (!value) {
        this.originVo = null;
      }
    }

    public long getId() {
      return this.id;
    }

    public deleteHistoryInstanceById_args setId(long id) {
      this.id = id;
      setIdIsSet(true);
      return this;
    }

    public void unsetId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
    }

    public void setIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORIGIN_VO:
        if (value == null) {
          unsetOriginVo();
        } else {
          setOriginVo((com.froad.thrift.vo.OriginVo)value);
        }
        break;

      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORIGIN_VO:
        return getOriginVo();

      case ID:
        return Long.valueOf(getId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORIGIN_VO:
        return isSetOriginVo();
      case ID:
        return isSetId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteHistoryInstanceById_args)
        return this.equals((deleteHistoryInstanceById_args)that);
      return false;
    }

    public boolean equals(deleteHistoryInstanceById_args that) {
      if (that == null)
        return false;

      boolean this_present_originVo = true && this.isSetOriginVo();
      boolean that_present_originVo = true && that.isSetOriginVo();
      if (this_present_originVo || that_present_originVo) {
        if (!(this_present_originVo && that_present_originVo))
          return false;
        if (!this.originVo.equals(that.originVo))
          return false;
      }

      boolean this_present_id = true;
      boolean that_present_id = true;
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (this.id != that.id)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_originVo = true && (isSetOriginVo());
      list.add(present_originVo);
      if (present_originVo)
        list.add(originVo);

      boolean present_id = true;
      list.add(present_id);
      if (present_id)
        list.add(id);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteHistoryInstanceById_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOriginVo()).compareTo(other.isSetOriginVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originVo, other.originVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteHistoryInstanceById_args(");
      boolean first = true;

      sb.append("originVo:");
      if (this.originVo == null) {
        sb.append("null");
      } else {
        sb.append(this.originVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("id:");
      sb.append(this.id);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (originVo != null) {
        originVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteHistoryInstanceById_argsStandardSchemeFactory implements SchemeFactory {
      public deleteHistoryInstanceById_argsStandardScheme getScheme() {
        return new deleteHistoryInstanceById_argsStandardScheme();
      }
    }

    private static class deleteHistoryInstanceById_argsStandardScheme extends StandardScheme<deleteHistoryInstanceById_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteHistoryInstanceById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORIGIN_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.originVo = new com.froad.thrift.vo.OriginVo();
                struct.originVo.read(iprot);
                struct.setOriginVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.id = iprot.readI64();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteHistoryInstanceById_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.originVo != null) {
          oprot.writeFieldBegin(ORIGIN_VO_FIELD_DESC);
          struct.originVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI64(struct.id);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteHistoryInstanceById_argsTupleSchemeFactory implements SchemeFactory {
      public deleteHistoryInstanceById_argsTupleScheme getScheme() {
        return new deleteHistoryInstanceById_argsTupleScheme();
      }
    }

    private static class deleteHistoryInstanceById_argsTupleScheme extends TupleScheme<deleteHistoryInstanceById_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteHistoryInstanceById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOriginVo()) {
          optionals.set(0);
        }
        if (struct.isSetId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOriginVo()) {
          struct.originVo.write(oprot);
        }
        if (struct.isSetId()) {
          oprot.writeI64(struct.id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteHistoryInstanceById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.originVo = new com.froad.thrift.vo.OriginVo();
          struct.originVo.read(iprot);
          struct.setOriginVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.id = iprot.readI64();
          struct.setIdIsSet(true);
        }
      }
    }

  }

  public static class deleteHistoryInstanceById_result implements org.apache.thrift.TBase<deleteHistoryInstanceById_result, deleteHistoryInstanceById_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteHistoryInstanceById_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteHistoryInstanceById_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteHistoryInstanceById_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteHistoryInstanceById_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteHistoryInstanceById_result.class, metaDataMap);
    }

    public deleteHistoryInstanceById_result() {
    }

    public deleteHistoryInstanceById_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteHistoryInstanceById_result(deleteHistoryInstanceById_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public deleteHistoryInstanceById_result deepCopy() {
      return new deleteHistoryInstanceById_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public deleteHistoryInstanceById_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteHistoryInstanceById_result)
        return this.equals((deleteHistoryInstanceById_result)that);
      return false;
    }

    public boolean equals(deleteHistoryInstanceById_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteHistoryInstanceById_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteHistoryInstanceById_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteHistoryInstanceById_resultStandardSchemeFactory implements SchemeFactory {
      public deleteHistoryInstanceById_resultStandardScheme getScheme() {
        return new deleteHistoryInstanceById_resultStandardScheme();
      }
    }

    private static class deleteHistoryInstanceById_resultStandardScheme extends StandardScheme<deleteHistoryInstanceById_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteHistoryInstanceById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteHistoryInstanceById_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteHistoryInstanceById_resultTupleSchemeFactory implements SchemeFactory {
      public deleteHistoryInstanceById_resultTupleScheme getScheme() {
        return new deleteHistoryInstanceById_resultTupleScheme();
      }
    }

    private static class deleteHistoryInstanceById_resultTupleScheme extends TupleScheme<deleteHistoryInstanceById_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteHistoryInstanceById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteHistoryInstanceById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateHistoryInstance_args implements org.apache.thrift.TBase<updateHistoryInstance_args, updateHistoryInstance_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateHistoryInstance_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateHistoryInstance_args");

    private static final org.apache.thrift.protocol.TField ORIGIN_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("originVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField HISTORY_INSTANCE_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("historyInstanceVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateHistoryInstance_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateHistoryInstance_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OriginVo originVo; // required
    public com.froad.thrift.vo.HistoryInstanceVo historyInstanceVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORIGIN_VO((short)1, "originVo"),
      HISTORY_INSTANCE_VO((short)2, "historyInstanceVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORIGIN_VO
            return ORIGIN_VO;
          case 2: // HISTORY_INSTANCE_VO
            return HISTORY_INSTANCE_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORIGIN_VO, new org.apache.thrift.meta_data.FieldMetaData("originVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OriginVo.class)));
      tmpMap.put(_Fields.HISTORY_INSTANCE_VO, new org.apache.thrift.meta_data.FieldMetaData("historyInstanceVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.HistoryInstanceVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateHistoryInstance_args.class, metaDataMap);
    }

    public updateHistoryInstance_args() {
    }

    public updateHistoryInstance_args(
      com.froad.thrift.vo.OriginVo originVo,
      com.froad.thrift.vo.HistoryInstanceVo historyInstanceVo)
    {
      this();
      this.originVo = originVo;
      this.historyInstanceVo = historyInstanceVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateHistoryInstance_args(updateHistoryInstance_args other) {
      if (other.isSetOriginVo()) {
        this.originVo = new com.froad.thrift.vo.OriginVo(other.originVo);
      }
      if (other.isSetHistoryInstanceVo()) {
        this.historyInstanceVo = new com.froad.thrift.vo.HistoryInstanceVo(other.historyInstanceVo);
      }
    }

    public updateHistoryInstance_args deepCopy() {
      return new updateHistoryInstance_args(this);
    }

    @Override
    public void clear() {
      this.originVo = null;
      this.historyInstanceVo = null;
    }

    public com.froad.thrift.vo.OriginVo getOriginVo() {
      return this.originVo;
    }

    public updateHistoryInstance_args setOriginVo(com.froad.thrift.vo.OriginVo originVo) {
      this.originVo = originVo;
      return this;
    }

    public void unsetOriginVo() {
      this.originVo = null;
    }

    /** Returns true if field originVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginVo() {
      return this.originVo != null;
    }

    public void setOriginVoIsSet(boolean value) {
      if (!value) {
        this.originVo = null;
      }
    }

    public com.froad.thrift.vo.HistoryInstanceVo getHistoryInstanceVo() {
      return this.historyInstanceVo;
    }

    public updateHistoryInstance_args setHistoryInstanceVo(com.froad.thrift.vo.HistoryInstanceVo historyInstanceVo) {
      this.historyInstanceVo = historyInstanceVo;
      return this;
    }

    public void unsetHistoryInstanceVo() {
      this.historyInstanceVo = null;
    }

    /** Returns true if field historyInstanceVo is set (has been assigned a value) and false otherwise */
    public boolean isSetHistoryInstanceVo() {
      return this.historyInstanceVo != null;
    }

    public void setHistoryInstanceVoIsSet(boolean value) {
      if (!value) {
        this.historyInstanceVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORIGIN_VO:
        if (value == null) {
          unsetOriginVo();
        } else {
          setOriginVo((com.froad.thrift.vo.OriginVo)value);
        }
        break;

      case HISTORY_INSTANCE_VO:
        if (value == null) {
          unsetHistoryInstanceVo();
        } else {
          setHistoryInstanceVo((com.froad.thrift.vo.HistoryInstanceVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORIGIN_VO:
        return getOriginVo();

      case HISTORY_INSTANCE_VO:
        return getHistoryInstanceVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORIGIN_VO:
        return isSetOriginVo();
      case HISTORY_INSTANCE_VO:
        return isSetHistoryInstanceVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateHistoryInstance_args)
        return this.equals((updateHistoryInstance_args)that);
      return false;
    }

    public boolean equals(updateHistoryInstance_args that) {
      if (that == null)
        return false;

      boolean this_present_originVo = true && this.isSetOriginVo();
      boolean that_present_originVo = true && that.isSetOriginVo();
      if (this_present_originVo || that_present_originVo) {
        if (!(this_present_originVo && that_present_originVo))
          return false;
        if (!this.originVo.equals(that.originVo))
          return false;
      }

      boolean this_present_historyInstanceVo = true && this.isSetHistoryInstanceVo();
      boolean that_present_historyInstanceVo = true && that.isSetHistoryInstanceVo();
      if (this_present_historyInstanceVo || that_present_historyInstanceVo) {
        if (!(this_present_historyInstanceVo && that_present_historyInstanceVo))
          return false;
        if (!this.historyInstanceVo.equals(that.historyInstanceVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_originVo = true && (isSetOriginVo());
      list.add(present_originVo);
      if (present_originVo)
        list.add(originVo);

      boolean present_historyInstanceVo = true && (isSetHistoryInstanceVo());
      list.add(present_historyInstanceVo);
      if (present_historyInstanceVo)
        list.add(historyInstanceVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateHistoryInstance_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOriginVo()).compareTo(other.isSetOriginVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originVo, other.originVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetHistoryInstanceVo()).compareTo(other.isSetHistoryInstanceVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHistoryInstanceVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.historyInstanceVo, other.historyInstanceVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateHistoryInstance_args(");
      boolean first = true;

      sb.append("originVo:");
      if (this.originVo == null) {
        sb.append("null");
      } else {
        sb.append(this.originVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("historyInstanceVo:");
      if (this.historyInstanceVo == null) {
        sb.append("null");
      } else {
        sb.append(this.historyInstanceVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (originVo != null) {
        originVo.validate();
      }
      if (historyInstanceVo != null) {
        historyInstanceVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateHistoryInstance_argsStandardSchemeFactory implements SchemeFactory {
      public updateHistoryInstance_argsStandardScheme getScheme() {
        return new updateHistoryInstance_argsStandardScheme();
      }
    }

    private static class updateHistoryInstance_argsStandardScheme extends StandardScheme<updateHistoryInstance_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateHistoryInstance_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORIGIN_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.originVo = new com.froad.thrift.vo.OriginVo();
                struct.originVo.read(iprot);
                struct.setOriginVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // HISTORY_INSTANCE_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.historyInstanceVo = new com.froad.thrift.vo.HistoryInstanceVo();
                struct.historyInstanceVo.read(iprot);
                struct.setHistoryInstanceVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateHistoryInstance_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.originVo != null) {
          oprot.writeFieldBegin(ORIGIN_VO_FIELD_DESC);
          struct.originVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.historyInstanceVo != null) {
          oprot.writeFieldBegin(HISTORY_INSTANCE_VO_FIELD_DESC);
          struct.historyInstanceVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateHistoryInstance_argsTupleSchemeFactory implements SchemeFactory {
      public updateHistoryInstance_argsTupleScheme getScheme() {
        return new updateHistoryInstance_argsTupleScheme();
      }
    }

    private static class updateHistoryInstance_argsTupleScheme extends TupleScheme<updateHistoryInstance_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateHistoryInstance_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOriginVo()) {
          optionals.set(0);
        }
        if (struct.isSetHistoryInstanceVo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOriginVo()) {
          struct.originVo.write(oprot);
        }
        if (struct.isSetHistoryInstanceVo()) {
          struct.historyInstanceVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateHistoryInstance_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.originVo = new com.froad.thrift.vo.OriginVo();
          struct.originVo.read(iprot);
          struct.setOriginVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.historyInstanceVo = new com.froad.thrift.vo.HistoryInstanceVo();
          struct.historyInstanceVo.read(iprot);
          struct.setHistoryInstanceVoIsSet(true);
        }
      }
    }

  }

  public static class updateHistoryInstance_result implements org.apache.thrift.TBase<updateHistoryInstance_result, updateHistoryInstance_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateHistoryInstance_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateHistoryInstance_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateHistoryInstance_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateHistoryInstance_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateHistoryInstance_result.class, metaDataMap);
    }

    public updateHistoryInstance_result() {
    }

    public updateHistoryInstance_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateHistoryInstance_result(updateHistoryInstance_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public updateHistoryInstance_result deepCopy() {
      return new updateHistoryInstance_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public updateHistoryInstance_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateHistoryInstance_result)
        return this.equals((updateHistoryInstance_result)that);
      return false;
    }

    public boolean equals(updateHistoryInstance_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateHistoryInstance_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateHistoryInstance_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateHistoryInstance_resultStandardSchemeFactory implements SchemeFactory {
      public updateHistoryInstance_resultStandardScheme getScheme() {
        return new updateHistoryInstance_resultStandardScheme();
      }
    }

    private static class updateHistoryInstance_resultStandardScheme extends StandardScheme<updateHistoryInstance_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateHistoryInstance_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateHistoryInstance_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateHistoryInstance_resultTupleSchemeFactory implements SchemeFactory {
      public updateHistoryInstance_resultTupleScheme getScheme() {
        return new updateHistoryInstance_resultTupleScheme();
      }
    }

    private static class updateHistoryInstance_resultTupleScheme extends TupleScheme<updateHistoryInstance_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateHistoryInstance_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateHistoryInstance_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateHistoryInstanceById_args implements org.apache.thrift.TBase<updateHistoryInstanceById_args, updateHistoryInstanceById_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateHistoryInstanceById_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateHistoryInstanceById_args");

    private static final org.apache.thrift.protocol.TField ORIGIN_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("originVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField HISTORY_INSTANCE_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("historyInstanceVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateHistoryInstanceById_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateHistoryInstanceById_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OriginVo originVo; // required
    public com.froad.thrift.vo.HistoryInstanceVo historyInstanceVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORIGIN_VO((short)1, "originVo"),
      HISTORY_INSTANCE_VO((short)2, "historyInstanceVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORIGIN_VO
            return ORIGIN_VO;
          case 2: // HISTORY_INSTANCE_VO
            return HISTORY_INSTANCE_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORIGIN_VO, new org.apache.thrift.meta_data.FieldMetaData("originVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OriginVo.class)));
      tmpMap.put(_Fields.HISTORY_INSTANCE_VO, new org.apache.thrift.meta_data.FieldMetaData("historyInstanceVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.HistoryInstanceVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateHistoryInstanceById_args.class, metaDataMap);
    }

    public updateHistoryInstanceById_args() {
    }

    public updateHistoryInstanceById_args(
      com.froad.thrift.vo.OriginVo originVo,
      com.froad.thrift.vo.HistoryInstanceVo historyInstanceVo)
    {
      this();
      this.originVo = originVo;
      this.historyInstanceVo = historyInstanceVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateHistoryInstanceById_args(updateHistoryInstanceById_args other) {
      if (other.isSetOriginVo()) {
        this.originVo = new com.froad.thrift.vo.OriginVo(other.originVo);
      }
      if (other.isSetHistoryInstanceVo()) {
        this.historyInstanceVo = new com.froad.thrift.vo.HistoryInstanceVo(other.historyInstanceVo);
      }
    }

    public updateHistoryInstanceById_args deepCopy() {
      return new updateHistoryInstanceById_args(this);
    }

    @Override
    public void clear() {
      this.originVo = null;
      this.historyInstanceVo = null;
    }

    public com.froad.thrift.vo.OriginVo getOriginVo() {
      return this.originVo;
    }

    public updateHistoryInstanceById_args setOriginVo(com.froad.thrift.vo.OriginVo originVo) {
      this.originVo = originVo;
      return this;
    }

    public void unsetOriginVo() {
      this.originVo = null;
    }

    /** Returns true if field originVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginVo() {
      return this.originVo != null;
    }

    public void setOriginVoIsSet(boolean value) {
      if (!value) {
        this.originVo = null;
      }
    }

    public com.froad.thrift.vo.HistoryInstanceVo getHistoryInstanceVo() {
      return this.historyInstanceVo;
    }

    public updateHistoryInstanceById_args setHistoryInstanceVo(com.froad.thrift.vo.HistoryInstanceVo historyInstanceVo) {
      this.historyInstanceVo = historyInstanceVo;
      return this;
    }

    public void unsetHistoryInstanceVo() {
      this.historyInstanceVo = null;
    }

    /** Returns true if field historyInstanceVo is set (has been assigned a value) and false otherwise */
    public boolean isSetHistoryInstanceVo() {
      return this.historyInstanceVo != null;
    }

    public void setHistoryInstanceVoIsSet(boolean value) {
      if (!value) {
        this.historyInstanceVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORIGIN_VO:
        if (value == null) {
          unsetOriginVo();
        } else {
          setOriginVo((com.froad.thrift.vo.OriginVo)value);
        }
        break;

      case HISTORY_INSTANCE_VO:
        if (value == null) {
          unsetHistoryInstanceVo();
        } else {
          setHistoryInstanceVo((com.froad.thrift.vo.HistoryInstanceVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORIGIN_VO:
        return getOriginVo();

      case HISTORY_INSTANCE_VO:
        return getHistoryInstanceVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORIGIN_VO:
        return isSetOriginVo();
      case HISTORY_INSTANCE_VO:
        return isSetHistoryInstanceVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateHistoryInstanceById_args)
        return this.equals((updateHistoryInstanceById_args)that);
      return false;
    }

    public boolean equals(updateHistoryInstanceById_args that) {
      if (that == null)
        return false;

      boolean this_present_originVo = true && this.isSetOriginVo();
      boolean that_present_originVo = true && that.isSetOriginVo();
      if (this_present_originVo || that_present_originVo) {
        if (!(this_present_originVo && that_present_originVo))
          return false;
        if (!this.originVo.equals(that.originVo))
          return false;
      }

      boolean this_present_historyInstanceVo = true && this.isSetHistoryInstanceVo();
      boolean that_present_historyInstanceVo = true && that.isSetHistoryInstanceVo();
      if (this_present_historyInstanceVo || that_present_historyInstanceVo) {
        if (!(this_present_historyInstanceVo && that_present_historyInstanceVo))
          return false;
        if (!this.historyInstanceVo.equals(that.historyInstanceVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_originVo = true && (isSetOriginVo());
      list.add(present_originVo);
      if (present_originVo)
        list.add(originVo);

      boolean present_historyInstanceVo = true && (isSetHistoryInstanceVo());
      list.add(present_historyInstanceVo);
      if (present_historyInstanceVo)
        list.add(historyInstanceVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateHistoryInstanceById_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOriginVo()).compareTo(other.isSetOriginVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originVo, other.originVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetHistoryInstanceVo()).compareTo(other.isSetHistoryInstanceVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHistoryInstanceVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.historyInstanceVo, other.historyInstanceVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateHistoryInstanceById_args(");
      boolean first = true;

      sb.append("originVo:");
      if (this.originVo == null) {
        sb.append("null");
      } else {
        sb.append(this.originVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("historyInstanceVo:");
      if (this.historyInstanceVo == null) {
        sb.append("null");
      } else {
        sb.append(this.historyInstanceVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (originVo != null) {
        originVo.validate();
      }
      if (historyInstanceVo != null) {
        historyInstanceVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateHistoryInstanceById_argsStandardSchemeFactory implements SchemeFactory {
      public updateHistoryInstanceById_argsStandardScheme getScheme() {
        return new updateHistoryInstanceById_argsStandardScheme();
      }
    }

    private static class updateHistoryInstanceById_argsStandardScheme extends StandardScheme<updateHistoryInstanceById_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateHistoryInstanceById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORIGIN_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.originVo = new com.froad.thrift.vo.OriginVo();
                struct.originVo.read(iprot);
                struct.setOriginVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // HISTORY_INSTANCE_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.historyInstanceVo = new com.froad.thrift.vo.HistoryInstanceVo();
                struct.historyInstanceVo.read(iprot);
                struct.setHistoryInstanceVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateHistoryInstanceById_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.originVo != null) {
          oprot.writeFieldBegin(ORIGIN_VO_FIELD_DESC);
          struct.originVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.historyInstanceVo != null) {
          oprot.writeFieldBegin(HISTORY_INSTANCE_VO_FIELD_DESC);
          struct.historyInstanceVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateHistoryInstanceById_argsTupleSchemeFactory implements SchemeFactory {
      public updateHistoryInstanceById_argsTupleScheme getScheme() {
        return new updateHistoryInstanceById_argsTupleScheme();
      }
    }

    private static class updateHistoryInstanceById_argsTupleScheme extends TupleScheme<updateHistoryInstanceById_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateHistoryInstanceById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOriginVo()) {
          optionals.set(0);
        }
        if (struct.isSetHistoryInstanceVo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOriginVo()) {
          struct.originVo.write(oprot);
        }
        if (struct.isSetHistoryInstanceVo()) {
          struct.historyInstanceVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateHistoryInstanceById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.originVo = new com.froad.thrift.vo.OriginVo();
          struct.originVo.read(iprot);
          struct.setOriginVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.historyInstanceVo = new com.froad.thrift.vo.HistoryInstanceVo();
          struct.historyInstanceVo.read(iprot);
          struct.setHistoryInstanceVoIsSet(true);
        }
      }
    }

  }

  public static class updateHistoryInstanceById_result implements org.apache.thrift.TBase<updateHistoryInstanceById_result, updateHistoryInstanceById_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateHistoryInstanceById_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateHistoryInstanceById_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateHistoryInstanceById_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateHistoryInstanceById_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateHistoryInstanceById_result.class, metaDataMap);
    }

    public updateHistoryInstanceById_result() {
    }

    public updateHistoryInstanceById_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateHistoryInstanceById_result(updateHistoryInstanceById_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public updateHistoryInstanceById_result deepCopy() {
      return new updateHistoryInstanceById_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public updateHistoryInstanceById_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateHistoryInstanceById_result)
        return this.equals((updateHistoryInstanceById_result)that);
      return false;
    }

    public boolean equals(updateHistoryInstanceById_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateHistoryInstanceById_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateHistoryInstanceById_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateHistoryInstanceById_resultStandardSchemeFactory implements SchemeFactory {
      public updateHistoryInstanceById_resultStandardScheme getScheme() {
        return new updateHistoryInstanceById_resultStandardScheme();
      }
    }

    private static class updateHistoryInstanceById_resultStandardScheme extends StandardScheme<updateHistoryInstanceById_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateHistoryInstanceById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateHistoryInstanceById_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateHistoryInstanceById_resultTupleSchemeFactory implements SchemeFactory {
      public updateHistoryInstanceById_resultTupleScheme getScheme() {
        return new updateHistoryInstanceById_resultTupleScheme();
      }
    }

    private static class updateHistoryInstanceById_resultTupleScheme extends TupleScheme<updateHistoryInstanceById_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateHistoryInstanceById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateHistoryInstanceById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getHistoryInstanceById_args implements org.apache.thrift.TBase<getHistoryInstanceById_args, getHistoryInstanceById_args._Fields>, java.io.Serializable, Cloneable, Comparable<getHistoryInstanceById_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getHistoryInstanceById_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getHistoryInstanceById_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getHistoryInstanceById_argsTupleSchemeFactory());
    }

    public long id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getHistoryInstanceById_args.class, metaDataMap);
    }

    public getHistoryInstanceById_args() {
    }

    public getHistoryInstanceById_args(
      long id)
    {
      this();
      this.id = id;
      setIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getHistoryInstanceById_args(getHistoryInstanceById_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.id = other.id;
    }

    public getHistoryInstanceById_args deepCopy() {
      return new getHistoryInstanceById_args(this);
    }

    @Override
    public void clear() {
      setIdIsSet(false);
      this.id = 0;
    }

    public long getId() {
      return this.id;
    }

    public getHistoryInstanceById_args setId(long id) {
      this.id = id;
      setIdIsSet(true);
      return this;
    }

    public void unsetId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
    }

    public void setIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return Long.valueOf(getId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getHistoryInstanceById_args)
        return this.equals((getHistoryInstanceById_args)that);
      return false;
    }

    public boolean equals(getHistoryInstanceById_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true;
      boolean that_present_id = true;
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (this.id != that.id)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_id = true;
      list.add(present_id);
      if (present_id)
        list.add(id);

      return list.hashCode();
    }

    @Override
    public int compareTo(getHistoryInstanceById_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getHistoryInstanceById_args(");
      boolean first = true;

      sb.append("id:");
      sb.append(this.id);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getHistoryInstanceById_argsStandardSchemeFactory implements SchemeFactory {
      public getHistoryInstanceById_argsStandardScheme getScheme() {
        return new getHistoryInstanceById_argsStandardScheme();
      }
    }

    private static class getHistoryInstanceById_argsStandardScheme extends StandardScheme<getHistoryInstanceById_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getHistoryInstanceById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.id = iprot.readI64();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getHistoryInstanceById_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI64(struct.id);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getHistoryInstanceById_argsTupleSchemeFactory implements SchemeFactory {
      public getHistoryInstanceById_argsTupleScheme getScheme() {
        return new getHistoryInstanceById_argsTupleScheme();
      }
    }

    private static class getHistoryInstanceById_argsTupleScheme extends TupleScheme<getHistoryInstanceById_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getHistoryInstanceById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetId()) {
          oprot.writeI64(struct.id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getHistoryInstanceById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.id = iprot.readI64();
          struct.setIdIsSet(true);
        }
      }
    }

  }

  public static class getHistoryInstanceById_result implements org.apache.thrift.TBase<getHistoryInstanceById_result, getHistoryInstanceById_result._Fields>, java.io.Serializable, Cloneable, Comparable<getHistoryInstanceById_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getHistoryInstanceById_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getHistoryInstanceById_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getHistoryInstanceById_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.HistoryInstanceVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.HistoryInstanceVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getHistoryInstanceById_result.class, metaDataMap);
    }

    public getHistoryInstanceById_result() {
    }

    public getHistoryInstanceById_result(
      com.froad.thrift.vo.HistoryInstanceVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getHistoryInstanceById_result(getHistoryInstanceById_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.HistoryInstanceVo(other.success);
      }
    }

    public getHistoryInstanceById_result deepCopy() {
      return new getHistoryInstanceById_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.HistoryInstanceVo getSuccess() {
      return this.success;
    }

    public getHistoryInstanceById_result setSuccess(com.froad.thrift.vo.HistoryInstanceVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.HistoryInstanceVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getHistoryInstanceById_result)
        return this.equals((getHistoryInstanceById_result)that);
      return false;
    }

    public boolean equals(getHistoryInstanceById_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getHistoryInstanceById_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getHistoryInstanceById_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getHistoryInstanceById_resultStandardSchemeFactory implements SchemeFactory {
      public getHistoryInstanceById_resultStandardScheme getScheme() {
        return new getHistoryInstanceById_resultStandardScheme();
      }
    }

    private static class getHistoryInstanceById_resultStandardScheme extends StandardScheme<getHistoryInstanceById_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getHistoryInstanceById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.HistoryInstanceVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getHistoryInstanceById_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getHistoryInstanceById_resultTupleSchemeFactory implements SchemeFactory {
      public getHistoryInstanceById_resultTupleScheme getScheme() {
        return new getHistoryInstanceById_resultTupleScheme();
      }
    }

    private static class getHistoryInstanceById_resultTupleScheme extends TupleScheme<getHistoryInstanceById_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getHistoryInstanceById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getHistoryInstanceById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.HistoryInstanceVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getOneHistoryInstance_args implements org.apache.thrift.TBase<getOneHistoryInstance_args, getOneHistoryInstance_args._Fields>, java.io.Serializable, Cloneable, Comparable<getOneHistoryInstance_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOneHistoryInstance_args");

    private static final org.apache.thrift.protocol.TField HISTORY_INSTANCE_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("historyInstanceVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOneHistoryInstance_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOneHistoryInstance_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.HistoryInstanceVo historyInstanceVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HISTORY_INSTANCE_VO((short)1, "historyInstanceVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HISTORY_INSTANCE_VO
            return HISTORY_INSTANCE_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HISTORY_INSTANCE_VO, new org.apache.thrift.meta_data.FieldMetaData("historyInstanceVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.HistoryInstanceVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOneHistoryInstance_args.class, metaDataMap);
    }

    public getOneHistoryInstance_args() {
    }

    public getOneHistoryInstance_args(
      com.froad.thrift.vo.HistoryInstanceVo historyInstanceVo)
    {
      this();
      this.historyInstanceVo = historyInstanceVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOneHistoryInstance_args(getOneHistoryInstance_args other) {
      if (other.isSetHistoryInstanceVo()) {
        this.historyInstanceVo = new com.froad.thrift.vo.HistoryInstanceVo(other.historyInstanceVo);
      }
    }

    public getOneHistoryInstance_args deepCopy() {
      return new getOneHistoryInstance_args(this);
    }

    @Override
    public void clear() {
      this.historyInstanceVo = null;
    }

    public com.froad.thrift.vo.HistoryInstanceVo getHistoryInstanceVo() {
      return this.historyInstanceVo;
    }

    public getOneHistoryInstance_args setHistoryInstanceVo(com.froad.thrift.vo.HistoryInstanceVo historyInstanceVo) {
      this.historyInstanceVo = historyInstanceVo;
      return this;
    }

    public void unsetHistoryInstanceVo() {
      this.historyInstanceVo = null;
    }

    /** Returns true if field historyInstanceVo is set (has been assigned a value) and false otherwise */
    public boolean isSetHistoryInstanceVo() {
      return this.historyInstanceVo != null;
    }

    public void setHistoryInstanceVoIsSet(boolean value) {
      if (!value) {
        this.historyInstanceVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case HISTORY_INSTANCE_VO:
        if (value == null) {
          unsetHistoryInstanceVo();
        } else {
          setHistoryInstanceVo((com.froad.thrift.vo.HistoryInstanceVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case HISTORY_INSTANCE_VO:
        return getHistoryInstanceVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case HISTORY_INSTANCE_VO:
        return isSetHistoryInstanceVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOneHistoryInstance_args)
        return this.equals((getOneHistoryInstance_args)that);
      return false;
    }

    public boolean equals(getOneHistoryInstance_args that) {
      if (that == null)
        return false;

      boolean this_present_historyInstanceVo = true && this.isSetHistoryInstanceVo();
      boolean that_present_historyInstanceVo = true && that.isSetHistoryInstanceVo();
      if (this_present_historyInstanceVo || that_present_historyInstanceVo) {
        if (!(this_present_historyInstanceVo && that_present_historyInstanceVo))
          return false;
        if (!this.historyInstanceVo.equals(that.historyInstanceVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_historyInstanceVo = true && (isSetHistoryInstanceVo());
      list.add(present_historyInstanceVo);
      if (present_historyInstanceVo)
        list.add(historyInstanceVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(getOneHistoryInstance_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetHistoryInstanceVo()).compareTo(other.isSetHistoryInstanceVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHistoryInstanceVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.historyInstanceVo, other.historyInstanceVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOneHistoryInstance_args(");
      boolean first = true;

      sb.append("historyInstanceVo:");
      if (this.historyInstanceVo == null) {
        sb.append("null");
      } else {
        sb.append(this.historyInstanceVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (historyInstanceVo != null) {
        historyInstanceVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOneHistoryInstance_argsStandardSchemeFactory implements SchemeFactory {
      public getOneHistoryInstance_argsStandardScheme getScheme() {
        return new getOneHistoryInstance_argsStandardScheme();
      }
    }

    private static class getOneHistoryInstance_argsStandardScheme extends StandardScheme<getOneHistoryInstance_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOneHistoryInstance_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HISTORY_INSTANCE_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.historyInstanceVo = new com.froad.thrift.vo.HistoryInstanceVo();
                struct.historyInstanceVo.read(iprot);
                struct.setHistoryInstanceVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOneHistoryInstance_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.historyInstanceVo != null) {
          oprot.writeFieldBegin(HISTORY_INSTANCE_VO_FIELD_DESC);
          struct.historyInstanceVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOneHistoryInstance_argsTupleSchemeFactory implements SchemeFactory {
      public getOneHistoryInstance_argsTupleScheme getScheme() {
        return new getOneHistoryInstance_argsTupleScheme();
      }
    }

    private static class getOneHistoryInstance_argsTupleScheme extends TupleScheme<getOneHistoryInstance_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOneHistoryInstance_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetHistoryInstanceVo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetHistoryInstanceVo()) {
          struct.historyInstanceVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOneHistoryInstance_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.historyInstanceVo = new com.froad.thrift.vo.HistoryInstanceVo();
          struct.historyInstanceVo.read(iprot);
          struct.setHistoryInstanceVoIsSet(true);
        }
      }
    }

  }

  public static class getOneHistoryInstance_result implements org.apache.thrift.TBase<getOneHistoryInstance_result, getOneHistoryInstance_result._Fields>, java.io.Serializable, Cloneable, Comparable<getOneHistoryInstance_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOneHistoryInstance_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOneHistoryInstance_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOneHistoryInstance_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.HistoryInstanceVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.HistoryInstanceVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOneHistoryInstance_result.class, metaDataMap);
    }

    public getOneHistoryInstance_result() {
    }

    public getOneHistoryInstance_result(
      com.froad.thrift.vo.HistoryInstanceVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOneHistoryInstance_result(getOneHistoryInstance_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.HistoryInstanceVo(other.success);
      }
    }

    public getOneHistoryInstance_result deepCopy() {
      return new getOneHistoryInstance_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.HistoryInstanceVo getSuccess() {
      return this.success;
    }

    public getOneHistoryInstance_result setSuccess(com.froad.thrift.vo.HistoryInstanceVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.HistoryInstanceVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOneHistoryInstance_result)
        return this.equals((getOneHistoryInstance_result)that);
      return false;
    }

    public boolean equals(getOneHistoryInstance_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getOneHistoryInstance_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOneHistoryInstance_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOneHistoryInstance_resultStandardSchemeFactory implements SchemeFactory {
      public getOneHistoryInstance_resultStandardScheme getScheme() {
        return new getOneHistoryInstance_resultStandardScheme();
      }
    }

    private static class getOneHistoryInstance_resultStandardScheme extends StandardScheme<getOneHistoryInstance_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOneHistoryInstance_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.HistoryInstanceVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOneHistoryInstance_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOneHistoryInstance_resultTupleSchemeFactory implements SchemeFactory {
      public getOneHistoryInstance_resultTupleScheme getScheme() {
        return new getOneHistoryInstance_resultTupleScheme();
      }
    }

    private static class getOneHistoryInstance_resultTupleScheme extends TupleScheme<getOneHistoryInstance_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOneHistoryInstance_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOneHistoryInstance_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.HistoryInstanceVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class countHistoryInstance_args implements org.apache.thrift.TBase<countHistoryInstance_args, countHistoryInstance_args._Fields>, java.io.Serializable, Cloneable, Comparable<countHistoryInstance_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("countHistoryInstance_args");

    private static final org.apache.thrift.protocol.TField HISTORY_INSTANCE_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("historyInstanceVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new countHistoryInstance_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new countHistoryInstance_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.HistoryInstanceVo historyInstanceVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HISTORY_INSTANCE_VO((short)1, "historyInstanceVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HISTORY_INSTANCE_VO
            return HISTORY_INSTANCE_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HISTORY_INSTANCE_VO, new org.apache.thrift.meta_data.FieldMetaData("historyInstanceVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.HistoryInstanceVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(countHistoryInstance_args.class, metaDataMap);
    }

    public countHistoryInstance_args() {
    }

    public countHistoryInstance_args(
      com.froad.thrift.vo.HistoryInstanceVo historyInstanceVo)
    {
      this();
      this.historyInstanceVo = historyInstanceVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public countHistoryInstance_args(countHistoryInstance_args other) {
      if (other.isSetHistoryInstanceVo()) {
        this.historyInstanceVo = new com.froad.thrift.vo.HistoryInstanceVo(other.historyInstanceVo);
      }
    }

    public countHistoryInstance_args deepCopy() {
      return new countHistoryInstance_args(this);
    }

    @Override
    public void clear() {
      this.historyInstanceVo = null;
    }

    public com.froad.thrift.vo.HistoryInstanceVo getHistoryInstanceVo() {
      return this.historyInstanceVo;
    }

    public countHistoryInstance_args setHistoryInstanceVo(com.froad.thrift.vo.HistoryInstanceVo historyInstanceVo) {
      this.historyInstanceVo = historyInstanceVo;
      return this;
    }

    public void unsetHistoryInstanceVo() {
      this.historyInstanceVo = null;
    }

    /** Returns true if field historyInstanceVo is set (has been assigned a value) and false otherwise */
    public boolean isSetHistoryInstanceVo() {
      return this.historyInstanceVo != null;
    }

    public void setHistoryInstanceVoIsSet(boolean value) {
      if (!value) {
        this.historyInstanceVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case HISTORY_INSTANCE_VO:
        if (value == null) {
          unsetHistoryInstanceVo();
        } else {
          setHistoryInstanceVo((com.froad.thrift.vo.HistoryInstanceVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case HISTORY_INSTANCE_VO:
        return getHistoryInstanceVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case HISTORY_INSTANCE_VO:
        return isSetHistoryInstanceVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof countHistoryInstance_args)
        return this.equals((countHistoryInstance_args)that);
      return false;
    }

    public boolean equals(countHistoryInstance_args that) {
      if (that == null)
        return false;

      boolean this_present_historyInstanceVo = true && this.isSetHistoryInstanceVo();
      boolean that_present_historyInstanceVo = true && that.isSetHistoryInstanceVo();
      if (this_present_historyInstanceVo || that_present_historyInstanceVo) {
        if (!(this_present_historyInstanceVo && that_present_historyInstanceVo))
          return false;
        if (!this.historyInstanceVo.equals(that.historyInstanceVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_historyInstanceVo = true && (isSetHistoryInstanceVo());
      list.add(present_historyInstanceVo);
      if (present_historyInstanceVo)
        list.add(historyInstanceVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(countHistoryInstance_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetHistoryInstanceVo()).compareTo(other.isSetHistoryInstanceVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHistoryInstanceVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.historyInstanceVo, other.historyInstanceVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("countHistoryInstance_args(");
      boolean first = true;

      sb.append("historyInstanceVo:");
      if (this.historyInstanceVo == null) {
        sb.append("null");
      } else {
        sb.append(this.historyInstanceVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (historyInstanceVo != null) {
        historyInstanceVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class countHistoryInstance_argsStandardSchemeFactory implements SchemeFactory {
      public countHistoryInstance_argsStandardScheme getScheme() {
        return new countHistoryInstance_argsStandardScheme();
      }
    }

    private static class countHistoryInstance_argsStandardScheme extends StandardScheme<countHistoryInstance_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, countHistoryInstance_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HISTORY_INSTANCE_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.historyInstanceVo = new com.froad.thrift.vo.HistoryInstanceVo();
                struct.historyInstanceVo.read(iprot);
                struct.setHistoryInstanceVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, countHistoryInstance_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.historyInstanceVo != null) {
          oprot.writeFieldBegin(HISTORY_INSTANCE_VO_FIELD_DESC);
          struct.historyInstanceVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class countHistoryInstance_argsTupleSchemeFactory implements SchemeFactory {
      public countHistoryInstance_argsTupleScheme getScheme() {
        return new countHistoryInstance_argsTupleScheme();
      }
    }

    private static class countHistoryInstance_argsTupleScheme extends TupleScheme<countHistoryInstance_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, countHistoryInstance_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetHistoryInstanceVo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetHistoryInstanceVo()) {
          struct.historyInstanceVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, countHistoryInstance_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.historyInstanceVo = new com.froad.thrift.vo.HistoryInstanceVo();
          struct.historyInstanceVo.read(iprot);
          struct.setHistoryInstanceVoIsSet(true);
        }
      }
    }

  }

  public static class countHistoryInstance_result implements org.apache.thrift.TBase<countHistoryInstance_result, countHistoryInstance_result._Fields>, java.io.Serializable, Cloneable, Comparable<countHistoryInstance_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("countHistoryInstance_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new countHistoryInstance_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new countHistoryInstance_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(countHistoryInstance_result.class, metaDataMap);
    }

    public countHistoryInstance_result() {
    }

    public countHistoryInstance_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public countHistoryInstance_result(countHistoryInstance_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public countHistoryInstance_result deepCopy() {
      return new countHistoryInstance_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public countHistoryInstance_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof countHistoryInstance_result)
        return this.equals((countHistoryInstance_result)that);
      return false;
    }

    public boolean equals(countHistoryInstance_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(countHistoryInstance_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("countHistoryInstance_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class countHistoryInstance_resultStandardSchemeFactory implements SchemeFactory {
      public countHistoryInstance_resultStandardScheme getScheme() {
        return new countHistoryInstance_resultStandardScheme();
      }
    }

    private static class countHistoryInstance_resultStandardScheme extends StandardScheme<countHistoryInstance_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, countHistoryInstance_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, countHistoryInstance_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class countHistoryInstance_resultTupleSchemeFactory implements SchemeFactory {
      public countHistoryInstance_resultTupleScheme getScheme() {
        return new countHistoryInstance_resultTupleScheme();
      }
    }

    private static class countHistoryInstance_resultTupleScheme extends TupleScheme<countHistoryInstance_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, countHistoryInstance_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, countHistoryInstance_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getHistoryInstance_args implements org.apache.thrift.TBase<getHistoryInstance_args, getHistoryInstance_args._Fields>, java.io.Serializable, Cloneable, Comparable<getHistoryInstance_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getHistoryInstance_args");

    private static final org.apache.thrift.protocol.TField HISTORY_INSTANCE_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("historyInstanceVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getHistoryInstance_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getHistoryInstance_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.HistoryInstanceVo historyInstanceVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HISTORY_INSTANCE_VO((short)1, "historyInstanceVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HISTORY_INSTANCE_VO
            return HISTORY_INSTANCE_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HISTORY_INSTANCE_VO, new org.apache.thrift.meta_data.FieldMetaData("historyInstanceVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.HistoryInstanceVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getHistoryInstance_args.class, metaDataMap);
    }

    public getHistoryInstance_args() {
    }

    public getHistoryInstance_args(
      com.froad.thrift.vo.HistoryInstanceVo historyInstanceVo)
    {
      this();
      this.historyInstanceVo = historyInstanceVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getHistoryInstance_args(getHistoryInstance_args other) {
      if (other.isSetHistoryInstanceVo()) {
        this.historyInstanceVo = new com.froad.thrift.vo.HistoryInstanceVo(other.historyInstanceVo);
      }
    }

    public getHistoryInstance_args deepCopy() {
      return new getHistoryInstance_args(this);
    }

    @Override
    public void clear() {
      this.historyInstanceVo = null;
    }

    public com.froad.thrift.vo.HistoryInstanceVo getHistoryInstanceVo() {
      return this.historyInstanceVo;
    }

    public getHistoryInstance_args setHistoryInstanceVo(com.froad.thrift.vo.HistoryInstanceVo historyInstanceVo) {
      this.historyInstanceVo = historyInstanceVo;
      return this;
    }

    public void unsetHistoryInstanceVo() {
      this.historyInstanceVo = null;
    }

    /** Returns true if field historyInstanceVo is set (has been assigned a value) and false otherwise */
    public boolean isSetHistoryInstanceVo() {
      return this.historyInstanceVo != null;
    }

    public void setHistoryInstanceVoIsSet(boolean value) {
      if (!value) {
        this.historyInstanceVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case HISTORY_INSTANCE_VO:
        if (value == null) {
          unsetHistoryInstanceVo();
        } else {
          setHistoryInstanceVo((com.froad.thrift.vo.HistoryInstanceVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case HISTORY_INSTANCE_VO:
        return getHistoryInstanceVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case HISTORY_INSTANCE_VO:
        return isSetHistoryInstanceVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getHistoryInstance_args)
        return this.equals((getHistoryInstance_args)that);
      return false;
    }

    public boolean equals(getHistoryInstance_args that) {
      if (that == null)
        return false;

      boolean this_present_historyInstanceVo = true && this.isSetHistoryInstanceVo();
      boolean that_present_historyInstanceVo = true && that.isSetHistoryInstanceVo();
      if (this_present_historyInstanceVo || that_present_historyInstanceVo) {
        if (!(this_present_historyInstanceVo && that_present_historyInstanceVo))
          return false;
        if (!this.historyInstanceVo.equals(that.historyInstanceVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_historyInstanceVo = true && (isSetHistoryInstanceVo());
      list.add(present_historyInstanceVo);
      if (present_historyInstanceVo)
        list.add(historyInstanceVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(getHistoryInstance_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetHistoryInstanceVo()).compareTo(other.isSetHistoryInstanceVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHistoryInstanceVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.historyInstanceVo, other.historyInstanceVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getHistoryInstance_args(");
      boolean first = true;

      sb.append("historyInstanceVo:");
      if (this.historyInstanceVo == null) {
        sb.append("null");
      } else {
        sb.append(this.historyInstanceVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (historyInstanceVo != null) {
        historyInstanceVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getHistoryInstance_argsStandardSchemeFactory implements SchemeFactory {
      public getHistoryInstance_argsStandardScheme getScheme() {
        return new getHistoryInstance_argsStandardScheme();
      }
    }

    private static class getHistoryInstance_argsStandardScheme extends StandardScheme<getHistoryInstance_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getHistoryInstance_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HISTORY_INSTANCE_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.historyInstanceVo = new com.froad.thrift.vo.HistoryInstanceVo();
                struct.historyInstanceVo.read(iprot);
                struct.setHistoryInstanceVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getHistoryInstance_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.historyInstanceVo != null) {
          oprot.writeFieldBegin(HISTORY_INSTANCE_VO_FIELD_DESC);
          struct.historyInstanceVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getHistoryInstance_argsTupleSchemeFactory implements SchemeFactory {
      public getHistoryInstance_argsTupleScheme getScheme() {
        return new getHistoryInstance_argsTupleScheme();
      }
    }

    private static class getHistoryInstance_argsTupleScheme extends TupleScheme<getHistoryInstance_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getHistoryInstance_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetHistoryInstanceVo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetHistoryInstanceVo()) {
          struct.historyInstanceVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getHistoryInstance_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.historyInstanceVo = new com.froad.thrift.vo.HistoryInstanceVo();
          struct.historyInstanceVo.read(iprot);
          struct.setHistoryInstanceVoIsSet(true);
        }
      }
    }

  }

  public static class getHistoryInstance_result implements org.apache.thrift.TBase<getHistoryInstance_result, getHistoryInstance_result._Fields>, java.io.Serializable, Cloneable, Comparable<getHistoryInstance_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getHistoryInstance_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getHistoryInstance_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getHistoryInstance_resultTupleSchemeFactory());
    }

    public List<com.froad.thrift.vo.HistoryInstanceVo> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.HistoryInstanceVo.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getHistoryInstance_result.class, metaDataMap);
    }

    public getHistoryInstance_result() {
    }

    public getHistoryInstance_result(
      List<com.froad.thrift.vo.HistoryInstanceVo> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getHistoryInstance_result(getHistoryInstance_result other) {
      if (other.isSetSuccess()) {
        List<com.froad.thrift.vo.HistoryInstanceVo> __this__success = new ArrayList<com.froad.thrift.vo.HistoryInstanceVo>(other.success.size());
        for (com.froad.thrift.vo.HistoryInstanceVo other_element : other.success) {
          __this__success.add(new com.froad.thrift.vo.HistoryInstanceVo(other_element));
        }
        this.success = __this__success;
      }
    }

    public getHistoryInstance_result deepCopy() {
      return new getHistoryInstance_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.froad.thrift.vo.HistoryInstanceVo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.froad.thrift.vo.HistoryInstanceVo elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.froad.thrift.vo.HistoryInstanceVo>();
      }
      this.success.add(elem);
    }

    public List<com.froad.thrift.vo.HistoryInstanceVo> getSuccess() {
      return this.success;
    }

    public getHistoryInstance_result setSuccess(List<com.froad.thrift.vo.HistoryInstanceVo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.froad.thrift.vo.HistoryInstanceVo>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getHistoryInstance_result)
        return this.equals((getHistoryInstance_result)that);
      return false;
    }

    public boolean equals(getHistoryInstance_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getHistoryInstance_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getHistoryInstance_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getHistoryInstance_resultStandardSchemeFactory implements SchemeFactory {
      public getHistoryInstance_resultStandardScheme getScheme() {
        return new getHistoryInstance_resultStandardScheme();
      }
    }

    private static class getHistoryInstance_resultStandardScheme extends StandardScheme<getHistoryInstance_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getHistoryInstance_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.success = new ArrayList<com.froad.thrift.vo.HistoryInstanceVo>(_list0.size);
                  com.froad.thrift.vo.HistoryInstanceVo _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    _elem1 = new com.froad.thrift.vo.HistoryInstanceVo();
                    _elem1.read(iprot);
                    struct.success.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getHistoryInstance_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.froad.thrift.vo.HistoryInstanceVo _iter3 : struct.success)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getHistoryInstance_resultTupleSchemeFactory implements SchemeFactory {
      public getHistoryInstance_resultTupleScheme getScheme() {
        return new getHistoryInstance_resultTupleScheme();
      }
    }

    private static class getHistoryInstance_resultTupleScheme extends TupleScheme<getHistoryInstance_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getHistoryInstance_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.froad.thrift.vo.HistoryInstanceVo _iter4 : struct.success)
            {
              _iter4.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getHistoryInstance_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.froad.thrift.vo.HistoryInstanceVo>(_list5.size);
            com.froad.thrift.vo.HistoryInstanceVo _elem6;
            for (int _i7 = 0; _i7 < _list5.size; ++_i7)
            {
              _elem6 = new com.froad.thrift.vo.HistoryInstanceVo();
              _elem6.read(iprot);
              struct.success.add(_elem6);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getHistoryInstanceByPage_args implements org.apache.thrift.TBase<getHistoryInstanceByPage_args, getHistoryInstanceByPage_args._Fields>, java.io.Serializable, Cloneable, Comparable<getHistoryInstanceByPage_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getHistoryInstanceByPage_args");

    private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField HISTORY_INSTANCE_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("historyInstanceVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getHistoryInstanceByPage_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getHistoryInstanceByPage_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.PageVo page; // required
    public com.froad.thrift.vo.HistoryInstanceVo historyInstanceVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PAGE((short)1, "page"),
      HISTORY_INSTANCE_VO((short)2, "historyInstanceVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PAGE
            return PAGE;
          case 2: // HISTORY_INSTANCE_VO
            return HISTORY_INSTANCE_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.PageVo.class)));
      tmpMap.put(_Fields.HISTORY_INSTANCE_VO, new org.apache.thrift.meta_data.FieldMetaData("historyInstanceVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.HistoryInstanceVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getHistoryInstanceByPage_args.class, metaDataMap);
    }

    public getHistoryInstanceByPage_args() {
    }

    public getHistoryInstanceByPage_args(
      com.froad.thrift.vo.PageVo page,
      com.froad.thrift.vo.HistoryInstanceVo historyInstanceVo)
    {
      this();
      this.page = page;
      this.historyInstanceVo = historyInstanceVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getHistoryInstanceByPage_args(getHistoryInstanceByPage_args other) {
      if (other.isSetPage()) {
        this.page = new com.froad.thrift.vo.PageVo(other.page);
      }
      if (other.isSetHistoryInstanceVo()) {
        this.historyInstanceVo = new com.froad.thrift.vo.HistoryInstanceVo(other.historyInstanceVo);
      }
    }

    public getHistoryInstanceByPage_args deepCopy() {
      return new getHistoryInstanceByPage_args(this);
    }

    @Override
    public void clear() {
      this.page = null;
      this.historyInstanceVo = null;
    }

    public com.froad.thrift.vo.PageVo getPage() {
      return this.page;
    }

    public getHistoryInstanceByPage_args setPage(com.froad.thrift.vo.PageVo page) {
      this.page = page;
      return this;
    }

    public void unsetPage() {
      this.page = null;
    }

    /** Returns true if field page is set (has been assigned a value) and false otherwise */
    public boolean isSetPage() {
      return this.page != null;
    }

    public void setPageIsSet(boolean value) {
      if (!value) {
        this.page = null;
      }
    }

    public com.froad.thrift.vo.HistoryInstanceVo getHistoryInstanceVo() {
      return this.historyInstanceVo;
    }

    public getHistoryInstanceByPage_args setHistoryInstanceVo(com.froad.thrift.vo.HistoryInstanceVo historyInstanceVo) {
      this.historyInstanceVo = historyInstanceVo;
      return this;
    }

    public void unsetHistoryInstanceVo() {
      this.historyInstanceVo = null;
    }

    /** Returns true if field historyInstanceVo is set (has been assigned a value) and false otherwise */
    public boolean isSetHistoryInstanceVo() {
      return this.historyInstanceVo != null;
    }

    public void setHistoryInstanceVoIsSet(boolean value) {
      if (!value) {
        this.historyInstanceVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PAGE:
        if (value == null) {
          unsetPage();
        } else {
          setPage((com.froad.thrift.vo.PageVo)value);
        }
        break;

      case HISTORY_INSTANCE_VO:
        if (value == null) {
          unsetHistoryInstanceVo();
        } else {
          setHistoryInstanceVo((com.froad.thrift.vo.HistoryInstanceVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PAGE:
        return getPage();

      case HISTORY_INSTANCE_VO:
        return getHistoryInstanceVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PAGE:
        return isSetPage();
      case HISTORY_INSTANCE_VO:
        return isSetHistoryInstanceVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getHistoryInstanceByPage_args)
        return this.equals((getHistoryInstanceByPage_args)that);
      return false;
    }

    public boolean equals(getHistoryInstanceByPage_args that) {
      if (that == null)
        return false;

      boolean this_present_page = true && this.isSetPage();
      boolean that_present_page = true && that.isSetPage();
      if (this_present_page || that_present_page) {
        if (!(this_present_page && that_present_page))
          return false;
        if (!this.page.equals(that.page))
          return false;
      }

      boolean this_present_historyInstanceVo = true && this.isSetHistoryInstanceVo();
      boolean that_present_historyInstanceVo = true && that.isSetHistoryInstanceVo();
      if (this_present_historyInstanceVo || that_present_historyInstanceVo) {
        if (!(this_present_historyInstanceVo && that_present_historyInstanceVo))
          return false;
        if (!this.historyInstanceVo.equals(that.historyInstanceVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_page = true && (isSetPage());
      list.add(present_page);
      if (present_page)
        list.add(page);

      boolean present_historyInstanceVo = true && (isSetHistoryInstanceVo());
      list.add(present_historyInstanceVo);
      if (present_historyInstanceVo)
        list.add(historyInstanceVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(getHistoryInstanceByPage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetHistoryInstanceVo()).compareTo(other.isSetHistoryInstanceVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHistoryInstanceVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.historyInstanceVo, other.historyInstanceVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getHistoryInstanceByPage_args(");
      boolean first = true;

      sb.append("page:");
      if (this.page == null) {
        sb.append("null");
      } else {
        sb.append(this.page);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("historyInstanceVo:");
      if (this.historyInstanceVo == null) {
        sb.append("null");
      } else {
        sb.append(this.historyInstanceVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (page != null) {
        page.validate();
      }
      if (historyInstanceVo != null) {
        historyInstanceVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getHistoryInstanceByPage_argsStandardSchemeFactory implements SchemeFactory {
      public getHistoryInstanceByPage_argsStandardScheme getScheme() {
        return new getHistoryInstanceByPage_argsStandardScheme();
      }
    }

    private static class getHistoryInstanceByPage_argsStandardScheme extends StandardScheme<getHistoryInstanceByPage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getHistoryInstanceByPage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.page = new com.froad.thrift.vo.PageVo();
                struct.page.read(iprot);
                struct.setPageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // HISTORY_INSTANCE_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.historyInstanceVo = new com.froad.thrift.vo.HistoryInstanceVo();
                struct.historyInstanceVo.read(iprot);
                struct.setHistoryInstanceVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getHistoryInstanceByPage_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.page != null) {
          oprot.writeFieldBegin(PAGE_FIELD_DESC);
          struct.page.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.historyInstanceVo != null) {
          oprot.writeFieldBegin(HISTORY_INSTANCE_VO_FIELD_DESC);
          struct.historyInstanceVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getHistoryInstanceByPage_argsTupleSchemeFactory implements SchemeFactory {
      public getHistoryInstanceByPage_argsTupleScheme getScheme() {
        return new getHistoryInstanceByPage_argsTupleScheme();
      }
    }

    private static class getHistoryInstanceByPage_argsTupleScheme extends TupleScheme<getHistoryInstanceByPage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getHistoryInstanceByPage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPage()) {
          optionals.set(0);
        }
        if (struct.isSetHistoryInstanceVo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPage()) {
          struct.page.write(oprot);
        }
        if (struct.isSetHistoryInstanceVo()) {
          struct.historyInstanceVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getHistoryInstanceByPage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.page = new com.froad.thrift.vo.PageVo();
          struct.page.read(iprot);
          struct.setPageIsSet(true);
        }
        if (incoming.get(1)) {
          struct.historyInstanceVo = new com.froad.thrift.vo.HistoryInstanceVo();
          struct.historyInstanceVo.read(iprot);
          struct.setHistoryInstanceVoIsSet(true);
        }
      }
    }

  }

  public static class getHistoryInstanceByPage_result implements org.apache.thrift.TBase<getHistoryInstanceByPage_result, getHistoryInstanceByPage_result._Fields>, java.io.Serializable, Cloneable, Comparable<getHistoryInstanceByPage_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getHistoryInstanceByPage_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getHistoryInstanceByPage_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getHistoryInstanceByPage_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.HistoryInstancePageVoRes success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.HistoryInstancePageVoRes.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getHistoryInstanceByPage_result.class, metaDataMap);
    }

    public getHistoryInstanceByPage_result() {
    }

    public getHistoryInstanceByPage_result(
      com.froad.thrift.vo.HistoryInstancePageVoRes success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getHistoryInstanceByPage_result(getHistoryInstanceByPage_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.HistoryInstancePageVoRes(other.success);
      }
    }

    public getHistoryInstanceByPage_result deepCopy() {
      return new getHistoryInstanceByPage_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.HistoryInstancePageVoRes getSuccess() {
      return this.success;
    }

    public getHistoryInstanceByPage_result setSuccess(com.froad.thrift.vo.HistoryInstancePageVoRes success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.HistoryInstancePageVoRes)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getHistoryInstanceByPage_result)
        return this.equals((getHistoryInstanceByPage_result)that);
      return false;
    }

    public boolean equals(getHistoryInstanceByPage_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getHistoryInstanceByPage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getHistoryInstanceByPage_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getHistoryInstanceByPage_resultStandardSchemeFactory implements SchemeFactory {
      public getHistoryInstanceByPage_resultStandardScheme getScheme() {
        return new getHistoryInstanceByPage_resultStandardScheme();
      }
    }

    private static class getHistoryInstanceByPage_resultStandardScheme extends StandardScheme<getHistoryInstanceByPage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getHistoryInstanceByPage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.HistoryInstancePageVoRes();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getHistoryInstanceByPage_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getHistoryInstanceByPage_resultTupleSchemeFactory implements SchemeFactory {
      public getHistoryInstanceByPage_resultTupleScheme getScheme() {
        return new getHistoryInstanceByPage_resultTupleScheme();
      }
    }

    private static class getHistoryInstanceByPage_resultTupleScheme extends TupleScheme<getHistoryInstanceByPage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getHistoryInstanceByPage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getHistoryInstanceByPage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.HistoryInstancePageVoRes();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
