/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.vo.active;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 红包信息
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class VouchersInfoVo implements org.apache.thrift.TBase<VouchersInfoVo, VouchersInfoVo._Fields>, java.io.Serializable, Cloneable, Comparable<VouchersInfoVo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("VouchersInfoVo");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("updateTime", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField ACTIVE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("activeId", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField VOUCHERS_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("vouchersId", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField VOUCHERS_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("vouchersMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField VOUCHERS_USE_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("vouchersUseMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField VOUCHERS_RES_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("vouchersResMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)9);
  private static final org.apache.thrift.protocol.TField MEMBER_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("memberCode", org.apache.thrift.protocol.TType.I64, (short)10);
  private static final org.apache.thrift.protocol.TField SEND_ACTIVE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sendActiveId", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField SEND_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("sendTime", org.apache.thrift.protocol.TType.I64, (short)12);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField USE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("useTime", org.apache.thrift.protocol.TType.I64, (short)14);
  private static final org.apache.thrift.protocol.TField USER_MEMBER_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("userMemberCode", org.apache.thrift.protocol.TType.I64, (short)15);
  private static final org.apache.thrift.protocol.TField REASON_FIELD_DESC = new org.apache.thrift.protocol.TField("reason", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField DAYS_WARN_FIELD_DESC = new org.apache.thrift.protocol.TField("daysWarn", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField ACTIVE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("activeName", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("description", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField EXPIRE_END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("expireEndTime", org.apache.thrift.protocol.TType.I64, (short)20);
  private static final org.apache.thrift.protocol.TField EXPIRE_START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("expireStartTime", org.apache.thrift.protocol.TType.I64, (short)21);
  private static final org.apache.thrift.protocol.TField USE_ORDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("useOrderId", org.apache.thrift.protocol.TType.I64, (short)22);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new VouchersInfoVoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new VouchersInfoVoTupleSchemeFactory());
  }

  /**
   * 请求id
   */
  public long id; // required
  /**
   * 客户端id
   */
  public String clientId; // required
  /**
   * 创建时间
   */
  public long createTime; // required
  /**
   * 修改时间
   */
  public long updateTime; // required
  /**
   * 活动id
   */
  public String activeId; // required
  /**
   * 代金券(红包)id
   */
  public String vouchersId; // required
  /**
   * 代金券(红包)金额
   */
  public double vouchersMoney; // required
  /**
   * 代金券(红包)使用金额
   */
  public double vouchersUseMoney; // required
  /**
   * 代金券(红包)剩余金额
   */
  public double vouchersResMoney; // required
  /**
   * 会员编号
   */
  public long memberCode; // optional
  /**
   * 发送代金券(红包)的活动id
   */
  public String sendActiveId; // optional
  /**
   * 发送时间
   */
  public long sendTime; // optional
  /**
   * 状态 0初始化(未使用) 1支付中 2支付成功
   */
  public String status; // required
  /**
   * 使用时间
   */
  public long useTime; // optional
  /**
   * 使用的会员编号
   */
  public long userMemberCode; // optional
  /**
   * 暂不能使用的原因
   */
  public String reason; // optional
  /**
   * 使用的天数预警
   */
  public String daysWarn; // optional
  /**
   * 活动名称
   */
  public String activeName; // optional
  /**
   * 活动描述
   */
  public String description; // optional
  /**
   * 有效期结束时间
   */
  public long expireEndTime; // optional
  /**
   * 有效期开始时间
   */
  public long expireStartTime; // optional
  /**
   * 使用的订单id
   */
  public long useOrderId; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 请求id
     */
    ID((short)1, "id"),
    /**
     * 客户端id
     */
    CLIENT_ID((short)2, "clientId"),
    /**
     * 创建时间
     */
    CREATE_TIME((short)3, "createTime"),
    /**
     * 修改时间
     */
    UPDATE_TIME((short)4, "updateTime"),
    /**
     * 活动id
     */
    ACTIVE_ID((short)5, "activeId"),
    /**
     * 代金券(红包)id
     */
    VOUCHERS_ID((short)6, "vouchersId"),
    /**
     * 代金券(红包)金额
     */
    VOUCHERS_MONEY((short)7, "vouchersMoney"),
    /**
     * 代金券(红包)使用金额
     */
    VOUCHERS_USE_MONEY((short)8, "vouchersUseMoney"),
    /**
     * 代金券(红包)剩余金额
     */
    VOUCHERS_RES_MONEY((short)9, "vouchersResMoney"),
    /**
     * 会员编号
     */
    MEMBER_CODE((short)10, "memberCode"),
    /**
     * 发送代金券(红包)的活动id
     */
    SEND_ACTIVE_ID((short)11, "sendActiveId"),
    /**
     * 发送时间
     */
    SEND_TIME((short)12, "sendTime"),
    /**
     * 状态 0初始化(未使用) 1支付中 2支付成功
     */
    STATUS((short)13, "status"),
    /**
     * 使用时间
     */
    USE_TIME((short)14, "useTime"),
    /**
     * 使用的会员编号
     */
    USER_MEMBER_CODE((short)15, "userMemberCode"),
    /**
     * 暂不能使用的原因
     */
    REASON((short)16, "reason"),
    /**
     * 使用的天数预警
     */
    DAYS_WARN((short)17, "daysWarn"),
    /**
     * 活动名称
     */
    ACTIVE_NAME((short)18, "activeName"),
    /**
     * 活动描述
     */
    DESCRIPTION((short)19, "description"),
    /**
     * 有效期结束时间
     */
    EXPIRE_END_TIME((short)20, "expireEndTime"),
    /**
     * 有效期开始时间
     */
    EXPIRE_START_TIME((short)21, "expireStartTime"),
    /**
     * 使用的订单id
     */
    USE_ORDER_ID((short)22, "useOrderId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // CLIENT_ID
          return CLIENT_ID;
        case 3: // CREATE_TIME
          return CREATE_TIME;
        case 4: // UPDATE_TIME
          return UPDATE_TIME;
        case 5: // ACTIVE_ID
          return ACTIVE_ID;
        case 6: // VOUCHERS_ID
          return VOUCHERS_ID;
        case 7: // VOUCHERS_MONEY
          return VOUCHERS_MONEY;
        case 8: // VOUCHERS_USE_MONEY
          return VOUCHERS_USE_MONEY;
        case 9: // VOUCHERS_RES_MONEY
          return VOUCHERS_RES_MONEY;
        case 10: // MEMBER_CODE
          return MEMBER_CODE;
        case 11: // SEND_ACTIVE_ID
          return SEND_ACTIVE_ID;
        case 12: // SEND_TIME
          return SEND_TIME;
        case 13: // STATUS
          return STATUS;
        case 14: // USE_TIME
          return USE_TIME;
        case 15: // USER_MEMBER_CODE
          return USER_MEMBER_CODE;
        case 16: // REASON
          return REASON;
        case 17: // DAYS_WARN
          return DAYS_WARN;
        case 18: // ACTIVE_NAME
          return ACTIVE_NAME;
        case 19: // DESCRIPTION
          return DESCRIPTION;
        case 20: // EXPIRE_END_TIME
          return EXPIRE_END_TIME;
        case 21: // EXPIRE_START_TIME
          return EXPIRE_START_TIME;
        case 22: // USE_ORDER_ID
          return USE_ORDER_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __CREATETIME_ISSET_ID = 1;
  private static final int __UPDATETIME_ISSET_ID = 2;
  private static final int __VOUCHERSMONEY_ISSET_ID = 3;
  private static final int __VOUCHERSUSEMONEY_ISSET_ID = 4;
  private static final int __VOUCHERSRESMONEY_ISSET_ID = 5;
  private static final int __MEMBERCODE_ISSET_ID = 6;
  private static final int __SENDTIME_ISSET_ID = 7;
  private static final int __USETIME_ISSET_ID = 8;
  private static final int __USERMEMBERCODE_ISSET_ID = 9;
  private static final int __EXPIREENDTIME_ISSET_ID = 10;
  private static final int __EXPIRESTARTTIME_ISSET_ID = 11;
  private static final int __USEORDERID_ISSET_ID = 12;
  private short __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.MEMBER_CODE,_Fields.SEND_ACTIVE_ID,_Fields.SEND_TIME,_Fields.USE_TIME,_Fields.USER_MEMBER_CODE,_Fields.REASON,_Fields.DAYS_WARN,_Fields.ACTIVE_NAME,_Fields.DESCRIPTION,_Fields.EXPIRE_END_TIME,_Fields.EXPIRE_START_TIME,_Fields.USE_ORDER_ID};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("updateTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ACTIVE_ID, new org.apache.thrift.meta_data.FieldMetaData("activeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VOUCHERS_ID, new org.apache.thrift.meta_data.FieldMetaData("vouchersId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VOUCHERS_MONEY, new org.apache.thrift.meta_data.FieldMetaData("vouchersMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.VOUCHERS_USE_MONEY, new org.apache.thrift.meta_data.FieldMetaData("vouchersUseMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.VOUCHERS_RES_MONEY, new org.apache.thrift.meta_data.FieldMetaData("vouchersResMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.MEMBER_CODE, new org.apache.thrift.meta_data.FieldMetaData("memberCode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SEND_ACTIVE_ID, new org.apache.thrift.meta_data.FieldMetaData("sendActiveId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SEND_TIME, new org.apache.thrift.meta_data.FieldMetaData("sendTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USE_TIME, new org.apache.thrift.meta_data.FieldMetaData("useTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.USER_MEMBER_CODE, new org.apache.thrift.meta_data.FieldMetaData("userMemberCode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.REASON, new org.apache.thrift.meta_data.FieldMetaData("reason", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DAYS_WARN, new org.apache.thrift.meta_data.FieldMetaData("daysWarn", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACTIVE_NAME, new org.apache.thrift.meta_data.FieldMetaData("activeName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("description", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXPIRE_END_TIME, new org.apache.thrift.meta_data.FieldMetaData("expireEndTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.EXPIRE_START_TIME, new org.apache.thrift.meta_data.FieldMetaData("expireStartTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.USE_ORDER_ID, new org.apache.thrift.meta_data.FieldMetaData("useOrderId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(VouchersInfoVo.class, metaDataMap);
  }

  public VouchersInfoVo() {
  }

  public VouchersInfoVo(
    long id,
    String clientId,
    long createTime,
    long updateTime,
    String activeId,
    String vouchersId,
    double vouchersMoney,
    double vouchersUseMoney,
    double vouchersResMoney,
    String status)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.clientId = clientId;
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    this.updateTime = updateTime;
    setUpdateTimeIsSet(true);
    this.activeId = activeId;
    this.vouchersId = vouchersId;
    this.vouchersMoney = vouchersMoney;
    setVouchersMoneyIsSet(true);
    this.vouchersUseMoney = vouchersUseMoney;
    setVouchersUseMoneyIsSet(true);
    this.vouchersResMoney = vouchersResMoney;
    setVouchersResMoneyIsSet(true);
    this.status = status;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public VouchersInfoVo(VouchersInfoVo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetClientId()) {
      this.clientId = other.clientId;
    }
    this.createTime = other.createTime;
    this.updateTime = other.updateTime;
    if (other.isSetActiveId()) {
      this.activeId = other.activeId;
    }
    if (other.isSetVouchersId()) {
      this.vouchersId = other.vouchersId;
    }
    this.vouchersMoney = other.vouchersMoney;
    this.vouchersUseMoney = other.vouchersUseMoney;
    this.vouchersResMoney = other.vouchersResMoney;
    this.memberCode = other.memberCode;
    if (other.isSetSendActiveId()) {
      this.sendActiveId = other.sendActiveId;
    }
    this.sendTime = other.sendTime;
    if (other.isSetStatus()) {
      this.status = other.status;
    }
    this.useTime = other.useTime;
    this.userMemberCode = other.userMemberCode;
    if (other.isSetReason()) {
      this.reason = other.reason;
    }
    if (other.isSetDaysWarn()) {
      this.daysWarn = other.daysWarn;
    }
    if (other.isSetActiveName()) {
      this.activeName = other.activeName;
    }
    if (other.isSetDescription()) {
      this.description = other.description;
    }
    this.expireEndTime = other.expireEndTime;
    this.expireStartTime = other.expireStartTime;
    this.useOrderId = other.useOrderId;
  }

  public VouchersInfoVo deepCopy() {
    return new VouchersInfoVo(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.clientId = null;
    setCreateTimeIsSet(false);
    this.createTime = 0;
    setUpdateTimeIsSet(false);
    this.updateTime = 0;
    this.activeId = null;
    this.vouchersId = null;
    setVouchersMoneyIsSet(false);
    this.vouchersMoney = 0.0;
    setVouchersUseMoneyIsSet(false);
    this.vouchersUseMoney = 0.0;
    setVouchersResMoneyIsSet(false);
    this.vouchersResMoney = 0.0;
    setMemberCodeIsSet(false);
    this.memberCode = 0;
    this.sendActiveId = null;
    setSendTimeIsSet(false);
    this.sendTime = 0;
    this.status = null;
    setUseTimeIsSet(false);
    this.useTime = 0;
    setUserMemberCodeIsSet(false);
    this.userMemberCode = 0;
    this.reason = null;
    this.daysWarn = null;
    this.activeName = null;
    this.description = null;
    setExpireEndTimeIsSet(false);
    this.expireEndTime = 0;
    setExpireStartTimeIsSet(false);
    this.expireStartTime = 0;
    setUseOrderIdIsSet(false);
    this.useOrderId = 0;
  }

  /**
   * 请求id
   */
  public long getId() {
    return this.id;
  }

  /**
   * 请求id
   */
  public VouchersInfoVo setId(long id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  /**
   * 客户端id
   */
  public String getClientId() {
    return this.clientId;
  }

  /**
   * 客户端id
   */
  public VouchersInfoVo setClientId(String clientId) {
    this.clientId = clientId;
    return this;
  }

  public void unsetClientId() {
    this.clientId = null;
  }

  /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
  public boolean isSetClientId() {
    return this.clientId != null;
  }

  public void setClientIdIsSet(boolean value) {
    if (!value) {
      this.clientId = null;
    }
  }

  /**
   * 创建时间
   */
  public long getCreateTime() {
    return this.createTime;
  }

  /**
   * 创建时间
   */
  public VouchersInfoVo setCreateTime(long createTime) {
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    return this;
  }

  public void unsetCreateTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  public void setCreateTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATETIME_ISSET_ID, value);
  }

  /**
   * 修改时间
   */
  public long getUpdateTime() {
    return this.updateTime;
  }

  /**
   * 修改时间
   */
  public VouchersInfoVo setUpdateTime(long updateTime) {
    this.updateTime = updateTime;
    setUpdateTimeIsSet(true);
    return this;
  }

  public void unsetUpdateTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UPDATETIME_ISSET_ID);
  }

  /** Returns true if field updateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateTime() {
    return EncodingUtils.testBit(__isset_bitfield, __UPDATETIME_ISSET_ID);
  }

  public void setUpdateTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UPDATETIME_ISSET_ID, value);
  }

  /**
   * 活动id
   */
  public String getActiveId() {
    return this.activeId;
  }

  /**
   * 活动id
   */
  public VouchersInfoVo setActiveId(String activeId) {
    this.activeId = activeId;
    return this;
  }

  public void unsetActiveId() {
    this.activeId = null;
  }

  /** Returns true if field activeId is set (has been assigned a value) and false otherwise */
  public boolean isSetActiveId() {
    return this.activeId != null;
  }

  public void setActiveIdIsSet(boolean value) {
    if (!value) {
      this.activeId = null;
    }
  }

  /**
   * 代金券(红包)id
   */
  public String getVouchersId() {
    return this.vouchersId;
  }

  /**
   * 代金券(红包)id
   */
  public VouchersInfoVo setVouchersId(String vouchersId) {
    this.vouchersId = vouchersId;
    return this;
  }

  public void unsetVouchersId() {
    this.vouchersId = null;
  }

  /** Returns true if field vouchersId is set (has been assigned a value) and false otherwise */
  public boolean isSetVouchersId() {
    return this.vouchersId != null;
  }

  public void setVouchersIdIsSet(boolean value) {
    if (!value) {
      this.vouchersId = null;
    }
  }

  /**
   * 代金券(红包)金额
   */
  public double getVouchersMoney() {
    return this.vouchersMoney;
  }

  /**
   * 代金券(红包)金额
   */
  public VouchersInfoVo setVouchersMoney(double vouchersMoney) {
    this.vouchersMoney = vouchersMoney;
    setVouchersMoneyIsSet(true);
    return this;
  }

  public void unsetVouchersMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VOUCHERSMONEY_ISSET_ID);
  }

  /** Returns true if field vouchersMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetVouchersMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __VOUCHERSMONEY_ISSET_ID);
  }

  public void setVouchersMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VOUCHERSMONEY_ISSET_ID, value);
  }

  /**
   * 代金券(红包)使用金额
   */
  public double getVouchersUseMoney() {
    return this.vouchersUseMoney;
  }

  /**
   * 代金券(红包)使用金额
   */
  public VouchersInfoVo setVouchersUseMoney(double vouchersUseMoney) {
    this.vouchersUseMoney = vouchersUseMoney;
    setVouchersUseMoneyIsSet(true);
    return this;
  }

  public void unsetVouchersUseMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VOUCHERSUSEMONEY_ISSET_ID);
  }

  /** Returns true if field vouchersUseMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetVouchersUseMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __VOUCHERSUSEMONEY_ISSET_ID);
  }

  public void setVouchersUseMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VOUCHERSUSEMONEY_ISSET_ID, value);
  }

  /**
   * 代金券(红包)剩余金额
   */
  public double getVouchersResMoney() {
    return this.vouchersResMoney;
  }

  /**
   * 代金券(红包)剩余金额
   */
  public VouchersInfoVo setVouchersResMoney(double vouchersResMoney) {
    this.vouchersResMoney = vouchersResMoney;
    setVouchersResMoneyIsSet(true);
    return this;
  }

  public void unsetVouchersResMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VOUCHERSRESMONEY_ISSET_ID);
  }

  /** Returns true if field vouchersResMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetVouchersResMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __VOUCHERSRESMONEY_ISSET_ID);
  }

  public void setVouchersResMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VOUCHERSRESMONEY_ISSET_ID, value);
  }

  /**
   * 会员编号
   */
  public long getMemberCode() {
    return this.memberCode;
  }

  /**
   * 会员编号
   */
  public VouchersInfoVo setMemberCode(long memberCode) {
    this.memberCode = memberCode;
    setMemberCodeIsSet(true);
    return this;
  }

  public void unsetMemberCode() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MEMBERCODE_ISSET_ID);
  }

  /** Returns true if field memberCode is set (has been assigned a value) and false otherwise */
  public boolean isSetMemberCode() {
    return EncodingUtils.testBit(__isset_bitfield, __MEMBERCODE_ISSET_ID);
  }

  public void setMemberCodeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MEMBERCODE_ISSET_ID, value);
  }

  /**
   * 发送代金券(红包)的活动id
   */
  public String getSendActiveId() {
    return this.sendActiveId;
  }

  /**
   * 发送代金券(红包)的活动id
   */
  public VouchersInfoVo setSendActiveId(String sendActiveId) {
    this.sendActiveId = sendActiveId;
    return this;
  }

  public void unsetSendActiveId() {
    this.sendActiveId = null;
  }

  /** Returns true if field sendActiveId is set (has been assigned a value) and false otherwise */
  public boolean isSetSendActiveId() {
    return this.sendActiveId != null;
  }

  public void setSendActiveIdIsSet(boolean value) {
    if (!value) {
      this.sendActiveId = null;
    }
  }

  /**
   * 发送时间
   */
  public long getSendTime() {
    return this.sendTime;
  }

  /**
   * 发送时间
   */
  public VouchersInfoVo setSendTime(long sendTime) {
    this.sendTime = sendTime;
    setSendTimeIsSet(true);
    return this;
  }

  public void unsetSendTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SENDTIME_ISSET_ID);
  }

  /** Returns true if field sendTime is set (has been assigned a value) and false otherwise */
  public boolean isSetSendTime() {
    return EncodingUtils.testBit(__isset_bitfield, __SENDTIME_ISSET_ID);
  }

  public void setSendTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SENDTIME_ISSET_ID, value);
  }

  /**
   * 状态 0初始化(未使用) 1支付中 2支付成功
   */
  public String getStatus() {
    return this.status;
  }

  /**
   * 状态 0初始化(未使用) 1支付中 2支付成功
   */
  public VouchersInfoVo setStatus(String status) {
    this.status = status;
    return this;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  /**
   * 使用时间
   */
  public long getUseTime() {
    return this.useTime;
  }

  /**
   * 使用时间
   */
  public VouchersInfoVo setUseTime(long useTime) {
    this.useTime = useTime;
    setUseTimeIsSet(true);
    return this;
  }

  public void unsetUseTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USETIME_ISSET_ID);
  }

  /** Returns true if field useTime is set (has been assigned a value) and false otherwise */
  public boolean isSetUseTime() {
    return EncodingUtils.testBit(__isset_bitfield, __USETIME_ISSET_ID);
  }

  public void setUseTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USETIME_ISSET_ID, value);
  }

  /**
   * 使用的会员编号
   */
  public long getUserMemberCode() {
    return this.userMemberCode;
  }

  /**
   * 使用的会员编号
   */
  public VouchersInfoVo setUserMemberCode(long userMemberCode) {
    this.userMemberCode = userMemberCode;
    setUserMemberCodeIsSet(true);
    return this;
  }

  public void unsetUserMemberCode() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERMEMBERCODE_ISSET_ID);
  }

  /** Returns true if field userMemberCode is set (has been assigned a value) and false otherwise */
  public boolean isSetUserMemberCode() {
    return EncodingUtils.testBit(__isset_bitfield, __USERMEMBERCODE_ISSET_ID);
  }

  public void setUserMemberCodeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERMEMBERCODE_ISSET_ID, value);
  }

  /**
   * 暂不能使用的原因
   */
  public String getReason() {
    return this.reason;
  }

  /**
   * 暂不能使用的原因
   */
  public VouchersInfoVo setReason(String reason) {
    this.reason = reason;
    return this;
  }

  public void unsetReason() {
    this.reason = null;
  }

  /** Returns true if field reason is set (has been assigned a value) and false otherwise */
  public boolean isSetReason() {
    return this.reason != null;
  }

  public void setReasonIsSet(boolean value) {
    if (!value) {
      this.reason = null;
    }
  }

  /**
   * 使用的天数预警
   */
  public String getDaysWarn() {
    return this.daysWarn;
  }

  /**
   * 使用的天数预警
   */
  public VouchersInfoVo setDaysWarn(String daysWarn) {
    this.daysWarn = daysWarn;
    return this;
  }

  public void unsetDaysWarn() {
    this.daysWarn = null;
  }

  /** Returns true if field daysWarn is set (has been assigned a value) and false otherwise */
  public boolean isSetDaysWarn() {
    return this.daysWarn != null;
  }

  public void setDaysWarnIsSet(boolean value) {
    if (!value) {
      this.daysWarn = null;
    }
  }

  /**
   * 活动名称
   */
  public String getActiveName() {
    return this.activeName;
  }

  /**
   * 活动名称
   */
  public VouchersInfoVo setActiveName(String activeName) {
    this.activeName = activeName;
    return this;
  }

  public void unsetActiveName() {
    this.activeName = null;
  }

  /** Returns true if field activeName is set (has been assigned a value) and false otherwise */
  public boolean isSetActiveName() {
    return this.activeName != null;
  }

  public void setActiveNameIsSet(boolean value) {
    if (!value) {
      this.activeName = null;
    }
  }

  /**
   * 活动描述
   */
  public String getDescription() {
    return this.description;
  }

  /**
   * 活动描述
   */
  public VouchersInfoVo setDescription(String description) {
    this.description = description;
    return this;
  }

  public void unsetDescription() {
    this.description = null;
  }

  /** Returns true if field description is set (has been assigned a value) and false otherwise */
  public boolean isSetDescription() {
    return this.description != null;
  }

  public void setDescriptionIsSet(boolean value) {
    if (!value) {
      this.description = null;
    }
  }

  /**
   * 有效期结束时间
   */
  public long getExpireEndTime() {
    return this.expireEndTime;
  }

  /**
   * 有效期结束时间
   */
  public VouchersInfoVo setExpireEndTime(long expireEndTime) {
    this.expireEndTime = expireEndTime;
    setExpireEndTimeIsSet(true);
    return this;
  }

  public void unsetExpireEndTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXPIREENDTIME_ISSET_ID);
  }

  /** Returns true if field expireEndTime is set (has been assigned a value) and false otherwise */
  public boolean isSetExpireEndTime() {
    return EncodingUtils.testBit(__isset_bitfield, __EXPIREENDTIME_ISSET_ID);
  }

  public void setExpireEndTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXPIREENDTIME_ISSET_ID, value);
  }

  /**
   * 有效期开始时间
   */
  public long getExpireStartTime() {
    return this.expireStartTime;
  }

  /**
   * 有效期开始时间
   */
  public VouchersInfoVo setExpireStartTime(long expireStartTime) {
    this.expireStartTime = expireStartTime;
    setExpireStartTimeIsSet(true);
    return this;
  }

  public void unsetExpireStartTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXPIRESTARTTIME_ISSET_ID);
  }

  /** Returns true if field expireStartTime is set (has been assigned a value) and false otherwise */
  public boolean isSetExpireStartTime() {
    return EncodingUtils.testBit(__isset_bitfield, __EXPIRESTARTTIME_ISSET_ID);
  }

  public void setExpireStartTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXPIRESTARTTIME_ISSET_ID, value);
  }

  /**
   * 使用的订单id
   */
  public long getUseOrderId() {
    return this.useOrderId;
  }

  /**
   * 使用的订单id
   */
  public VouchersInfoVo setUseOrderId(long useOrderId) {
    this.useOrderId = useOrderId;
    setUseOrderIdIsSet(true);
    return this;
  }

  public void unsetUseOrderId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USEORDERID_ISSET_ID);
  }

  /** Returns true if field useOrderId is set (has been assigned a value) and false otherwise */
  public boolean isSetUseOrderId() {
    return EncodingUtils.testBit(__isset_bitfield, __USEORDERID_ISSET_ID);
  }

  public void setUseOrderIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USEORDERID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    case CLIENT_ID:
      if (value == null) {
        unsetClientId();
      } else {
        setClientId((String)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((Long)value);
      }
      break;

    case UPDATE_TIME:
      if (value == null) {
        unsetUpdateTime();
      } else {
        setUpdateTime((Long)value);
      }
      break;

    case ACTIVE_ID:
      if (value == null) {
        unsetActiveId();
      } else {
        setActiveId((String)value);
      }
      break;

    case VOUCHERS_ID:
      if (value == null) {
        unsetVouchersId();
      } else {
        setVouchersId((String)value);
      }
      break;

    case VOUCHERS_MONEY:
      if (value == null) {
        unsetVouchersMoney();
      } else {
        setVouchersMoney((Double)value);
      }
      break;

    case VOUCHERS_USE_MONEY:
      if (value == null) {
        unsetVouchersUseMoney();
      } else {
        setVouchersUseMoney((Double)value);
      }
      break;

    case VOUCHERS_RES_MONEY:
      if (value == null) {
        unsetVouchersResMoney();
      } else {
        setVouchersResMoney((Double)value);
      }
      break;

    case MEMBER_CODE:
      if (value == null) {
        unsetMemberCode();
      } else {
        setMemberCode((Long)value);
      }
      break;

    case SEND_ACTIVE_ID:
      if (value == null) {
        unsetSendActiveId();
      } else {
        setSendActiveId((String)value);
      }
      break;

    case SEND_TIME:
      if (value == null) {
        unsetSendTime();
      } else {
        setSendTime((Long)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((String)value);
      }
      break;

    case USE_TIME:
      if (value == null) {
        unsetUseTime();
      } else {
        setUseTime((Long)value);
      }
      break;

    case USER_MEMBER_CODE:
      if (value == null) {
        unsetUserMemberCode();
      } else {
        setUserMemberCode((Long)value);
      }
      break;

    case REASON:
      if (value == null) {
        unsetReason();
      } else {
        setReason((String)value);
      }
      break;

    case DAYS_WARN:
      if (value == null) {
        unsetDaysWarn();
      } else {
        setDaysWarn((String)value);
      }
      break;

    case ACTIVE_NAME:
      if (value == null) {
        unsetActiveName();
      } else {
        setActiveName((String)value);
      }
      break;

    case DESCRIPTION:
      if (value == null) {
        unsetDescription();
      } else {
        setDescription((String)value);
      }
      break;

    case EXPIRE_END_TIME:
      if (value == null) {
        unsetExpireEndTime();
      } else {
        setExpireEndTime((Long)value);
      }
      break;

    case EXPIRE_START_TIME:
      if (value == null) {
        unsetExpireStartTime();
      } else {
        setExpireStartTime((Long)value);
      }
      break;

    case USE_ORDER_ID:
      if (value == null) {
        unsetUseOrderId();
      } else {
        setUseOrderId((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Long.valueOf(getId());

    case CLIENT_ID:
      return getClientId();

    case CREATE_TIME:
      return Long.valueOf(getCreateTime());

    case UPDATE_TIME:
      return Long.valueOf(getUpdateTime());

    case ACTIVE_ID:
      return getActiveId();

    case VOUCHERS_ID:
      return getVouchersId();

    case VOUCHERS_MONEY:
      return Double.valueOf(getVouchersMoney());

    case VOUCHERS_USE_MONEY:
      return Double.valueOf(getVouchersUseMoney());

    case VOUCHERS_RES_MONEY:
      return Double.valueOf(getVouchersResMoney());

    case MEMBER_CODE:
      return Long.valueOf(getMemberCode());

    case SEND_ACTIVE_ID:
      return getSendActiveId();

    case SEND_TIME:
      return Long.valueOf(getSendTime());

    case STATUS:
      return getStatus();

    case USE_TIME:
      return Long.valueOf(getUseTime());

    case USER_MEMBER_CODE:
      return Long.valueOf(getUserMemberCode());

    case REASON:
      return getReason();

    case DAYS_WARN:
      return getDaysWarn();

    case ACTIVE_NAME:
      return getActiveName();

    case DESCRIPTION:
      return getDescription();

    case EXPIRE_END_TIME:
      return Long.valueOf(getExpireEndTime());

    case EXPIRE_START_TIME:
      return Long.valueOf(getExpireStartTime());

    case USE_ORDER_ID:
      return Long.valueOf(getUseOrderId());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case CLIENT_ID:
      return isSetClientId();
    case CREATE_TIME:
      return isSetCreateTime();
    case UPDATE_TIME:
      return isSetUpdateTime();
    case ACTIVE_ID:
      return isSetActiveId();
    case VOUCHERS_ID:
      return isSetVouchersId();
    case VOUCHERS_MONEY:
      return isSetVouchersMoney();
    case VOUCHERS_USE_MONEY:
      return isSetVouchersUseMoney();
    case VOUCHERS_RES_MONEY:
      return isSetVouchersResMoney();
    case MEMBER_CODE:
      return isSetMemberCode();
    case SEND_ACTIVE_ID:
      return isSetSendActiveId();
    case SEND_TIME:
      return isSetSendTime();
    case STATUS:
      return isSetStatus();
    case USE_TIME:
      return isSetUseTime();
    case USER_MEMBER_CODE:
      return isSetUserMemberCode();
    case REASON:
      return isSetReason();
    case DAYS_WARN:
      return isSetDaysWarn();
    case ACTIVE_NAME:
      return isSetActiveName();
    case DESCRIPTION:
      return isSetDescription();
    case EXPIRE_END_TIME:
      return isSetExpireEndTime();
    case EXPIRE_START_TIME:
      return isSetExpireStartTime();
    case USE_ORDER_ID:
      return isSetUseOrderId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof VouchersInfoVo)
      return this.equals((VouchersInfoVo)that);
    return false;
  }

  public boolean equals(VouchersInfoVo that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_clientId = true && this.isSetClientId();
    boolean that_present_clientId = true && that.isSetClientId();
    if (this_present_clientId || that_present_clientId) {
      if (!(this_present_clientId && that_present_clientId))
        return false;
      if (!this.clientId.equals(that.clientId))
        return false;
    }

    boolean this_present_createTime = true;
    boolean that_present_createTime = true;
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (this.createTime != that.createTime)
        return false;
    }

    boolean this_present_updateTime = true;
    boolean that_present_updateTime = true;
    if (this_present_updateTime || that_present_updateTime) {
      if (!(this_present_updateTime && that_present_updateTime))
        return false;
      if (this.updateTime != that.updateTime)
        return false;
    }

    boolean this_present_activeId = true && this.isSetActiveId();
    boolean that_present_activeId = true && that.isSetActiveId();
    if (this_present_activeId || that_present_activeId) {
      if (!(this_present_activeId && that_present_activeId))
        return false;
      if (!this.activeId.equals(that.activeId))
        return false;
    }

    boolean this_present_vouchersId = true && this.isSetVouchersId();
    boolean that_present_vouchersId = true && that.isSetVouchersId();
    if (this_present_vouchersId || that_present_vouchersId) {
      if (!(this_present_vouchersId && that_present_vouchersId))
        return false;
      if (!this.vouchersId.equals(that.vouchersId))
        return false;
    }

    boolean this_present_vouchersMoney = true;
    boolean that_present_vouchersMoney = true;
    if (this_present_vouchersMoney || that_present_vouchersMoney) {
      if (!(this_present_vouchersMoney && that_present_vouchersMoney))
        return false;
      if (this.vouchersMoney != that.vouchersMoney)
        return false;
    }

    boolean this_present_vouchersUseMoney = true;
    boolean that_present_vouchersUseMoney = true;
    if (this_present_vouchersUseMoney || that_present_vouchersUseMoney) {
      if (!(this_present_vouchersUseMoney && that_present_vouchersUseMoney))
        return false;
      if (this.vouchersUseMoney != that.vouchersUseMoney)
        return false;
    }

    boolean this_present_vouchersResMoney = true;
    boolean that_present_vouchersResMoney = true;
    if (this_present_vouchersResMoney || that_present_vouchersResMoney) {
      if (!(this_present_vouchersResMoney && that_present_vouchersResMoney))
        return false;
      if (this.vouchersResMoney != that.vouchersResMoney)
        return false;
    }

    boolean this_present_memberCode = true && this.isSetMemberCode();
    boolean that_present_memberCode = true && that.isSetMemberCode();
    if (this_present_memberCode || that_present_memberCode) {
      if (!(this_present_memberCode && that_present_memberCode))
        return false;
      if (this.memberCode != that.memberCode)
        return false;
    }

    boolean this_present_sendActiveId = true && this.isSetSendActiveId();
    boolean that_present_sendActiveId = true && that.isSetSendActiveId();
    if (this_present_sendActiveId || that_present_sendActiveId) {
      if (!(this_present_sendActiveId && that_present_sendActiveId))
        return false;
      if (!this.sendActiveId.equals(that.sendActiveId))
        return false;
    }

    boolean this_present_sendTime = true && this.isSetSendTime();
    boolean that_present_sendTime = true && that.isSetSendTime();
    if (this_present_sendTime || that_present_sendTime) {
      if (!(this_present_sendTime && that_present_sendTime))
        return false;
      if (this.sendTime != that.sendTime)
        return false;
    }

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    boolean this_present_useTime = true && this.isSetUseTime();
    boolean that_present_useTime = true && that.isSetUseTime();
    if (this_present_useTime || that_present_useTime) {
      if (!(this_present_useTime && that_present_useTime))
        return false;
      if (this.useTime != that.useTime)
        return false;
    }

    boolean this_present_userMemberCode = true && this.isSetUserMemberCode();
    boolean that_present_userMemberCode = true && that.isSetUserMemberCode();
    if (this_present_userMemberCode || that_present_userMemberCode) {
      if (!(this_present_userMemberCode && that_present_userMemberCode))
        return false;
      if (this.userMemberCode != that.userMemberCode)
        return false;
    }

    boolean this_present_reason = true && this.isSetReason();
    boolean that_present_reason = true && that.isSetReason();
    if (this_present_reason || that_present_reason) {
      if (!(this_present_reason && that_present_reason))
        return false;
      if (!this.reason.equals(that.reason))
        return false;
    }

    boolean this_present_daysWarn = true && this.isSetDaysWarn();
    boolean that_present_daysWarn = true && that.isSetDaysWarn();
    if (this_present_daysWarn || that_present_daysWarn) {
      if (!(this_present_daysWarn && that_present_daysWarn))
        return false;
      if (!this.daysWarn.equals(that.daysWarn))
        return false;
    }

    boolean this_present_activeName = true && this.isSetActiveName();
    boolean that_present_activeName = true && that.isSetActiveName();
    if (this_present_activeName || that_present_activeName) {
      if (!(this_present_activeName && that_present_activeName))
        return false;
      if (!this.activeName.equals(that.activeName))
        return false;
    }

    boolean this_present_description = true && this.isSetDescription();
    boolean that_present_description = true && that.isSetDescription();
    if (this_present_description || that_present_description) {
      if (!(this_present_description && that_present_description))
        return false;
      if (!this.description.equals(that.description))
        return false;
    }

    boolean this_present_expireEndTime = true && this.isSetExpireEndTime();
    boolean that_present_expireEndTime = true && that.isSetExpireEndTime();
    if (this_present_expireEndTime || that_present_expireEndTime) {
      if (!(this_present_expireEndTime && that_present_expireEndTime))
        return false;
      if (this.expireEndTime != that.expireEndTime)
        return false;
    }

    boolean this_present_expireStartTime = true && this.isSetExpireStartTime();
    boolean that_present_expireStartTime = true && that.isSetExpireStartTime();
    if (this_present_expireStartTime || that_present_expireStartTime) {
      if (!(this_present_expireStartTime && that_present_expireStartTime))
        return false;
      if (this.expireStartTime != that.expireStartTime)
        return false;
    }

    boolean this_present_useOrderId = true && this.isSetUseOrderId();
    boolean that_present_useOrderId = true && that.isSetUseOrderId();
    if (this_present_useOrderId || that_present_useOrderId) {
      if (!(this_present_useOrderId && that_present_useOrderId))
        return false;
      if (this.useOrderId != that.useOrderId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true;
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_clientId = true && (isSetClientId());
    list.add(present_clientId);
    if (present_clientId)
      list.add(clientId);

    boolean present_createTime = true;
    list.add(present_createTime);
    if (present_createTime)
      list.add(createTime);

    boolean present_updateTime = true;
    list.add(present_updateTime);
    if (present_updateTime)
      list.add(updateTime);

    boolean present_activeId = true && (isSetActiveId());
    list.add(present_activeId);
    if (present_activeId)
      list.add(activeId);

    boolean present_vouchersId = true && (isSetVouchersId());
    list.add(present_vouchersId);
    if (present_vouchersId)
      list.add(vouchersId);

    boolean present_vouchersMoney = true;
    list.add(present_vouchersMoney);
    if (present_vouchersMoney)
      list.add(vouchersMoney);

    boolean present_vouchersUseMoney = true;
    list.add(present_vouchersUseMoney);
    if (present_vouchersUseMoney)
      list.add(vouchersUseMoney);

    boolean present_vouchersResMoney = true;
    list.add(present_vouchersResMoney);
    if (present_vouchersResMoney)
      list.add(vouchersResMoney);

    boolean present_memberCode = true && (isSetMemberCode());
    list.add(present_memberCode);
    if (present_memberCode)
      list.add(memberCode);

    boolean present_sendActiveId = true && (isSetSendActiveId());
    list.add(present_sendActiveId);
    if (present_sendActiveId)
      list.add(sendActiveId);

    boolean present_sendTime = true && (isSetSendTime());
    list.add(present_sendTime);
    if (present_sendTime)
      list.add(sendTime);

    boolean present_status = true && (isSetStatus());
    list.add(present_status);
    if (present_status)
      list.add(status);

    boolean present_useTime = true && (isSetUseTime());
    list.add(present_useTime);
    if (present_useTime)
      list.add(useTime);

    boolean present_userMemberCode = true && (isSetUserMemberCode());
    list.add(present_userMemberCode);
    if (present_userMemberCode)
      list.add(userMemberCode);

    boolean present_reason = true && (isSetReason());
    list.add(present_reason);
    if (present_reason)
      list.add(reason);

    boolean present_daysWarn = true && (isSetDaysWarn());
    list.add(present_daysWarn);
    if (present_daysWarn)
      list.add(daysWarn);

    boolean present_activeName = true && (isSetActiveName());
    list.add(present_activeName);
    if (present_activeName)
      list.add(activeName);

    boolean present_description = true && (isSetDescription());
    list.add(present_description);
    if (present_description)
      list.add(description);

    boolean present_expireEndTime = true && (isSetExpireEndTime());
    list.add(present_expireEndTime);
    if (present_expireEndTime)
      list.add(expireEndTime);

    boolean present_expireStartTime = true && (isSetExpireStartTime());
    list.add(present_expireStartTime);
    if (present_expireStartTime)
      list.add(expireStartTime);

    boolean present_useOrderId = true && (isSetUseOrderId());
    list.add(present_useOrderId);
    if (present_useOrderId)
      list.add(useOrderId);

    return list.hashCode();
  }

  @Override
  public int compareTo(VouchersInfoVo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClientId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateTime()).compareTo(other.isSetUpdateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateTime, other.updateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActiveId()).compareTo(other.isSetActiveId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActiveId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.activeId, other.activeId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVouchersId()).compareTo(other.isSetVouchersId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVouchersId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vouchersId, other.vouchersId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVouchersMoney()).compareTo(other.isSetVouchersMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVouchersMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vouchersMoney, other.vouchersMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVouchersUseMoney()).compareTo(other.isSetVouchersUseMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVouchersUseMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vouchersUseMoney, other.vouchersUseMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVouchersResMoney()).compareTo(other.isSetVouchersResMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVouchersResMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vouchersResMoney, other.vouchersResMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMemberCode()).compareTo(other.isSetMemberCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMemberCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.memberCode, other.memberCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSendActiveId()).compareTo(other.isSetSendActiveId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSendActiveId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sendActiveId, other.sendActiveId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSendTime()).compareTo(other.isSetSendTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSendTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sendTime, other.sendTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUseTime()).compareTo(other.isSetUseTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUseTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.useTime, other.useTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserMemberCode()).compareTo(other.isSetUserMemberCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserMemberCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userMemberCode, other.userMemberCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReason()).compareTo(other.isSetReason());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReason()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reason, other.reason);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDaysWarn()).compareTo(other.isSetDaysWarn());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDaysWarn()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.daysWarn, other.daysWarn);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActiveName()).compareTo(other.isSetActiveName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActiveName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.activeName, other.activeName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDescription()).compareTo(other.isSetDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.description, other.description);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExpireEndTime()).compareTo(other.isSetExpireEndTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExpireEndTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.expireEndTime, other.expireEndTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExpireStartTime()).compareTo(other.isSetExpireStartTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExpireStartTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.expireStartTime, other.expireStartTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUseOrderId()).compareTo(other.isSetUseOrderId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUseOrderId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.useOrderId, other.useOrderId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("VouchersInfoVo(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("clientId:");
    if (this.clientId == null) {
      sb.append("null");
    } else {
      sb.append(this.clientId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTime:");
    sb.append(this.createTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("updateTime:");
    sb.append(this.updateTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("activeId:");
    if (this.activeId == null) {
      sb.append("null");
    } else {
      sb.append(this.activeId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("vouchersId:");
    if (this.vouchersId == null) {
      sb.append("null");
    } else {
      sb.append(this.vouchersId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("vouchersMoney:");
    sb.append(this.vouchersMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("vouchersUseMoney:");
    sb.append(this.vouchersUseMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("vouchersResMoney:");
    sb.append(this.vouchersResMoney);
    first = false;
    if (isSetMemberCode()) {
      if (!first) sb.append(", ");
      sb.append("memberCode:");
      sb.append(this.memberCode);
      first = false;
    }
    if (isSetSendActiveId()) {
      if (!first) sb.append(", ");
      sb.append("sendActiveId:");
      if (this.sendActiveId == null) {
        sb.append("null");
      } else {
        sb.append(this.sendActiveId);
      }
      first = false;
    }
    if (isSetSendTime()) {
      if (!first) sb.append(", ");
      sb.append("sendTime:");
      sb.append(this.sendTime);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("status:");
    if (this.status == null) {
      sb.append("null");
    } else {
      sb.append(this.status);
    }
    first = false;
    if (isSetUseTime()) {
      if (!first) sb.append(", ");
      sb.append("useTime:");
      sb.append(this.useTime);
      first = false;
    }
    if (isSetUserMemberCode()) {
      if (!first) sb.append(", ");
      sb.append("userMemberCode:");
      sb.append(this.userMemberCode);
      first = false;
    }
    if (isSetReason()) {
      if (!first) sb.append(", ");
      sb.append("reason:");
      if (this.reason == null) {
        sb.append("null");
      } else {
        sb.append(this.reason);
      }
      first = false;
    }
    if (isSetDaysWarn()) {
      if (!first) sb.append(", ");
      sb.append("daysWarn:");
      if (this.daysWarn == null) {
        sb.append("null");
      } else {
        sb.append(this.daysWarn);
      }
      first = false;
    }
    if (isSetActiveName()) {
      if (!first) sb.append(", ");
      sb.append("activeName:");
      if (this.activeName == null) {
        sb.append("null");
      } else {
        sb.append(this.activeName);
      }
      first = false;
    }
    if (isSetDescription()) {
      if (!first) sb.append(", ");
      sb.append("description:");
      if (this.description == null) {
        sb.append("null");
      } else {
        sb.append(this.description);
      }
      first = false;
    }
    if (isSetExpireEndTime()) {
      if (!first) sb.append(", ");
      sb.append("expireEndTime:");
      sb.append(this.expireEndTime);
      first = false;
    }
    if (isSetExpireStartTime()) {
      if (!first) sb.append(", ");
      sb.append("expireStartTime:");
      sb.append(this.expireStartTime);
      first = false;
    }
    if (isSetUseOrderId()) {
      if (!first) sb.append(", ");
      sb.append("useOrderId:");
      sb.append(this.useOrderId);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class VouchersInfoVoStandardSchemeFactory implements SchemeFactory {
    public VouchersInfoVoStandardScheme getScheme() {
      return new VouchersInfoVoStandardScheme();
    }
  }

  private static class VouchersInfoVoStandardScheme extends StandardScheme<VouchersInfoVo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, VouchersInfoVo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CLIENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clientId = iprot.readString();
              struct.setClientIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createTime = iprot.readI64();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // UPDATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.updateTime = iprot.readI64();
              struct.setUpdateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ACTIVE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.activeId = iprot.readString();
              struct.setActiveIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // VOUCHERS_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.vouchersId = iprot.readString();
              struct.setVouchersIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // VOUCHERS_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.vouchersMoney = iprot.readDouble();
              struct.setVouchersMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // VOUCHERS_USE_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.vouchersUseMoney = iprot.readDouble();
              struct.setVouchersUseMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // VOUCHERS_RES_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.vouchersResMoney = iprot.readDouble();
              struct.setVouchersResMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // MEMBER_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.memberCode = iprot.readI64();
              struct.setMemberCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // SEND_ACTIVE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sendActiveId = iprot.readString();
              struct.setSendActiveIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // SEND_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.sendTime = iprot.readI64();
              struct.setSendTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.status = iprot.readString();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // USE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.useTime = iprot.readI64();
              struct.setUseTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // USER_MEMBER_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.userMemberCode = iprot.readI64();
              struct.setUserMemberCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // REASON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.reason = iprot.readString();
              struct.setReasonIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // DAYS_WARN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.daysWarn = iprot.readString();
              struct.setDaysWarnIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // ACTIVE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.activeName = iprot.readString();
              struct.setActiveNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.description = iprot.readString();
              struct.setDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // EXPIRE_END_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.expireEndTime = iprot.readI64();
              struct.setExpireEndTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // EXPIRE_START_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.expireStartTime = iprot.readI64();
              struct.setExpireStartTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // USE_ORDER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.useOrderId = iprot.readI64();
              struct.setUseOrderIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, VouchersInfoVo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI64(struct.id);
      oprot.writeFieldEnd();
      if (struct.clientId != null) {
        oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
        oprot.writeString(struct.clientId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
      oprot.writeI64(struct.createTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UPDATE_TIME_FIELD_DESC);
      oprot.writeI64(struct.updateTime);
      oprot.writeFieldEnd();
      if (struct.activeId != null) {
        oprot.writeFieldBegin(ACTIVE_ID_FIELD_DESC);
        oprot.writeString(struct.activeId);
        oprot.writeFieldEnd();
      }
      if (struct.vouchersId != null) {
        oprot.writeFieldBegin(VOUCHERS_ID_FIELD_DESC);
        oprot.writeString(struct.vouchersId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(VOUCHERS_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.vouchersMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(VOUCHERS_USE_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.vouchersUseMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(VOUCHERS_RES_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.vouchersResMoney);
      oprot.writeFieldEnd();
      if (struct.isSetMemberCode()) {
        oprot.writeFieldBegin(MEMBER_CODE_FIELD_DESC);
        oprot.writeI64(struct.memberCode);
        oprot.writeFieldEnd();
      }
      if (struct.sendActiveId != null) {
        if (struct.isSetSendActiveId()) {
          oprot.writeFieldBegin(SEND_ACTIVE_ID_FIELD_DESC);
          oprot.writeString(struct.sendActiveId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetSendTime()) {
        oprot.writeFieldBegin(SEND_TIME_FIELD_DESC);
        oprot.writeI64(struct.sendTime);
        oprot.writeFieldEnd();
      }
      if (struct.status != null) {
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        oprot.writeString(struct.status);
        oprot.writeFieldEnd();
      }
      if (struct.isSetUseTime()) {
        oprot.writeFieldBegin(USE_TIME_FIELD_DESC);
        oprot.writeI64(struct.useTime);
        oprot.writeFieldEnd();
      }
      if (struct.isSetUserMemberCode()) {
        oprot.writeFieldBegin(USER_MEMBER_CODE_FIELD_DESC);
        oprot.writeI64(struct.userMemberCode);
        oprot.writeFieldEnd();
      }
      if (struct.reason != null) {
        if (struct.isSetReason()) {
          oprot.writeFieldBegin(REASON_FIELD_DESC);
          oprot.writeString(struct.reason);
          oprot.writeFieldEnd();
        }
      }
      if (struct.daysWarn != null) {
        if (struct.isSetDaysWarn()) {
          oprot.writeFieldBegin(DAYS_WARN_FIELD_DESC);
          oprot.writeString(struct.daysWarn);
          oprot.writeFieldEnd();
        }
      }
      if (struct.activeName != null) {
        if (struct.isSetActiveName()) {
          oprot.writeFieldBegin(ACTIVE_NAME_FIELD_DESC);
          oprot.writeString(struct.activeName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.description != null) {
        if (struct.isSetDescription()) {
          oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
          oprot.writeString(struct.description);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetExpireEndTime()) {
        oprot.writeFieldBegin(EXPIRE_END_TIME_FIELD_DESC);
        oprot.writeI64(struct.expireEndTime);
        oprot.writeFieldEnd();
      }
      if (struct.isSetExpireStartTime()) {
        oprot.writeFieldBegin(EXPIRE_START_TIME_FIELD_DESC);
        oprot.writeI64(struct.expireStartTime);
        oprot.writeFieldEnd();
      }
      if (struct.isSetUseOrderId()) {
        oprot.writeFieldBegin(USE_ORDER_ID_FIELD_DESC);
        oprot.writeI64(struct.useOrderId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class VouchersInfoVoTupleSchemeFactory implements SchemeFactory {
    public VouchersInfoVoTupleScheme getScheme() {
      return new VouchersInfoVoTupleScheme();
    }
  }

  private static class VouchersInfoVoTupleScheme extends TupleScheme<VouchersInfoVo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, VouchersInfoVo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetClientId()) {
        optionals.set(1);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(2);
      }
      if (struct.isSetUpdateTime()) {
        optionals.set(3);
      }
      if (struct.isSetActiveId()) {
        optionals.set(4);
      }
      if (struct.isSetVouchersId()) {
        optionals.set(5);
      }
      if (struct.isSetVouchersMoney()) {
        optionals.set(6);
      }
      if (struct.isSetVouchersUseMoney()) {
        optionals.set(7);
      }
      if (struct.isSetVouchersResMoney()) {
        optionals.set(8);
      }
      if (struct.isSetMemberCode()) {
        optionals.set(9);
      }
      if (struct.isSetSendActiveId()) {
        optionals.set(10);
      }
      if (struct.isSetSendTime()) {
        optionals.set(11);
      }
      if (struct.isSetStatus()) {
        optionals.set(12);
      }
      if (struct.isSetUseTime()) {
        optionals.set(13);
      }
      if (struct.isSetUserMemberCode()) {
        optionals.set(14);
      }
      if (struct.isSetReason()) {
        optionals.set(15);
      }
      if (struct.isSetDaysWarn()) {
        optionals.set(16);
      }
      if (struct.isSetActiveName()) {
        optionals.set(17);
      }
      if (struct.isSetDescription()) {
        optionals.set(18);
      }
      if (struct.isSetExpireEndTime()) {
        optionals.set(19);
      }
      if (struct.isSetExpireStartTime()) {
        optionals.set(20);
      }
      if (struct.isSetUseOrderId()) {
        optionals.set(21);
      }
      oprot.writeBitSet(optionals, 22);
      if (struct.isSetId()) {
        oprot.writeI64(struct.id);
      }
      if (struct.isSetClientId()) {
        oprot.writeString(struct.clientId);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeI64(struct.createTime);
      }
      if (struct.isSetUpdateTime()) {
        oprot.writeI64(struct.updateTime);
      }
      if (struct.isSetActiveId()) {
        oprot.writeString(struct.activeId);
      }
      if (struct.isSetVouchersId()) {
        oprot.writeString(struct.vouchersId);
      }
      if (struct.isSetVouchersMoney()) {
        oprot.writeDouble(struct.vouchersMoney);
      }
      if (struct.isSetVouchersUseMoney()) {
        oprot.writeDouble(struct.vouchersUseMoney);
      }
      if (struct.isSetVouchersResMoney()) {
        oprot.writeDouble(struct.vouchersResMoney);
      }
      if (struct.isSetMemberCode()) {
        oprot.writeI64(struct.memberCode);
      }
      if (struct.isSetSendActiveId()) {
        oprot.writeString(struct.sendActiveId);
      }
      if (struct.isSetSendTime()) {
        oprot.writeI64(struct.sendTime);
      }
      if (struct.isSetStatus()) {
        oprot.writeString(struct.status);
      }
      if (struct.isSetUseTime()) {
        oprot.writeI64(struct.useTime);
      }
      if (struct.isSetUserMemberCode()) {
        oprot.writeI64(struct.userMemberCode);
      }
      if (struct.isSetReason()) {
        oprot.writeString(struct.reason);
      }
      if (struct.isSetDaysWarn()) {
        oprot.writeString(struct.daysWarn);
      }
      if (struct.isSetActiveName()) {
        oprot.writeString(struct.activeName);
      }
      if (struct.isSetDescription()) {
        oprot.writeString(struct.description);
      }
      if (struct.isSetExpireEndTime()) {
        oprot.writeI64(struct.expireEndTime);
      }
      if (struct.isSetExpireStartTime()) {
        oprot.writeI64(struct.expireStartTime);
      }
      if (struct.isSetUseOrderId()) {
        oprot.writeI64(struct.useOrderId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, VouchersInfoVo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(22);
      if (incoming.get(0)) {
        struct.id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.clientId = iprot.readString();
        struct.setClientIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.createTime = iprot.readI64();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.updateTime = iprot.readI64();
        struct.setUpdateTimeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.activeId = iprot.readString();
        struct.setActiveIdIsSet(true);
      }
      if (incoming.get(5)) {
        struct.vouchersId = iprot.readString();
        struct.setVouchersIdIsSet(true);
      }
      if (incoming.get(6)) {
        struct.vouchersMoney = iprot.readDouble();
        struct.setVouchersMoneyIsSet(true);
      }
      if (incoming.get(7)) {
        struct.vouchersUseMoney = iprot.readDouble();
        struct.setVouchersUseMoneyIsSet(true);
      }
      if (incoming.get(8)) {
        struct.vouchersResMoney = iprot.readDouble();
        struct.setVouchersResMoneyIsSet(true);
      }
      if (incoming.get(9)) {
        struct.memberCode = iprot.readI64();
        struct.setMemberCodeIsSet(true);
      }
      if (incoming.get(10)) {
        struct.sendActiveId = iprot.readString();
        struct.setSendActiveIdIsSet(true);
      }
      if (incoming.get(11)) {
        struct.sendTime = iprot.readI64();
        struct.setSendTimeIsSet(true);
      }
      if (incoming.get(12)) {
        struct.status = iprot.readString();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(13)) {
        struct.useTime = iprot.readI64();
        struct.setUseTimeIsSet(true);
      }
      if (incoming.get(14)) {
        struct.userMemberCode = iprot.readI64();
        struct.setUserMemberCodeIsSet(true);
      }
      if (incoming.get(15)) {
        struct.reason = iprot.readString();
        struct.setReasonIsSet(true);
      }
      if (incoming.get(16)) {
        struct.daysWarn = iprot.readString();
        struct.setDaysWarnIsSet(true);
      }
      if (incoming.get(17)) {
        struct.activeName = iprot.readString();
        struct.setActiveNameIsSet(true);
      }
      if (incoming.get(18)) {
        struct.description = iprot.readString();
        struct.setDescriptionIsSet(true);
      }
      if (incoming.get(19)) {
        struct.expireEndTime = iprot.readI64();
        struct.setExpireEndTimeIsSet(true);
      }
      if (incoming.get(20)) {
        struct.expireStartTime = iprot.readI64();
        struct.setExpireStartTimeIsSet(true);
      }
      if (incoming.get(21)) {
        struct.useOrderId = iprot.readI64();
        struct.setUseOrderIdIsSet(true);
      }
    }
  }

}

