/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.vo.active;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 凑单 - 参数
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class MinatoSingleParamVo implements org.apache.thrift.TBase<MinatoSingleParamVo, MinatoSingleParamVo._Fields>, java.io.Serializable, Cloneable, Comparable<MinatoSingleParamVo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MinatoSingleParamVo");

  private static final org.apache.thrift.protocol.TField REQ_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("reqId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PRODUCT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("productId", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField ACTIVE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("activeId", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField AREA_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("areaId", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField COOKIE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("cookieId", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField PRODUCT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("productType", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField MINATO_SINGLE_LOCATION_FIELD_DESC = new org.apache.thrift.protocol.TField("minatoSingleLocation", org.apache.thrift.protocol.TType.STRUCT, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new MinatoSingleParamVoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new MinatoSingleParamVoTupleSchemeFactory());
  }

  /**
   * 请求id
   */
  public String reqId; // required
  /**
   * 客户端id
   */
  public String clientId; // required
  /**
   * 商品id
   */
  public String productId; // required
  /**
   * 活动id
   */
  public String activeId; // required
  /**
   * 区域id
   */
  public String areaId; // required
  /**
   * cookie id
   */
  public String cookieId; // required
  /**
   * 商品类型 1 团购;2:预售;3:名优特惠;4:在线兑换;5:网店礼品*
   */
  public String productType; // required
  /**
   * 凑单坐标
   */
  public MinatoSingleLocationVo minatoSingleLocation; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 请求id
     */
    REQ_ID((short)1, "reqId"),
    /**
     * 客户端id
     */
    CLIENT_ID((short)2, "clientId"),
    /**
     * 商品id
     */
    PRODUCT_ID((short)3, "productId"),
    /**
     * 活动id
     */
    ACTIVE_ID((short)4, "activeId"),
    /**
     * 区域id
     */
    AREA_ID((short)5, "areaId"),
    /**
     * cookie id
     */
    COOKIE_ID((short)6, "cookieId"),
    /**
     * 商品类型 1 团购;2:预售;3:名优特惠;4:在线兑换;5:网店礼品*
     */
    PRODUCT_TYPE((short)7, "productType"),
    /**
     * 凑单坐标
     */
    MINATO_SINGLE_LOCATION((short)8, "minatoSingleLocation");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // REQ_ID
          return REQ_ID;
        case 2: // CLIENT_ID
          return CLIENT_ID;
        case 3: // PRODUCT_ID
          return PRODUCT_ID;
        case 4: // ACTIVE_ID
          return ACTIVE_ID;
        case 5: // AREA_ID
          return AREA_ID;
        case 6: // COOKIE_ID
          return COOKIE_ID;
        case 7: // PRODUCT_TYPE
          return PRODUCT_TYPE;
        case 8: // MINATO_SINGLE_LOCATION
          return MINATO_SINGLE_LOCATION;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.REQ_ID, new org.apache.thrift.meta_data.FieldMetaData("reqId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRODUCT_ID, new org.apache.thrift.meta_data.FieldMetaData("productId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACTIVE_ID, new org.apache.thrift.meta_data.FieldMetaData("activeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AREA_ID, new org.apache.thrift.meta_data.FieldMetaData("areaId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COOKIE_ID, new org.apache.thrift.meta_data.FieldMetaData("cookieId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRODUCT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("productType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MINATO_SINGLE_LOCATION, new org.apache.thrift.meta_data.FieldMetaData("minatoSingleLocation", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "MinatoSingleLocationVo")));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MinatoSingleParamVo.class, metaDataMap);
  }

  public MinatoSingleParamVo() {
  }

  public MinatoSingleParamVo(
    String reqId,
    String clientId,
    String productId,
    String activeId,
    String areaId,
    String cookieId,
    String productType,
    MinatoSingleLocationVo minatoSingleLocation)
  {
    this();
    this.reqId = reqId;
    this.clientId = clientId;
    this.productId = productId;
    this.activeId = activeId;
    this.areaId = areaId;
    this.cookieId = cookieId;
    this.productType = productType;
    this.minatoSingleLocation = minatoSingleLocation;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MinatoSingleParamVo(MinatoSingleParamVo other) {
    if (other.isSetReqId()) {
      this.reqId = other.reqId;
    }
    if (other.isSetClientId()) {
      this.clientId = other.clientId;
    }
    if (other.isSetProductId()) {
      this.productId = other.productId;
    }
    if (other.isSetActiveId()) {
      this.activeId = other.activeId;
    }
    if (other.isSetAreaId()) {
      this.areaId = other.areaId;
    }
    if (other.isSetCookieId()) {
      this.cookieId = other.cookieId;
    }
    if (other.isSetProductType()) {
      this.productType = other.productType;
    }
    if (other.isSetMinatoSingleLocation()) {
      this.minatoSingleLocation = other.minatoSingleLocation;
    }
  }

  public MinatoSingleParamVo deepCopy() {
    return new MinatoSingleParamVo(this);
  }

  @Override
  public void clear() {
    this.reqId = null;
    this.clientId = null;
    this.productId = null;
    this.activeId = null;
    this.areaId = null;
    this.cookieId = null;
    this.productType = null;
    this.minatoSingleLocation = null;
  }

  /**
   * 请求id
   */
  public String getReqId() {
    return this.reqId;
  }

  /**
   * 请求id
   */
  public MinatoSingleParamVo setReqId(String reqId) {
    this.reqId = reqId;
    return this;
  }

  public void unsetReqId() {
    this.reqId = null;
  }

  /** Returns true if field reqId is set (has been assigned a value) and false otherwise */
  public boolean isSetReqId() {
    return this.reqId != null;
  }

  public void setReqIdIsSet(boolean value) {
    if (!value) {
      this.reqId = null;
    }
  }

  /**
   * 客户端id
   */
  public String getClientId() {
    return this.clientId;
  }

  /**
   * 客户端id
   */
  public MinatoSingleParamVo setClientId(String clientId) {
    this.clientId = clientId;
    return this;
  }

  public void unsetClientId() {
    this.clientId = null;
  }

  /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
  public boolean isSetClientId() {
    return this.clientId != null;
  }

  public void setClientIdIsSet(boolean value) {
    if (!value) {
      this.clientId = null;
    }
  }

  /**
   * 商品id
   */
  public String getProductId() {
    return this.productId;
  }

  /**
   * 商品id
   */
  public MinatoSingleParamVo setProductId(String productId) {
    this.productId = productId;
    return this;
  }

  public void unsetProductId() {
    this.productId = null;
  }

  /** Returns true if field productId is set (has been assigned a value) and false otherwise */
  public boolean isSetProductId() {
    return this.productId != null;
  }

  public void setProductIdIsSet(boolean value) {
    if (!value) {
      this.productId = null;
    }
  }

  /**
   * 活动id
   */
  public String getActiveId() {
    return this.activeId;
  }

  /**
   * 活动id
   */
  public MinatoSingleParamVo setActiveId(String activeId) {
    this.activeId = activeId;
    return this;
  }

  public void unsetActiveId() {
    this.activeId = null;
  }

  /** Returns true if field activeId is set (has been assigned a value) and false otherwise */
  public boolean isSetActiveId() {
    return this.activeId != null;
  }

  public void setActiveIdIsSet(boolean value) {
    if (!value) {
      this.activeId = null;
    }
  }

  /**
   * 区域id
   */
  public String getAreaId() {
    return this.areaId;
  }

  /**
   * 区域id
   */
  public MinatoSingleParamVo setAreaId(String areaId) {
    this.areaId = areaId;
    return this;
  }

  public void unsetAreaId() {
    this.areaId = null;
  }

  /** Returns true if field areaId is set (has been assigned a value) and false otherwise */
  public boolean isSetAreaId() {
    return this.areaId != null;
  }

  public void setAreaIdIsSet(boolean value) {
    if (!value) {
      this.areaId = null;
    }
  }

  /**
   * cookie id
   */
  public String getCookieId() {
    return this.cookieId;
  }

  /**
   * cookie id
   */
  public MinatoSingleParamVo setCookieId(String cookieId) {
    this.cookieId = cookieId;
    return this;
  }

  public void unsetCookieId() {
    this.cookieId = null;
  }

  /** Returns true if field cookieId is set (has been assigned a value) and false otherwise */
  public boolean isSetCookieId() {
    return this.cookieId != null;
  }

  public void setCookieIdIsSet(boolean value) {
    if (!value) {
      this.cookieId = null;
    }
  }

  /**
   * 商品类型 1 团购;2:预售;3:名优特惠;4:在线兑换;5:网店礼品*
   */
  public String getProductType() {
    return this.productType;
  }

  /**
   * 商品类型 1 团购;2:预售;3:名优特惠;4:在线兑换;5:网店礼品*
   */
  public MinatoSingleParamVo setProductType(String productType) {
    this.productType = productType;
    return this;
  }

  public void unsetProductType() {
    this.productType = null;
  }

  /** Returns true if field productType is set (has been assigned a value) and false otherwise */
  public boolean isSetProductType() {
    return this.productType != null;
  }

  public void setProductTypeIsSet(boolean value) {
    if (!value) {
      this.productType = null;
    }
  }

  /**
   * 凑单坐标
   */
  public MinatoSingleLocationVo getMinatoSingleLocation() {
    return this.minatoSingleLocation;
  }

  /**
   * 凑单坐标
   */
  public MinatoSingleParamVo setMinatoSingleLocation(MinatoSingleLocationVo minatoSingleLocation) {
    this.minatoSingleLocation = minatoSingleLocation;
    return this;
  }

  public void unsetMinatoSingleLocation() {
    this.minatoSingleLocation = null;
  }

  /** Returns true if field minatoSingleLocation is set (has been assigned a value) and false otherwise */
  public boolean isSetMinatoSingleLocation() {
    return this.minatoSingleLocation != null;
  }

  public void setMinatoSingleLocationIsSet(boolean value) {
    if (!value) {
      this.minatoSingleLocation = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case REQ_ID:
      if (value == null) {
        unsetReqId();
      } else {
        setReqId((String)value);
      }
      break;

    case CLIENT_ID:
      if (value == null) {
        unsetClientId();
      } else {
        setClientId((String)value);
      }
      break;

    case PRODUCT_ID:
      if (value == null) {
        unsetProductId();
      } else {
        setProductId((String)value);
      }
      break;

    case ACTIVE_ID:
      if (value == null) {
        unsetActiveId();
      } else {
        setActiveId((String)value);
      }
      break;

    case AREA_ID:
      if (value == null) {
        unsetAreaId();
      } else {
        setAreaId((String)value);
      }
      break;

    case COOKIE_ID:
      if (value == null) {
        unsetCookieId();
      } else {
        setCookieId((String)value);
      }
      break;

    case PRODUCT_TYPE:
      if (value == null) {
        unsetProductType();
      } else {
        setProductType((String)value);
      }
      break;

    case MINATO_SINGLE_LOCATION:
      if (value == null) {
        unsetMinatoSingleLocation();
      } else {
        setMinatoSingleLocation((MinatoSingleLocationVo)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case REQ_ID:
      return getReqId();

    case CLIENT_ID:
      return getClientId();

    case PRODUCT_ID:
      return getProductId();

    case ACTIVE_ID:
      return getActiveId();

    case AREA_ID:
      return getAreaId();

    case COOKIE_ID:
      return getCookieId();

    case PRODUCT_TYPE:
      return getProductType();

    case MINATO_SINGLE_LOCATION:
      return getMinatoSingleLocation();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case REQ_ID:
      return isSetReqId();
    case CLIENT_ID:
      return isSetClientId();
    case PRODUCT_ID:
      return isSetProductId();
    case ACTIVE_ID:
      return isSetActiveId();
    case AREA_ID:
      return isSetAreaId();
    case COOKIE_ID:
      return isSetCookieId();
    case PRODUCT_TYPE:
      return isSetProductType();
    case MINATO_SINGLE_LOCATION:
      return isSetMinatoSingleLocation();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof MinatoSingleParamVo)
      return this.equals((MinatoSingleParamVo)that);
    return false;
  }

  public boolean equals(MinatoSingleParamVo that) {
    if (that == null)
      return false;

    boolean this_present_reqId = true && this.isSetReqId();
    boolean that_present_reqId = true && that.isSetReqId();
    if (this_present_reqId || that_present_reqId) {
      if (!(this_present_reqId && that_present_reqId))
        return false;
      if (!this.reqId.equals(that.reqId))
        return false;
    }

    boolean this_present_clientId = true && this.isSetClientId();
    boolean that_present_clientId = true && that.isSetClientId();
    if (this_present_clientId || that_present_clientId) {
      if (!(this_present_clientId && that_present_clientId))
        return false;
      if (!this.clientId.equals(that.clientId))
        return false;
    }

    boolean this_present_productId = true && this.isSetProductId();
    boolean that_present_productId = true && that.isSetProductId();
    if (this_present_productId || that_present_productId) {
      if (!(this_present_productId && that_present_productId))
        return false;
      if (!this.productId.equals(that.productId))
        return false;
    }

    boolean this_present_activeId = true && this.isSetActiveId();
    boolean that_present_activeId = true && that.isSetActiveId();
    if (this_present_activeId || that_present_activeId) {
      if (!(this_present_activeId && that_present_activeId))
        return false;
      if (!this.activeId.equals(that.activeId))
        return false;
    }

    boolean this_present_areaId = true && this.isSetAreaId();
    boolean that_present_areaId = true && that.isSetAreaId();
    if (this_present_areaId || that_present_areaId) {
      if (!(this_present_areaId && that_present_areaId))
        return false;
      if (!this.areaId.equals(that.areaId))
        return false;
    }

    boolean this_present_cookieId = true && this.isSetCookieId();
    boolean that_present_cookieId = true && that.isSetCookieId();
    if (this_present_cookieId || that_present_cookieId) {
      if (!(this_present_cookieId && that_present_cookieId))
        return false;
      if (!this.cookieId.equals(that.cookieId))
        return false;
    }

    boolean this_present_productType = true && this.isSetProductType();
    boolean that_present_productType = true && that.isSetProductType();
    if (this_present_productType || that_present_productType) {
      if (!(this_present_productType && that_present_productType))
        return false;
      if (!this.productType.equals(that.productType))
        return false;
    }

    boolean this_present_minatoSingleLocation = true && this.isSetMinatoSingleLocation();
    boolean that_present_minatoSingleLocation = true && that.isSetMinatoSingleLocation();
    if (this_present_minatoSingleLocation || that_present_minatoSingleLocation) {
      if (!(this_present_minatoSingleLocation && that_present_minatoSingleLocation))
        return false;
      if (!this.minatoSingleLocation.equals(that.minatoSingleLocation))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_reqId = true && (isSetReqId());
    list.add(present_reqId);
    if (present_reqId)
      list.add(reqId);

    boolean present_clientId = true && (isSetClientId());
    list.add(present_clientId);
    if (present_clientId)
      list.add(clientId);

    boolean present_productId = true && (isSetProductId());
    list.add(present_productId);
    if (present_productId)
      list.add(productId);

    boolean present_activeId = true && (isSetActiveId());
    list.add(present_activeId);
    if (present_activeId)
      list.add(activeId);

    boolean present_areaId = true && (isSetAreaId());
    list.add(present_areaId);
    if (present_areaId)
      list.add(areaId);

    boolean present_cookieId = true && (isSetCookieId());
    list.add(present_cookieId);
    if (present_cookieId)
      list.add(cookieId);

    boolean present_productType = true && (isSetProductType());
    list.add(present_productType);
    if (present_productType)
      list.add(productType);

    boolean present_minatoSingleLocation = true && (isSetMinatoSingleLocation());
    list.add(present_minatoSingleLocation);
    if (present_minatoSingleLocation)
      list.add(minatoSingleLocation);

    return list.hashCode();
  }

  @Override
  public int compareTo(MinatoSingleParamVo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetReqId()).compareTo(other.isSetReqId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReqId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reqId, other.reqId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClientId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductId()).compareTo(other.isSetProductId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productId, other.productId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActiveId()).compareTo(other.isSetActiveId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActiveId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.activeId, other.activeId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAreaId()).compareTo(other.isSetAreaId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAreaId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.areaId, other.areaId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCookieId()).compareTo(other.isSetCookieId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCookieId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cookieId, other.cookieId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductType()).compareTo(other.isSetProductType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productType, other.productType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMinatoSingleLocation()).compareTo(other.isSetMinatoSingleLocation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMinatoSingleLocation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.minatoSingleLocation, other.minatoSingleLocation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("MinatoSingleParamVo(");
    boolean first = true;

    sb.append("reqId:");
    if (this.reqId == null) {
      sb.append("null");
    } else {
      sb.append(this.reqId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("clientId:");
    if (this.clientId == null) {
      sb.append("null");
    } else {
      sb.append(this.clientId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("productId:");
    if (this.productId == null) {
      sb.append("null");
    } else {
      sb.append(this.productId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("activeId:");
    if (this.activeId == null) {
      sb.append("null");
    } else {
      sb.append(this.activeId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("areaId:");
    if (this.areaId == null) {
      sb.append("null");
    } else {
      sb.append(this.areaId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cookieId:");
    if (this.cookieId == null) {
      sb.append("null");
    } else {
      sb.append(this.cookieId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("productType:");
    if (this.productType == null) {
      sb.append("null");
    } else {
      sb.append(this.productType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("minatoSingleLocation:");
    if (this.minatoSingleLocation == null) {
      sb.append("null");
    } else {
      sb.append(this.minatoSingleLocation);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MinatoSingleParamVoStandardSchemeFactory implements SchemeFactory {
    public MinatoSingleParamVoStandardScheme getScheme() {
      return new MinatoSingleParamVoStandardScheme();
    }
  }

  private static class MinatoSingleParamVoStandardScheme extends StandardScheme<MinatoSingleParamVo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MinatoSingleParamVo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // REQ_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.reqId = iprot.readString();
              struct.setReqIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CLIENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clientId = iprot.readString();
              struct.setClientIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PRODUCT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.productId = iprot.readString();
              struct.setProductIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ACTIVE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.activeId = iprot.readString();
              struct.setActiveIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // AREA_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.areaId = iprot.readString();
              struct.setAreaIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // COOKIE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cookieId = iprot.readString();
              struct.setCookieIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PRODUCT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.productType = iprot.readString();
              struct.setProductTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // MINATO_SINGLE_LOCATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.minatoSingleLocation = new MinatoSingleLocationVo();
              struct.minatoSingleLocation.read(iprot);
              struct.setMinatoSingleLocationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MinatoSingleParamVo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.reqId != null) {
        oprot.writeFieldBegin(REQ_ID_FIELD_DESC);
        oprot.writeString(struct.reqId);
        oprot.writeFieldEnd();
      }
      if (struct.clientId != null) {
        oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
        oprot.writeString(struct.clientId);
        oprot.writeFieldEnd();
      }
      if (struct.productId != null) {
        oprot.writeFieldBegin(PRODUCT_ID_FIELD_DESC);
        oprot.writeString(struct.productId);
        oprot.writeFieldEnd();
      }
      if (struct.activeId != null) {
        oprot.writeFieldBegin(ACTIVE_ID_FIELD_DESC);
        oprot.writeString(struct.activeId);
        oprot.writeFieldEnd();
      }
      if (struct.areaId != null) {
        oprot.writeFieldBegin(AREA_ID_FIELD_DESC);
        oprot.writeString(struct.areaId);
        oprot.writeFieldEnd();
      }
      if (struct.cookieId != null) {
        oprot.writeFieldBegin(COOKIE_ID_FIELD_DESC);
        oprot.writeString(struct.cookieId);
        oprot.writeFieldEnd();
      }
      if (struct.productType != null) {
        oprot.writeFieldBegin(PRODUCT_TYPE_FIELD_DESC);
        oprot.writeString(struct.productType);
        oprot.writeFieldEnd();
      }
      if (struct.minatoSingleLocation != null) {
        oprot.writeFieldBegin(MINATO_SINGLE_LOCATION_FIELD_DESC);
        struct.minatoSingleLocation.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MinatoSingleParamVoTupleSchemeFactory implements SchemeFactory {
    public MinatoSingleParamVoTupleScheme getScheme() {
      return new MinatoSingleParamVoTupleScheme();
    }
  }

  private static class MinatoSingleParamVoTupleScheme extends TupleScheme<MinatoSingleParamVo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MinatoSingleParamVo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetReqId()) {
        optionals.set(0);
      }
      if (struct.isSetClientId()) {
        optionals.set(1);
      }
      if (struct.isSetProductId()) {
        optionals.set(2);
      }
      if (struct.isSetActiveId()) {
        optionals.set(3);
      }
      if (struct.isSetAreaId()) {
        optionals.set(4);
      }
      if (struct.isSetCookieId()) {
        optionals.set(5);
      }
      if (struct.isSetProductType()) {
        optionals.set(6);
      }
      if (struct.isSetMinatoSingleLocation()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetReqId()) {
        oprot.writeString(struct.reqId);
      }
      if (struct.isSetClientId()) {
        oprot.writeString(struct.clientId);
      }
      if (struct.isSetProductId()) {
        oprot.writeString(struct.productId);
      }
      if (struct.isSetActiveId()) {
        oprot.writeString(struct.activeId);
      }
      if (struct.isSetAreaId()) {
        oprot.writeString(struct.areaId);
      }
      if (struct.isSetCookieId()) {
        oprot.writeString(struct.cookieId);
      }
      if (struct.isSetProductType()) {
        oprot.writeString(struct.productType);
      }
      if (struct.isSetMinatoSingleLocation()) {
        struct.minatoSingleLocation.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MinatoSingleParamVo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.reqId = iprot.readString();
        struct.setReqIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.clientId = iprot.readString();
        struct.setClientIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.productId = iprot.readString();
        struct.setProductIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.activeId = iprot.readString();
        struct.setActiveIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.areaId = iprot.readString();
        struct.setAreaIdIsSet(true);
      }
      if (incoming.get(5)) {
        struct.cookieId = iprot.readString();
        struct.setCookieIdIsSet(true);
      }
      if (incoming.get(6)) {
        struct.productType = iprot.readString();
        struct.setProductTypeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.minatoSingleLocation = new MinatoSingleLocationVo();
        struct.minatoSingleLocation.read(iprot);
        struct.setMinatoSingleLocationIsSet(true);
      }
    }
  }

}

