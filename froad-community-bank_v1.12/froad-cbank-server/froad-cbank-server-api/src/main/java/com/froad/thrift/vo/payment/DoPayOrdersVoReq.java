/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.vo.payment;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * model 定义 : 支付订单请求参数体
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class DoPayOrdersVoReq implements org.apache.thrift.TBase<DoPayOrdersVoReq, DoPayOrdersVoReq._Fields>, java.io.Serializable, Cloneable, Comparable<DoPayOrdersVoReq> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DoPayOrdersVoReq");

  private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField ORDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("orderId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField POINT_ORG_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("pointOrgNo", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField CASH_ORG_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("cashOrgNo", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField PAY_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("payType", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField CASH_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("cashType", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField POINT_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("pointAmount", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField CASH_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("cashAmount", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField FOIL_CARD_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("foilCardNum", org.apache.thrift.protocol.TType.STRING, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new DoPayOrdersVoReqStandardSchemeFactory());
    schemes.put(TupleScheme.class, new DoPayOrdersVoReqTupleSchemeFactory());
  }

  public String clientId; // optional
  public String orderId; // optional
  public String pointOrgNo; // optional
  public String cashOrgNo; // optional
  public int payType; // optional
  public int cashType; // optional
  public double pointAmount; // optional
  public double cashAmount; // optional
  public String foilCardNum; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CLIENT_ID((short)1, "clientId"),
    ORDER_ID((short)2, "orderId"),
    POINT_ORG_NO((short)3, "pointOrgNo"),
    CASH_ORG_NO((short)4, "cashOrgNo"),
    PAY_TYPE((short)5, "payType"),
    CASH_TYPE((short)6, "cashType"),
    POINT_AMOUNT((short)7, "pointAmount"),
    CASH_AMOUNT((short)8, "cashAmount"),
    FOIL_CARD_NUM((short)9, "foilCardNum");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CLIENT_ID
          return CLIENT_ID;
        case 2: // ORDER_ID
          return ORDER_ID;
        case 3: // POINT_ORG_NO
          return POINT_ORG_NO;
        case 4: // CASH_ORG_NO
          return CASH_ORG_NO;
        case 5: // PAY_TYPE
          return PAY_TYPE;
        case 6: // CASH_TYPE
          return CASH_TYPE;
        case 7: // POINT_AMOUNT
          return POINT_AMOUNT;
        case 8: // CASH_AMOUNT
          return CASH_AMOUNT;
        case 9: // FOIL_CARD_NUM
          return FOIL_CARD_NUM;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PAYTYPE_ISSET_ID = 0;
  private static final int __CASHTYPE_ISSET_ID = 1;
  private static final int __POINTAMOUNT_ISSET_ID = 2;
  private static final int __CASHAMOUNT_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.CLIENT_ID,_Fields.ORDER_ID,_Fields.POINT_ORG_NO,_Fields.CASH_ORG_NO,_Fields.PAY_TYPE,_Fields.CASH_TYPE,_Fields.POINT_AMOUNT,_Fields.CASH_AMOUNT,_Fields.FOIL_CARD_NUM};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORDER_ID, new org.apache.thrift.meta_data.FieldMetaData("orderId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.POINT_ORG_NO, new org.apache.thrift.meta_data.FieldMetaData("pointOrgNo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CASH_ORG_NO, new org.apache.thrift.meta_data.FieldMetaData("cashOrgNo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAY_TYPE, new org.apache.thrift.meta_data.FieldMetaData("payType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CASH_TYPE, new org.apache.thrift.meta_data.FieldMetaData("cashType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.POINT_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("pointAmount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CASH_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("cashAmount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.FOIL_CARD_NUM, new org.apache.thrift.meta_data.FieldMetaData("foilCardNum", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DoPayOrdersVoReq.class, metaDataMap);
  }

  public DoPayOrdersVoReq() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DoPayOrdersVoReq(DoPayOrdersVoReq other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetClientId()) {
      this.clientId = other.clientId;
    }
    if (other.isSetOrderId()) {
      this.orderId = other.orderId;
    }
    if (other.isSetPointOrgNo()) {
      this.pointOrgNo = other.pointOrgNo;
    }
    if (other.isSetCashOrgNo()) {
      this.cashOrgNo = other.cashOrgNo;
    }
    this.payType = other.payType;
    this.cashType = other.cashType;
    this.pointAmount = other.pointAmount;
    this.cashAmount = other.cashAmount;
    if (other.isSetFoilCardNum()) {
      this.foilCardNum = other.foilCardNum;
    }
  }

  public DoPayOrdersVoReq deepCopy() {
    return new DoPayOrdersVoReq(this);
  }

  @Override
  public void clear() {
    this.clientId = null;
    this.orderId = null;
    this.pointOrgNo = null;
    this.cashOrgNo = null;
    setPayTypeIsSet(false);
    this.payType = 0;
    setCashTypeIsSet(false);
    this.cashType = 0;
    setPointAmountIsSet(false);
    this.pointAmount = 0.0;
    setCashAmountIsSet(false);
    this.cashAmount = 0.0;
    this.foilCardNum = null;
  }

  public String getClientId() {
    return this.clientId;
  }

  public DoPayOrdersVoReq setClientId(String clientId) {
    this.clientId = clientId;
    return this;
  }

  public void unsetClientId() {
    this.clientId = null;
  }

  /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
  public boolean isSetClientId() {
    return this.clientId != null;
  }

  public void setClientIdIsSet(boolean value) {
    if (!value) {
      this.clientId = null;
    }
  }

  public String getOrderId() {
    return this.orderId;
  }

  public DoPayOrdersVoReq setOrderId(String orderId) {
    this.orderId = orderId;
    return this;
  }

  public void unsetOrderId() {
    this.orderId = null;
  }

  /** Returns true if field orderId is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderId() {
    return this.orderId != null;
  }

  public void setOrderIdIsSet(boolean value) {
    if (!value) {
      this.orderId = null;
    }
  }

  public String getPointOrgNo() {
    return this.pointOrgNo;
  }

  public DoPayOrdersVoReq setPointOrgNo(String pointOrgNo) {
    this.pointOrgNo = pointOrgNo;
    return this;
  }

  public void unsetPointOrgNo() {
    this.pointOrgNo = null;
  }

  /** Returns true if field pointOrgNo is set (has been assigned a value) and false otherwise */
  public boolean isSetPointOrgNo() {
    return this.pointOrgNo != null;
  }

  public void setPointOrgNoIsSet(boolean value) {
    if (!value) {
      this.pointOrgNo = null;
    }
  }

  public String getCashOrgNo() {
    return this.cashOrgNo;
  }

  public DoPayOrdersVoReq setCashOrgNo(String cashOrgNo) {
    this.cashOrgNo = cashOrgNo;
    return this;
  }

  public void unsetCashOrgNo() {
    this.cashOrgNo = null;
  }

  /** Returns true if field cashOrgNo is set (has been assigned a value) and false otherwise */
  public boolean isSetCashOrgNo() {
    return this.cashOrgNo != null;
  }

  public void setCashOrgNoIsSet(boolean value) {
    if (!value) {
      this.cashOrgNo = null;
    }
  }

  public int getPayType() {
    return this.payType;
  }

  public DoPayOrdersVoReq setPayType(int payType) {
    this.payType = payType;
    setPayTypeIsSet(true);
    return this;
  }

  public void unsetPayType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAYTYPE_ISSET_ID);
  }

  /** Returns true if field payType is set (has been assigned a value) and false otherwise */
  public boolean isSetPayType() {
    return EncodingUtils.testBit(__isset_bitfield, __PAYTYPE_ISSET_ID);
  }

  public void setPayTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAYTYPE_ISSET_ID, value);
  }

  public int getCashType() {
    return this.cashType;
  }

  public DoPayOrdersVoReq setCashType(int cashType) {
    this.cashType = cashType;
    setCashTypeIsSet(true);
    return this;
  }

  public void unsetCashType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CASHTYPE_ISSET_ID);
  }

  /** Returns true if field cashType is set (has been assigned a value) and false otherwise */
  public boolean isSetCashType() {
    return EncodingUtils.testBit(__isset_bitfield, __CASHTYPE_ISSET_ID);
  }

  public void setCashTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CASHTYPE_ISSET_ID, value);
  }

  public double getPointAmount() {
    return this.pointAmount;
  }

  public DoPayOrdersVoReq setPointAmount(double pointAmount) {
    this.pointAmount = pointAmount;
    setPointAmountIsSet(true);
    return this;
  }

  public void unsetPointAmount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POINTAMOUNT_ISSET_ID);
  }

  /** Returns true if field pointAmount is set (has been assigned a value) and false otherwise */
  public boolean isSetPointAmount() {
    return EncodingUtils.testBit(__isset_bitfield, __POINTAMOUNT_ISSET_ID);
  }

  public void setPointAmountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POINTAMOUNT_ISSET_ID, value);
  }

  public double getCashAmount() {
    return this.cashAmount;
  }

  public DoPayOrdersVoReq setCashAmount(double cashAmount) {
    this.cashAmount = cashAmount;
    setCashAmountIsSet(true);
    return this;
  }

  public void unsetCashAmount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CASHAMOUNT_ISSET_ID);
  }

  /** Returns true if field cashAmount is set (has been assigned a value) and false otherwise */
  public boolean isSetCashAmount() {
    return EncodingUtils.testBit(__isset_bitfield, __CASHAMOUNT_ISSET_ID);
  }

  public void setCashAmountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CASHAMOUNT_ISSET_ID, value);
  }

  public String getFoilCardNum() {
    return this.foilCardNum;
  }

  public DoPayOrdersVoReq setFoilCardNum(String foilCardNum) {
    this.foilCardNum = foilCardNum;
    return this;
  }

  public void unsetFoilCardNum() {
    this.foilCardNum = null;
  }

  /** Returns true if field foilCardNum is set (has been assigned a value) and false otherwise */
  public boolean isSetFoilCardNum() {
    return this.foilCardNum != null;
  }

  public void setFoilCardNumIsSet(boolean value) {
    if (!value) {
      this.foilCardNum = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CLIENT_ID:
      if (value == null) {
        unsetClientId();
      } else {
        setClientId((String)value);
      }
      break;

    case ORDER_ID:
      if (value == null) {
        unsetOrderId();
      } else {
        setOrderId((String)value);
      }
      break;

    case POINT_ORG_NO:
      if (value == null) {
        unsetPointOrgNo();
      } else {
        setPointOrgNo((String)value);
      }
      break;

    case CASH_ORG_NO:
      if (value == null) {
        unsetCashOrgNo();
      } else {
        setCashOrgNo((String)value);
      }
      break;

    case PAY_TYPE:
      if (value == null) {
        unsetPayType();
      } else {
        setPayType((Integer)value);
      }
      break;

    case CASH_TYPE:
      if (value == null) {
        unsetCashType();
      } else {
        setCashType((Integer)value);
      }
      break;

    case POINT_AMOUNT:
      if (value == null) {
        unsetPointAmount();
      } else {
        setPointAmount((Double)value);
      }
      break;

    case CASH_AMOUNT:
      if (value == null) {
        unsetCashAmount();
      } else {
        setCashAmount((Double)value);
      }
      break;

    case FOIL_CARD_NUM:
      if (value == null) {
        unsetFoilCardNum();
      } else {
        setFoilCardNum((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CLIENT_ID:
      return getClientId();

    case ORDER_ID:
      return getOrderId();

    case POINT_ORG_NO:
      return getPointOrgNo();

    case CASH_ORG_NO:
      return getCashOrgNo();

    case PAY_TYPE:
      return Integer.valueOf(getPayType());

    case CASH_TYPE:
      return Integer.valueOf(getCashType());

    case POINT_AMOUNT:
      return Double.valueOf(getPointAmount());

    case CASH_AMOUNT:
      return Double.valueOf(getCashAmount());

    case FOIL_CARD_NUM:
      return getFoilCardNum();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CLIENT_ID:
      return isSetClientId();
    case ORDER_ID:
      return isSetOrderId();
    case POINT_ORG_NO:
      return isSetPointOrgNo();
    case CASH_ORG_NO:
      return isSetCashOrgNo();
    case PAY_TYPE:
      return isSetPayType();
    case CASH_TYPE:
      return isSetCashType();
    case POINT_AMOUNT:
      return isSetPointAmount();
    case CASH_AMOUNT:
      return isSetCashAmount();
    case FOIL_CARD_NUM:
      return isSetFoilCardNum();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof DoPayOrdersVoReq)
      return this.equals((DoPayOrdersVoReq)that);
    return false;
  }

  public boolean equals(DoPayOrdersVoReq that) {
    if (that == null)
      return false;

    boolean this_present_clientId = true && this.isSetClientId();
    boolean that_present_clientId = true && that.isSetClientId();
    if (this_present_clientId || that_present_clientId) {
      if (!(this_present_clientId && that_present_clientId))
        return false;
      if (!this.clientId.equals(that.clientId))
        return false;
    }

    boolean this_present_orderId = true && this.isSetOrderId();
    boolean that_present_orderId = true && that.isSetOrderId();
    if (this_present_orderId || that_present_orderId) {
      if (!(this_present_orderId && that_present_orderId))
        return false;
      if (!this.orderId.equals(that.orderId))
        return false;
    }

    boolean this_present_pointOrgNo = true && this.isSetPointOrgNo();
    boolean that_present_pointOrgNo = true && that.isSetPointOrgNo();
    if (this_present_pointOrgNo || that_present_pointOrgNo) {
      if (!(this_present_pointOrgNo && that_present_pointOrgNo))
        return false;
      if (!this.pointOrgNo.equals(that.pointOrgNo))
        return false;
    }

    boolean this_present_cashOrgNo = true && this.isSetCashOrgNo();
    boolean that_present_cashOrgNo = true && that.isSetCashOrgNo();
    if (this_present_cashOrgNo || that_present_cashOrgNo) {
      if (!(this_present_cashOrgNo && that_present_cashOrgNo))
        return false;
      if (!this.cashOrgNo.equals(that.cashOrgNo))
        return false;
    }

    boolean this_present_payType = true && this.isSetPayType();
    boolean that_present_payType = true && that.isSetPayType();
    if (this_present_payType || that_present_payType) {
      if (!(this_present_payType && that_present_payType))
        return false;
      if (this.payType != that.payType)
        return false;
    }

    boolean this_present_cashType = true && this.isSetCashType();
    boolean that_present_cashType = true && that.isSetCashType();
    if (this_present_cashType || that_present_cashType) {
      if (!(this_present_cashType && that_present_cashType))
        return false;
      if (this.cashType != that.cashType)
        return false;
    }

    boolean this_present_pointAmount = true && this.isSetPointAmount();
    boolean that_present_pointAmount = true && that.isSetPointAmount();
    if (this_present_pointAmount || that_present_pointAmount) {
      if (!(this_present_pointAmount && that_present_pointAmount))
        return false;
      if (this.pointAmount != that.pointAmount)
        return false;
    }

    boolean this_present_cashAmount = true && this.isSetCashAmount();
    boolean that_present_cashAmount = true && that.isSetCashAmount();
    if (this_present_cashAmount || that_present_cashAmount) {
      if (!(this_present_cashAmount && that_present_cashAmount))
        return false;
      if (this.cashAmount != that.cashAmount)
        return false;
    }

    boolean this_present_foilCardNum = true && this.isSetFoilCardNum();
    boolean that_present_foilCardNum = true && that.isSetFoilCardNum();
    if (this_present_foilCardNum || that_present_foilCardNum) {
      if (!(this_present_foilCardNum && that_present_foilCardNum))
        return false;
      if (!this.foilCardNum.equals(that.foilCardNum))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_clientId = true && (isSetClientId());
    list.add(present_clientId);
    if (present_clientId)
      list.add(clientId);

    boolean present_orderId = true && (isSetOrderId());
    list.add(present_orderId);
    if (present_orderId)
      list.add(orderId);

    boolean present_pointOrgNo = true && (isSetPointOrgNo());
    list.add(present_pointOrgNo);
    if (present_pointOrgNo)
      list.add(pointOrgNo);

    boolean present_cashOrgNo = true && (isSetCashOrgNo());
    list.add(present_cashOrgNo);
    if (present_cashOrgNo)
      list.add(cashOrgNo);

    boolean present_payType = true && (isSetPayType());
    list.add(present_payType);
    if (present_payType)
      list.add(payType);

    boolean present_cashType = true && (isSetCashType());
    list.add(present_cashType);
    if (present_cashType)
      list.add(cashType);

    boolean present_pointAmount = true && (isSetPointAmount());
    list.add(present_pointAmount);
    if (present_pointAmount)
      list.add(pointAmount);

    boolean present_cashAmount = true && (isSetCashAmount());
    list.add(present_cashAmount);
    if (present_cashAmount)
      list.add(cashAmount);

    boolean present_foilCardNum = true && (isSetFoilCardNum());
    list.add(present_foilCardNum);
    if (present_foilCardNum)
      list.add(foilCardNum);

    return list.hashCode();
  }

  @Override
  public int compareTo(DoPayOrdersVoReq other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClientId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderId()).compareTo(other.isSetOrderId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderId, other.orderId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPointOrgNo()).compareTo(other.isSetPointOrgNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPointOrgNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pointOrgNo, other.pointOrgNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCashOrgNo()).compareTo(other.isSetCashOrgNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCashOrgNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cashOrgNo, other.cashOrgNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPayType()).compareTo(other.isSetPayType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPayType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.payType, other.payType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCashType()).compareTo(other.isSetCashType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCashType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cashType, other.cashType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPointAmount()).compareTo(other.isSetPointAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPointAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pointAmount, other.pointAmount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCashAmount()).compareTo(other.isSetCashAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCashAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cashAmount, other.cashAmount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFoilCardNum()).compareTo(other.isSetFoilCardNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFoilCardNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.foilCardNum, other.foilCardNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("DoPayOrdersVoReq(");
    boolean first = true;

    if (isSetClientId()) {
      sb.append("clientId:");
      if (this.clientId == null) {
        sb.append("null");
      } else {
        sb.append(this.clientId);
      }
      first = false;
    }
    if (isSetOrderId()) {
      if (!first) sb.append(", ");
      sb.append("orderId:");
      if (this.orderId == null) {
        sb.append("null");
      } else {
        sb.append(this.orderId);
      }
      first = false;
    }
    if (isSetPointOrgNo()) {
      if (!first) sb.append(", ");
      sb.append("pointOrgNo:");
      if (this.pointOrgNo == null) {
        sb.append("null");
      } else {
        sb.append(this.pointOrgNo);
      }
      first = false;
    }
    if (isSetCashOrgNo()) {
      if (!first) sb.append(", ");
      sb.append("cashOrgNo:");
      if (this.cashOrgNo == null) {
        sb.append("null");
      } else {
        sb.append(this.cashOrgNo);
      }
      first = false;
    }
    if (isSetPayType()) {
      if (!first) sb.append(", ");
      sb.append("payType:");
      sb.append(this.payType);
      first = false;
    }
    if (isSetCashType()) {
      if (!first) sb.append(", ");
      sb.append("cashType:");
      sb.append(this.cashType);
      first = false;
    }
    if (isSetPointAmount()) {
      if (!first) sb.append(", ");
      sb.append("pointAmount:");
      sb.append(this.pointAmount);
      first = false;
    }
    if (isSetCashAmount()) {
      if (!first) sb.append(", ");
      sb.append("cashAmount:");
      sb.append(this.cashAmount);
      first = false;
    }
    if (isSetFoilCardNum()) {
      if (!first) sb.append(", ");
      sb.append("foilCardNum:");
      if (this.foilCardNum == null) {
        sb.append("null");
      } else {
        sb.append(this.foilCardNum);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DoPayOrdersVoReqStandardSchemeFactory implements SchemeFactory {
    public DoPayOrdersVoReqStandardScheme getScheme() {
      return new DoPayOrdersVoReqStandardScheme();
    }
  }

  private static class DoPayOrdersVoReqStandardScheme extends StandardScheme<DoPayOrdersVoReq> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, DoPayOrdersVoReq struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CLIENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clientId = iprot.readString();
              struct.setClientIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ORDER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orderId = iprot.readString();
              struct.setOrderIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // POINT_ORG_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pointOrgNo = iprot.readString();
              struct.setPointOrgNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CASH_ORG_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cashOrgNo = iprot.readString();
              struct.setCashOrgNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PAY_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.payType = iprot.readI32();
              struct.setPayTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CASH_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.cashType = iprot.readI32();
              struct.setCashTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // POINT_AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.pointAmount = iprot.readDouble();
              struct.setPointAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CASH_AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.cashAmount = iprot.readDouble();
              struct.setCashAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // FOIL_CARD_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.foilCardNum = iprot.readString();
              struct.setFoilCardNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, DoPayOrdersVoReq struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.clientId != null) {
        if (struct.isSetClientId()) {
          oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
          oprot.writeString(struct.clientId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.orderId != null) {
        if (struct.isSetOrderId()) {
          oprot.writeFieldBegin(ORDER_ID_FIELD_DESC);
          oprot.writeString(struct.orderId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.pointOrgNo != null) {
        if (struct.isSetPointOrgNo()) {
          oprot.writeFieldBegin(POINT_ORG_NO_FIELD_DESC);
          oprot.writeString(struct.pointOrgNo);
          oprot.writeFieldEnd();
        }
      }
      if (struct.cashOrgNo != null) {
        if (struct.isSetCashOrgNo()) {
          oprot.writeFieldBegin(CASH_ORG_NO_FIELD_DESC);
          oprot.writeString(struct.cashOrgNo);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetPayType()) {
        oprot.writeFieldBegin(PAY_TYPE_FIELD_DESC);
        oprot.writeI32(struct.payType);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCashType()) {
        oprot.writeFieldBegin(CASH_TYPE_FIELD_DESC);
        oprot.writeI32(struct.cashType);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPointAmount()) {
        oprot.writeFieldBegin(POINT_AMOUNT_FIELD_DESC);
        oprot.writeDouble(struct.pointAmount);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCashAmount()) {
        oprot.writeFieldBegin(CASH_AMOUNT_FIELD_DESC);
        oprot.writeDouble(struct.cashAmount);
        oprot.writeFieldEnd();
      }
      if (struct.foilCardNum != null) {
        if (struct.isSetFoilCardNum()) {
          oprot.writeFieldBegin(FOIL_CARD_NUM_FIELD_DESC);
          oprot.writeString(struct.foilCardNum);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DoPayOrdersVoReqTupleSchemeFactory implements SchemeFactory {
    public DoPayOrdersVoReqTupleScheme getScheme() {
      return new DoPayOrdersVoReqTupleScheme();
    }
  }

  private static class DoPayOrdersVoReqTupleScheme extends TupleScheme<DoPayOrdersVoReq> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, DoPayOrdersVoReq struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetClientId()) {
        optionals.set(0);
      }
      if (struct.isSetOrderId()) {
        optionals.set(1);
      }
      if (struct.isSetPointOrgNo()) {
        optionals.set(2);
      }
      if (struct.isSetCashOrgNo()) {
        optionals.set(3);
      }
      if (struct.isSetPayType()) {
        optionals.set(4);
      }
      if (struct.isSetCashType()) {
        optionals.set(5);
      }
      if (struct.isSetPointAmount()) {
        optionals.set(6);
      }
      if (struct.isSetCashAmount()) {
        optionals.set(7);
      }
      if (struct.isSetFoilCardNum()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetClientId()) {
        oprot.writeString(struct.clientId);
      }
      if (struct.isSetOrderId()) {
        oprot.writeString(struct.orderId);
      }
      if (struct.isSetPointOrgNo()) {
        oprot.writeString(struct.pointOrgNo);
      }
      if (struct.isSetCashOrgNo()) {
        oprot.writeString(struct.cashOrgNo);
      }
      if (struct.isSetPayType()) {
        oprot.writeI32(struct.payType);
      }
      if (struct.isSetCashType()) {
        oprot.writeI32(struct.cashType);
      }
      if (struct.isSetPointAmount()) {
        oprot.writeDouble(struct.pointAmount);
      }
      if (struct.isSetCashAmount()) {
        oprot.writeDouble(struct.cashAmount);
      }
      if (struct.isSetFoilCardNum()) {
        oprot.writeString(struct.foilCardNum);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, DoPayOrdersVoReq struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.clientId = iprot.readString();
        struct.setClientIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.orderId = iprot.readString();
        struct.setOrderIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.pointOrgNo = iprot.readString();
        struct.setPointOrgNoIsSet(true);
      }
      if (incoming.get(3)) {
        struct.cashOrgNo = iprot.readString();
        struct.setCashOrgNoIsSet(true);
      }
      if (incoming.get(4)) {
        struct.payType = iprot.readI32();
        struct.setPayTypeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.cashType = iprot.readI32();
        struct.setCashTypeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.pointAmount = iprot.readDouble();
        struct.setPointAmountIsSet(true);
      }
      if (incoming.get(7)) {
        struct.cashAmount = iprot.readDouble();
        struct.setCashAmountIsSet(true);
      }
      if (incoming.get(8)) {
        struct.foilCardNum = iprot.readString();
        struct.setFoilCardNumIsSet(true);
      }
    }
  }

}

