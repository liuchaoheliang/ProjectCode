/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class SmsContentService {

  /**
   * 短信模板 服务
   */
  public interface Iface extends com.froad.thrift.monitor.service.BizMonitorService.Iface {

    /**
     * 增加 SmsContent
     * @param smsContent
     * @return long    主键ID
     * 
     * @param originVo
     * @param smsContentVo
     */
    public com.froad.thrift.vo.AddResultVo addSmsContent(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.SmsContentVo smsContentVo) throws org.apache.thrift.TException;

    /**
     * 删除 SmsContent
     * @param smsContent
     * @return boolean
     * 
     * @param originVo
     * @param smsContentVo
     */
    public com.froad.thrift.vo.ResultVo deleteSmsContent(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.SmsContentVo smsContentVo) throws org.apache.thrift.TException;

    /**
     * 修改 SmsContent
     * @param smsContent
     * @return boolean
     * 
     * @param originVo
     * @param smsContentVo
     */
    public com.froad.thrift.vo.ResultVo updateSmsContent(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.SmsContentVo smsContentVo) throws org.apache.thrift.TException;

    /**
     * 查询 SmsContent
     * @param smsContent
     * @return List<SmsContentVo>
     * 
     * @param smsContentVo
     */
    public List<com.froad.thrift.vo.SmsContentVo> getSmsContent(com.froad.thrift.vo.SmsContentVo smsContentVo) throws org.apache.thrift.TException;

    /**
     * 分页查询 SmsContent
     * @param smsContent
     * @return SmsContentPageVoRes
     * 
     * @param page
     * @param smsContentVo
     */
    public com.froad.thrift.vo.SmsContentPageVoRes getSmsContentByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.SmsContentVo smsContentVo) throws org.apache.thrift.TException;

    /**
     * 查询 SmsContent
     * @return SmsContentVo
     * 
     * @param clientId
     * @param smsType
     */
    public com.froad.thrift.vo.SmsContentVo getSmsContentByClientIdAndType(String clientId, int smsType) throws org.apache.thrift.TException;

  }

  public interface AsyncIface extends com.froad.thrift.monitor.service.BizMonitorService .AsyncIface {

    public void addSmsContent(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.SmsContentVo smsContentVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteSmsContent(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.SmsContentVo smsContentVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateSmsContent(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.SmsContentVo smsContentVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getSmsContent(com.froad.thrift.vo.SmsContentVo smsContentVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getSmsContentByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.SmsContentVo smsContentVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getSmsContentByClientIdAndType(String clientId, int smsType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends com.froad.thrift.monitor.service.BizMonitorService.Client implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public com.froad.thrift.vo.AddResultVo addSmsContent(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.SmsContentVo smsContentVo) throws org.apache.thrift.TException
    {
      send_addSmsContent(originVo, smsContentVo);
      return recv_addSmsContent();
    }

    public void send_addSmsContent(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.SmsContentVo smsContentVo) throws org.apache.thrift.TException
    {
      addSmsContent_args args = new addSmsContent_args();
      args.setOriginVo(originVo);
      args.setSmsContentVo(smsContentVo);
      sendBase("addSmsContent", args);
    }

    public com.froad.thrift.vo.AddResultVo recv_addSmsContent() throws org.apache.thrift.TException
    {
      addSmsContent_result result = new addSmsContent_result();
      receiveBase(result, "addSmsContent");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addSmsContent failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo deleteSmsContent(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.SmsContentVo smsContentVo) throws org.apache.thrift.TException
    {
      send_deleteSmsContent(originVo, smsContentVo);
      return recv_deleteSmsContent();
    }

    public void send_deleteSmsContent(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.SmsContentVo smsContentVo) throws org.apache.thrift.TException
    {
      deleteSmsContent_args args = new deleteSmsContent_args();
      args.setOriginVo(originVo);
      args.setSmsContentVo(smsContentVo);
      sendBase("deleteSmsContent", args);
    }

    public com.froad.thrift.vo.ResultVo recv_deleteSmsContent() throws org.apache.thrift.TException
    {
      deleteSmsContent_result result = new deleteSmsContent_result();
      receiveBase(result, "deleteSmsContent");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteSmsContent failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo updateSmsContent(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.SmsContentVo smsContentVo) throws org.apache.thrift.TException
    {
      send_updateSmsContent(originVo, smsContentVo);
      return recv_updateSmsContent();
    }

    public void send_updateSmsContent(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.SmsContentVo smsContentVo) throws org.apache.thrift.TException
    {
      updateSmsContent_args args = new updateSmsContent_args();
      args.setOriginVo(originVo);
      args.setSmsContentVo(smsContentVo);
      sendBase("updateSmsContent", args);
    }

    public com.froad.thrift.vo.ResultVo recv_updateSmsContent() throws org.apache.thrift.TException
    {
      updateSmsContent_result result = new updateSmsContent_result();
      receiveBase(result, "updateSmsContent");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateSmsContent failed: unknown result");
    }

    public List<com.froad.thrift.vo.SmsContentVo> getSmsContent(com.froad.thrift.vo.SmsContentVo smsContentVo) throws org.apache.thrift.TException
    {
      send_getSmsContent(smsContentVo);
      return recv_getSmsContent();
    }

    public void send_getSmsContent(com.froad.thrift.vo.SmsContentVo smsContentVo) throws org.apache.thrift.TException
    {
      getSmsContent_args args = new getSmsContent_args();
      args.setSmsContentVo(smsContentVo);
      sendBase("getSmsContent", args);
    }

    public List<com.froad.thrift.vo.SmsContentVo> recv_getSmsContent() throws org.apache.thrift.TException
    {
      getSmsContent_result result = new getSmsContent_result();
      receiveBase(result, "getSmsContent");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getSmsContent failed: unknown result");
    }

    public com.froad.thrift.vo.SmsContentPageVoRes getSmsContentByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.SmsContentVo smsContentVo) throws org.apache.thrift.TException
    {
      send_getSmsContentByPage(page, smsContentVo);
      return recv_getSmsContentByPage();
    }

    public void send_getSmsContentByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.SmsContentVo smsContentVo) throws org.apache.thrift.TException
    {
      getSmsContentByPage_args args = new getSmsContentByPage_args();
      args.setPage(page);
      args.setSmsContentVo(smsContentVo);
      sendBase("getSmsContentByPage", args);
    }

    public com.froad.thrift.vo.SmsContentPageVoRes recv_getSmsContentByPage() throws org.apache.thrift.TException
    {
      getSmsContentByPage_result result = new getSmsContentByPage_result();
      receiveBase(result, "getSmsContentByPage");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getSmsContentByPage failed: unknown result");
    }

    public com.froad.thrift.vo.SmsContentVo getSmsContentByClientIdAndType(String clientId, int smsType) throws org.apache.thrift.TException
    {
      send_getSmsContentByClientIdAndType(clientId, smsType);
      return recv_getSmsContentByClientIdAndType();
    }

    public void send_getSmsContentByClientIdAndType(String clientId, int smsType) throws org.apache.thrift.TException
    {
      getSmsContentByClientIdAndType_args args = new getSmsContentByClientIdAndType_args();
      args.setClientId(clientId);
      args.setSmsType(smsType);
      sendBase("getSmsContentByClientIdAndType", args);
    }

    public com.froad.thrift.vo.SmsContentVo recv_getSmsContentByClientIdAndType() throws org.apache.thrift.TException
    {
      getSmsContentByClientIdAndType_result result = new getSmsContentByClientIdAndType_result();
      receiveBase(result, "getSmsContentByClientIdAndType");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getSmsContentByClientIdAndType failed: unknown result");
    }

  }
  public static class AsyncClient extends com.froad.thrift.monitor.service.BizMonitorService.AsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void addSmsContent(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.SmsContentVo smsContentVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addSmsContent_call method_call = new addSmsContent_call(originVo, smsContentVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addSmsContent_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.OriginVo originVo;
      private com.froad.thrift.vo.SmsContentVo smsContentVo;
      public addSmsContent_call(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.SmsContentVo smsContentVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.originVo = originVo;
        this.smsContentVo = smsContentVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addSmsContent", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addSmsContent_args args = new addSmsContent_args();
        args.setOriginVo(originVo);
        args.setSmsContentVo(smsContentVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.AddResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addSmsContent();
      }
    }

    public void deleteSmsContent(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.SmsContentVo smsContentVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteSmsContent_call method_call = new deleteSmsContent_call(originVo, smsContentVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteSmsContent_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.OriginVo originVo;
      private com.froad.thrift.vo.SmsContentVo smsContentVo;
      public deleteSmsContent_call(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.SmsContentVo smsContentVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.originVo = originVo;
        this.smsContentVo = smsContentVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteSmsContent", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteSmsContent_args args = new deleteSmsContent_args();
        args.setOriginVo(originVo);
        args.setSmsContentVo(smsContentVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteSmsContent();
      }
    }

    public void updateSmsContent(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.SmsContentVo smsContentVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateSmsContent_call method_call = new updateSmsContent_call(originVo, smsContentVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateSmsContent_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.OriginVo originVo;
      private com.froad.thrift.vo.SmsContentVo smsContentVo;
      public updateSmsContent_call(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.SmsContentVo smsContentVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.originVo = originVo;
        this.smsContentVo = smsContentVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateSmsContent", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateSmsContent_args args = new updateSmsContent_args();
        args.setOriginVo(originVo);
        args.setSmsContentVo(smsContentVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateSmsContent();
      }
    }

    public void getSmsContent(com.froad.thrift.vo.SmsContentVo smsContentVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getSmsContent_call method_call = new getSmsContent_call(smsContentVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getSmsContent_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.SmsContentVo smsContentVo;
      public getSmsContent_call(com.froad.thrift.vo.SmsContentVo smsContentVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.smsContentVo = smsContentVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getSmsContent", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getSmsContent_args args = new getSmsContent_args();
        args.setSmsContentVo(smsContentVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.froad.thrift.vo.SmsContentVo> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getSmsContent();
      }
    }

    public void getSmsContentByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.SmsContentVo smsContentVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getSmsContentByPage_call method_call = new getSmsContentByPage_call(page, smsContentVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getSmsContentByPage_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.PageVo page;
      private com.froad.thrift.vo.SmsContentVo smsContentVo;
      public getSmsContentByPage_call(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.SmsContentVo smsContentVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.page = page;
        this.smsContentVo = smsContentVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getSmsContentByPage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getSmsContentByPage_args args = new getSmsContentByPage_args();
        args.setPage(page);
        args.setSmsContentVo(smsContentVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.SmsContentPageVoRes getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getSmsContentByPage();
      }
    }

    public void getSmsContentByClientIdAndType(String clientId, int smsType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getSmsContentByClientIdAndType_call method_call = new getSmsContentByClientIdAndType_call(clientId, smsType, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getSmsContentByClientIdAndType_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String clientId;
      private int smsType;
      public getSmsContentByClientIdAndType_call(String clientId, int smsType, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.clientId = clientId;
        this.smsType = smsType;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getSmsContentByClientIdAndType", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getSmsContentByClientIdAndType_args args = new getSmsContentByClientIdAndType_args();
        args.setClientId(clientId);
        args.setSmsType(smsType);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.SmsContentVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getSmsContentByClientIdAndType();
      }
    }

  }

  public static class Processor<I extends Iface> extends com.froad.thrift.monitor.service.BizMonitorService.Processor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("addSmsContent", new addSmsContent());
      processMap.put("deleteSmsContent", new deleteSmsContent());
      processMap.put("updateSmsContent", new updateSmsContent());
      processMap.put("getSmsContent", new getSmsContent());
      processMap.put("getSmsContentByPage", new getSmsContentByPage());
      processMap.put("getSmsContentByClientIdAndType", new getSmsContentByClientIdAndType());
      return processMap;
    }

    public static class addSmsContent<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addSmsContent_args> {
      public addSmsContent() {
        super("addSmsContent");
      }

      public addSmsContent_args getEmptyArgsInstance() {
        return new addSmsContent_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addSmsContent_result getResult(I iface, addSmsContent_args args) throws org.apache.thrift.TException {
        addSmsContent_result result = new addSmsContent_result();
        result.success = iface.addSmsContent(args.originVo, args.smsContentVo);
        return result;
      }
    }

    public static class deleteSmsContent<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteSmsContent_args> {
      public deleteSmsContent() {
        super("deleteSmsContent");
      }

      public deleteSmsContent_args getEmptyArgsInstance() {
        return new deleteSmsContent_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteSmsContent_result getResult(I iface, deleteSmsContent_args args) throws org.apache.thrift.TException {
        deleteSmsContent_result result = new deleteSmsContent_result();
        result.success = iface.deleteSmsContent(args.originVo, args.smsContentVo);
        return result;
      }
    }

    public static class updateSmsContent<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateSmsContent_args> {
      public updateSmsContent() {
        super("updateSmsContent");
      }

      public updateSmsContent_args getEmptyArgsInstance() {
        return new updateSmsContent_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateSmsContent_result getResult(I iface, updateSmsContent_args args) throws org.apache.thrift.TException {
        updateSmsContent_result result = new updateSmsContent_result();
        result.success = iface.updateSmsContent(args.originVo, args.smsContentVo);
        return result;
      }
    }

    public static class getSmsContent<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getSmsContent_args> {
      public getSmsContent() {
        super("getSmsContent");
      }

      public getSmsContent_args getEmptyArgsInstance() {
        return new getSmsContent_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getSmsContent_result getResult(I iface, getSmsContent_args args) throws org.apache.thrift.TException {
        getSmsContent_result result = new getSmsContent_result();
        result.success = iface.getSmsContent(args.smsContentVo);
        return result;
      }
    }

    public static class getSmsContentByPage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getSmsContentByPage_args> {
      public getSmsContentByPage() {
        super("getSmsContentByPage");
      }

      public getSmsContentByPage_args getEmptyArgsInstance() {
        return new getSmsContentByPage_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getSmsContentByPage_result getResult(I iface, getSmsContentByPage_args args) throws org.apache.thrift.TException {
        getSmsContentByPage_result result = new getSmsContentByPage_result();
        result.success = iface.getSmsContentByPage(args.page, args.smsContentVo);
        return result;
      }
    }

    public static class getSmsContentByClientIdAndType<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getSmsContentByClientIdAndType_args> {
      public getSmsContentByClientIdAndType() {
        super("getSmsContentByClientIdAndType");
      }

      public getSmsContentByClientIdAndType_args getEmptyArgsInstance() {
        return new getSmsContentByClientIdAndType_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getSmsContentByClientIdAndType_result getResult(I iface, getSmsContentByClientIdAndType_args args) throws org.apache.thrift.TException {
        getSmsContentByClientIdAndType_result result = new getSmsContentByClientIdAndType_result();
        result.success = iface.getSmsContentByClientIdAndType(args.clientId, args.smsType);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends com.froad.thrift.monitor.service.BizMonitorService.AsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("addSmsContent", new addSmsContent());
      processMap.put("deleteSmsContent", new deleteSmsContent());
      processMap.put("updateSmsContent", new updateSmsContent());
      processMap.put("getSmsContent", new getSmsContent());
      processMap.put("getSmsContentByPage", new getSmsContentByPage());
      processMap.put("getSmsContentByClientIdAndType", new getSmsContentByClientIdAndType());
      return processMap;
    }

    public static class addSmsContent<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addSmsContent_args, com.froad.thrift.vo.AddResultVo> {
      public addSmsContent() {
        super("addSmsContent");
      }

      public addSmsContent_args getEmptyArgsInstance() {
        return new addSmsContent_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.AddResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.AddResultVo>() { 
          public void onComplete(com.froad.thrift.vo.AddResultVo o) {
            addSmsContent_result result = new addSmsContent_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addSmsContent_result result = new addSmsContent_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addSmsContent_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.AddResultVo> resultHandler) throws TException {
        iface.addSmsContent(args.originVo, args.smsContentVo,resultHandler);
      }
    }

    public static class deleteSmsContent<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteSmsContent_args, com.froad.thrift.vo.ResultVo> {
      public deleteSmsContent() {
        super("deleteSmsContent");
      }

      public deleteSmsContent_args getEmptyArgsInstance() {
        return new deleteSmsContent_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            deleteSmsContent_result result = new deleteSmsContent_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteSmsContent_result result = new deleteSmsContent_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteSmsContent_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.deleteSmsContent(args.originVo, args.smsContentVo,resultHandler);
      }
    }

    public static class updateSmsContent<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateSmsContent_args, com.froad.thrift.vo.ResultVo> {
      public updateSmsContent() {
        super("updateSmsContent");
      }

      public updateSmsContent_args getEmptyArgsInstance() {
        return new updateSmsContent_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            updateSmsContent_result result = new updateSmsContent_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateSmsContent_result result = new updateSmsContent_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateSmsContent_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.updateSmsContent(args.originVo, args.smsContentVo,resultHandler);
      }
    }

    public static class getSmsContent<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getSmsContent_args, List<com.froad.thrift.vo.SmsContentVo>> {
      public getSmsContent() {
        super("getSmsContent");
      }

      public getSmsContent_args getEmptyArgsInstance() {
        return new getSmsContent_args();
      }

      public AsyncMethodCallback<List<com.froad.thrift.vo.SmsContentVo>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.froad.thrift.vo.SmsContentVo>>() { 
          public void onComplete(List<com.froad.thrift.vo.SmsContentVo> o) {
            getSmsContent_result result = new getSmsContent_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getSmsContent_result result = new getSmsContent_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getSmsContent_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.froad.thrift.vo.SmsContentVo>> resultHandler) throws TException {
        iface.getSmsContent(args.smsContentVo,resultHandler);
      }
    }

    public static class getSmsContentByPage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getSmsContentByPage_args, com.froad.thrift.vo.SmsContentPageVoRes> {
      public getSmsContentByPage() {
        super("getSmsContentByPage");
      }

      public getSmsContentByPage_args getEmptyArgsInstance() {
        return new getSmsContentByPage_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.SmsContentPageVoRes> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.SmsContentPageVoRes>() { 
          public void onComplete(com.froad.thrift.vo.SmsContentPageVoRes o) {
            getSmsContentByPage_result result = new getSmsContentByPage_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getSmsContentByPage_result result = new getSmsContentByPage_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getSmsContentByPage_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.SmsContentPageVoRes> resultHandler) throws TException {
        iface.getSmsContentByPage(args.page, args.smsContentVo,resultHandler);
      }
    }

    public static class getSmsContentByClientIdAndType<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getSmsContentByClientIdAndType_args, com.froad.thrift.vo.SmsContentVo> {
      public getSmsContentByClientIdAndType() {
        super("getSmsContentByClientIdAndType");
      }

      public getSmsContentByClientIdAndType_args getEmptyArgsInstance() {
        return new getSmsContentByClientIdAndType_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.SmsContentVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.SmsContentVo>() { 
          public void onComplete(com.froad.thrift.vo.SmsContentVo o) {
            getSmsContentByClientIdAndType_result result = new getSmsContentByClientIdAndType_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getSmsContentByClientIdAndType_result result = new getSmsContentByClientIdAndType_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getSmsContentByClientIdAndType_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.SmsContentVo> resultHandler) throws TException {
        iface.getSmsContentByClientIdAndType(args.clientId, args.smsType,resultHandler);
      }
    }

  }

  public static class addSmsContent_args implements org.apache.thrift.TBase<addSmsContent_args, addSmsContent_args._Fields>, java.io.Serializable, Cloneable, Comparable<addSmsContent_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addSmsContent_args");

    private static final org.apache.thrift.protocol.TField ORIGIN_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("originVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField SMS_CONTENT_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("smsContentVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addSmsContent_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addSmsContent_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OriginVo originVo; // required
    public com.froad.thrift.vo.SmsContentVo smsContentVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORIGIN_VO((short)1, "originVo"),
      SMS_CONTENT_VO((short)2, "smsContentVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORIGIN_VO
            return ORIGIN_VO;
          case 2: // SMS_CONTENT_VO
            return SMS_CONTENT_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORIGIN_VO, new org.apache.thrift.meta_data.FieldMetaData("originVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OriginVo.class)));
      tmpMap.put(_Fields.SMS_CONTENT_VO, new org.apache.thrift.meta_data.FieldMetaData("smsContentVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.SmsContentVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addSmsContent_args.class, metaDataMap);
    }

    public addSmsContent_args() {
    }

    public addSmsContent_args(
      com.froad.thrift.vo.OriginVo originVo,
      com.froad.thrift.vo.SmsContentVo smsContentVo)
    {
      this();
      this.originVo = originVo;
      this.smsContentVo = smsContentVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addSmsContent_args(addSmsContent_args other) {
      if (other.isSetOriginVo()) {
        this.originVo = new com.froad.thrift.vo.OriginVo(other.originVo);
      }
      if (other.isSetSmsContentVo()) {
        this.smsContentVo = new com.froad.thrift.vo.SmsContentVo(other.smsContentVo);
      }
    }

    public addSmsContent_args deepCopy() {
      return new addSmsContent_args(this);
    }

    @Override
    public void clear() {
      this.originVo = null;
      this.smsContentVo = null;
    }

    public com.froad.thrift.vo.OriginVo getOriginVo() {
      return this.originVo;
    }

    public addSmsContent_args setOriginVo(com.froad.thrift.vo.OriginVo originVo) {
      this.originVo = originVo;
      return this;
    }

    public void unsetOriginVo() {
      this.originVo = null;
    }

    /** Returns true if field originVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginVo() {
      return this.originVo != null;
    }

    public void setOriginVoIsSet(boolean value) {
      if (!value) {
        this.originVo = null;
      }
    }

    public com.froad.thrift.vo.SmsContentVo getSmsContentVo() {
      return this.smsContentVo;
    }

    public addSmsContent_args setSmsContentVo(com.froad.thrift.vo.SmsContentVo smsContentVo) {
      this.smsContentVo = smsContentVo;
      return this;
    }

    public void unsetSmsContentVo() {
      this.smsContentVo = null;
    }

    /** Returns true if field smsContentVo is set (has been assigned a value) and false otherwise */
    public boolean isSetSmsContentVo() {
      return this.smsContentVo != null;
    }

    public void setSmsContentVoIsSet(boolean value) {
      if (!value) {
        this.smsContentVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORIGIN_VO:
        if (value == null) {
          unsetOriginVo();
        } else {
          setOriginVo((com.froad.thrift.vo.OriginVo)value);
        }
        break;

      case SMS_CONTENT_VO:
        if (value == null) {
          unsetSmsContentVo();
        } else {
          setSmsContentVo((com.froad.thrift.vo.SmsContentVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORIGIN_VO:
        return getOriginVo();

      case SMS_CONTENT_VO:
        return getSmsContentVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORIGIN_VO:
        return isSetOriginVo();
      case SMS_CONTENT_VO:
        return isSetSmsContentVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addSmsContent_args)
        return this.equals((addSmsContent_args)that);
      return false;
    }

    public boolean equals(addSmsContent_args that) {
      if (that == null)
        return false;

      boolean this_present_originVo = true && this.isSetOriginVo();
      boolean that_present_originVo = true && that.isSetOriginVo();
      if (this_present_originVo || that_present_originVo) {
        if (!(this_present_originVo && that_present_originVo))
          return false;
        if (!this.originVo.equals(that.originVo))
          return false;
      }

      boolean this_present_smsContentVo = true && this.isSetSmsContentVo();
      boolean that_present_smsContentVo = true && that.isSetSmsContentVo();
      if (this_present_smsContentVo || that_present_smsContentVo) {
        if (!(this_present_smsContentVo && that_present_smsContentVo))
          return false;
        if (!this.smsContentVo.equals(that.smsContentVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_originVo = true && (isSetOriginVo());
      list.add(present_originVo);
      if (present_originVo)
        list.add(originVo);

      boolean present_smsContentVo = true && (isSetSmsContentVo());
      list.add(present_smsContentVo);
      if (present_smsContentVo)
        list.add(smsContentVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(addSmsContent_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOriginVo()).compareTo(other.isSetOriginVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originVo, other.originVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSmsContentVo()).compareTo(other.isSetSmsContentVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSmsContentVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.smsContentVo, other.smsContentVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addSmsContent_args(");
      boolean first = true;

      sb.append("originVo:");
      if (this.originVo == null) {
        sb.append("null");
      } else {
        sb.append(this.originVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("smsContentVo:");
      if (this.smsContentVo == null) {
        sb.append("null");
      } else {
        sb.append(this.smsContentVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (originVo != null) {
        originVo.validate();
      }
      if (smsContentVo != null) {
        smsContentVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addSmsContent_argsStandardSchemeFactory implements SchemeFactory {
      public addSmsContent_argsStandardScheme getScheme() {
        return new addSmsContent_argsStandardScheme();
      }
    }

    private static class addSmsContent_argsStandardScheme extends StandardScheme<addSmsContent_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addSmsContent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORIGIN_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.originVo = new com.froad.thrift.vo.OriginVo();
                struct.originVo.read(iprot);
                struct.setOriginVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SMS_CONTENT_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.smsContentVo = new com.froad.thrift.vo.SmsContentVo();
                struct.smsContentVo.read(iprot);
                struct.setSmsContentVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addSmsContent_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.originVo != null) {
          oprot.writeFieldBegin(ORIGIN_VO_FIELD_DESC);
          struct.originVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.smsContentVo != null) {
          oprot.writeFieldBegin(SMS_CONTENT_VO_FIELD_DESC);
          struct.smsContentVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addSmsContent_argsTupleSchemeFactory implements SchemeFactory {
      public addSmsContent_argsTupleScheme getScheme() {
        return new addSmsContent_argsTupleScheme();
      }
    }

    private static class addSmsContent_argsTupleScheme extends TupleScheme<addSmsContent_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addSmsContent_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOriginVo()) {
          optionals.set(0);
        }
        if (struct.isSetSmsContentVo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOriginVo()) {
          struct.originVo.write(oprot);
        }
        if (struct.isSetSmsContentVo()) {
          struct.smsContentVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addSmsContent_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.originVo = new com.froad.thrift.vo.OriginVo();
          struct.originVo.read(iprot);
          struct.setOriginVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.smsContentVo = new com.froad.thrift.vo.SmsContentVo();
          struct.smsContentVo.read(iprot);
          struct.setSmsContentVoIsSet(true);
        }
      }
    }

  }

  public static class addSmsContent_result implements org.apache.thrift.TBase<addSmsContent_result, addSmsContent_result._Fields>, java.io.Serializable, Cloneable, Comparable<addSmsContent_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addSmsContent_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addSmsContent_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addSmsContent_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.AddResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.AddResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addSmsContent_result.class, metaDataMap);
    }

    public addSmsContent_result() {
    }

    public addSmsContent_result(
      com.froad.thrift.vo.AddResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addSmsContent_result(addSmsContent_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.AddResultVo(other.success);
      }
    }

    public addSmsContent_result deepCopy() {
      return new addSmsContent_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.AddResultVo getSuccess() {
      return this.success;
    }

    public addSmsContent_result setSuccess(com.froad.thrift.vo.AddResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.AddResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addSmsContent_result)
        return this.equals((addSmsContent_result)that);
      return false;
    }

    public boolean equals(addSmsContent_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(addSmsContent_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addSmsContent_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addSmsContent_resultStandardSchemeFactory implements SchemeFactory {
      public addSmsContent_resultStandardScheme getScheme() {
        return new addSmsContent_resultStandardScheme();
      }
    }

    private static class addSmsContent_resultStandardScheme extends StandardScheme<addSmsContent_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addSmsContent_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.AddResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addSmsContent_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addSmsContent_resultTupleSchemeFactory implements SchemeFactory {
      public addSmsContent_resultTupleScheme getScheme() {
        return new addSmsContent_resultTupleScheme();
      }
    }

    private static class addSmsContent_resultTupleScheme extends TupleScheme<addSmsContent_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addSmsContent_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addSmsContent_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.AddResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class deleteSmsContent_args implements org.apache.thrift.TBase<deleteSmsContent_args, deleteSmsContent_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteSmsContent_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteSmsContent_args");

    private static final org.apache.thrift.protocol.TField ORIGIN_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("originVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField SMS_CONTENT_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("smsContentVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteSmsContent_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteSmsContent_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OriginVo originVo; // required
    public com.froad.thrift.vo.SmsContentVo smsContentVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORIGIN_VO((short)1, "originVo"),
      SMS_CONTENT_VO((short)2, "smsContentVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORIGIN_VO
            return ORIGIN_VO;
          case 2: // SMS_CONTENT_VO
            return SMS_CONTENT_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORIGIN_VO, new org.apache.thrift.meta_data.FieldMetaData("originVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OriginVo.class)));
      tmpMap.put(_Fields.SMS_CONTENT_VO, new org.apache.thrift.meta_data.FieldMetaData("smsContentVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.SmsContentVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteSmsContent_args.class, metaDataMap);
    }

    public deleteSmsContent_args() {
    }

    public deleteSmsContent_args(
      com.froad.thrift.vo.OriginVo originVo,
      com.froad.thrift.vo.SmsContentVo smsContentVo)
    {
      this();
      this.originVo = originVo;
      this.smsContentVo = smsContentVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteSmsContent_args(deleteSmsContent_args other) {
      if (other.isSetOriginVo()) {
        this.originVo = new com.froad.thrift.vo.OriginVo(other.originVo);
      }
      if (other.isSetSmsContentVo()) {
        this.smsContentVo = new com.froad.thrift.vo.SmsContentVo(other.smsContentVo);
      }
    }

    public deleteSmsContent_args deepCopy() {
      return new deleteSmsContent_args(this);
    }

    @Override
    public void clear() {
      this.originVo = null;
      this.smsContentVo = null;
    }

    public com.froad.thrift.vo.OriginVo getOriginVo() {
      return this.originVo;
    }

    public deleteSmsContent_args setOriginVo(com.froad.thrift.vo.OriginVo originVo) {
      this.originVo = originVo;
      return this;
    }

    public void unsetOriginVo() {
      this.originVo = null;
    }

    /** Returns true if field originVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginVo() {
      return this.originVo != null;
    }

    public void setOriginVoIsSet(boolean value) {
      if (!value) {
        this.originVo = null;
      }
    }

    public com.froad.thrift.vo.SmsContentVo getSmsContentVo() {
      return this.smsContentVo;
    }

    public deleteSmsContent_args setSmsContentVo(com.froad.thrift.vo.SmsContentVo smsContentVo) {
      this.smsContentVo = smsContentVo;
      return this;
    }

    public void unsetSmsContentVo() {
      this.smsContentVo = null;
    }

    /** Returns true if field smsContentVo is set (has been assigned a value) and false otherwise */
    public boolean isSetSmsContentVo() {
      return this.smsContentVo != null;
    }

    public void setSmsContentVoIsSet(boolean value) {
      if (!value) {
        this.smsContentVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORIGIN_VO:
        if (value == null) {
          unsetOriginVo();
        } else {
          setOriginVo((com.froad.thrift.vo.OriginVo)value);
        }
        break;

      case SMS_CONTENT_VO:
        if (value == null) {
          unsetSmsContentVo();
        } else {
          setSmsContentVo((com.froad.thrift.vo.SmsContentVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORIGIN_VO:
        return getOriginVo();

      case SMS_CONTENT_VO:
        return getSmsContentVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORIGIN_VO:
        return isSetOriginVo();
      case SMS_CONTENT_VO:
        return isSetSmsContentVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteSmsContent_args)
        return this.equals((deleteSmsContent_args)that);
      return false;
    }

    public boolean equals(deleteSmsContent_args that) {
      if (that == null)
        return false;

      boolean this_present_originVo = true && this.isSetOriginVo();
      boolean that_present_originVo = true && that.isSetOriginVo();
      if (this_present_originVo || that_present_originVo) {
        if (!(this_present_originVo && that_present_originVo))
          return false;
        if (!this.originVo.equals(that.originVo))
          return false;
      }

      boolean this_present_smsContentVo = true && this.isSetSmsContentVo();
      boolean that_present_smsContentVo = true && that.isSetSmsContentVo();
      if (this_present_smsContentVo || that_present_smsContentVo) {
        if (!(this_present_smsContentVo && that_present_smsContentVo))
          return false;
        if (!this.smsContentVo.equals(that.smsContentVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_originVo = true && (isSetOriginVo());
      list.add(present_originVo);
      if (present_originVo)
        list.add(originVo);

      boolean present_smsContentVo = true && (isSetSmsContentVo());
      list.add(present_smsContentVo);
      if (present_smsContentVo)
        list.add(smsContentVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteSmsContent_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOriginVo()).compareTo(other.isSetOriginVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originVo, other.originVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSmsContentVo()).compareTo(other.isSetSmsContentVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSmsContentVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.smsContentVo, other.smsContentVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteSmsContent_args(");
      boolean first = true;

      sb.append("originVo:");
      if (this.originVo == null) {
        sb.append("null");
      } else {
        sb.append(this.originVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("smsContentVo:");
      if (this.smsContentVo == null) {
        sb.append("null");
      } else {
        sb.append(this.smsContentVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (originVo != null) {
        originVo.validate();
      }
      if (smsContentVo != null) {
        smsContentVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteSmsContent_argsStandardSchemeFactory implements SchemeFactory {
      public deleteSmsContent_argsStandardScheme getScheme() {
        return new deleteSmsContent_argsStandardScheme();
      }
    }

    private static class deleteSmsContent_argsStandardScheme extends StandardScheme<deleteSmsContent_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteSmsContent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORIGIN_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.originVo = new com.froad.thrift.vo.OriginVo();
                struct.originVo.read(iprot);
                struct.setOriginVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SMS_CONTENT_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.smsContentVo = new com.froad.thrift.vo.SmsContentVo();
                struct.smsContentVo.read(iprot);
                struct.setSmsContentVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteSmsContent_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.originVo != null) {
          oprot.writeFieldBegin(ORIGIN_VO_FIELD_DESC);
          struct.originVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.smsContentVo != null) {
          oprot.writeFieldBegin(SMS_CONTENT_VO_FIELD_DESC);
          struct.smsContentVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteSmsContent_argsTupleSchemeFactory implements SchemeFactory {
      public deleteSmsContent_argsTupleScheme getScheme() {
        return new deleteSmsContent_argsTupleScheme();
      }
    }

    private static class deleteSmsContent_argsTupleScheme extends TupleScheme<deleteSmsContent_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteSmsContent_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOriginVo()) {
          optionals.set(0);
        }
        if (struct.isSetSmsContentVo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOriginVo()) {
          struct.originVo.write(oprot);
        }
        if (struct.isSetSmsContentVo()) {
          struct.smsContentVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteSmsContent_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.originVo = new com.froad.thrift.vo.OriginVo();
          struct.originVo.read(iprot);
          struct.setOriginVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.smsContentVo = new com.froad.thrift.vo.SmsContentVo();
          struct.smsContentVo.read(iprot);
          struct.setSmsContentVoIsSet(true);
        }
      }
    }

  }

  public static class deleteSmsContent_result implements org.apache.thrift.TBase<deleteSmsContent_result, deleteSmsContent_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteSmsContent_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteSmsContent_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteSmsContent_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteSmsContent_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteSmsContent_result.class, metaDataMap);
    }

    public deleteSmsContent_result() {
    }

    public deleteSmsContent_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteSmsContent_result(deleteSmsContent_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public deleteSmsContent_result deepCopy() {
      return new deleteSmsContent_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public deleteSmsContent_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteSmsContent_result)
        return this.equals((deleteSmsContent_result)that);
      return false;
    }

    public boolean equals(deleteSmsContent_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteSmsContent_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteSmsContent_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteSmsContent_resultStandardSchemeFactory implements SchemeFactory {
      public deleteSmsContent_resultStandardScheme getScheme() {
        return new deleteSmsContent_resultStandardScheme();
      }
    }

    private static class deleteSmsContent_resultStandardScheme extends StandardScheme<deleteSmsContent_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteSmsContent_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteSmsContent_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteSmsContent_resultTupleSchemeFactory implements SchemeFactory {
      public deleteSmsContent_resultTupleScheme getScheme() {
        return new deleteSmsContent_resultTupleScheme();
      }
    }

    private static class deleteSmsContent_resultTupleScheme extends TupleScheme<deleteSmsContent_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteSmsContent_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteSmsContent_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateSmsContent_args implements org.apache.thrift.TBase<updateSmsContent_args, updateSmsContent_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateSmsContent_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateSmsContent_args");

    private static final org.apache.thrift.protocol.TField ORIGIN_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("originVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField SMS_CONTENT_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("smsContentVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateSmsContent_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateSmsContent_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OriginVo originVo; // required
    public com.froad.thrift.vo.SmsContentVo smsContentVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORIGIN_VO((short)1, "originVo"),
      SMS_CONTENT_VO((short)2, "smsContentVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORIGIN_VO
            return ORIGIN_VO;
          case 2: // SMS_CONTENT_VO
            return SMS_CONTENT_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORIGIN_VO, new org.apache.thrift.meta_data.FieldMetaData("originVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OriginVo.class)));
      tmpMap.put(_Fields.SMS_CONTENT_VO, new org.apache.thrift.meta_data.FieldMetaData("smsContentVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.SmsContentVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateSmsContent_args.class, metaDataMap);
    }

    public updateSmsContent_args() {
    }

    public updateSmsContent_args(
      com.froad.thrift.vo.OriginVo originVo,
      com.froad.thrift.vo.SmsContentVo smsContentVo)
    {
      this();
      this.originVo = originVo;
      this.smsContentVo = smsContentVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateSmsContent_args(updateSmsContent_args other) {
      if (other.isSetOriginVo()) {
        this.originVo = new com.froad.thrift.vo.OriginVo(other.originVo);
      }
      if (other.isSetSmsContentVo()) {
        this.smsContentVo = new com.froad.thrift.vo.SmsContentVo(other.smsContentVo);
      }
    }

    public updateSmsContent_args deepCopy() {
      return new updateSmsContent_args(this);
    }

    @Override
    public void clear() {
      this.originVo = null;
      this.smsContentVo = null;
    }

    public com.froad.thrift.vo.OriginVo getOriginVo() {
      return this.originVo;
    }

    public updateSmsContent_args setOriginVo(com.froad.thrift.vo.OriginVo originVo) {
      this.originVo = originVo;
      return this;
    }

    public void unsetOriginVo() {
      this.originVo = null;
    }

    /** Returns true if field originVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginVo() {
      return this.originVo != null;
    }

    public void setOriginVoIsSet(boolean value) {
      if (!value) {
        this.originVo = null;
      }
    }

    public com.froad.thrift.vo.SmsContentVo getSmsContentVo() {
      return this.smsContentVo;
    }

    public updateSmsContent_args setSmsContentVo(com.froad.thrift.vo.SmsContentVo smsContentVo) {
      this.smsContentVo = smsContentVo;
      return this;
    }

    public void unsetSmsContentVo() {
      this.smsContentVo = null;
    }

    /** Returns true if field smsContentVo is set (has been assigned a value) and false otherwise */
    public boolean isSetSmsContentVo() {
      return this.smsContentVo != null;
    }

    public void setSmsContentVoIsSet(boolean value) {
      if (!value) {
        this.smsContentVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORIGIN_VO:
        if (value == null) {
          unsetOriginVo();
        } else {
          setOriginVo((com.froad.thrift.vo.OriginVo)value);
        }
        break;

      case SMS_CONTENT_VO:
        if (value == null) {
          unsetSmsContentVo();
        } else {
          setSmsContentVo((com.froad.thrift.vo.SmsContentVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORIGIN_VO:
        return getOriginVo();

      case SMS_CONTENT_VO:
        return getSmsContentVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORIGIN_VO:
        return isSetOriginVo();
      case SMS_CONTENT_VO:
        return isSetSmsContentVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateSmsContent_args)
        return this.equals((updateSmsContent_args)that);
      return false;
    }

    public boolean equals(updateSmsContent_args that) {
      if (that == null)
        return false;

      boolean this_present_originVo = true && this.isSetOriginVo();
      boolean that_present_originVo = true && that.isSetOriginVo();
      if (this_present_originVo || that_present_originVo) {
        if (!(this_present_originVo && that_present_originVo))
          return false;
        if (!this.originVo.equals(that.originVo))
          return false;
      }

      boolean this_present_smsContentVo = true && this.isSetSmsContentVo();
      boolean that_present_smsContentVo = true && that.isSetSmsContentVo();
      if (this_present_smsContentVo || that_present_smsContentVo) {
        if (!(this_present_smsContentVo && that_present_smsContentVo))
          return false;
        if (!this.smsContentVo.equals(that.smsContentVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_originVo = true && (isSetOriginVo());
      list.add(present_originVo);
      if (present_originVo)
        list.add(originVo);

      boolean present_smsContentVo = true && (isSetSmsContentVo());
      list.add(present_smsContentVo);
      if (present_smsContentVo)
        list.add(smsContentVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateSmsContent_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOriginVo()).compareTo(other.isSetOriginVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originVo, other.originVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSmsContentVo()).compareTo(other.isSetSmsContentVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSmsContentVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.smsContentVo, other.smsContentVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateSmsContent_args(");
      boolean first = true;

      sb.append("originVo:");
      if (this.originVo == null) {
        sb.append("null");
      } else {
        sb.append(this.originVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("smsContentVo:");
      if (this.smsContentVo == null) {
        sb.append("null");
      } else {
        sb.append(this.smsContentVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (originVo != null) {
        originVo.validate();
      }
      if (smsContentVo != null) {
        smsContentVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateSmsContent_argsStandardSchemeFactory implements SchemeFactory {
      public updateSmsContent_argsStandardScheme getScheme() {
        return new updateSmsContent_argsStandardScheme();
      }
    }

    private static class updateSmsContent_argsStandardScheme extends StandardScheme<updateSmsContent_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateSmsContent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORIGIN_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.originVo = new com.froad.thrift.vo.OriginVo();
                struct.originVo.read(iprot);
                struct.setOriginVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SMS_CONTENT_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.smsContentVo = new com.froad.thrift.vo.SmsContentVo();
                struct.smsContentVo.read(iprot);
                struct.setSmsContentVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateSmsContent_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.originVo != null) {
          oprot.writeFieldBegin(ORIGIN_VO_FIELD_DESC);
          struct.originVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.smsContentVo != null) {
          oprot.writeFieldBegin(SMS_CONTENT_VO_FIELD_DESC);
          struct.smsContentVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateSmsContent_argsTupleSchemeFactory implements SchemeFactory {
      public updateSmsContent_argsTupleScheme getScheme() {
        return new updateSmsContent_argsTupleScheme();
      }
    }

    private static class updateSmsContent_argsTupleScheme extends TupleScheme<updateSmsContent_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateSmsContent_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOriginVo()) {
          optionals.set(0);
        }
        if (struct.isSetSmsContentVo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOriginVo()) {
          struct.originVo.write(oprot);
        }
        if (struct.isSetSmsContentVo()) {
          struct.smsContentVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateSmsContent_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.originVo = new com.froad.thrift.vo.OriginVo();
          struct.originVo.read(iprot);
          struct.setOriginVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.smsContentVo = new com.froad.thrift.vo.SmsContentVo();
          struct.smsContentVo.read(iprot);
          struct.setSmsContentVoIsSet(true);
        }
      }
    }

  }

  public static class updateSmsContent_result implements org.apache.thrift.TBase<updateSmsContent_result, updateSmsContent_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateSmsContent_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateSmsContent_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateSmsContent_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateSmsContent_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateSmsContent_result.class, metaDataMap);
    }

    public updateSmsContent_result() {
    }

    public updateSmsContent_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateSmsContent_result(updateSmsContent_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public updateSmsContent_result deepCopy() {
      return new updateSmsContent_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public updateSmsContent_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateSmsContent_result)
        return this.equals((updateSmsContent_result)that);
      return false;
    }

    public boolean equals(updateSmsContent_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateSmsContent_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateSmsContent_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateSmsContent_resultStandardSchemeFactory implements SchemeFactory {
      public updateSmsContent_resultStandardScheme getScheme() {
        return new updateSmsContent_resultStandardScheme();
      }
    }

    private static class updateSmsContent_resultStandardScheme extends StandardScheme<updateSmsContent_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateSmsContent_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateSmsContent_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateSmsContent_resultTupleSchemeFactory implements SchemeFactory {
      public updateSmsContent_resultTupleScheme getScheme() {
        return new updateSmsContent_resultTupleScheme();
      }
    }

    private static class updateSmsContent_resultTupleScheme extends TupleScheme<updateSmsContent_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateSmsContent_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateSmsContent_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getSmsContent_args implements org.apache.thrift.TBase<getSmsContent_args, getSmsContent_args._Fields>, java.io.Serializable, Cloneable, Comparable<getSmsContent_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSmsContent_args");

    private static final org.apache.thrift.protocol.TField SMS_CONTENT_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("smsContentVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSmsContent_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSmsContent_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.SmsContentVo smsContentVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SMS_CONTENT_VO((short)1, "smsContentVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SMS_CONTENT_VO
            return SMS_CONTENT_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SMS_CONTENT_VO, new org.apache.thrift.meta_data.FieldMetaData("smsContentVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.SmsContentVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSmsContent_args.class, metaDataMap);
    }

    public getSmsContent_args() {
    }

    public getSmsContent_args(
      com.froad.thrift.vo.SmsContentVo smsContentVo)
    {
      this();
      this.smsContentVo = smsContentVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSmsContent_args(getSmsContent_args other) {
      if (other.isSetSmsContentVo()) {
        this.smsContentVo = new com.froad.thrift.vo.SmsContentVo(other.smsContentVo);
      }
    }

    public getSmsContent_args deepCopy() {
      return new getSmsContent_args(this);
    }

    @Override
    public void clear() {
      this.smsContentVo = null;
    }

    public com.froad.thrift.vo.SmsContentVo getSmsContentVo() {
      return this.smsContentVo;
    }

    public getSmsContent_args setSmsContentVo(com.froad.thrift.vo.SmsContentVo smsContentVo) {
      this.smsContentVo = smsContentVo;
      return this;
    }

    public void unsetSmsContentVo() {
      this.smsContentVo = null;
    }

    /** Returns true if field smsContentVo is set (has been assigned a value) and false otherwise */
    public boolean isSetSmsContentVo() {
      return this.smsContentVo != null;
    }

    public void setSmsContentVoIsSet(boolean value) {
      if (!value) {
        this.smsContentVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SMS_CONTENT_VO:
        if (value == null) {
          unsetSmsContentVo();
        } else {
          setSmsContentVo((com.froad.thrift.vo.SmsContentVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SMS_CONTENT_VO:
        return getSmsContentVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SMS_CONTENT_VO:
        return isSetSmsContentVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSmsContent_args)
        return this.equals((getSmsContent_args)that);
      return false;
    }

    public boolean equals(getSmsContent_args that) {
      if (that == null)
        return false;

      boolean this_present_smsContentVo = true && this.isSetSmsContentVo();
      boolean that_present_smsContentVo = true && that.isSetSmsContentVo();
      if (this_present_smsContentVo || that_present_smsContentVo) {
        if (!(this_present_smsContentVo && that_present_smsContentVo))
          return false;
        if (!this.smsContentVo.equals(that.smsContentVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_smsContentVo = true && (isSetSmsContentVo());
      list.add(present_smsContentVo);
      if (present_smsContentVo)
        list.add(smsContentVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(getSmsContent_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSmsContentVo()).compareTo(other.isSetSmsContentVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSmsContentVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.smsContentVo, other.smsContentVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSmsContent_args(");
      boolean first = true;

      sb.append("smsContentVo:");
      if (this.smsContentVo == null) {
        sb.append("null");
      } else {
        sb.append(this.smsContentVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (smsContentVo != null) {
        smsContentVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSmsContent_argsStandardSchemeFactory implements SchemeFactory {
      public getSmsContent_argsStandardScheme getScheme() {
        return new getSmsContent_argsStandardScheme();
      }
    }

    private static class getSmsContent_argsStandardScheme extends StandardScheme<getSmsContent_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSmsContent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SMS_CONTENT_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.smsContentVo = new com.froad.thrift.vo.SmsContentVo();
                struct.smsContentVo.read(iprot);
                struct.setSmsContentVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSmsContent_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.smsContentVo != null) {
          oprot.writeFieldBegin(SMS_CONTENT_VO_FIELD_DESC);
          struct.smsContentVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSmsContent_argsTupleSchemeFactory implements SchemeFactory {
      public getSmsContent_argsTupleScheme getScheme() {
        return new getSmsContent_argsTupleScheme();
      }
    }

    private static class getSmsContent_argsTupleScheme extends TupleScheme<getSmsContent_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSmsContent_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSmsContentVo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSmsContentVo()) {
          struct.smsContentVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSmsContent_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.smsContentVo = new com.froad.thrift.vo.SmsContentVo();
          struct.smsContentVo.read(iprot);
          struct.setSmsContentVoIsSet(true);
        }
      }
    }

  }

  public static class getSmsContent_result implements org.apache.thrift.TBase<getSmsContent_result, getSmsContent_result._Fields>, java.io.Serializable, Cloneable, Comparable<getSmsContent_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSmsContent_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSmsContent_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSmsContent_resultTupleSchemeFactory());
    }

    public List<com.froad.thrift.vo.SmsContentVo> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.SmsContentVo.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSmsContent_result.class, metaDataMap);
    }

    public getSmsContent_result() {
    }

    public getSmsContent_result(
      List<com.froad.thrift.vo.SmsContentVo> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSmsContent_result(getSmsContent_result other) {
      if (other.isSetSuccess()) {
        List<com.froad.thrift.vo.SmsContentVo> __this__success = new ArrayList<com.froad.thrift.vo.SmsContentVo>(other.success.size());
        for (com.froad.thrift.vo.SmsContentVo other_element : other.success) {
          __this__success.add(new com.froad.thrift.vo.SmsContentVo(other_element));
        }
        this.success = __this__success;
      }
    }

    public getSmsContent_result deepCopy() {
      return new getSmsContent_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.froad.thrift.vo.SmsContentVo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.froad.thrift.vo.SmsContentVo elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.froad.thrift.vo.SmsContentVo>();
      }
      this.success.add(elem);
    }

    public List<com.froad.thrift.vo.SmsContentVo> getSuccess() {
      return this.success;
    }

    public getSmsContent_result setSuccess(List<com.froad.thrift.vo.SmsContentVo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.froad.thrift.vo.SmsContentVo>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSmsContent_result)
        return this.equals((getSmsContent_result)that);
      return false;
    }

    public boolean equals(getSmsContent_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getSmsContent_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSmsContent_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSmsContent_resultStandardSchemeFactory implements SchemeFactory {
      public getSmsContent_resultStandardScheme getScheme() {
        return new getSmsContent_resultStandardScheme();
      }
    }

    private static class getSmsContent_resultStandardScheme extends StandardScheme<getSmsContent_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSmsContent_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list106 = iprot.readListBegin();
                  struct.success = new ArrayList<com.froad.thrift.vo.SmsContentVo>(_list106.size);
                  com.froad.thrift.vo.SmsContentVo _elem107;
                  for (int _i108 = 0; _i108 < _list106.size; ++_i108)
                  {
                    _elem107 = new com.froad.thrift.vo.SmsContentVo();
                    _elem107.read(iprot);
                    struct.success.add(_elem107);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSmsContent_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.froad.thrift.vo.SmsContentVo _iter109 : struct.success)
            {
              _iter109.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSmsContent_resultTupleSchemeFactory implements SchemeFactory {
      public getSmsContent_resultTupleScheme getScheme() {
        return new getSmsContent_resultTupleScheme();
      }
    }

    private static class getSmsContent_resultTupleScheme extends TupleScheme<getSmsContent_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSmsContent_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.froad.thrift.vo.SmsContentVo _iter110 : struct.success)
            {
              _iter110.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSmsContent_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list111 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.froad.thrift.vo.SmsContentVo>(_list111.size);
            com.froad.thrift.vo.SmsContentVo _elem112;
            for (int _i113 = 0; _i113 < _list111.size; ++_i113)
            {
              _elem112 = new com.froad.thrift.vo.SmsContentVo();
              _elem112.read(iprot);
              struct.success.add(_elem112);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getSmsContentByPage_args implements org.apache.thrift.TBase<getSmsContentByPage_args, getSmsContentByPage_args._Fields>, java.io.Serializable, Cloneable, Comparable<getSmsContentByPage_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSmsContentByPage_args");

    private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField SMS_CONTENT_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("smsContentVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSmsContentByPage_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSmsContentByPage_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.PageVo page; // required
    public com.froad.thrift.vo.SmsContentVo smsContentVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PAGE((short)1, "page"),
      SMS_CONTENT_VO((short)2, "smsContentVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PAGE
            return PAGE;
          case 2: // SMS_CONTENT_VO
            return SMS_CONTENT_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.PageVo.class)));
      tmpMap.put(_Fields.SMS_CONTENT_VO, new org.apache.thrift.meta_data.FieldMetaData("smsContentVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.SmsContentVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSmsContentByPage_args.class, metaDataMap);
    }

    public getSmsContentByPage_args() {
    }

    public getSmsContentByPage_args(
      com.froad.thrift.vo.PageVo page,
      com.froad.thrift.vo.SmsContentVo smsContentVo)
    {
      this();
      this.page = page;
      this.smsContentVo = smsContentVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSmsContentByPage_args(getSmsContentByPage_args other) {
      if (other.isSetPage()) {
        this.page = new com.froad.thrift.vo.PageVo(other.page);
      }
      if (other.isSetSmsContentVo()) {
        this.smsContentVo = new com.froad.thrift.vo.SmsContentVo(other.smsContentVo);
      }
    }

    public getSmsContentByPage_args deepCopy() {
      return new getSmsContentByPage_args(this);
    }

    @Override
    public void clear() {
      this.page = null;
      this.smsContentVo = null;
    }

    public com.froad.thrift.vo.PageVo getPage() {
      return this.page;
    }

    public getSmsContentByPage_args setPage(com.froad.thrift.vo.PageVo page) {
      this.page = page;
      return this;
    }

    public void unsetPage() {
      this.page = null;
    }

    /** Returns true if field page is set (has been assigned a value) and false otherwise */
    public boolean isSetPage() {
      return this.page != null;
    }

    public void setPageIsSet(boolean value) {
      if (!value) {
        this.page = null;
      }
    }

    public com.froad.thrift.vo.SmsContentVo getSmsContentVo() {
      return this.smsContentVo;
    }

    public getSmsContentByPage_args setSmsContentVo(com.froad.thrift.vo.SmsContentVo smsContentVo) {
      this.smsContentVo = smsContentVo;
      return this;
    }

    public void unsetSmsContentVo() {
      this.smsContentVo = null;
    }

    /** Returns true if field smsContentVo is set (has been assigned a value) and false otherwise */
    public boolean isSetSmsContentVo() {
      return this.smsContentVo != null;
    }

    public void setSmsContentVoIsSet(boolean value) {
      if (!value) {
        this.smsContentVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PAGE:
        if (value == null) {
          unsetPage();
        } else {
          setPage((com.froad.thrift.vo.PageVo)value);
        }
        break;

      case SMS_CONTENT_VO:
        if (value == null) {
          unsetSmsContentVo();
        } else {
          setSmsContentVo((com.froad.thrift.vo.SmsContentVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PAGE:
        return getPage();

      case SMS_CONTENT_VO:
        return getSmsContentVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PAGE:
        return isSetPage();
      case SMS_CONTENT_VO:
        return isSetSmsContentVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSmsContentByPage_args)
        return this.equals((getSmsContentByPage_args)that);
      return false;
    }

    public boolean equals(getSmsContentByPage_args that) {
      if (that == null)
        return false;

      boolean this_present_page = true && this.isSetPage();
      boolean that_present_page = true && that.isSetPage();
      if (this_present_page || that_present_page) {
        if (!(this_present_page && that_present_page))
          return false;
        if (!this.page.equals(that.page))
          return false;
      }

      boolean this_present_smsContentVo = true && this.isSetSmsContentVo();
      boolean that_present_smsContentVo = true && that.isSetSmsContentVo();
      if (this_present_smsContentVo || that_present_smsContentVo) {
        if (!(this_present_smsContentVo && that_present_smsContentVo))
          return false;
        if (!this.smsContentVo.equals(that.smsContentVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_page = true && (isSetPage());
      list.add(present_page);
      if (present_page)
        list.add(page);

      boolean present_smsContentVo = true && (isSetSmsContentVo());
      list.add(present_smsContentVo);
      if (present_smsContentVo)
        list.add(smsContentVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(getSmsContentByPage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSmsContentVo()).compareTo(other.isSetSmsContentVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSmsContentVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.smsContentVo, other.smsContentVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSmsContentByPage_args(");
      boolean first = true;

      sb.append("page:");
      if (this.page == null) {
        sb.append("null");
      } else {
        sb.append(this.page);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("smsContentVo:");
      if (this.smsContentVo == null) {
        sb.append("null");
      } else {
        sb.append(this.smsContentVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (page != null) {
        page.validate();
      }
      if (smsContentVo != null) {
        smsContentVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSmsContentByPage_argsStandardSchemeFactory implements SchemeFactory {
      public getSmsContentByPage_argsStandardScheme getScheme() {
        return new getSmsContentByPage_argsStandardScheme();
      }
    }

    private static class getSmsContentByPage_argsStandardScheme extends StandardScheme<getSmsContentByPage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSmsContentByPage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.page = new com.froad.thrift.vo.PageVo();
                struct.page.read(iprot);
                struct.setPageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SMS_CONTENT_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.smsContentVo = new com.froad.thrift.vo.SmsContentVo();
                struct.smsContentVo.read(iprot);
                struct.setSmsContentVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSmsContentByPage_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.page != null) {
          oprot.writeFieldBegin(PAGE_FIELD_DESC);
          struct.page.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.smsContentVo != null) {
          oprot.writeFieldBegin(SMS_CONTENT_VO_FIELD_DESC);
          struct.smsContentVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSmsContentByPage_argsTupleSchemeFactory implements SchemeFactory {
      public getSmsContentByPage_argsTupleScheme getScheme() {
        return new getSmsContentByPage_argsTupleScheme();
      }
    }

    private static class getSmsContentByPage_argsTupleScheme extends TupleScheme<getSmsContentByPage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSmsContentByPage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPage()) {
          optionals.set(0);
        }
        if (struct.isSetSmsContentVo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPage()) {
          struct.page.write(oprot);
        }
        if (struct.isSetSmsContentVo()) {
          struct.smsContentVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSmsContentByPage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.page = new com.froad.thrift.vo.PageVo();
          struct.page.read(iprot);
          struct.setPageIsSet(true);
        }
        if (incoming.get(1)) {
          struct.smsContentVo = new com.froad.thrift.vo.SmsContentVo();
          struct.smsContentVo.read(iprot);
          struct.setSmsContentVoIsSet(true);
        }
      }
    }

  }

  public static class getSmsContentByPage_result implements org.apache.thrift.TBase<getSmsContentByPage_result, getSmsContentByPage_result._Fields>, java.io.Serializable, Cloneable, Comparable<getSmsContentByPage_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSmsContentByPage_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSmsContentByPage_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSmsContentByPage_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.SmsContentPageVoRes success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.SmsContentPageVoRes.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSmsContentByPage_result.class, metaDataMap);
    }

    public getSmsContentByPage_result() {
    }

    public getSmsContentByPage_result(
      com.froad.thrift.vo.SmsContentPageVoRes success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSmsContentByPage_result(getSmsContentByPage_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.SmsContentPageVoRes(other.success);
      }
    }

    public getSmsContentByPage_result deepCopy() {
      return new getSmsContentByPage_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.SmsContentPageVoRes getSuccess() {
      return this.success;
    }

    public getSmsContentByPage_result setSuccess(com.froad.thrift.vo.SmsContentPageVoRes success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.SmsContentPageVoRes)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSmsContentByPage_result)
        return this.equals((getSmsContentByPage_result)that);
      return false;
    }

    public boolean equals(getSmsContentByPage_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getSmsContentByPage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSmsContentByPage_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSmsContentByPage_resultStandardSchemeFactory implements SchemeFactory {
      public getSmsContentByPage_resultStandardScheme getScheme() {
        return new getSmsContentByPage_resultStandardScheme();
      }
    }

    private static class getSmsContentByPage_resultStandardScheme extends StandardScheme<getSmsContentByPage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSmsContentByPage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.SmsContentPageVoRes();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSmsContentByPage_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSmsContentByPage_resultTupleSchemeFactory implements SchemeFactory {
      public getSmsContentByPage_resultTupleScheme getScheme() {
        return new getSmsContentByPage_resultTupleScheme();
      }
    }

    private static class getSmsContentByPage_resultTupleScheme extends TupleScheme<getSmsContentByPage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSmsContentByPage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSmsContentByPage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.SmsContentPageVoRes();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getSmsContentByClientIdAndType_args implements org.apache.thrift.TBase<getSmsContentByClientIdAndType_args, getSmsContentByClientIdAndType_args._Fields>, java.io.Serializable, Cloneable, Comparable<getSmsContentByClientIdAndType_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSmsContentByClientIdAndType_args");

    private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SMS_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("smsType", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSmsContentByClientIdAndType_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSmsContentByClientIdAndType_argsTupleSchemeFactory());
    }

    public String clientId; // required
    public int smsType; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CLIENT_ID((short)1, "clientId"),
      SMS_TYPE((short)2, "smsType");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CLIENT_ID
            return CLIENT_ID;
          case 2: // SMS_TYPE
            return SMS_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SMSTYPE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SMS_TYPE, new org.apache.thrift.meta_data.FieldMetaData("smsType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSmsContentByClientIdAndType_args.class, metaDataMap);
    }

    public getSmsContentByClientIdAndType_args() {
    }

    public getSmsContentByClientIdAndType_args(
      String clientId,
      int smsType)
    {
      this();
      this.clientId = clientId;
      this.smsType = smsType;
      setSmsTypeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSmsContentByClientIdAndType_args(getSmsContentByClientIdAndType_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetClientId()) {
        this.clientId = other.clientId;
      }
      this.smsType = other.smsType;
    }

    public getSmsContentByClientIdAndType_args deepCopy() {
      return new getSmsContentByClientIdAndType_args(this);
    }

    @Override
    public void clear() {
      this.clientId = null;
      setSmsTypeIsSet(false);
      this.smsType = 0;
    }

    public String getClientId() {
      return this.clientId;
    }

    public getSmsContentByClientIdAndType_args setClientId(String clientId) {
      this.clientId = clientId;
      return this;
    }

    public void unsetClientId() {
      this.clientId = null;
    }

    /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
    public boolean isSetClientId() {
      return this.clientId != null;
    }

    public void setClientIdIsSet(boolean value) {
      if (!value) {
        this.clientId = null;
      }
    }

    public int getSmsType() {
      return this.smsType;
    }

    public getSmsContentByClientIdAndType_args setSmsType(int smsType) {
      this.smsType = smsType;
      setSmsTypeIsSet(true);
      return this;
    }

    public void unsetSmsType() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SMSTYPE_ISSET_ID);
    }

    /** Returns true if field smsType is set (has been assigned a value) and false otherwise */
    public boolean isSetSmsType() {
      return EncodingUtils.testBit(__isset_bitfield, __SMSTYPE_ISSET_ID);
    }

    public void setSmsTypeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SMSTYPE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CLIENT_ID:
        if (value == null) {
          unsetClientId();
        } else {
          setClientId((String)value);
        }
        break;

      case SMS_TYPE:
        if (value == null) {
          unsetSmsType();
        } else {
          setSmsType((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CLIENT_ID:
        return getClientId();

      case SMS_TYPE:
        return Integer.valueOf(getSmsType());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CLIENT_ID:
        return isSetClientId();
      case SMS_TYPE:
        return isSetSmsType();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSmsContentByClientIdAndType_args)
        return this.equals((getSmsContentByClientIdAndType_args)that);
      return false;
    }

    public boolean equals(getSmsContentByClientIdAndType_args that) {
      if (that == null)
        return false;

      boolean this_present_clientId = true && this.isSetClientId();
      boolean that_present_clientId = true && that.isSetClientId();
      if (this_present_clientId || that_present_clientId) {
        if (!(this_present_clientId && that_present_clientId))
          return false;
        if (!this.clientId.equals(that.clientId))
          return false;
      }

      boolean this_present_smsType = true;
      boolean that_present_smsType = true;
      if (this_present_smsType || that_present_smsType) {
        if (!(this_present_smsType && that_present_smsType))
          return false;
        if (this.smsType != that.smsType)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_clientId = true && (isSetClientId());
      list.add(present_clientId);
      if (present_clientId)
        list.add(clientId);

      boolean present_smsType = true;
      list.add(present_smsType);
      if (present_smsType)
        list.add(smsType);

      return list.hashCode();
    }

    @Override
    public int compareTo(getSmsContentByClientIdAndType_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSmsType()).compareTo(other.isSetSmsType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSmsType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.smsType, other.smsType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSmsContentByClientIdAndType_args(");
      boolean first = true;

      sb.append("clientId:");
      if (this.clientId == null) {
        sb.append("null");
      } else {
        sb.append(this.clientId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("smsType:");
      sb.append(this.smsType);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSmsContentByClientIdAndType_argsStandardSchemeFactory implements SchemeFactory {
      public getSmsContentByClientIdAndType_argsStandardScheme getScheme() {
        return new getSmsContentByClientIdAndType_argsStandardScheme();
      }
    }

    private static class getSmsContentByClientIdAndType_argsStandardScheme extends StandardScheme<getSmsContentByClientIdAndType_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSmsContentByClientIdAndType_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CLIENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clientId = iprot.readString();
                struct.setClientIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SMS_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.smsType = iprot.readI32();
                struct.setSmsTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSmsContentByClientIdAndType_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.clientId != null) {
          oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
          oprot.writeString(struct.clientId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(SMS_TYPE_FIELD_DESC);
        oprot.writeI32(struct.smsType);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSmsContentByClientIdAndType_argsTupleSchemeFactory implements SchemeFactory {
      public getSmsContentByClientIdAndType_argsTupleScheme getScheme() {
        return new getSmsContentByClientIdAndType_argsTupleScheme();
      }
    }

    private static class getSmsContentByClientIdAndType_argsTupleScheme extends TupleScheme<getSmsContentByClientIdAndType_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSmsContentByClientIdAndType_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetClientId()) {
          optionals.set(0);
        }
        if (struct.isSetSmsType()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetClientId()) {
          oprot.writeString(struct.clientId);
        }
        if (struct.isSetSmsType()) {
          oprot.writeI32(struct.smsType);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSmsContentByClientIdAndType_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.clientId = iprot.readString();
          struct.setClientIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.smsType = iprot.readI32();
          struct.setSmsTypeIsSet(true);
        }
      }
    }

  }

  public static class getSmsContentByClientIdAndType_result implements org.apache.thrift.TBase<getSmsContentByClientIdAndType_result, getSmsContentByClientIdAndType_result._Fields>, java.io.Serializable, Cloneable, Comparable<getSmsContentByClientIdAndType_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSmsContentByClientIdAndType_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSmsContentByClientIdAndType_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSmsContentByClientIdAndType_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.SmsContentVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.SmsContentVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSmsContentByClientIdAndType_result.class, metaDataMap);
    }

    public getSmsContentByClientIdAndType_result() {
    }

    public getSmsContentByClientIdAndType_result(
      com.froad.thrift.vo.SmsContentVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSmsContentByClientIdAndType_result(getSmsContentByClientIdAndType_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.SmsContentVo(other.success);
      }
    }

    public getSmsContentByClientIdAndType_result deepCopy() {
      return new getSmsContentByClientIdAndType_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.SmsContentVo getSuccess() {
      return this.success;
    }

    public getSmsContentByClientIdAndType_result setSuccess(com.froad.thrift.vo.SmsContentVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.SmsContentVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSmsContentByClientIdAndType_result)
        return this.equals((getSmsContentByClientIdAndType_result)that);
      return false;
    }

    public boolean equals(getSmsContentByClientIdAndType_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getSmsContentByClientIdAndType_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSmsContentByClientIdAndType_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSmsContentByClientIdAndType_resultStandardSchemeFactory implements SchemeFactory {
      public getSmsContentByClientIdAndType_resultStandardScheme getScheme() {
        return new getSmsContentByClientIdAndType_resultStandardScheme();
      }
    }

    private static class getSmsContentByClientIdAndType_resultStandardScheme extends StandardScheme<getSmsContentByClientIdAndType_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSmsContentByClientIdAndType_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.SmsContentVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSmsContentByClientIdAndType_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSmsContentByClientIdAndType_resultTupleSchemeFactory implements SchemeFactory {
      public getSmsContentByClientIdAndType_resultTupleScheme getScheme() {
        return new getSmsContentByClientIdAndType_resultTupleScheme();
      }
    }

    private static class getSmsContentByClientIdAndType_resultTupleScheme extends TupleScheme<getSmsContentByClientIdAndType_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSmsContentByClientIdAndType_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSmsContentByClientIdAndType_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.SmsContentVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
