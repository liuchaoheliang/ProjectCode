/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class ActiveRuleInfoService {

  /**
   * 营销活动规则信息 服务
   */
  public interface Iface extends com.froad.thrift.monitor.service.BizMonitorService.Iface {

    /**
     * 增加 ActiveRuleInfo
     * 
     * @param originVo
     * @param activeRuleInfoVo
     */
    public com.froad.thrift.vo.active.AddResultVo addActiveRuleInfo(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.active.ActiveRuleInfoVo activeRuleInfoVo) throws org.apache.thrift.TException;

    /**
     * 禁用 ActiveRuleInfo
     * 
     * @param originVo
     * @param clientId
     * @param activeId
     * @param operator
     */
    public com.froad.thrift.vo.ResultVo disableActiveRuleInfo(com.froad.thrift.vo.OriginVo originVo, String clientId, String activeId, String operator) throws org.apache.thrift.TException;

    /**
     * 修改 ActiveRuleInfo
     * 
     * @param originVo
     * @param activeRuleInfoVo
     */
    public com.froad.thrift.vo.ResultVo updateActiveRuleInfo(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.active.ActiveRuleInfoVo activeRuleInfoVo) throws org.apache.thrift.TException;

    /**
     * 查询 ActiveRuleInfo 列表
     * 
     * @param activeRuleInfoVo
     */
    public com.froad.thrift.vo.active.FindAllActiveRuleInfoVoResultVo getActiveRuleInfo(com.froad.thrift.vo.active.ActiveRuleInfoVo activeRuleInfoVo) throws org.apache.thrift.TException;

    /**
     * 分页查询 ActiveRuleInfo
     * 
     * @param page
     * @param activeRuleInfoVo
     */
    public com.froad.thrift.vo.active.FindPageActiveRuleInfoVoResultVo getActiveRuleInfoByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.active.ActiveRuleInfoVo activeRuleInfoVo) throws org.apache.thrift.TException;

    /**
     * 查询 ActiveRuleInfo 单个
     * 
     * @param clientId
     * @param activeId
     */
    public com.froad.thrift.vo.active.FindActiveRuleInfoVoResultVo getActiveRuleInfoById(String clientId, String activeId) throws org.apache.thrift.TException;

    /**
     * 下载活动URL
     * 
     * @param activeRuleInfoVo
     */
    public com.froad.thrift.vo.active.ExportActiveOrderInfoRes exportActiveOrderInfoUrl(com.froad.thrift.vo.active.ActiveRuleInfoVo activeRuleInfoVo) throws org.apache.thrift.TException;

  }

  public interface AsyncIface extends com.froad.thrift.monitor.service.BizMonitorService .AsyncIface {

    public void addActiveRuleInfo(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.active.ActiveRuleInfoVo activeRuleInfoVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void disableActiveRuleInfo(com.froad.thrift.vo.OriginVo originVo, String clientId, String activeId, String operator, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateActiveRuleInfo(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.active.ActiveRuleInfoVo activeRuleInfoVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getActiveRuleInfo(com.froad.thrift.vo.active.ActiveRuleInfoVo activeRuleInfoVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getActiveRuleInfoByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.active.ActiveRuleInfoVo activeRuleInfoVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getActiveRuleInfoById(String clientId, String activeId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void exportActiveOrderInfoUrl(com.froad.thrift.vo.active.ActiveRuleInfoVo activeRuleInfoVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends com.froad.thrift.monitor.service.BizMonitorService.Client implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public com.froad.thrift.vo.active.AddResultVo addActiveRuleInfo(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.active.ActiveRuleInfoVo activeRuleInfoVo) throws org.apache.thrift.TException
    {
      send_addActiveRuleInfo(originVo, activeRuleInfoVo);
      return recv_addActiveRuleInfo();
    }

    public void send_addActiveRuleInfo(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.active.ActiveRuleInfoVo activeRuleInfoVo) throws org.apache.thrift.TException
    {
      addActiveRuleInfo_args args = new addActiveRuleInfo_args();
      args.setOriginVo(originVo);
      args.setActiveRuleInfoVo(activeRuleInfoVo);
      sendBase("addActiveRuleInfo", args);
    }

    public com.froad.thrift.vo.active.AddResultVo recv_addActiveRuleInfo() throws org.apache.thrift.TException
    {
      addActiveRuleInfo_result result = new addActiveRuleInfo_result();
      receiveBase(result, "addActiveRuleInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addActiveRuleInfo failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo disableActiveRuleInfo(com.froad.thrift.vo.OriginVo originVo, String clientId, String activeId, String operator) throws org.apache.thrift.TException
    {
      send_disableActiveRuleInfo(originVo, clientId, activeId, operator);
      return recv_disableActiveRuleInfo();
    }

    public void send_disableActiveRuleInfo(com.froad.thrift.vo.OriginVo originVo, String clientId, String activeId, String operator) throws org.apache.thrift.TException
    {
      disableActiveRuleInfo_args args = new disableActiveRuleInfo_args();
      args.setOriginVo(originVo);
      args.setClientId(clientId);
      args.setActiveId(activeId);
      args.setOperator(operator);
      sendBase("disableActiveRuleInfo", args);
    }

    public com.froad.thrift.vo.ResultVo recv_disableActiveRuleInfo() throws org.apache.thrift.TException
    {
      disableActiveRuleInfo_result result = new disableActiveRuleInfo_result();
      receiveBase(result, "disableActiveRuleInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "disableActiveRuleInfo failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo updateActiveRuleInfo(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.active.ActiveRuleInfoVo activeRuleInfoVo) throws org.apache.thrift.TException
    {
      send_updateActiveRuleInfo(originVo, activeRuleInfoVo);
      return recv_updateActiveRuleInfo();
    }

    public void send_updateActiveRuleInfo(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.active.ActiveRuleInfoVo activeRuleInfoVo) throws org.apache.thrift.TException
    {
      updateActiveRuleInfo_args args = new updateActiveRuleInfo_args();
      args.setOriginVo(originVo);
      args.setActiveRuleInfoVo(activeRuleInfoVo);
      sendBase("updateActiveRuleInfo", args);
    }

    public com.froad.thrift.vo.ResultVo recv_updateActiveRuleInfo() throws org.apache.thrift.TException
    {
      updateActiveRuleInfo_result result = new updateActiveRuleInfo_result();
      receiveBase(result, "updateActiveRuleInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateActiveRuleInfo failed: unknown result");
    }

    public com.froad.thrift.vo.active.FindAllActiveRuleInfoVoResultVo getActiveRuleInfo(com.froad.thrift.vo.active.ActiveRuleInfoVo activeRuleInfoVo) throws org.apache.thrift.TException
    {
      send_getActiveRuleInfo(activeRuleInfoVo);
      return recv_getActiveRuleInfo();
    }

    public void send_getActiveRuleInfo(com.froad.thrift.vo.active.ActiveRuleInfoVo activeRuleInfoVo) throws org.apache.thrift.TException
    {
      getActiveRuleInfo_args args = new getActiveRuleInfo_args();
      args.setActiveRuleInfoVo(activeRuleInfoVo);
      sendBase("getActiveRuleInfo", args);
    }

    public com.froad.thrift.vo.active.FindAllActiveRuleInfoVoResultVo recv_getActiveRuleInfo() throws org.apache.thrift.TException
    {
      getActiveRuleInfo_result result = new getActiveRuleInfo_result();
      receiveBase(result, "getActiveRuleInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getActiveRuleInfo failed: unknown result");
    }

    public com.froad.thrift.vo.active.FindPageActiveRuleInfoVoResultVo getActiveRuleInfoByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.active.ActiveRuleInfoVo activeRuleInfoVo) throws org.apache.thrift.TException
    {
      send_getActiveRuleInfoByPage(page, activeRuleInfoVo);
      return recv_getActiveRuleInfoByPage();
    }

    public void send_getActiveRuleInfoByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.active.ActiveRuleInfoVo activeRuleInfoVo) throws org.apache.thrift.TException
    {
      getActiveRuleInfoByPage_args args = new getActiveRuleInfoByPage_args();
      args.setPage(page);
      args.setActiveRuleInfoVo(activeRuleInfoVo);
      sendBase("getActiveRuleInfoByPage", args);
    }

    public com.froad.thrift.vo.active.FindPageActiveRuleInfoVoResultVo recv_getActiveRuleInfoByPage() throws org.apache.thrift.TException
    {
      getActiveRuleInfoByPage_result result = new getActiveRuleInfoByPage_result();
      receiveBase(result, "getActiveRuleInfoByPage");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getActiveRuleInfoByPage failed: unknown result");
    }

    public com.froad.thrift.vo.active.FindActiveRuleInfoVoResultVo getActiveRuleInfoById(String clientId, String activeId) throws org.apache.thrift.TException
    {
      send_getActiveRuleInfoById(clientId, activeId);
      return recv_getActiveRuleInfoById();
    }

    public void send_getActiveRuleInfoById(String clientId, String activeId) throws org.apache.thrift.TException
    {
      getActiveRuleInfoById_args args = new getActiveRuleInfoById_args();
      args.setClientId(clientId);
      args.setActiveId(activeId);
      sendBase("getActiveRuleInfoById", args);
    }

    public com.froad.thrift.vo.active.FindActiveRuleInfoVoResultVo recv_getActiveRuleInfoById() throws org.apache.thrift.TException
    {
      getActiveRuleInfoById_result result = new getActiveRuleInfoById_result();
      receiveBase(result, "getActiveRuleInfoById");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getActiveRuleInfoById failed: unknown result");
    }

    public com.froad.thrift.vo.active.ExportActiveOrderInfoRes exportActiveOrderInfoUrl(com.froad.thrift.vo.active.ActiveRuleInfoVo activeRuleInfoVo) throws org.apache.thrift.TException
    {
      send_exportActiveOrderInfoUrl(activeRuleInfoVo);
      return recv_exportActiveOrderInfoUrl();
    }

    public void send_exportActiveOrderInfoUrl(com.froad.thrift.vo.active.ActiveRuleInfoVo activeRuleInfoVo) throws org.apache.thrift.TException
    {
      exportActiveOrderInfoUrl_args args = new exportActiveOrderInfoUrl_args();
      args.setActiveRuleInfoVo(activeRuleInfoVo);
      sendBase("exportActiveOrderInfoUrl", args);
    }

    public com.froad.thrift.vo.active.ExportActiveOrderInfoRes recv_exportActiveOrderInfoUrl() throws org.apache.thrift.TException
    {
      exportActiveOrderInfoUrl_result result = new exportActiveOrderInfoUrl_result();
      receiveBase(result, "exportActiveOrderInfoUrl");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "exportActiveOrderInfoUrl failed: unknown result");
    }

  }
  public static class AsyncClient extends com.froad.thrift.monitor.service.BizMonitorService.AsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void addActiveRuleInfo(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.active.ActiveRuleInfoVo activeRuleInfoVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addActiveRuleInfo_call method_call = new addActiveRuleInfo_call(originVo, activeRuleInfoVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addActiveRuleInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.OriginVo originVo;
      private com.froad.thrift.vo.active.ActiveRuleInfoVo activeRuleInfoVo;
      public addActiveRuleInfo_call(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.active.ActiveRuleInfoVo activeRuleInfoVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.originVo = originVo;
        this.activeRuleInfoVo = activeRuleInfoVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addActiveRuleInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addActiveRuleInfo_args args = new addActiveRuleInfo_args();
        args.setOriginVo(originVo);
        args.setActiveRuleInfoVo(activeRuleInfoVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.active.AddResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addActiveRuleInfo();
      }
    }

    public void disableActiveRuleInfo(com.froad.thrift.vo.OriginVo originVo, String clientId, String activeId, String operator, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      disableActiveRuleInfo_call method_call = new disableActiveRuleInfo_call(originVo, clientId, activeId, operator, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class disableActiveRuleInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.OriginVo originVo;
      private String clientId;
      private String activeId;
      private String operator;
      public disableActiveRuleInfo_call(com.froad.thrift.vo.OriginVo originVo, String clientId, String activeId, String operator, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.originVo = originVo;
        this.clientId = clientId;
        this.activeId = activeId;
        this.operator = operator;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("disableActiveRuleInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        disableActiveRuleInfo_args args = new disableActiveRuleInfo_args();
        args.setOriginVo(originVo);
        args.setClientId(clientId);
        args.setActiveId(activeId);
        args.setOperator(operator);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_disableActiveRuleInfo();
      }
    }

    public void updateActiveRuleInfo(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.active.ActiveRuleInfoVo activeRuleInfoVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateActiveRuleInfo_call method_call = new updateActiveRuleInfo_call(originVo, activeRuleInfoVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateActiveRuleInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.OriginVo originVo;
      private com.froad.thrift.vo.active.ActiveRuleInfoVo activeRuleInfoVo;
      public updateActiveRuleInfo_call(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.active.ActiveRuleInfoVo activeRuleInfoVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.originVo = originVo;
        this.activeRuleInfoVo = activeRuleInfoVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateActiveRuleInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateActiveRuleInfo_args args = new updateActiveRuleInfo_args();
        args.setOriginVo(originVo);
        args.setActiveRuleInfoVo(activeRuleInfoVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateActiveRuleInfo();
      }
    }

    public void getActiveRuleInfo(com.froad.thrift.vo.active.ActiveRuleInfoVo activeRuleInfoVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getActiveRuleInfo_call method_call = new getActiveRuleInfo_call(activeRuleInfoVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getActiveRuleInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.active.ActiveRuleInfoVo activeRuleInfoVo;
      public getActiveRuleInfo_call(com.froad.thrift.vo.active.ActiveRuleInfoVo activeRuleInfoVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.activeRuleInfoVo = activeRuleInfoVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getActiveRuleInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getActiveRuleInfo_args args = new getActiveRuleInfo_args();
        args.setActiveRuleInfoVo(activeRuleInfoVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.active.FindAllActiveRuleInfoVoResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getActiveRuleInfo();
      }
    }

    public void getActiveRuleInfoByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.active.ActiveRuleInfoVo activeRuleInfoVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getActiveRuleInfoByPage_call method_call = new getActiveRuleInfoByPage_call(page, activeRuleInfoVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getActiveRuleInfoByPage_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.PageVo page;
      private com.froad.thrift.vo.active.ActiveRuleInfoVo activeRuleInfoVo;
      public getActiveRuleInfoByPage_call(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.active.ActiveRuleInfoVo activeRuleInfoVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.page = page;
        this.activeRuleInfoVo = activeRuleInfoVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getActiveRuleInfoByPage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getActiveRuleInfoByPage_args args = new getActiveRuleInfoByPage_args();
        args.setPage(page);
        args.setActiveRuleInfoVo(activeRuleInfoVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.active.FindPageActiveRuleInfoVoResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getActiveRuleInfoByPage();
      }
    }

    public void getActiveRuleInfoById(String clientId, String activeId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getActiveRuleInfoById_call method_call = new getActiveRuleInfoById_call(clientId, activeId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getActiveRuleInfoById_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String clientId;
      private String activeId;
      public getActiveRuleInfoById_call(String clientId, String activeId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.clientId = clientId;
        this.activeId = activeId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getActiveRuleInfoById", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getActiveRuleInfoById_args args = new getActiveRuleInfoById_args();
        args.setClientId(clientId);
        args.setActiveId(activeId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.active.FindActiveRuleInfoVoResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getActiveRuleInfoById();
      }
    }

    public void exportActiveOrderInfoUrl(com.froad.thrift.vo.active.ActiveRuleInfoVo activeRuleInfoVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      exportActiveOrderInfoUrl_call method_call = new exportActiveOrderInfoUrl_call(activeRuleInfoVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class exportActiveOrderInfoUrl_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.active.ActiveRuleInfoVo activeRuleInfoVo;
      public exportActiveOrderInfoUrl_call(com.froad.thrift.vo.active.ActiveRuleInfoVo activeRuleInfoVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.activeRuleInfoVo = activeRuleInfoVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("exportActiveOrderInfoUrl", org.apache.thrift.protocol.TMessageType.CALL, 0));
        exportActiveOrderInfoUrl_args args = new exportActiveOrderInfoUrl_args();
        args.setActiveRuleInfoVo(activeRuleInfoVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.active.ExportActiveOrderInfoRes getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_exportActiveOrderInfoUrl();
      }
    }

  }

  public static class Processor<I extends Iface> extends com.froad.thrift.monitor.service.BizMonitorService.Processor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("addActiveRuleInfo", new addActiveRuleInfo());
      processMap.put("disableActiveRuleInfo", new disableActiveRuleInfo());
      processMap.put("updateActiveRuleInfo", new updateActiveRuleInfo());
      processMap.put("getActiveRuleInfo", new getActiveRuleInfo());
      processMap.put("getActiveRuleInfoByPage", new getActiveRuleInfoByPage());
      processMap.put("getActiveRuleInfoById", new getActiveRuleInfoById());
      processMap.put("exportActiveOrderInfoUrl", new exportActiveOrderInfoUrl());
      return processMap;
    }

    public static class addActiveRuleInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addActiveRuleInfo_args> {
      public addActiveRuleInfo() {
        super("addActiveRuleInfo");
      }

      public addActiveRuleInfo_args getEmptyArgsInstance() {
        return new addActiveRuleInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addActiveRuleInfo_result getResult(I iface, addActiveRuleInfo_args args) throws org.apache.thrift.TException {
        addActiveRuleInfo_result result = new addActiveRuleInfo_result();
        result.success = iface.addActiveRuleInfo(args.originVo, args.activeRuleInfoVo);
        return result;
      }
    }

    public static class disableActiveRuleInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, disableActiveRuleInfo_args> {
      public disableActiveRuleInfo() {
        super("disableActiveRuleInfo");
      }

      public disableActiveRuleInfo_args getEmptyArgsInstance() {
        return new disableActiveRuleInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public disableActiveRuleInfo_result getResult(I iface, disableActiveRuleInfo_args args) throws org.apache.thrift.TException {
        disableActiveRuleInfo_result result = new disableActiveRuleInfo_result();
        result.success = iface.disableActiveRuleInfo(args.originVo, args.clientId, args.activeId, args.operator);
        return result;
      }
    }

    public static class updateActiveRuleInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateActiveRuleInfo_args> {
      public updateActiveRuleInfo() {
        super("updateActiveRuleInfo");
      }

      public updateActiveRuleInfo_args getEmptyArgsInstance() {
        return new updateActiveRuleInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateActiveRuleInfo_result getResult(I iface, updateActiveRuleInfo_args args) throws org.apache.thrift.TException {
        updateActiveRuleInfo_result result = new updateActiveRuleInfo_result();
        result.success = iface.updateActiveRuleInfo(args.originVo, args.activeRuleInfoVo);
        return result;
      }
    }

    public static class getActiveRuleInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getActiveRuleInfo_args> {
      public getActiveRuleInfo() {
        super("getActiveRuleInfo");
      }

      public getActiveRuleInfo_args getEmptyArgsInstance() {
        return new getActiveRuleInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getActiveRuleInfo_result getResult(I iface, getActiveRuleInfo_args args) throws org.apache.thrift.TException {
        getActiveRuleInfo_result result = new getActiveRuleInfo_result();
        result.success = iface.getActiveRuleInfo(args.activeRuleInfoVo);
        return result;
      }
    }

    public static class getActiveRuleInfoByPage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getActiveRuleInfoByPage_args> {
      public getActiveRuleInfoByPage() {
        super("getActiveRuleInfoByPage");
      }

      public getActiveRuleInfoByPage_args getEmptyArgsInstance() {
        return new getActiveRuleInfoByPage_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getActiveRuleInfoByPage_result getResult(I iface, getActiveRuleInfoByPage_args args) throws org.apache.thrift.TException {
        getActiveRuleInfoByPage_result result = new getActiveRuleInfoByPage_result();
        result.success = iface.getActiveRuleInfoByPage(args.page, args.activeRuleInfoVo);
        return result;
      }
    }

    public static class getActiveRuleInfoById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getActiveRuleInfoById_args> {
      public getActiveRuleInfoById() {
        super("getActiveRuleInfoById");
      }

      public getActiveRuleInfoById_args getEmptyArgsInstance() {
        return new getActiveRuleInfoById_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getActiveRuleInfoById_result getResult(I iface, getActiveRuleInfoById_args args) throws org.apache.thrift.TException {
        getActiveRuleInfoById_result result = new getActiveRuleInfoById_result();
        result.success = iface.getActiveRuleInfoById(args.clientId, args.activeId);
        return result;
      }
    }

    public static class exportActiveOrderInfoUrl<I extends Iface> extends org.apache.thrift.ProcessFunction<I, exportActiveOrderInfoUrl_args> {
      public exportActiveOrderInfoUrl() {
        super("exportActiveOrderInfoUrl");
      }

      public exportActiveOrderInfoUrl_args getEmptyArgsInstance() {
        return new exportActiveOrderInfoUrl_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public exportActiveOrderInfoUrl_result getResult(I iface, exportActiveOrderInfoUrl_args args) throws org.apache.thrift.TException {
        exportActiveOrderInfoUrl_result result = new exportActiveOrderInfoUrl_result();
        result.success = iface.exportActiveOrderInfoUrl(args.activeRuleInfoVo);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends com.froad.thrift.monitor.service.BizMonitorService.AsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("addActiveRuleInfo", new addActiveRuleInfo());
      processMap.put("disableActiveRuleInfo", new disableActiveRuleInfo());
      processMap.put("updateActiveRuleInfo", new updateActiveRuleInfo());
      processMap.put("getActiveRuleInfo", new getActiveRuleInfo());
      processMap.put("getActiveRuleInfoByPage", new getActiveRuleInfoByPage());
      processMap.put("getActiveRuleInfoById", new getActiveRuleInfoById());
      processMap.put("exportActiveOrderInfoUrl", new exportActiveOrderInfoUrl());
      return processMap;
    }

    public static class addActiveRuleInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addActiveRuleInfo_args, com.froad.thrift.vo.active.AddResultVo> {
      public addActiveRuleInfo() {
        super("addActiveRuleInfo");
      }

      public addActiveRuleInfo_args getEmptyArgsInstance() {
        return new addActiveRuleInfo_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.active.AddResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.active.AddResultVo>() { 
          public void onComplete(com.froad.thrift.vo.active.AddResultVo o) {
            addActiveRuleInfo_result result = new addActiveRuleInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addActiveRuleInfo_result result = new addActiveRuleInfo_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addActiveRuleInfo_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.active.AddResultVo> resultHandler) throws TException {
        iface.addActiveRuleInfo(args.originVo, args.activeRuleInfoVo,resultHandler);
      }
    }

    public static class disableActiveRuleInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, disableActiveRuleInfo_args, com.froad.thrift.vo.ResultVo> {
      public disableActiveRuleInfo() {
        super("disableActiveRuleInfo");
      }

      public disableActiveRuleInfo_args getEmptyArgsInstance() {
        return new disableActiveRuleInfo_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            disableActiveRuleInfo_result result = new disableActiveRuleInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            disableActiveRuleInfo_result result = new disableActiveRuleInfo_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, disableActiveRuleInfo_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.disableActiveRuleInfo(args.originVo, args.clientId, args.activeId, args.operator,resultHandler);
      }
    }

    public static class updateActiveRuleInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateActiveRuleInfo_args, com.froad.thrift.vo.ResultVo> {
      public updateActiveRuleInfo() {
        super("updateActiveRuleInfo");
      }

      public updateActiveRuleInfo_args getEmptyArgsInstance() {
        return new updateActiveRuleInfo_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            updateActiveRuleInfo_result result = new updateActiveRuleInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateActiveRuleInfo_result result = new updateActiveRuleInfo_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateActiveRuleInfo_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.updateActiveRuleInfo(args.originVo, args.activeRuleInfoVo,resultHandler);
      }
    }

    public static class getActiveRuleInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getActiveRuleInfo_args, com.froad.thrift.vo.active.FindAllActiveRuleInfoVoResultVo> {
      public getActiveRuleInfo() {
        super("getActiveRuleInfo");
      }

      public getActiveRuleInfo_args getEmptyArgsInstance() {
        return new getActiveRuleInfo_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.active.FindAllActiveRuleInfoVoResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.active.FindAllActiveRuleInfoVoResultVo>() { 
          public void onComplete(com.froad.thrift.vo.active.FindAllActiveRuleInfoVoResultVo o) {
            getActiveRuleInfo_result result = new getActiveRuleInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getActiveRuleInfo_result result = new getActiveRuleInfo_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getActiveRuleInfo_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.active.FindAllActiveRuleInfoVoResultVo> resultHandler) throws TException {
        iface.getActiveRuleInfo(args.activeRuleInfoVo,resultHandler);
      }
    }

    public static class getActiveRuleInfoByPage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getActiveRuleInfoByPage_args, com.froad.thrift.vo.active.FindPageActiveRuleInfoVoResultVo> {
      public getActiveRuleInfoByPage() {
        super("getActiveRuleInfoByPage");
      }

      public getActiveRuleInfoByPage_args getEmptyArgsInstance() {
        return new getActiveRuleInfoByPage_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.active.FindPageActiveRuleInfoVoResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.active.FindPageActiveRuleInfoVoResultVo>() { 
          public void onComplete(com.froad.thrift.vo.active.FindPageActiveRuleInfoVoResultVo o) {
            getActiveRuleInfoByPage_result result = new getActiveRuleInfoByPage_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getActiveRuleInfoByPage_result result = new getActiveRuleInfoByPage_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getActiveRuleInfoByPage_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.active.FindPageActiveRuleInfoVoResultVo> resultHandler) throws TException {
        iface.getActiveRuleInfoByPage(args.page, args.activeRuleInfoVo,resultHandler);
      }
    }

    public static class getActiveRuleInfoById<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getActiveRuleInfoById_args, com.froad.thrift.vo.active.FindActiveRuleInfoVoResultVo> {
      public getActiveRuleInfoById() {
        super("getActiveRuleInfoById");
      }

      public getActiveRuleInfoById_args getEmptyArgsInstance() {
        return new getActiveRuleInfoById_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.active.FindActiveRuleInfoVoResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.active.FindActiveRuleInfoVoResultVo>() { 
          public void onComplete(com.froad.thrift.vo.active.FindActiveRuleInfoVoResultVo o) {
            getActiveRuleInfoById_result result = new getActiveRuleInfoById_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getActiveRuleInfoById_result result = new getActiveRuleInfoById_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getActiveRuleInfoById_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.active.FindActiveRuleInfoVoResultVo> resultHandler) throws TException {
        iface.getActiveRuleInfoById(args.clientId, args.activeId,resultHandler);
      }
    }

    public static class exportActiveOrderInfoUrl<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, exportActiveOrderInfoUrl_args, com.froad.thrift.vo.active.ExportActiveOrderInfoRes> {
      public exportActiveOrderInfoUrl() {
        super("exportActiveOrderInfoUrl");
      }

      public exportActiveOrderInfoUrl_args getEmptyArgsInstance() {
        return new exportActiveOrderInfoUrl_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.active.ExportActiveOrderInfoRes> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.active.ExportActiveOrderInfoRes>() { 
          public void onComplete(com.froad.thrift.vo.active.ExportActiveOrderInfoRes o) {
            exportActiveOrderInfoUrl_result result = new exportActiveOrderInfoUrl_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            exportActiveOrderInfoUrl_result result = new exportActiveOrderInfoUrl_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, exportActiveOrderInfoUrl_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.active.ExportActiveOrderInfoRes> resultHandler) throws TException {
        iface.exportActiveOrderInfoUrl(args.activeRuleInfoVo,resultHandler);
      }
    }

  }

  public static class addActiveRuleInfo_args implements org.apache.thrift.TBase<addActiveRuleInfo_args, addActiveRuleInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<addActiveRuleInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addActiveRuleInfo_args");

    private static final org.apache.thrift.protocol.TField ORIGIN_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("originVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ACTIVE_RULE_INFO_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("activeRuleInfoVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addActiveRuleInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addActiveRuleInfo_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OriginVo originVo; // required
    public com.froad.thrift.vo.active.ActiveRuleInfoVo activeRuleInfoVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORIGIN_VO((short)1, "originVo"),
      ACTIVE_RULE_INFO_VO((short)2, "activeRuleInfoVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORIGIN_VO
            return ORIGIN_VO;
          case 2: // ACTIVE_RULE_INFO_VO
            return ACTIVE_RULE_INFO_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORIGIN_VO, new org.apache.thrift.meta_data.FieldMetaData("originVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OriginVo.class)));
      tmpMap.put(_Fields.ACTIVE_RULE_INFO_VO, new org.apache.thrift.meta_data.FieldMetaData("activeRuleInfoVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.active.ActiveRuleInfoVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addActiveRuleInfo_args.class, metaDataMap);
    }

    public addActiveRuleInfo_args() {
    }

    public addActiveRuleInfo_args(
      com.froad.thrift.vo.OriginVo originVo,
      com.froad.thrift.vo.active.ActiveRuleInfoVo activeRuleInfoVo)
    {
      this();
      this.originVo = originVo;
      this.activeRuleInfoVo = activeRuleInfoVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addActiveRuleInfo_args(addActiveRuleInfo_args other) {
      if (other.isSetOriginVo()) {
        this.originVo = new com.froad.thrift.vo.OriginVo(other.originVo);
      }
      if (other.isSetActiveRuleInfoVo()) {
        this.activeRuleInfoVo = new com.froad.thrift.vo.active.ActiveRuleInfoVo(other.activeRuleInfoVo);
      }
    }

    public addActiveRuleInfo_args deepCopy() {
      return new addActiveRuleInfo_args(this);
    }

    @Override
    public void clear() {
      this.originVo = null;
      this.activeRuleInfoVo = null;
    }

    public com.froad.thrift.vo.OriginVo getOriginVo() {
      return this.originVo;
    }

    public addActiveRuleInfo_args setOriginVo(com.froad.thrift.vo.OriginVo originVo) {
      this.originVo = originVo;
      return this;
    }

    public void unsetOriginVo() {
      this.originVo = null;
    }

    /** Returns true if field originVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginVo() {
      return this.originVo != null;
    }

    public void setOriginVoIsSet(boolean value) {
      if (!value) {
        this.originVo = null;
      }
    }

    public com.froad.thrift.vo.active.ActiveRuleInfoVo getActiveRuleInfoVo() {
      return this.activeRuleInfoVo;
    }

    public addActiveRuleInfo_args setActiveRuleInfoVo(com.froad.thrift.vo.active.ActiveRuleInfoVo activeRuleInfoVo) {
      this.activeRuleInfoVo = activeRuleInfoVo;
      return this;
    }

    public void unsetActiveRuleInfoVo() {
      this.activeRuleInfoVo = null;
    }

    /** Returns true if field activeRuleInfoVo is set (has been assigned a value) and false otherwise */
    public boolean isSetActiveRuleInfoVo() {
      return this.activeRuleInfoVo != null;
    }

    public void setActiveRuleInfoVoIsSet(boolean value) {
      if (!value) {
        this.activeRuleInfoVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORIGIN_VO:
        if (value == null) {
          unsetOriginVo();
        } else {
          setOriginVo((com.froad.thrift.vo.OriginVo)value);
        }
        break;

      case ACTIVE_RULE_INFO_VO:
        if (value == null) {
          unsetActiveRuleInfoVo();
        } else {
          setActiveRuleInfoVo((com.froad.thrift.vo.active.ActiveRuleInfoVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORIGIN_VO:
        return getOriginVo();

      case ACTIVE_RULE_INFO_VO:
        return getActiveRuleInfoVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORIGIN_VO:
        return isSetOriginVo();
      case ACTIVE_RULE_INFO_VO:
        return isSetActiveRuleInfoVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addActiveRuleInfo_args)
        return this.equals((addActiveRuleInfo_args)that);
      return false;
    }

    public boolean equals(addActiveRuleInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_originVo = true && this.isSetOriginVo();
      boolean that_present_originVo = true && that.isSetOriginVo();
      if (this_present_originVo || that_present_originVo) {
        if (!(this_present_originVo && that_present_originVo))
          return false;
        if (!this.originVo.equals(that.originVo))
          return false;
      }

      boolean this_present_activeRuleInfoVo = true && this.isSetActiveRuleInfoVo();
      boolean that_present_activeRuleInfoVo = true && that.isSetActiveRuleInfoVo();
      if (this_present_activeRuleInfoVo || that_present_activeRuleInfoVo) {
        if (!(this_present_activeRuleInfoVo && that_present_activeRuleInfoVo))
          return false;
        if (!this.activeRuleInfoVo.equals(that.activeRuleInfoVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_originVo = true && (isSetOriginVo());
      list.add(present_originVo);
      if (present_originVo)
        list.add(originVo);

      boolean present_activeRuleInfoVo = true && (isSetActiveRuleInfoVo());
      list.add(present_activeRuleInfoVo);
      if (present_activeRuleInfoVo)
        list.add(activeRuleInfoVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(addActiveRuleInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOriginVo()).compareTo(other.isSetOriginVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originVo, other.originVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetActiveRuleInfoVo()).compareTo(other.isSetActiveRuleInfoVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetActiveRuleInfoVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.activeRuleInfoVo, other.activeRuleInfoVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addActiveRuleInfo_args(");
      boolean first = true;

      sb.append("originVo:");
      if (this.originVo == null) {
        sb.append("null");
      } else {
        sb.append(this.originVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("activeRuleInfoVo:");
      if (this.activeRuleInfoVo == null) {
        sb.append("null");
      } else {
        sb.append(this.activeRuleInfoVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (originVo != null) {
        originVo.validate();
      }
      if (activeRuleInfoVo != null) {
        activeRuleInfoVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addActiveRuleInfo_argsStandardSchemeFactory implements SchemeFactory {
      public addActiveRuleInfo_argsStandardScheme getScheme() {
        return new addActiveRuleInfo_argsStandardScheme();
      }
    }

    private static class addActiveRuleInfo_argsStandardScheme extends StandardScheme<addActiveRuleInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addActiveRuleInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORIGIN_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.originVo = new com.froad.thrift.vo.OriginVo();
                struct.originVo.read(iprot);
                struct.setOriginVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACTIVE_RULE_INFO_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.activeRuleInfoVo = new com.froad.thrift.vo.active.ActiveRuleInfoVo();
                struct.activeRuleInfoVo.read(iprot);
                struct.setActiveRuleInfoVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addActiveRuleInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.originVo != null) {
          oprot.writeFieldBegin(ORIGIN_VO_FIELD_DESC);
          struct.originVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.activeRuleInfoVo != null) {
          oprot.writeFieldBegin(ACTIVE_RULE_INFO_VO_FIELD_DESC);
          struct.activeRuleInfoVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addActiveRuleInfo_argsTupleSchemeFactory implements SchemeFactory {
      public addActiveRuleInfo_argsTupleScheme getScheme() {
        return new addActiveRuleInfo_argsTupleScheme();
      }
    }

    private static class addActiveRuleInfo_argsTupleScheme extends TupleScheme<addActiveRuleInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addActiveRuleInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOriginVo()) {
          optionals.set(0);
        }
        if (struct.isSetActiveRuleInfoVo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOriginVo()) {
          struct.originVo.write(oprot);
        }
        if (struct.isSetActiveRuleInfoVo()) {
          struct.activeRuleInfoVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addActiveRuleInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.originVo = new com.froad.thrift.vo.OriginVo();
          struct.originVo.read(iprot);
          struct.setOriginVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.activeRuleInfoVo = new com.froad.thrift.vo.active.ActiveRuleInfoVo();
          struct.activeRuleInfoVo.read(iprot);
          struct.setActiveRuleInfoVoIsSet(true);
        }
      }
    }

  }

  public static class addActiveRuleInfo_result implements org.apache.thrift.TBase<addActiveRuleInfo_result, addActiveRuleInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<addActiveRuleInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addActiveRuleInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addActiveRuleInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addActiveRuleInfo_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.active.AddResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.active.AddResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addActiveRuleInfo_result.class, metaDataMap);
    }

    public addActiveRuleInfo_result() {
    }

    public addActiveRuleInfo_result(
      com.froad.thrift.vo.active.AddResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addActiveRuleInfo_result(addActiveRuleInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.active.AddResultVo(other.success);
      }
    }

    public addActiveRuleInfo_result deepCopy() {
      return new addActiveRuleInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.active.AddResultVo getSuccess() {
      return this.success;
    }

    public addActiveRuleInfo_result setSuccess(com.froad.thrift.vo.active.AddResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.active.AddResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addActiveRuleInfo_result)
        return this.equals((addActiveRuleInfo_result)that);
      return false;
    }

    public boolean equals(addActiveRuleInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(addActiveRuleInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addActiveRuleInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addActiveRuleInfo_resultStandardSchemeFactory implements SchemeFactory {
      public addActiveRuleInfo_resultStandardScheme getScheme() {
        return new addActiveRuleInfo_resultStandardScheme();
      }
    }

    private static class addActiveRuleInfo_resultStandardScheme extends StandardScheme<addActiveRuleInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addActiveRuleInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.active.AddResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addActiveRuleInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addActiveRuleInfo_resultTupleSchemeFactory implements SchemeFactory {
      public addActiveRuleInfo_resultTupleScheme getScheme() {
        return new addActiveRuleInfo_resultTupleScheme();
      }
    }

    private static class addActiveRuleInfo_resultTupleScheme extends TupleScheme<addActiveRuleInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addActiveRuleInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addActiveRuleInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.active.AddResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class disableActiveRuleInfo_args implements org.apache.thrift.TBase<disableActiveRuleInfo_args, disableActiveRuleInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<disableActiveRuleInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("disableActiveRuleInfo_args");

    private static final org.apache.thrift.protocol.TField ORIGIN_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("originVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField ACTIVE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("activeId", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField OPERATOR_FIELD_DESC = new org.apache.thrift.protocol.TField("operator", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new disableActiveRuleInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new disableActiveRuleInfo_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OriginVo originVo; // required
    public String clientId; // required
    public String activeId; // required
    public String operator; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORIGIN_VO((short)1, "originVo"),
      CLIENT_ID((short)2, "clientId"),
      ACTIVE_ID((short)3, "activeId"),
      OPERATOR((short)4, "operator");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORIGIN_VO
            return ORIGIN_VO;
          case 2: // CLIENT_ID
            return CLIENT_ID;
          case 3: // ACTIVE_ID
            return ACTIVE_ID;
          case 4: // OPERATOR
            return OPERATOR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORIGIN_VO, new org.apache.thrift.meta_data.FieldMetaData("originVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OriginVo.class)));
      tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ACTIVE_ID, new org.apache.thrift.meta_data.FieldMetaData("activeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.OPERATOR, new org.apache.thrift.meta_data.FieldMetaData("operator", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(disableActiveRuleInfo_args.class, metaDataMap);
    }

    public disableActiveRuleInfo_args() {
    }

    public disableActiveRuleInfo_args(
      com.froad.thrift.vo.OriginVo originVo,
      String clientId,
      String activeId,
      String operator)
    {
      this();
      this.originVo = originVo;
      this.clientId = clientId;
      this.activeId = activeId;
      this.operator = operator;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public disableActiveRuleInfo_args(disableActiveRuleInfo_args other) {
      if (other.isSetOriginVo()) {
        this.originVo = new com.froad.thrift.vo.OriginVo(other.originVo);
      }
      if (other.isSetClientId()) {
        this.clientId = other.clientId;
      }
      if (other.isSetActiveId()) {
        this.activeId = other.activeId;
      }
      if (other.isSetOperator()) {
        this.operator = other.operator;
      }
    }

    public disableActiveRuleInfo_args deepCopy() {
      return new disableActiveRuleInfo_args(this);
    }

    @Override
    public void clear() {
      this.originVo = null;
      this.clientId = null;
      this.activeId = null;
      this.operator = null;
    }

    public com.froad.thrift.vo.OriginVo getOriginVo() {
      return this.originVo;
    }

    public disableActiveRuleInfo_args setOriginVo(com.froad.thrift.vo.OriginVo originVo) {
      this.originVo = originVo;
      return this;
    }

    public void unsetOriginVo() {
      this.originVo = null;
    }

    /** Returns true if field originVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginVo() {
      return this.originVo != null;
    }

    public void setOriginVoIsSet(boolean value) {
      if (!value) {
        this.originVo = null;
      }
    }

    public String getClientId() {
      return this.clientId;
    }

    public disableActiveRuleInfo_args setClientId(String clientId) {
      this.clientId = clientId;
      return this;
    }

    public void unsetClientId() {
      this.clientId = null;
    }

    /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
    public boolean isSetClientId() {
      return this.clientId != null;
    }

    public void setClientIdIsSet(boolean value) {
      if (!value) {
        this.clientId = null;
      }
    }

    public String getActiveId() {
      return this.activeId;
    }

    public disableActiveRuleInfo_args setActiveId(String activeId) {
      this.activeId = activeId;
      return this;
    }

    public void unsetActiveId() {
      this.activeId = null;
    }

    /** Returns true if field activeId is set (has been assigned a value) and false otherwise */
    public boolean isSetActiveId() {
      return this.activeId != null;
    }

    public void setActiveIdIsSet(boolean value) {
      if (!value) {
        this.activeId = null;
      }
    }

    public String getOperator() {
      return this.operator;
    }

    public disableActiveRuleInfo_args setOperator(String operator) {
      this.operator = operator;
      return this;
    }

    public void unsetOperator() {
      this.operator = null;
    }

    /** Returns true if field operator is set (has been assigned a value) and false otherwise */
    public boolean isSetOperator() {
      return this.operator != null;
    }

    public void setOperatorIsSet(boolean value) {
      if (!value) {
        this.operator = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORIGIN_VO:
        if (value == null) {
          unsetOriginVo();
        } else {
          setOriginVo((com.froad.thrift.vo.OriginVo)value);
        }
        break;

      case CLIENT_ID:
        if (value == null) {
          unsetClientId();
        } else {
          setClientId((String)value);
        }
        break;

      case ACTIVE_ID:
        if (value == null) {
          unsetActiveId();
        } else {
          setActiveId((String)value);
        }
        break;

      case OPERATOR:
        if (value == null) {
          unsetOperator();
        } else {
          setOperator((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORIGIN_VO:
        return getOriginVo();

      case CLIENT_ID:
        return getClientId();

      case ACTIVE_ID:
        return getActiveId();

      case OPERATOR:
        return getOperator();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORIGIN_VO:
        return isSetOriginVo();
      case CLIENT_ID:
        return isSetClientId();
      case ACTIVE_ID:
        return isSetActiveId();
      case OPERATOR:
        return isSetOperator();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof disableActiveRuleInfo_args)
        return this.equals((disableActiveRuleInfo_args)that);
      return false;
    }

    public boolean equals(disableActiveRuleInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_originVo = true && this.isSetOriginVo();
      boolean that_present_originVo = true && that.isSetOriginVo();
      if (this_present_originVo || that_present_originVo) {
        if (!(this_present_originVo && that_present_originVo))
          return false;
        if (!this.originVo.equals(that.originVo))
          return false;
      }

      boolean this_present_clientId = true && this.isSetClientId();
      boolean that_present_clientId = true && that.isSetClientId();
      if (this_present_clientId || that_present_clientId) {
        if (!(this_present_clientId && that_present_clientId))
          return false;
        if (!this.clientId.equals(that.clientId))
          return false;
      }

      boolean this_present_activeId = true && this.isSetActiveId();
      boolean that_present_activeId = true && that.isSetActiveId();
      if (this_present_activeId || that_present_activeId) {
        if (!(this_present_activeId && that_present_activeId))
          return false;
        if (!this.activeId.equals(that.activeId))
          return false;
      }

      boolean this_present_operator = true && this.isSetOperator();
      boolean that_present_operator = true && that.isSetOperator();
      if (this_present_operator || that_present_operator) {
        if (!(this_present_operator && that_present_operator))
          return false;
        if (!this.operator.equals(that.operator))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_originVo = true && (isSetOriginVo());
      list.add(present_originVo);
      if (present_originVo)
        list.add(originVo);

      boolean present_clientId = true && (isSetClientId());
      list.add(present_clientId);
      if (present_clientId)
        list.add(clientId);

      boolean present_activeId = true && (isSetActiveId());
      list.add(present_activeId);
      if (present_activeId)
        list.add(activeId);

      boolean present_operator = true && (isSetOperator());
      list.add(present_operator);
      if (present_operator)
        list.add(operator);

      return list.hashCode();
    }

    @Override
    public int compareTo(disableActiveRuleInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOriginVo()).compareTo(other.isSetOriginVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originVo, other.originVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetActiveId()).compareTo(other.isSetActiveId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetActiveId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.activeId, other.activeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOperator()).compareTo(other.isSetOperator());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOperator()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operator, other.operator);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("disableActiveRuleInfo_args(");
      boolean first = true;

      sb.append("originVo:");
      if (this.originVo == null) {
        sb.append("null");
      } else {
        sb.append(this.originVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("clientId:");
      if (this.clientId == null) {
        sb.append("null");
      } else {
        sb.append(this.clientId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("activeId:");
      if (this.activeId == null) {
        sb.append("null");
      } else {
        sb.append(this.activeId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("operator:");
      if (this.operator == null) {
        sb.append("null");
      } else {
        sb.append(this.operator);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (originVo != null) {
        originVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class disableActiveRuleInfo_argsStandardSchemeFactory implements SchemeFactory {
      public disableActiveRuleInfo_argsStandardScheme getScheme() {
        return new disableActiveRuleInfo_argsStandardScheme();
      }
    }

    private static class disableActiveRuleInfo_argsStandardScheme extends StandardScheme<disableActiveRuleInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, disableActiveRuleInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORIGIN_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.originVo = new com.froad.thrift.vo.OriginVo();
                struct.originVo.read(iprot);
                struct.setOriginVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CLIENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clientId = iprot.readString();
                struct.setClientIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ACTIVE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.activeId = iprot.readString();
                struct.setActiveIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // OPERATOR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.operator = iprot.readString();
                struct.setOperatorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, disableActiveRuleInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.originVo != null) {
          oprot.writeFieldBegin(ORIGIN_VO_FIELD_DESC);
          struct.originVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.clientId != null) {
          oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
          oprot.writeString(struct.clientId);
          oprot.writeFieldEnd();
        }
        if (struct.activeId != null) {
          oprot.writeFieldBegin(ACTIVE_ID_FIELD_DESC);
          oprot.writeString(struct.activeId);
          oprot.writeFieldEnd();
        }
        if (struct.operator != null) {
          oprot.writeFieldBegin(OPERATOR_FIELD_DESC);
          oprot.writeString(struct.operator);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class disableActiveRuleInfo_argsTupleSchemeFactory implements SchemeFactory {
      public disableActiveRuleInfo_argsTupleScheme getScheme() {
        return new disableActiveRuleInfo_argsTupleScheme();
      }
    }

    private static class disableActiveRuleInfo_argsTupleScheme extends TupleScheme<disableActiveRuleInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, disableActiveRuleInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOriginVo()) {
          optionals.set(0);
        }
        if (struct.isSetClientId()) {
          optionals.set(1);
        }
        if (struct.isSetActiveId()) {
          optionals.set(2);
        }
        if (struct.isSetOperator()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetOriginVo()) {
          struct.originVo.write(oprot);
        }
        if (struct.isSetClientId()) {
          oprot.writeString(struct.clientId);
        }
        if (struct.isSetActiveId()) {
          oprot.writeString(struct.activeId);
        }
        if (struct.isSetOperator()) {
          oprot.writeString(struct.operator);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, disableActiveRuleInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.originVo = new com.froad.thrift.vo.OriginVo();
          struct.originVo.read(iprot);
          struct.setOriginVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.clientId = iprot.readString();
          struct.setClientIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.activeId = iprot.readString();
          struct.setActiveIdIsSet(true);
        }
        if (incoming.get(3)) {
          struct.operator = iprot.readString();
          struct.setOperatorIsSet(true);
        }
      }
    }

  }

  public static class disableActiveRuleInfo_result implements org.apache.thrift.TBase<disableActiveRuleInfo_result, disableActiveRuleInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<disableActiveRuleInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("disableActiveRuleInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new disableActiveRuleInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new disableActiveRuleInfo_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(disableActiveRuleInfo_result.class, metaDataMap);
    }

    public disableActiveRuleInfo_result() {
    }

    public disableActiveRuleInfo_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public disableActiveRuleInfo_result(disableActiveRuleInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public disableActiveRuleInfo_result deepCopy() {
      return new disableActiveRuleInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public disableActiveRuleInfo_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof disableActiveRuleInfo_result)
        return this.equals((disableActiveRuleInfo_result)that);
      return false;
    }

    public boolean equals(disableActiveRuleInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(disableActiveRuleInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("disableActiveRuleInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class disableActiveRuleInfo_resultStandardSchemeFactory implements SchemeFactory {
      public disableActiveRuleInfo_resultStandardScheme getScheme() {
        return new disableActiveRuleInfo_resultStandardScheme();
      }
    }

    private static class disableActiveRuleInfo_resultStandardScheme extends StandardScheme<disableActiveRuleInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, disableActiveRuleInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, disableActiveRuleInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class disableActiveRuleInfo_resultTupleSchemeFactory implements SchemeFactory {
      public disableActiveRuleInfo_resultTupleScheme getScheme() {
        return new disableActiveRuleInfo_resultTupleScheme();
      }
    }

    private static class disableActiveRuleInfo_resultTupleScheme extends TupleScheme<disableActiveRuleInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, disableActiveRuleInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, disableActiveRuleInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateActiveRuleInfo_args implements org.apache.thrift.TBase<updateActiveRuleInfo_args, updateActiveRuleInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateActiveRuleInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateActiveRuleInfo_args");

    private static final org.apache.thrift.protocol.TField ORIGIN_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("originVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ACTIVE_RULE_INFO_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("activeRuleInfoVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateActiveRuleInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateActiveRuleInfo_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OriginVo originVo; // required
    public com.froad.thrift.vo.active.ActiveRuleInfoVo activeRuleInfoVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORIGIN_VO((short)1, "originVo"),
      ACTIVE_RULE_INFO_VO((short)2, "activeRuleInfoVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORIGIN_VO
            return ORIGIN_VO;
          case 2: // ACTIVE_RULE_INFO_VO
            return ACTIVE_RULE_INFO_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORIGIN_VO, new org.apache.thrift.meta_data.FieldMetaData("originVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OriginVo.class)));
      tmpMap.put(_Fields.ACTIVE_RULE_INFO_VO, new org.apache.thrift.meta_data.FieldMetaData("activeRuleInfoVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.active.ActiveRuleInfoVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateActiveRuleInfo_args.class, metaDataMap);
    }

    public updateActiveRuleInfo_args() {
    }

    public updateActiveRuleInfo_args(
      com.froad.thrift.vo.OriginVo originVo,
      com.froad.thrift.vo.active.ActiveRuleInfoVo activeRuleInfoVo)
    {
      this();
      this.originVo = originVo;
      this.activeRuleInfoVo = activeRuleInfoVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateActiveRuleInfo_args(updateActiveRuleInfo_args other) {
      if (other.isSetOriginVo()) {
        this.originVo = new com.froad.thrift.vo.OriginVo(other.originVo);
      }
      if (other.isSetActiveRuleInfoVo()) {
        this.activeRuleInfoVo = new com.froad.thrift.vo.active.ActiveRuleInfoVo(other.activeRuleInfoVo);
      }
    }

    public updateActiveRuleInfo_args deepCopy() {
      return new updateActiveRuleInfo_args(this);
    }

    @Override
    public void clear() {
      this.originVo = null;
      this.activeRuleInfoVo = null;
    }

    public com.froad.thrift.vo.OriginVo getOriginVo() {
      return this.originVo;
    }

    public updateActiveRuleInfo_args setOriginVo(com.froad.thrift.vo.OriginVo originVo) {
      this.originVo = originVo;
      return this;
    }

    public void unsetOriginVo() {
      this.originVo = null;
    }

    /** Returns true if field originVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginVo() {
      return this.originVo != null;
    }

    public void setOriginVoIsSet(boolean value) {
      if (!value) {
        this.originVo = null;
      }
    }

    public com.froad.thrift.vo.active.ActiveRuleInfoVo getActiveRuleInfoVo() {
      return this.activeRuleInfoVo;
    }

    public updateActiveRuleInfo_args setActiveRuleInfoVo(com.froad.thrift.vo.active.ActiveRuleInfoVo activeRuleInfoVo) {
      this.activeRuleInfoVo = activeRuleInfoVo;
      return this;
    }

    public void unsetActiveRuleInfoVo() {
      this.activeRuleInfoVo = null;
    }

    /** Returns true if field activeRuleInfoVo is set (has been assigned a value) and false otherwise */
    public boolean isSetActiveRuleInfoVo() {
      return this.activeRuleInfoVo != null;
    }

    public void setActiveRuleInfoVoIsSet(boolean value) {
      if (!value) {
        this.activeRuleInfoVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORIGIN_VO:
        if (value == null) {
          unsetOriginVo();
        } else {
          setOriginVo((com.froad.thrift.vo.OriginVo)value);
        }
        break;

      case ACTIVE_RULE_INFO_VO:
        if (value == null) {
          unsetActiveRuleInfoVo();
        } else {
          setActiveRuleInfoVo((com.froad.thrift.vo.active.ActiveRuleInfoVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORIGIN_VO:
        return getOriginVo();

      case ACTIVE_RULE_INFO_VO:
        return getActiveRuleInfoVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORIGIN_VO:
        return isSetOriginVo();
      case ACTIVE_RULE_INFO_VO:
        return isSetActiveRuleInfoVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateActiveRuleInfo_args)
        return this.equals((updateActiveRuleInfo_args)that);
      return false;
    }

    public boolean equals(updateActiveRuleInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_originVo = true && this.isSetOriginVo();
      boolean that_present_originVo = true && that.isSetOriginVo();
      if (this_present_originVo || that_present_originVo) {
        if (!(this_present_originVo && that_present_originVo))
          return false;
        if (!this.originVo.equals(that.originVo))
          return false;
      }

      boolean this_present_activeRuleInfoVo = true && this.isSetActiveRuleInfoVo();
      boolean that_present_activeRuleInfoVo = true && that.isSetActiveRuleInfoVo();
      if (this_present_activeRuleInfoVo || that_present_activeRuleInfoVo) {
        if (!(this_present_activeRuleInfoVo && that_present_activeRuleInfoVo))
          return false;
        if (!this.activeRuleInfoVo.equals(that.activeRuleInfoVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_originVo = true && (isSetOriginVo());
      list.add(present_originVo);
      if (present_originVo)
        list.add(originVo);

      boolean present_activeRuleInfoVo = true && (isSetActiveRuleInfoVo());
      list.add(present_activeRuleInfoVo);
      if (present_activeRuleInfoVo)
        list.add(activeRuleInfoVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateActiveRuleInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOriginVo()).compareTo(other.isSetOriginVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originVo, other.originVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetActiveRuleInfoVo()).compareTo(other.isSetActiveRuleInfoVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetActiveRuleInfoVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.activeRuleInfoVo, other.activeRuleInfoVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateActiveRuleInfo_args(");
      boolean first = true;

      sb.append("originVo:");
      if (this.originVo == null) {
        sb.append("null");
      } else {
        sb.append(this.originVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("activeRuleInfoVo:");
      if (this.activeRuleInfoVo == null) {
        sb.append("null");
      } else {
        sb.append(this.activeRuleInfoVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (originVo != null) {
        originVo.validate();
      }
      if (activeRuleInfoVo != null) {
        activeRuleInfoVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateActiveRuleInfo_argsStandardSchemeFactory implements SchemeFactory {
      public updateActiveRuleInfo_argsStandardScheme getScheme() {
        return new updateActiveRuleInfo_argsStandardScheme();
      }
    }

    private static class updateActiveRuleInfo_argsStandardScheme extends StandardScheme<updateActiveRuleInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateActiveRuleInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORIGIN_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.originVo = new com.froad.thrift.vo.OriginVo();
                struct.originVo.read(iprot);
                struct.setOriginVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACTIVE_RULE_INFO_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.activeRuleInfoVo = new com.froad.thrift.vo.active.ActiveRuleInfoVo();
                struct.activeRuleInfoVo.read(iprot);
                struct.setActiveRuleInfoVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateActiveRuleInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.originVo != null) {
          oprot.writeFieldBegin(ORIGIN_VO_FIELD_DESC);
          struct.originVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.activeRuleInfoVo != null) {
          oprot.writeFieldBegin(ACTIVE_RULE_INFO_VO_FIELD_DESC);
          struct.activeRuleInfoVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateActiveRuleInfo_argsTupleSchemeFactory implements SchemeFactory {
      public updateActiveRuleInfo_argsTupleScheme getScheme() {
        return new updateActiveRuleInfo_argsTupleScheme();
      }
    }

    private static class updateActiveRuleInfo_argsTupleScheme extends TupleScheme<updateActiveRuleInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateActiveRuleInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOriginVo()) {
          optionals.set(0);
        }
        if (struct.isSetActiveRuleInfoVo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOriginVo()) {
          struct.originVo.write(oprot);
        }
        if (struct.isSetActiveRuleInfoVo()) {
          struct.activeRuleInfoVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateActiveRuleInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.originVo = new com.froad.thrift.vo.OriginVo();
          struct.originVo.read(iprot);
          struct.setOriginVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.activeRuleInfoVo = new com.froad.thrift.vo.active.ActiveRuleInfoVo();
          struct.activeRuleInfoVo.read(iprot);
          struct.setActiveRuleInfoVoIsSet(true);
        }
      }
    }

  }

  public static class updateActiveRuleInfo_result implements org.apache.thrift.TBase<updateActiveRuleInfo_result, updateActiveRuleInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateActiveRuleInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateActiveRuleInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateActiveRuleInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateActiveRuleInfo_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateActiveRuleInfo_result.class, metaDataMap);
    }

    public updateActiveRuleInfo_result() {
    }

    public updateActiveRuleInfo_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateActiveRuleInfo_result(updateActiveRuleInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public updateActiveRuleInfo_result deepCopy() {
      return new updateActiveRuleInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public updateActiveRuleInfo_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateActiveRuleInfo_result)
        return this.equals((updateActiveRuleInfo_result)that);
      return false;
    }

    public boolean equals(updateActiveRuleInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateActiveRuleInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateActiveRuleInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateActiveRuleInfo_resultStandardSchemeFactory implements SchemeFactory {
      public updateActiveRuleInfo_resultStandardScheme getScheme() {
        return new updateActiveRuleInfo_resultStandardScheme();
      }
    }

    private static class updateActiveRuleInfo_resultStandardScheme extends StandardScheme<updateActiveRuleInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateActiveRuleInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateActiveRuleInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateActiveRuleInfo_resultTupleSchemeFactory implements SchemeFactory {
      public updateActiveRuleInfo_resultTupleScheme getScheme() {
        return new updateActiveRuleInfo_resultTupleScheme();
      }
    }

    private static class updateActiveRuleInfo_resultTupleScheme extends TupleScheme<updateActiveRuleInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateActiveRuleInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateActiveRuleInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getActiveRuleInfo_args implements org.apache.thrift.TBase<getActiveRuleInfo_args, getActiveRuleInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<getActiveRuleInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getActiveRuleInfo_args");

    private static final org.apache.thrift.protocol.TField ACTIVE_RULE_INFO_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("activeRuleInfoVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getActiveRuleInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getActiveRuleInfo_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.active.ActiveRuleInfoVo activeRuleInfoVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ACTIVE_RULE_INFO_VO((short)1, "activeRuleInfoVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ACTIVE_RULE_INFO_VO
            return ACTIVE_RULE_INFO_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ACTIVE_RULE_INFO_VO, new org.apache.thrift.meta_data.FieldMetaData("activeRuleInfoVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.active.ActiveRuleInfoVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getActiveRuleInfo_args.class, metaDataMap);
    }

    public getActiveRuleInfo_args() {
    }

    public getActiveRuleInfo_args(
      com.froad.thrift.vo.active.ActiveRuleInfoVo activeRuleInfoVo)
    {
      this();
      this.activeRuleInfoVo = activeRuleInfoVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getActiveRuleInfo_args(getActiveRuleInfo_args other) {
      if (other.isSetActiveRuleInfoVo()) {
        this.activeRuleInfoVo = new com.froad.thrift.vo.active.ActiveRuleInfoVo(other.activeRuleInfoVo);
      }
    }

    public getActiveRuleInfo_args deepCopy() {
      return new getActiveRuleInfo_args(this);
    }

    @Override
    public void clear() {
      this.activeRuleInfoVo = null;
    }

    public com.froad.thrift.vo.active.ActiveRuleInfoVo getActiveRuleInfoVo() {
      return this.activeRuleInfoVo;
    }

    public getActiveRuleInfo_args setActiveRuleInfoVo(com.froad.thrift.vo.active.ActiveRuleInfoVo activeRuleInfoVo) {
      this.activeRuleInfoVo = activeRuleInfoVo;
      return this;
    }

    public void unsetActiveRuleInfoVo() {
      this.activeRuleInfoVo = null;
    }

    /** Returns true if field activeRuleInfoVo is set (has been assigned a value) and false otherwise */
    public boolean isSetActiveRuleInfoVo() {
      return this.activeRuleInfoVo != null;
    }

    public void setActiveRuleInfoVoIsSet(boolean value) {
      if (!value) {
        this.activeRuleInfoVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ACTIVE_RULE_INFO_VO:
        if (value == null) {
          unsetActiveRuleInfoVo();
        } else {
          setActiveRuleInfoVo((com.froad.thrift.vo.active.ActiveRuleInfoVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ACTIVE_RULE_INFO_VO:
        return getActiveRuleInfoVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ACTIVE_RULE_INFO_VO:
        return isSetActiveRuleInfoVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getActiveRuleInfo_args)
        return this.equals((getActiveRuleInfo_args)that);
      return false;
    }

    public boolean equals(getActiveRuleInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_activeRuleInfoVo = true && this.isSetActiveRuleInfoVo();
      boolean that_present_activeRuleInfoVo = true && that.isSetActiveRuleInfoVo();
      if (this_present_activeRuleInfoVo || that_present_activeRuleInfoVo) {
        if (!(this_present_activeRuleInfoVo && that_present_activeRuleInfoVo))
          return false;
        if (!this.activeRuleInfoVo.equals(that.activeRuleInfoVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_activeRuleInfoVo = true && (isSetActiveRuleInfoVo());
      list.add(present_activeRuleInfoVo);
      if (present_activeRuleInfoVo)
        list.add(activeRuleInfoVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(getActiveRuleInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetActiveRuleInfoVo()).compareTo(other.isSetActiveRuleInfoVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetActiveRuleInfoVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.activeRuleInfoVo, other.activeRuleInfoVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getActiveRuleInfo_args(");
      boolean first = true;

      sb.append("activeRuleInfoVo:");
      if (this.activeRuleInfoVo == null) {
        sb.append("null");
      } else {
        sb.append(this.activeRuleInfoVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (activeRuleInfoVo != null) {
        activeRuleInfoVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getActiveRuleInfo_argsStandardSchemeFactory implements SchemeFactory {
      public getActiveRuleInfo_argsStandardScheme getScheme() {
        return new getActiveRuleInfo_argsStandardScheme();
      }
    }

    private static class getActiveRuleInfo_argsStandardScheme extends StandardScheme<getActiveRuleInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getActiveRuleInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ACTIVE_RULE_INFO_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.activeRuleInfoVo = new com.froad.thrift.vo.active.ActiveRuleInfoVo();
                struct.activeRuleInfoVo.read(iprot);
                struct.setActiveRuleInfoVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getActiveRuleInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.activeRuleInfoVo != null) {
          oprot.writeFieldBegin(ACTIVE_RULE_INFO_VO_FIELD_DESC);
          struct.activeRuleInfoVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getActiveRuleInfo_argsTupleSchemeFactory implements SchemeFactory {
      public getActiveRuleInfo_argsTupleScheme getScheme() {
        return new getActiveRuleInfo_argsTupleScheme();
      }
    }

    private static class getActiveRuleInfo_argsTupleScheme extends TupleScheme<getActiveRuleInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getActiveRuleInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetActiveRuleInfoVo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetActiveRuleInfoVo()) {
          struct.activeRuleInfoVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getActiveRuleInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.activeRuleInfoVo = new com.froad.thrift.vo.active.ActiveRuleInfoVo();
          struct.activeRuleInfoVo.read(iprot);
          struct.setActiveRuleInfoVoIsSet(true);
        }
      }
    }

  }

  public static class getActiveRuleInfo_result implements org.apache.thrift.TBase<getActiveRuleInfo_result, getActiveRuleInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<getActiveRuleInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getActiveRuleInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getActiveRuleInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getActiveRuleInfo_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.active.FindAllActiveRuleInfoVoResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.active.FindAllActiveRuleInfoVoResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getActiveRuleInfo_result.class, metaDataMap);
    }

    public getActiveRuleInfo_result() {
    }

    public getActiveRuleInfo_result(
      com.froad.thrift.vo.active.FindAllActiveRuleInfoVoResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getActiveRuleInfo_result(getActiveRuleInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.active.FindAllActiveRuleInfoVoResultVo(other.success);
      }
    }

    public getActiveRuleInfo_result deepCopy() {
      return new getActiveRuleInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.active.FindAllActiveRuleInfoVoResultVo getSuccess() {
      return this.success;
    }

    public getActiveRuleInfo_result setSuccess(com.froad.thrift.vo.active.FindAllActiveRuleInfoVoResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.active.FindAllActiveRuleInfoVoResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getActiveRuleInfo_result)
        return this.equals((getActiveRuleInfo_result)that);
      return false;
    }

    public boolean equals(getActiveRuleInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getActiveRuleInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getActiveRuleInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getActiveRuleInfo_resultStandardSchemeFactory implements SchemeFactory {
      public getActiveRuleInfo_resultStandardScheme getScheme() {
        return new getActiveRuleInfo_resultStandardScheme();
      }
    }

    private static class getActiveRuleInfo_resultStandardScheme extends StandardScheme<getActiveRuleInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getActiveRuleInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.active.FindAllActiveRuleInfoVoResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getActiveRuleInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getActiveRuleInfo_resultTupleSchemeFactory implements SchemeFactory {
      public getActiveRuleInfo_resultTupleScheme getScheme() {
        return new getActiveRuleInfo_resultTupleScheme();
      }
    }

    private static class getActiveRuleInfo_resultTupleScheme extends TupleScheme<getActiveRuleInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getActiveRuleInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getActiveRuleInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.active.FindAllActiveRuleInfoVoResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getActiveRuleInfoByPage_args implements org.apache.thrift.TBase<getActiveRuleInfoByPage_args, getActiveRuleInfoByPage_args._Fields>, java.io.Serializable, Cloneable, Comparable<getActiveRuleInfoByPage_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getActiveRuleInfoByPage_args");

    private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ACTIVE_RULE_INFO_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("activeRuleInfoVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getActiveRuleInfoByPage_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getActiveRuleInfoByPage_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.PageVo page; // required
    public com.froad.thrift.vo.active.ActiveRuleInfoVo activeRuleInfoVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PAGE((short)1, "page"),
      ACTIVE_RULE_INFO_VO((short)2, "activeRuleInfoVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PAGE
            return PAGE;
          case 2: // ACTIVE_RULE_INFO_VO
            return ACTIVE_RULE_INFO_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.PageVo.class)));
      tmpMap.put(_Fields.ACTIVE_RULE_INFO_VO, new org.apache.thrift.meta_data.FieldMetaData("activeRuleInfoVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.active.ActiveRuleInfoVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getActiveRuleInfoByPage_args.class, metaDataMap);
    }

    public getActiveRuleInfoByPage_args() {
    }

    public getActiveRuleInfoByPage_args(
      com.froad.thrift.vo.PageVo page,
      com.froad.thrift.vo.active.ActiveRuleInfoVo activeRuleInfoVo)
    {
      this();
      this.page = page;
      this.activeRuleInfoVo = activeRuleInfoVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getActiveRuleInfoByPage_args(getActiveRuleInfoByPage_args other) {
      if (other.isSetPage()) {
        this.page = new com.froad.thrift.vo.PageVo(other.page);
      }
      if (other.isSetActiveRuleInfoVo()) {
        this.activeRuleInfoVo = new com.froad.thrift.vo.active.ActiveRuleInfoVo(other.activeRuleInfoVo);
      }
    }

    public getActiveRuleInfoByPage_args deepCopy() {
      return new getActiveRuleInfoByPage_args(this);
    }

    @Override
    public void clear() {
      this.page = null;
      this.activeRuleInfoVo = null;
    }

    public com.froad.thrift.vo.PageVo getPage() {
      return this.page;
    }

    public getActiveRuleInfoByPage_args setPage(com.froad.thrift.vo.PageVo page) {
      this.page = page;
      return this;
    }

    public void unsetPage() {
      this.page = null;
    }

    /** Returns true if field page is set (has been assigned a value) and false otherwise */
    public boolean isSetPage() {
      return this.page != null;
    }

    public void setPageIsSet(boolean value) {
      if (!value) {
        this.page = null;
      }
    }

    public com.froad.thrift.vo.active.ActiveRuleInfoVo getActiveRuleInfoVo() {
      return this.activeRuleInfoVo;
    }

    public getActiveRuleInfoByPage_args setActiveRuleInfoVo(com.froad.thrift.vo.active.ActiveRuleInfoVo activeRuleInfoVo) {
      this.activeRuleInfoVo = activeRuleInfoVo;
      return this;
    }

    public void unsetActiveRuleInfoVo() {
      this.activeRuleInfoVo = null;
    }

    /** Returns true if field activeRuleInfoVo is set (has been assigned a value) and false otherwise */
    public boolean isSetActiveRuleInfoVo() {
      return this.activeRuleInfoVo != null;
    }

    public void setActiveRuleInfoVoIsSet(boolean value) {
      if (!value) {
        this.activeRuleInfoVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PAGE:
        if (value == null) {
          unsetPage();
        } else {
          setPage((com.froad.thrift.vo.PageVo)value);
        }
        break;

      case ACTIVE_RULE_INFO_VO:
        if (value == null) {
          unsetActiveRuleInfoVo();
        } else {
          setActiveRuleInfoVo((com.froad.thrift.vo.active.ActiveRuleInfoVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PAGE:
        return getPage();

      case ACTIVE_RULE_INFO_VO:
        return getActiveRuleInfoVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PAGE:
        return isSetPage();
      case ACTIVE_RULE_INFO_VO:
        return isSetActiveRuleInfoVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getActiveRuleInfoByPage_args)
        return this.equals((getActiveRuleInfoByPage_args)that);
      return false;
    }

    public boolean equals(getActiveRuleInfoByPage_args that) {
      if (that == null)
        return false;

      boolean this_present_page = true && this.isSetPage();
      boolean that_present_page = true && that.isSetPage();
      if (this_present_page || that_present_page) {
        if (!(this_present_page && that_present_page))
          return false;
        if (!this.page.equals(that.page))
          return false;
      }

      boolean this_present_activeRuleInfoVo = true && this.isSetActiveRuleInfoVo();
      boolean that_present_activeRuleInfoVo = true && that.isSetActiveRuleInfoVo();
      if (this_present_activeRuleInfoVo || that_present_activeRuleInfoVo) {
        if (!(this_present_activeRuleInfoVo && that_present_activeRuleInfoVo))
          return false;
        if (!this.activeRuleInfoVo.equals(that.activeRuleInfoVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_page = true && (isSetPage());
      list.add(present_page);
      if (present_page)
        list.add(page);

      boolean present_activeRuleInfoVo = true && (isSetActiveRuleInfoVo());
      list.add(present_activeRuleInfoVo);
      if (present_activeRuleInfoVo)
        list.add(activeRuleInfoVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(getActiveRuleInfoByPage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetActiveRuleInfoVo()).compareTo(other.isSetActiveRuleInfoVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetActiveRuleInfoVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.activeRuleInfoVo, other.activeRuleInfoVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getActiveRuleInfoByPage_args(");
      boolean first = true;

      sb.append("page:");
      if (this.page == null) {
        sb.append("null");
      } else {
        sb.append(this.page);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("activeRuleInfoVo:");
      if (this.activeRuleInfoVo == null) {
        sb.append("null");
      } else {
        sb.append(this.activeRuleInfoVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (page != null) {
        page.validate();
      }
      if (activeRuleInfoVo != null) {
        activeRuleInfoVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getActiveRuleInfoByPage_argsStandardSchemeFactory implements SchemeFactory {
      public getActiveRuleInfoByPage_argsStandardScheme getScheme() {
        return new getActiveRuleInfoByPage_argsStandardScheme();
      }
    }

    private static class getActiveRuleInfoByPage_argsStandardScheme extends StandardScheme<getActiveRuleInfoByPage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getActiveRuleInfoByPage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.page = new com.froad.thrift.vo.PageVo();
                struct.page.read(iprot);
                struct.setPageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACTIVE_RULE_INFO_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.activeRuleInfoVo = new com.froad.thrift.vo.active.ActiveRuleInfoVo();
                struct.activeRuleInfoVo.read(iprot);
                struct.setActiveRuleInfoVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getActiveRuleInfoByPage_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.page != null) {
          oprot.writeFieldBegin(PAGE_FIELD_DESC);
          struct.page.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.activeRuleInfoVo != null) {
          oprot.writeFieldBegin(ACTIVE_RULE_INFO_VO_FIELD_DESC);
          struct.activeRuleInfoVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getActiveRuleInfoByPage_argsTupleSchemeFactory implements SchemeFactory {
      public getActiveRuleInfoByPage_argsTupleScheme getScheme() {
        return new getActiveRuleInfoByPage_argsTupleScheme();
      }
    }

    private static class getActiveRuleInfoByPage_argsTupleScheme extends TupleScheme<getActiveRuleInfoByPage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getActiveRuleInfoByPage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPage()) {
          optionals.set(0);
        }
        if (struct.isSetActiveRuleInfoVo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPage()) {
          struct.page.write(oprot);
        }
        if (struct.isSetActiveRuleInfoVo()) {
          struct.activeRuleInfoVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getActiveRuleInfoByPage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.page = new com.froad.thrift.vo.PageVo();
          struct.page.read(iprot);
          struct.setPageIsSet(true);
        }
        if (incoming.get(1)) {
          struct.activeRuleInfoVo = new com.froad.thrift.vo.active.ActiveRuleInfoVo();
          struct.activeRuleInfoVo.read(iprot);
          struct.setActiveRuleInfoVoIsSet(true);
        }
      }
    }

  }

  public static class getActiveRuleInfoByPage_result implements org.apache.thrift.TBase<getActiveRuleInfoByPage_result, getActiveRuleInfoByPage_result._Fields>, java.io.Serializable, Cloneable, Comparable<getActiveRuleInfoByPage_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getActiveRuleInfoByPage_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getActiveRuleInfoByPage_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getActiveRuleInfoByPage_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.active.FindPageActiveRuleInfoVoResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.active.FindPageActiveRuleInfoVoResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getActiveRuleInfoByPage_result.class, metaDataMap);
    }

    public getActiveRuleInfoByPage_result() {
    }

    public getActiveRuleInfoByPage_result(
      com.froad.thrift.vo.active.FindPageActiveRuleInfoVoResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getActiveRuleInfoByPage_result(getActiveRuleInfoByPage_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.active.FindPageActiveRuleInfoVoResultVo(other.success);
      }
    }

    public getActiveRuleInfoByPage_result deepCopy() {
      return new getActiveRuleInfoByPage_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.active.FindPageActiveRuleInfoVoResultVo getSuccess() {
      return this.success;
    }

    public getActiveRuleInfoByPage_result setSuccess(com.froad.thrift.vo.active.FindPageActiveRuleInfoVoResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.active.FindPageActiveRuleInfoVoResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getActiveRuleInfoByPage_result)
        return this.equals((getActiveRuleInfoByPage_result)that);
      return false;
    }

    public boolean equals(getActiveRuleInfoByPage_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getActiveRuleInfoByPage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getActiveRuleInfoByPage_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getActiveRuleInfoByPage_resultStandardSchemeFactory implements SchemeFactory {
      public getActiveRuleInfoByPage_resultStandardScheme getScheme() {
        return new getActiveRuleInfoByPage_resultStandardScheme();
      }
    }

    private static class getActiveRuleInfoByPage_resultStandardScheme extends StandardScheme<getActiveRuleInfoByPage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getActiveRuleInfoByPage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.active.FindPageActiveRuleInfoVoResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getActiveRuleInfoByPage_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getActiveRuleInfoByPage_resultTupleSchemeFactory implements SchemeFactory {
      public getActiveRuleInfoByPage_resultTupleScheme getScheme() {
        return new getActiveRuleInfoByPage_resultTupleScheme();
      }
    }

    private static class getActiveRuleInfoByPage_resultTupleScheme extends TupleScheme<getActiveRuleInfoByPage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getActiveRuleInfoByPage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getActiveRuleInfoByPage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.active.FindPageActiveRuleInfoVoResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getActiveRuleInfoById_args implements org.apache.thrift.TBase<getActiveRuleInfoById_args, getActiveRuleInfoById_args._Fields>, java.io.Serializable, Cloneable, Comparable<getActiveRuleInfoById_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getActiveRuleInfoById_args");

    private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ACTIVE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("activeId", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getActiveRuleInfoById_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getActiveRuleInfoById_argsTupleSchemeFactory());
    }

    public String clientId; // required
    public String activeId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CLIENT_ID((short)1, "clientId"),
      ACTIVE_ID((short)2, "activeId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CLIENT_ID
            return CLIENT_ID;
          case 2: // ACTIVE_ID
            return ACTIVE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ACTIVE_ID, new org.apache.thrift.meta_data.FieldMetaData("activeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getActiveRuleInfoById_args.class, metaDataMap);
    }

    public getActiveRuleInfoById_args() {
    }

    public getActiveRuleInfoById_args(
      String clientId,
      String activeId)
    {
      this();
      this.clientId = clientId;
      this.activeId = activeId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getActiveRuleInfoById_args(getActiveRuleInfoById_args other) {
      if (other.isSetClientId()) {
        this.clientId = other.clientId;
      }
      if (other.isSetActiveId()) {
        this.activeId = other.activeId;
      }
    }

    public getActiveRuleInfoById_args deepCopy() {
      return new getActiveRuleInfoById_args(this);
    }

    @Override
    public void clear() {
      this.clientId = null;
      this.activeId = null;
    }

    public String getClientId() {
      return this.clientId;
    }

    public getActiveRuleInfoById_args setClientId(String clientId) {
      this.clientId = clientId;
      return this;
    }

    public void unsetClientId() {
      this.clientId = null;
    }

    /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
    public boolean isSetClientId() {
      return this.clientId != null;
    }

    public void setClientIdIsSet(boolean value) {
      if (!value) {
        this.clientId = null;
      }
    }

    public String getActiveId() {
      return this.activeId;
    }

    public getActiveRuleInfoById_args setActiveId(String activeId) {
      this.activeId = activeId;
      return this;
    }

    public void unsetActiveId() {
      this.activeId = null;
    }

    /** Returns true if field activeId is set (has been assigned a value) and false otherwise */
    public boolean isSetActiveId() {
      return this.activeId != null;
    }

    public void setActiveIdIsSet(boolean value) {
      if (!value) {
        this.activeId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CLIENT_ID:
        if (value == null) {
          unsetClientId();
        } else {
          setClientId((String)value);
        }
        break;

      case ACTIVE_ID:
        if (value == null) {
          unsetActiveId();
        } else {
          setActiveId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CLIENT_ID:
        return getClientId();

      case ACTIVE_ID:
        return getActiveId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CLIENT_ID:
        return isSetClientId();
      case ACTIVE_ID:
        return isSetActiveId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getActiveRuleInfoById_args)
        return this.equals((getActiveRuleInfoById_args)that);
      return false;
    }

    public boolean equals(getActiveRuleInfoById_args that) {
      if (that == null)
        return false;

      boolean this_present_clientId = true && this.isSetClientId();
      boolean that_present_clientId = true && that.isSetClientId();
      if (this_present_clientId || that_present_clientId) {
        if (!(this_present_clientId && that_present_clientId))
          return false;
        if (!this.clientId.equals(that.clientId))
          return false;
      }

      boolean this_present_activeId = true && this.isSetActiveId();
      boolean that_present_activeId = true && that.isSetActiveId();
      if (this_present_activeId || that_present_activeId) {
        if (!(this_present_activeId && that_present_activeId))
          return false;
        if (!this.activeId.equals(that.activeId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_clientId = true && (isSetClientId());
      list.add(present_clientId);
      if (present_clientId)
        list.add(clientId);

      boolean present_activeId = true && (isSetActiveId());
      list.add(present_activeId);
      if (present_activeId)
        list.add(activeId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getActiveRuleInfoById_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetActiveId()).compareTo(other.isSetActiveId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetActiveId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.activeId, other.activeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getActiveRuleInfoById_args(");
      boolean first = true;

      sb.append("clientId:");
      if (this.clientId == null) {
        sb.append("null");
      } else {
        sb.append(this.clientId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("activeId:");
      if (this.activeId == null) {
        sb.append("null");
      } else {
        sb.append(this.activeId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getActiveRuleInfoById_argsStandardSchemeFactory implements SchemeFactory {
      public getActiveRuleInfoById_argsStandardScheme getScheme() {
        return new getActiveRuleInfoById_argsStandardScheme();
      }
    }

    private static class getActiveRuleInfoById_argsStandardScheme extends StandardScheme<getActiveRuleInfoById_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getActiveRuleInfoById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CLIENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clientId = iprot.readString();
                struct.setClientIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACTIVE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.activeId = iprot.readString();
                struct.setActiveIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getActiveRuleInfoById_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.clientId != null) {
          oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
          oprot.writeString(struct.clientId);
          oprot.writeFieldEnd();
        }
        if (struct.activeId != null) {
          oprot.writeFieldBegin(ACTIVE_ID_FIELD_DESC);
          oprot.writeString(struct.activeId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getActiveRuleInfoById_argsTupleSchemeFactory implements SchemeFactory {
      public getActiveRuleInfoById_argsTupleScheme getScheme() {
        return new getActiveRuleInfoById_argsTupleScheme();
      }
    }

    private static class getActiveRuleInfoById_argsTupleScheme extends TupleScheme<getActiveRuleInfoById_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getActiveRuleInfoById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetClientId()) {
          optionals.set(0);
        }
        if (struct.isSetActiveId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetClientId()) {
          oprot.writeString(struct.clientId);
        }
        if (struct.isSetActiveId()) {
          oprot.writeString(struct.activeId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getActiveRuleInfoById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.clientId = iprot.readString();
          struct.setClientIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.activeId = iprot.readString();
          struct.setActiveIdIsSet(true);
        }
      }
    }

  }

  public static class getActiveRuleInfoById_result implements org.apache.thrift.TBase<getActiveRuleInfoById_result, getActiveRuleInfoById_result._Fields>, java.io.Serializable, Cloneable, Comparable<getActiveRuleInfoById_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getActiveRuleInfoById_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getActiveRuleInfoById_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getActiveRuleInfoById_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.active.FindActiveRuleInfoVoResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.active.FindActiveRuleInfoVoResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getActiveRuleInfoById_result.class, metaDataMap);
    }

    public getActiveRuleInfoById_result() {
    }

    public getActiveRuleInfoById_result(
      com.froad.thrift.vo.active.FindActiveRuleInfoVoResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getActiveRuleInfoById_result(getActiveRuleInfoById_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.active.FindActiveRuleInfoVoResultVo(other.success);
      }
    }

    public getActiveRuleInfoById_result deepCopy() {
      return new getActiveRuleInfoById_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.active.FindActiveRuleInfoVoResultVo getSuccess() {
      return this.success;
    }

    public getActiveRuleInfoById_result setSuccess(com.froad.thrift.vo.active.FindActiveRuleInfoVoResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.active.FindActiveRuleInfoVoResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getActiveRuleInfoById_result)
        return this.equals((getActiveRuleInfoById_result)that);
      return false;
    }

    public boolean equals(getActiveRuleInfoById_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getActiveRuleInfoById_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getActiveRuleInfoById_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getActiveRuleInfoById_resultStandardSchemeFactory implements SchemeFactory {
      public getActiveRuleInfoById_resultStandardScheme getScheme() {
        return new getActiveRuleInfoById_resultStandardScheme();
      }
    }

    private static class getActiveRuleInfoById_resultStandardScheme extends StandardScheme<getActiveRuleInfoById_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getActiveRuleInfoById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.active.FindActiveRuleInfoVoResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getActiveRuleInfoById_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getActiveRuleInfoById_resultTupleSchemeFactory implements SchemeFactory {
      public getActiveRuleInfoById_resultTupleScheme getScheme() {
        return new getActiveRuleInfoById_resultTupleScheme();
      }
    }

    private static class getActiveRuleInfoById_resultTupleScheme extends TupleScheme<getActiveRuleInfoById_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getActiveRuleInfoById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getActiveRuleInfoById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.active.FindActiveRuleInfoVoResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class exportActiveOrderInfoUrl_args implements org.apache.thrift.TBase<exportActiveOrderInfoUrl_args, exportActiveOrderInfoUrl_args._Fields>, java.io.Serializable, Cloneable, Comparable<exportActiveOrderInfoUrl_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("exportActiveOrderInfoUrl_args");

    private static final org.apache.thrift.protocol.TField ACTIVE_RULE_INFO_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("activeRuleInfoVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new exportActiveOrderInfoUrl_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new exportActiveOrderInfoUrl_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.active.ActiveRuleInfoVo activeRuleInfoVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ACTIVE_RULE_INFO_VO((short)1, "activeRuleInfoVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ACTIVE_RULE_INFO_VO
            return ACTIVE_RULE_INFO_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ACTIVE_RULE_INFO_VO, new org.apache.thrift.meta_data.FieldMetaData("activeRuleInfoVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.active.ActiveRuleInfoVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(exportActiveOrderInfoUrl_args.class, metaDataMap);
    }

    public exportActiveOrderInfoUrl_args() {
    }

    public exportActiveOrderInfoUrl_args(
      com.froad.thrift.vo.active.ActiveRuleInfoVo activeRuleInfoVo)
    {
      this();
      this.activeRuleInfoVo = activeRuleInfoVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public exportActiveOrderInfoUrl_args(exportActiveOrderInfoUrl_args other) {
      if (other.isSetActiveRuleInfoVo()) {
        this.activeRuleInfoVo = new com.froad.thrift.vo.active.ActiveRuleInfoVo(other.activeRuleInfoVo);
      }
    }

    public exportActiveOrderInfoUrl_args deepCopy() {
      return new exportActiveOrderInfoUrl_args(this);
    }

    @Override
    public void clear() {
      this.activeRuleInfoVo = null;
    }

    public com.froad.thrift.vo.active.ActiveRuleInfoVo getActiveRuleInfoVo() {
      return this.activeRuleInfoVo;
    }

    public exportActiveOrderInfoUrl_args setActiveRuleInfoVo(com.froad.thrift.vo.active.ActiveRuleInfoVo activeRuleInfoVo) {
      this.activeRuleInfoVo = activeRuleInfoVo;
      return this;
    }

    public void unsetActiveRuleInfoVo() {
      this.activeRuleInfoVo = null;
    }

    /** Returns true if field activeRuleInfoVo is set (has been assigned a value) and false otherwise */
    public boolean isSetActiveRuleInfoVo() {
      return this.activeRuleInfoVo != null;
    }

    public void setActiveRuleInfoVoIsSet(boolean value) {
      if (!value) {
        this.activeRuleInfoVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ACTIVE_RULE_INFO_VO:
        if (value == null) {
          unsetActiveRuleInfoVo();
        } else {
          setActiveRuleInfoVo((com.froad.thrift.vo.active.ActiveRuleInfoVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ACTIVE_RULE_INFO_VO:
        return getActiveRuleInfoVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ACTIVE_RULE_INFO_VO:
        return isSetActiveRuleInfoVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof exportActiveOrderInfoUrl_args)
        return this.equals((exportActiveOrderInfoUrl_args)that);
      return false;
    }

    public boolean equals(exportActiveOrderInfoUrl_args that) {
      if (that == null)
        return false;

      boolean this_present_activeRuleInfoVo = true && this.isSetActiveRuleInfoVo();
      boolean that_present_activeRuleInfoVo = true && that.isSetActiveRuleInfoVo();
      if (this_present_activeRuleInfoVo || that_present_activeRuleInfoVo) {
        if (!(this_present_activeRuleInfoVo && that_present_activeRuleInfoVo))
          return false;
        if (!this.activeRuleInfoVo.equals(that.activeRuleInfoVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_activeRuleInfoVo = true && (isSetActiveRuleInfoVo());
      list.add(present_activeRuleInfoVo);
      if (present_activeRuleInfoVo)
        list.add(activeRuleInfoVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(exportActiveOrderInfoUrl_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetActiveRuleInfoVo()).compareTo(other.isSetActiveRuleInfoVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetActiveRuleInfoVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.activeRuleInfoVo, other.activeRuleInfoVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("exportActiveOrderInfoUrl_args(");
      boolean first = true;

      sb.append("activeRuleInfoVo:");
      if (this.activeRuleInfoVo == null) {
        sb.append("null");
      } else {
        sb.append(this.activeRuleInfoVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (activeRuleInfoVo != null) {
        activeRuleInfoVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class exportActiveOrderInfoUrl_argsStandardSchemeFactory implements SchemeFactory {
      public exportActiveOrderInfoUrl_argsStandardScheme getScheme() {
        return new exportActiveOrderInfoUrl_argsStandardScheme();
      }
    }

    private static class exportActiveOrderInfoUrl_argsStandardScheme extends StandardScheme<exportActiveOrderInfoUrl_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, exportActiveOrderInfoUrl_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ACTIVE_RULE_INFO_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.activeRuleInfoVo = new com.froad.thrift.vo.active.ActiveRuleInfoVo();
                struct.activeRuleInfoVo.read(iprot);
                struct.setActiveRuleInfoVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, exportActiveOrderInfoUrl_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.activeRuleInfoVo != null) {
          oprot.writeFieldBegin(ACTIVE_RULE_INFO_VO_FIELD_DESC);
          struct.activeRuleInfoVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class exportActiveOrderInfoUrl_argsTupleSchemeFactory implements SchemeFactory {
      public exportActiveOrderInfoUrl_argsTupleScheme getScheme() {
        return new exportActiveOrderInfoUrl_argsTupleScheme();
      }
    }

    private static class exportActiveOrderInfoUrl_argsTupleScheme extends TupleScheme<exportActiveOrderInfoUrl_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, exportActiveOrderInfoUrl_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetActiveRuleInfoVo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetActiveRuleInfoVo()) {
          struct.activeRuleInfoVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, exportActiveOrderInfoUrl_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.activeRuleInfoVo = new com.froad.thrift.vo.active.ActiveRuleInfoVo();
          struct.activeRuleInfoVo.read(iprot);
          struct.setActiveRuleInfoVoIsSet(true);
        }
      }
    }

  }

  public static class exportActiveOrderInfoUrl_result implements org.apache.thrift.TBase<exportActiveOrderInfoUrl_result, exportActiveOrderInfoUrl_result._Fields>, java.io.Serializable, Cloneable, Comparable<exportActiveOrderInfoUrl_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("exportActiveOrderInfoUrl_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new exportActiveOrderInfoUrl_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new exportActiveOrderInfoUrl_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.active.ExportActiveOrderInfoRes success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.active.ExportActiveOrderInfoRes.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(exportActiveOrderInfoUrl_result.class, metaDataMap);
    }

    public exportActiveOrderInfoUrl_result() {
    }

    public exportActiveOrderInfoUrl_result(
      com.froad.thrift.vo.active.ExportActiveOrderInfoRes success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public exportActiveOrderInfoUrl_result(exportActiveOrderInfoUrl_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.active.ExportActiveOrderInfoRes(other.success);
      }
    }

    public exportActiveOrderInfoUrl_result deepCopy() {
      return new exportActiveOrderInfoUrl_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.active.ExportActiveOrderInfoRes getSuccess() {
      return this.success;
    }

    public exportActiveOrderInfoUrl_result setSuccess(com.froad.thrift.vo.active.ExportActiveOrderInfoRes success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.active.ExportActiveOrderInfoRes)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof exportActiveOrderInfoUrl_result)
        return this.equals((exportActiveOrderInfoUrl_result)that);
      return false;
    }

    public boolean equals(exportActiveOrderInfoUrl_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(exportActiveOrderInfoUrl_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("exportActiveOrderInfoUrl_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class exportActiveOrderInfoUrl_resultStandardSchemeFactory implements SchemeFactory {
      public exportActiveOrderInfoUrl_resultStandardScheme getScheme() {
        return new exportActiveOrderInfoUrl_resultStandardScheme();
      }
    }

    private static class exportActiveOrderInfoUrl_resultStandardScheme extends StandardScheme<exportActiveOrderInfoUrl_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, exportActiveOrderInfoUrl_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.active.ExportActiveOrderInfoRes();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, exportActiveOrderInfoUrl_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class exportActiveOrderInfoUrl_resultTupleSchemeFactory implements SchemeFactory {
      public exportActiveOrderInfoUrl_resultTupleScheme getScheme() {
        return new exportActiveOrderInfoUrl_resultTupleScheme();
      }
    }

    private static class exportActiveOrderInfoUrl_resultTupleScheme extends TupleScheme<exportActiveOrderInfoUrl_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, exportActiveOrderInfoUrl_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, exportActiveOrderInfoUrl_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.active.ExportActiveOrderInfoRes();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
