/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class SeckillOrderService {

  /**
   * 秒杀订单模块
   */
  public interface Iface extends com.froad.thrift.monitor.service.BizMonitorService.Iface {

    /**
     * 创建订单接口
     * 
     * @param addSeckillOrderVoReq
     */
    public com.froad.thrift.vo.order.AddSeckillOrderVoRes addOrder(com.froad.thrift.vo.order.AddSeckillOrderVoReq addSeckillOrderVoReq) throws org.apache.thrift.TException;

    /**
     * 补全收货、提货信息接口
     * 
     * @param addDeliveryInfoVoReq
     */
    public com.froad.thrift.vo.order.AddDeliveryInfoVoRes updateDeliveryInfo(com.froad.thrift.vo.order.AddDeliveryInfoVoReq addDeliveryInfoVoReq) throws org.apache.thrift.TException;

    /**
     * 创建订单接口（版本1.1 - 2015.06.07需求变更）
     * 
     * @param addOrderForSeckillVoReq
     */
    public com.froad.thrift.vo.order.AddOrderForSeckillVoRes addOrderForSeckill(com.froad.thrift.vo.order.AddOrderForSeckillVoReq addOrderForSeckillVoReq) throws org.apache.thrift.TException;

  }

  public interface AsyncIface extends com.froad.thrift.monitor.service.BizMonitorService .AsyncIface {

    public void addOrder(com.froad.thrift.vo.order.AddSeckillOrderVoReq addSeckillOrderVoReq, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateDeliveryInfo(com.froad.thrift.vo.order.AddDeliveryInfoVoReq addDeliveryInfoVoReq, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addOrderForSeckill(com.froad.thrift.vo.order.AddOrderForSeckillVoReq addOrderForSeckillVoReq, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends com.froad.thrift.monitor.service.BizMonitorService.Client implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public com.froad.thrift.vo.order.AddSeckillOrderVoRes addOrder(com.froad.thrift.vo.order.AddSeckillOrderVoReq addSeckillOrderVoReq) throws org.apache.thrift.TException
    {
      send_addOrder(addSeckillOrderVoReq);
      return recv_addOrder();
    }

    public void send_addOrder(com.froad.thrift.vo.order.AddSeckillOrderVoReq addSeckillOrderVoReq) throws org.apache.thrift.TException
    {
      addOrder_args args = new addOrder_args();
      args.setAddSeckillOrderVoReq(addSeckillOrderVoReq);
      sendBase("addOrder", args);
    }

    public com.froad.thrift.vo.order.AddSeckillOrderVoRes recv_addOrder() throws org.apache.thrift.TException
    {
      addOrder_result result = new addOrder_result();
      receiveBase(result, "addOrder");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addOrder failed: unknown result");
    }

    public com.froad.thrift.vo.order.AddDeliveryInfoVoRes updateDeliveryInfo(com.froad.thrift.vo.order.AddDeliveryInfoVoReq addDeliveryInfoVoReq) throws org.apache.thrift.TException
    {
      send_updateDeliveryInfo(addDeliveryInfoVoReq);
      return recv_updateDeliveryInfo();
    }

    public void send_updateDeliveryInfo(com.froad.thrift.vo.order.AddDeliveryInfoVoReq addDeliveryInfoVoReq) throws org.apache.thrift.TException
    {
      updateDeliveryInfo_args args = new updateDeliveryInfo_args();
      args.setAddDeliveryInfoVoReq(addDeliveryInfoVoReq);
      sendBase("updateDeliveryInfo", args);
    }

    public com.froad.thrift.vo.order.AddDeliveryInfoVoRes recv_updateDeliveryInfo() throws org.apache.thrift.TException
    {
      updateDeliveryInfo_result result = new updateDeliveryInfo_result();
      receiveBase(result, "updateDeliveryInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateDeliveryInfo failed: unknown result");
    }

    public com.froad.thrift.vo.order.AddOrderForSeckillVoRes addOrderForSeckill(com.froad.thrift.vo.order.AddOrderForSeckillVoReq addOrderForSeckillVoReq) throws org.apache.thrift.TException
    {
      send_addOrderForSeckill(addOrderForSeckillVoReq);
      return recv_addOrderForSeckill();
    }

    public void send_addOrderForSeckill(com.froad.thrift.vo.order.AddOrderForSeckillVoReq addOrderForSeckillVoReq) throws org.apache.thrift.TException
    {
      addOrderForSeckill_args args = new addOrderForSeckill_args();
      args.setAddOrderForSeckillVoReq(addOrderForSeckillVoReq);
      sendBase("addOrderForSeckill", args);
    }

    public com.froad.thrift.vo.order.AddOrderForSeckillVoRes recv_addOrderForSeckill() throws org.apache.thrift.TException
    {
      addOrderForSeckill_result result = new addOrderForSeckill_result();
      receiveBase(result, "addOrderForSeckill");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addOrderForSeckill failed: unknown result");
    }

  }
  public static class AsyncClient extends com.froad.thrift.monitor.service.BizMonitorService.AsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void addOrder(com.froad.thrift.vo.order.AddSeckillOrderVoReq addSeckillOrderVoReq, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addOrder_call method_call = new addOrder_call(addSeckillOrderVoReq, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addOrder_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.order.AddSeckillOrderVoReq addSeckillOrderVoReq;
      public addOrder_call(com.froad.thrift.vo.order.AddSeckillOrderVoReq addSeckillOrderVoReq, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.addSeckillOrderVoReq = addSeckillOrderVoReq;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addOrder", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addOrder_args args = new addOrder_args();
        args.setAddSeckillOrderVoReq(addSeckillOrderVoReq);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.order.AddSeckillOrderVoRes getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addOrder();
      }
    }

    public void updateDeliveryInfo(com.froad.thrift.vo.order.AddDeliveryInfoVoReq addDeliveryInfoVoReq, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateDeliveryInfo_call method_call = new updateDeliveryInfo_call(addDeliveryInfoVoReq, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateDeliveryInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.order.AddDeliveryInfoVoReq addDeliveryInfoVoReq;
      public updateDeliveryInfo_call(com.froad.thrift.vo.order.AddDeliveryInfoVoReq addDeliveryInfoVoReq, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.addDeliveryInfoVoReq = addDeliveryInfoVoReq;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateDeliveryInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateDeliveryInfo_args args = new updateDeliveryInfo_args();
        args.setAddDeliveryInfoVoReq(addDeliveryInfoVoReq);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.order.AddDeliveryInfoVoRes getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateDeliveryInfo();
      }
    }

    public void addOrderForSeckill(com.froad.thrift.vo.order.AddOrderForSeckillVoReq addOrderForSeckillVoReq, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addOrderForSeckill_call method_call = new addOrderForSeckill_call(addOrderForSeckillVoReq, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addOrderForSeckill_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.order.AddOrderForSeckillVoReq addOrderForSeckillVoReq;
      public addOrderForSeckill_call(com.froad.thrift.vo.order.AddOrderForSeckillVoReq addOrderForSeckillVoReq, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.addOrderForSeckillVoReq = addOrderForSeckillVoReq;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addOrderForSeckill", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addOrderForSeckill_args args = new addOrderForSeckill_args();
        args.setAddOrderForSeckillVoReq(addOrderForSeckillVoReq);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.order.AddOrderForSeckillVoRes getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addOrderForSeckill();
      }
    }

  }

  public static class Processor<I extends Iface> extends com.froad.thrift.monitor.service.BizMonitorService.Processor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("addOrder", new addOrder());
      processMap.put("updateDeliveryInfo", new updateDeliveryInfo());
      processMap.put("addOrderForSeckill", new addOrderForSeckill());
      return processMap;
    }

    public static class addOrder<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addOrder_args> {
      public addOrder() {
        super("addOrder");
      }

      public addOrder_args getEmptyArgsInstance() {
        return new addOrder_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addOrder_result getResult(I iface, addOrder_args args) throws org.apache.thrift.TException {
        addOrder_result result = new addOrder_result();
        result.success = iface.addOrder(args.addSeckillOrderVoReq);
        return result;
      }
    }

    public static class updateDeliveryInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateDeliveryInfo_args> {
      public updateDeliveryInfo() {
        super("updateDeliveryInfo");
      }

      public updateDeliveryInfo_args getEmptyArgsInstance() {
        return new updateDeliveryInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateDeliveryInfo_result getResult(I iface, updateDeliveryInfo_args args) throws org.apache.thrift.TException {
        updateDeliveryInfo_result result = new updateDeliveryInfo_result();
        result.success = iface.updateDeliveryInfo(args.addDeliveryInfoVoReq);
        return result;
      }
    }

    public static class addOrderForSeckill<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addOrderForSeckill_args> {
      public addOrderForSeckill() {
        super("addOrderForSeckill");
      }

      public addOrderForSeckill_args getEmptyArgsInstance() {
        return new addOrderForSeckill_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addOrderForSeckill_result getResult(I iface, addOrderForSeckill_args args) throws org.apache.thrift.TException {
        addOrderForSeckill_result result = new addOrderForSeckill_result();
        result.success = iface.addOrderForSeckill(args.addOrderForSeckillVoReq);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends com.froad.thrift.monitor.service.BizMonitorService.AsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("addOrder", new addOrder());
      processMap.put("updateDeliveryInfo", new updateDeliveryInfo());
      processMap.put("addOrderForSeckill", new addOrderForSeckill());
      return processMap;
    }

    public static class addOrder<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addOrder_args, com.froad.thrift.vo.order.AddSeckillOrderVoRes> {
      public addOrder() {
        super("addOrder");
      }

      public addOrder_args getEmptyArgsInstance() {
        return new addOrder_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.order.AddSeckillOrderVoRes> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.order.AddSeckillOrderVoRes>() { 
          public void onComplete(com.froad.thrift.vo.order.AddSeckillOrderVoRes o) {
            addOrder_result result = new addOrder_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addOrder_result result = new addOrder_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addOrder_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.order.AddSeckillOrderVoRes> resultHandler) throws TException {
        iface.addOrder(args.addSeckillOrderVoReq,resultHandler);
      }
    }

    public static class updateDeliveryInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateDeliveryInfo_args, com.froad.thrift.vo.order.AddDeliveryInfoVoRes> {
      public updateDeliveryInfo() {
        super("updateDeliveryInfo");
      }

      public updateDeliveryInfo_args getEmptyArgsInstance() {
        return new updateDeliveryInfo_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.order.AddDeliveryInfoVoRes> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.order.AddDeliveryInfoVoRes>() { 
          public void onComplete(com.froad.thrift.vo.order.AddDeliveryInfoVoRes o) {
            updateDeliveryInfo_result result = new updateDeliveryInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateDeliveryInfo_result result = new updateDeliveryInfo_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateDeliveryInfo_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.order.AddDeliveryInfoVoRes> resultHandler) throws TException {
        iface.updateDeliveryInfo(args.addDeliveryInfoVoReq,resultHandler);
      }
    }

    public static class addOrderForSeckill<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addOrderForSeckill_args, com.froad.thrift.vo.order.AddOrderForSeckillVoRes> {
      public addOrderForSeckill() {
        super("addOrderForSeckill");
      }

      public addOrderForSeckill_args getEmptyArgsInstance() {
        return new addOrderForSeckill_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.order.AddOrderForSeckillVoRes> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.order.AddOrderForSeckillVoRes>() { 
          public void onComplete(com.froad.thrift.vo.order.AddOrderForSeckillVoRes o) {
            addOrderForSeckill_result result = new addOrderForSeckill_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addOrderForSeckill_result result = new addOrderForSeckill_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addOrderForSeckill_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.order.AddOrderForSeckillVoRes> resultHandler) throws TException {
        iface.addOrderForSeckill(args.addOrderForSeckillVoReq,resultHandler);
      }
    }

  }

  public static class addOrder_args implements org.apache.thrift.TBase<addOrder_args, addOrder_args._Fields>, java.io.Serializable, Cloneable, Comparable<addOrder_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addOrder_args");

    private static final org.apache.thrift.protocol.TField ADD_SECKILL_ORDER_VO_REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("addSeckillOrderVoReq", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addOrder_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addOrder_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.order.AddSeckillOrderVoReq addSeckillOrderVoReq; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ADD_SECKILL_ORDER_VO_REQ((short)1, "addSeckillOrderVoReq");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ADD_SECKILL_ORDER_VO_REQ
            return ADD_SECKILL_ORDER_VO_REQ;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ADD_SECKILL_ORDER_VO_REQ, new org.apache.thrift.meta_data.FieldMetaData("addSeckillOrderVoReq", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.order.AddSeckillOrderVoReq.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addOrder_args.class, metaDataMap);
    }

    public addOrder_args() {
    }

    public addOrder_args(
      com.froad.thrift.vo.order.AddSeckillOrderVoReq addSeckillOrderVoReq)
    {
      this();
      this.addSeckillOrderVoReq = addSeckillOrderVoReq;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addOrder_args(addOrder_args other) {
      if (other.isSetAddSeckillOrderVoReq()) {
        this.addSeckillOrderVoReq = new com.froad.thrift.vo.order.AddSeckillOrderVoReq(other.addSeckillOrderVoReq);
      }
    }

    public addOrder_args deepCopy() {
      return new addOrder_args(this);
    }

    @Override
    public void clear() {
      this.addSeckillOrderVoReq = null;
    }

    public com.froad.thrift.vo.order.AddSeckillOrderVoReq getAddSeckillOrderVoReq() {
      return this.addSeckillOrderVoReq;
    }

    public addOrder_args setAddSeckillOrderVoReq(com.froad.thrift.vo.order.AddSeckillOrderVoReq addSeckillOrderVoReq) {
      this.addSeckillOrderVoReq = addSeckillOrderVoReq;
      return this;
    }

    public void unsetAddSeckillOrderVoReq() {
      this.addSeckillOrderVoReq = null;
    }

    /** Returns true if field addSeckillOrderVoReq is set (has been assigned a value) and false otherwise */
    public boolean isSetAddSeckillOrderVoReq() {
      return this.addSeckillOrderVoReq != null;
    }

    public void setAddSeckillOrderVoReqIsSet(boolean value) {
      if (!value) {
        this.addSeckillOrderVoReq = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ADD_SECKILL_ORDER_VO_REQ:
        if (value == null) {
          unsetAddSeckillOrderVoReq();
        } else {
          setAddSeckillOrderVoReq((com.froad.thrift.vo.order.AddSeckillOrderVoReq)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ADD_SECKILL_ORDER_VO_REQ:
        return getAddSeckillOrderVoReq();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ADD_SECKILL_ORDER_VO_REQ:
        return isSetAddSeckillOrderVoReq();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addOrder_args)
        return this.equals((addOrder_args)that);
      return false;
    }

    public boolean equals(addOrder_args that) {
      if (that == null)
        return false;

      boolean this_present_addSeckillOrderVoReq = true && this.isSetAddSeckillOrderVoReq();
      boolean that_present_addSeckillOrderVoReq = true && that.isSetAddSeckillOrderVoReq();
      if (this_present_addSeckillOrderVoReq || that_present_addSeckillOrderVoReq) {
        if (!(this_present_addSeckillOrderVoReq && that_present_addSeckillOrderVoReq))
          return false;
        if (!this.addSeckillOrderVoReq.equals(that.addSeckillOrderVoReq))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_addSeckillOrderVoReq = true && (isSetAddSeckillOrderVoReq());
      list.add(present_addSeckillOrderVoReq);
      if (present_addSeckillOrderVoReq)
        list.add(addSeckillOrderVoReq);

      return list.hashCode();
    }

    @Override
    public int compareTo(addOrder_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAddSeckillOrderVoReq()).compareTo(other.isSetAddSeckillOrderVoReq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAddSeckillOrderVoReq()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.addSeckillOrderVoReq, other.addSeckillOrderVoReq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addOrder_args(");
      boolean first = true;

      sb.append("addSeckillOrderVoReq:");
      if (this.addSeckillOrderVoReq == null) {
        sb.append("null");
      } else {
        sb.append(this.addSeckillOrderVoReq);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (addSeckillOrderVoReq != null) {
        addSeckillOrderVoReq.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addOrder_argsStandardSchemeFactory implements SchemeFactory {
      public addOrder_argsStandardScheme getScheme() {
        return new addOrder_argsStandardScheme();
      }
    }

    private static class addOrder_argsStandardScheme extends StandardScheme<addOrder_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addOrder_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ADD_SECKILL_ORDER_VO_REQ
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.addSeckillOrderVoReq = new com.froad.thrift.vo.order.AddSeckillOrderVoReq();
                struct.addSeckillOrderVoReq.read(iprot);
                struct.setAddSeckillOrderVoReqIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addOrder_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.addSeckillOrderVoReq != null) {
          oprot.writeFieldBegin(ADD_SECKILL_ORDER_VO_REQ_FIELD_DESC);
          struct.addSeckillOrderVoReq.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addOrder_argsTupleSchemeFactory implements SchemeFactory {
      public addOrder_argsTupleScheme getScheme() {
        return new addOrder_argsTupleScheme();
      }
    }

    private static class addOrder_argsTupleScheme extends TupleScheme<addOrder_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addOrder_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAddSeckillOrderVoReq()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetAddSeckillOrderVoReq()) {
          struct.addSeckillOrderVoReq.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addOrder_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.addSeckillOrderVoReq = new com.froad.thrift.vo.order.AddSeckillOrderVoReq();
          struct.addSeckillOrderVoReq.read(iprot);
          struct.setAddSeckillOrderVoReqIsSet(true);
        }
      }
    }

  }

  public static class addOrder_result implements org.apache.thrift.TBase<addOrder_result, addOrder_result._Fields>, java.io.Serializable, Cloneable, Comparable<addOrder_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addOrder_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addOrder_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addOrder_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.order.AddSeckillOrderVoRes success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.order.AddSeckillOrderVoRes.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addOrder_result.class, metaDataMap);
    }

    public addOrder_result() {
    }

    public addOrder_result(
      com.froad.thrift.vo.order.AddSeckillOrderVoRes success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addOrder_result(addOrder_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.order.AddSeckillOrderVoRes(other.success);
      }
    }

    public addOrder_result deepCopy() {
      return new addOrder_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.order.AddSeckillOrderVoRes getSuccess() {
      return this.success;
    }

    public addOrder_result setSuccess(com.froad.thrift.vo.order.AddSeckillOrderVoRes success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.order.AddSeckillOrderVoRes)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addOrder_result)
        return this.equals((addOrder_result)that);
      return false;
    }

    public boolean equals(addOrder_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(addOrder_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addOrder_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addOrder_resultStandardSchemeFactory implements SchemeFactory {
      public addOrder_resultStandardScheme getScheme() {
        return new addOrder_resultStandardScheme();
      }
    }

    private static class addOrder_resultStandardScheme extends StandardScheme<addOrder_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addOrder_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.order.AddSeckillOrderVoRes();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addOrder_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addOrder_resultTupleSchemeFactory implements SchemeFactory {
      public addOrder_resultTupleScheme getScheme() {
        return new addOrder_resultTupleScheme();
      }
    }

    private static class addOrder_resultTupleScheme extends TupleScheme<addOrder_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addOrder_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addOrder_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.order.AddSeckillOrderVoRes();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateDeliveryInfo_args implements org.apache.thrift.TBase<updateDeliveryInfo_args, updateDeliveryInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateDeliveryInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateDeliveryInfo_args");

    private static final org.apache.thrift.protocol.TField ADD_DELIVERY_INFO_VO_REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("addDeliveryInfoVoReq", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateDeliveryInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateDeliveryInfo_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.order.AddDeliveryInfoVoReq addDeliveryInfoVoReq; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ADD_DELIVERY_INFO_VO_REQ((short)1, "addDeliveryInfoVoReq");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ADD_DELIVERY_INFO_VO_REQ
            return ADD_DELIVERY_INFO_VO_REQ;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ADD_DELIVERY_INFO_VO_REQ, new org.apache.thrift.meta_data.FieldMetaData("addDeliveryInfoVoReq", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.order.AddDeliveryInfoVoReq.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateDeliveryInfo_args.class, metaDataMap);
    }

    public updateDeliveryInfo_args() {
    }

    public updateDeliveryInfo_args(
      com.froad.thrift.vo.order.AddDeliveryInfoVoReq addDeliveryInfoVoReq)
    {
      this();
      this.addDeliveryInfoVoReq = addDeliveryInfoVoReq;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateDeliveryInfo_args(updateDeliveryInfo_args other) {
      if (other.isSetAddDeliveryInfoVoReq()) {
        this.addDeliveryInfoVoReq = new com.froad.thrift.vo.order.AddDeliveryInfoVoReq(other.addDeliveryInfoVoReq);
      }
    }

    public updateDeliveryInfo_args deepCopy() {
      return new updateDeliveryInfo_args(this);
    }

    @Override
    public void clear() {
      this.addDeliveryInfoVoReq = null;
    }

    public com.froad.thrift.vo.order.AddDeliveryInfoVoReq getAddDeliveryInfoVoReq() {
      return this.addDeliveryInfoVoReq;
    }

    public updateDeliveryInfo_args setAddDeliveryInfoVoReq(com.froad.thrift.vo.order.AddDeliveryInfoVoReq addDeliveryInfoVoReq) {
      this.addDeliveryInfoVoReq = addDeliveryInfoVoReq;
      return this;
    }

    public void unsetAddDeliveryInfoVoReq() {
      this.addDeliveryInfoVoReq = null;
    }

    /** Returns true if field addDeliveryInfoVoReq is set (has been assigned a value) and false otherwise */
    public boolean isSetAddDeliveryInfoVoReq() {
      return this.addDeliveryInfoVoReq != null;
    }

    public void setAddDeliveryInfoVoReqIsSet(boolean value) {
      if (!value) {
        this.addDeliveryInfoVoReq = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ADD_DELIVERY_INFO_VO_REQ:
        if (value == null) {
          unsetAddDeliveryInfoVoReq();
        } else {
          setAddDeliveryInfoVoReq((com.froad.thrift.vo.order.AddDeliveryInfoVoReq)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ADD_DELIVERY_INFO_VO_REQ:
        return getAddDeliveryInfoVoReq();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ADD_DELIVERY_INFO_VO_REQ:
        return isSetAddDeliveryInfoVoReq();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateDeliveryInfo_args)
        return this.equals((updateDeliveryInfo_args)that);
      return false;
    }

    public boolean equals(updateDeliveryInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_addDeliveryInfoVoReq = true && this.isSetAddDeliveryInfoVoReq();
      boolean that_present_addDeliveryInfoVoReq = true && that.isSetAddDeliveryInfoVoReq();
      if (this_present_addDeliveryInfoVoReq || that_present_addDeliveryInfoVoReq) {
        if (!(this_present_addDeliveryInfoVoReq && that_present_addDeliveryInfoVoReq))
          return false;
        if (!this.addDeliveryInfoVoReq.equals(that.addDeliveryInfoVoReq))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_addDeliveryInfoVoReq = true && (isSetAddDeliveryInfoVoReq());
      list.add(present_addDeliveryInfoVoReq);
      if (present_addDeliveryInfoVoReq)
        list.add(addDeliveryInfoVoReq);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateDeliveryInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAddDeliveryInfoVoReq()).compareTo(other.isSetAddDeliveryInfoVoReq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAddDeliveryInfoVoReq()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.addDeliveryInfoVoReq, other.addDeliveryInfoVoReq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateDeliveryInfo_args(");
      boolean first = true;

      sb.append("addDeliveryInfoVoReq:");
      if (this.addDeliveryInfoVoReq == null) {
        sb.append("null");
      } else {
        sb.append(this.addDeliveryInfoVoReq);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (addDeliveryInfoVoReq != null) {
        addDeliveryInfoVoReq.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateDeliveryInfo_argsStandardSchemeFactory implements SchemeFactory {
      public updateDeliveryInfo_argsStandardScheme getScheme() {
        return new updateDeliveryInfo_argsStandardScheme();
      }
    }

    private static class updateDeliveryInfo_argsStandardScheme extends StandardScheme<updateDeliveryInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateDeliveryInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ADD_DELIVERY_INFO_VO_REQ
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.addDeliveryInfoVoReq = new com.froad.thrift.vo.order.AddDeliveryInfoVoReq();
                struct.addDeliveryInfoVoReq.read(iprot);
                struct.setAddDeliveryInfoVoReqIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateDeliveryInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.addDeliveryInfoVoReq != null) {
          oprot.writeFieldBegin(ADD_DELIVERY_INFO_VO_REQ_FIELD_DESC);
          struct.addDeliveryInfoVoReq.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateDeliveryInfo_argsTupleSchemeFactory implements SchemeFactory {
      public updateDeliveryInfo_argsTupleScheme getScheme() {
        return new updateDeliveryInfo_argsTupleScheme();
      }
    }

    private static class updateDeliveryInfo_argsTupleScheme extends TupleScheme<updateDeliveryInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateDeliveryInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAddDeliveryInfoVoReq()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetAddDeliveryInfoVoReq()) {
          struct.addDeliveryInfoVoReq.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateDeliveryInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.addDeliveryInfoVoReq = new com.froad.thrift.vo.order.AddDeliveryInfoVoReq();
          struct.addDeliveryInfoVoReq.read(iprot);
          struct.setAddDeliveryInfoVoReqIsSet(true);
        }
      }
    }

  }

  public static class updateDeliveryInfo_result implements org.apache.thrift.TBase<updateDeliveryInfo_result, updateDeliveryInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateDeliveryInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateDeliveryInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateDeliveryInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateDeliveryInfo_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.order.AddDeliveryInfoVoRes success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.order.AddDeliveryInfoVoRes.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateDeliveryInfo_result.class, metaDataMap);
    }

    public updateDeliveryInfo_result() {
    }

    public updateDeliveryInfo_result(
      com.froad.thrift.vo.order.AddDeliveryInfoVoRes success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateDeliveryInfo_result(updateDeliveryInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.order.AddDeliveryInfoVoRes(other.success);
      }
    }

    public updateDeliveryInfo_result deepCopy() {
      return new updateDeliveryInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.order.AddDeliveryInfoVoRes getSuccess() {
      return this.success;
    }

    public updateDeliveryInfo_result setSuccess(com.froad.thrift.vo.order.AddDeliveryInfoVoRes success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.order.AddDeliveryInfoVoRes)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateDeliveryInfo_result)
        return this.equals((updateDeliveryInfo_result)that);
      return false;
    }

    public boolean equals(updateDeliveryInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateDeliveryInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateDeliveryInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateDeliveryInfo_resultStandardSchemeFactory implements SchemeFactory {
      public updateDeliveryInfo_resultStandardScheme getScheme() {
        return new updateDeliveryInfo_resultStandardScheme();
      }
    }

    private static class updateDeliveryInfo_resultStandardScheme extends StandardScheme<updateDeliveryInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateDeliveryInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.order.AddDeliveryInfoVoRes();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateDeliveryInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateDeliveryInfo_resultTupleSchemeFactory implements SchemeFactory {
      public updateDeliveryInfo_resultTupleScheme getScheme() {
        return new updateDeliveryInfo_resultTupleScheme();
      }
    }

    private static class updateDeliveryInfo_resultTupleScheme extends TupleScheme<updateDeliveryInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateDeliveryInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateDeliveryInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.order.AddDeliveryInfoVoRes();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class addOrderForSeckill_args implements org.apache.thrift.TBase<addOrderForSeckill_args, addOrderForSeckill_args._Fields>, java.io.Serializable, Cloneable, Comparable<addOrderForSeckill_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addOrderForSeckill_args");

    private static final org.apache.thrift.protocol.TField ADD_ORDER_FOR_SECKILL_VO_REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("addOrderForSeckillVoReq", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addOrderForSeckill_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addOrderForSeckill_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.order.AddOrderForSeckillVoReq addOrderForSeckillVoReq; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ADD_ORDER_FOR_SECKILL_VO_REQ((short)1, "addOrderForSeckillVoReq");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ADD_ORDER_FOR_SECKILL_VO_REQ
            return ADD_ORDER_FOR_SECKILL_VO_REQ;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ADD_ORDER_FOR_SECKILL_VO_REQ, new org.apache.thrift.meta_data.FieldMetaData("addOrderForSeckillVoReq", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.order.AddOrderForSeckillVoReq.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addOrderForSeckill_args.class, metaDataMap);
    }

    public addOrderForSeckill_args() {
    }

    public addOrderForSeckill_args(
      com.froad.thrift.vo.order.AddOrderForSeckillVoReq addOrderForSeckillVoReq)
    {
      this();
      this.addOrderForSeckillVoReq = addOrderForSeckillVoReq;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addOrderForSeckill_args(addOrderForSeckill_args other) {
      if (other.isSetAddOrderForSeckillVoReq()) {
        this.addOrderForSeckillVoReq = new com.froad.thrift.vo.order.AddOrderForSeckillVoReq(other.addOrderForSeckillVoReq);
      }
    }

    public addOrderForSeckill_args deepCopy() {
      return new addOrderForSeckill_args(this);
    }

    @Override
    public void clear() {
      this.addOrderForSeckillVoReq = null;
    }

    public com.froad.thrift.vo.order.AddOrderForSeckillVoReq getAddOrderForSeckillVoReq() {
      return this.addOrderForSeckillVoReq;
    }

    public addOrderForSeckill_args setAddOrderForSeckillVoReq(com.froad.thrift.vo.order.AddOrderForSeckillVoReq addOrderForSeckillVoReq) {
      this.addOrderForSeckillVoReq = addOrderForSeckillVoReq;
      return this;
    }

    public void unsetAddOrderForSeckillVoReq() {
      this.addOrderForSeckillVoReq = null;
    }

    /** Returns true if field addOrderForSeckillVoReq is set (has been assigned a value) and false otherwise */
    public boolean isSetAddOrderForSeckillVoReq() {
      return this.addOrderForSeckillVoReq != null;
    }

    public void setAddOrderForSeckillVoReqIsSet(boolean value) {
      if (!value) {
        this.addOrderForSeckillVoReq = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ADD_ORDER_FOR_SECKILL_VO_REQ:
        if (value == null) {
          unsetAddOrderForSeckillVoReq();
        } else {
          setAddOrderForSeckillVoReq((com.froad.thrift.vo.order.AddOrderForSeckillVoReq)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ADD_ORDER_FOR_SECKILL_VO_REQ:
        return getAddOrderForSeckillVoReq();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ADD_ORDER_FOR_SECKILL_VO_REQ:
        return isSetAddOrderForSeckillVoReq();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addOrderForSeckill_args)
        return this.equals((addOrderForSeckill_args)that);
      return false;
    }

    public boolean equals(addOrderForSeckill_args that) {
      if (that == null)
        return false;

      boolean this_present_addOrderForSeckillVoReq = true && this.isSetAddOrderForSeckillVoReq();
      boolean that_present_addOrderForSeckillVoReq = true && that.isSetAddOrderForSeckillVoReq();
      if (this_present_addOrderForSeckillVoReq || that_present_addOrderForSeckillVoReq) {
        if (!(this_present_addOrderForSeckillVoReq && that_present_addOrderForSeckillVoReq))
          return false;
        if (!this.addOrderForSeckillVoReq.equals(that.addOrderForSeckillVoReq))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_addOrderForSeckillVoReq = true && (isSetAddOrderForSeckillVoReq());
      list.add(present_addOrderForSeckillVoReq);
      if (present_addOrderForSeckillVoReq)
        list.add(addOrderForSeckillVoReq);

      return list.hashCode();
    }

    @Override
    public int compareTo(addOrderForSeckill_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAddOrderForSeckillVoReq()).compareTo(other.isSetAddOrderForSeckillVoReq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAddOrderForSeckillVoReq()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.addOrderForSeckillVoReq, other.addOrderForSeckillVoReq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addOrderForSeckill_args(");
      boolean first = true;

      sb.append("addOrderForSeckillVoReq:");
      if (this.addOrderForSeckillVoReq == null) {
        sb.append("null");
      } else {
        sb.append(this.addOrderForSeckillVoReq);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (addOrderForSeckillVoReq != null) {
        addOrderForSeckillVoReq.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addOrderForSeckill_argsStandardSchemeFactory implements SchemeFactory {
      public addOrderForSeckill_argsStandardScheme getScheme() {
        return new addOrderForSeckill_argsStandardScheme();
      }
    }

    private static class addOrderForSeckill_argsStandardScheme extends StandardScheme<addOrderForSeckill_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addOrderForSeckill_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ADD_ORDER_FOR_SECKILL_VO_REQ
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.addOrderForSeckillVoReq = new com.froad.thrift.vo.order.AddOrderForSeckillVoReq();
                struct.addOrderForSeckillVoReq.read(iprot);
                struct.setAddOrderForSeckillVoReqIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addOrderForSeckill_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.addOrderForSeckillVoReq != null) {
          oprot.writeFieldBegin(ADD_ORDER_FOR_SECKILL_VO_REQ_FIELD_DESC);
          struct.addOrderForSeckillVoReq.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addOrderForSeckill_argsTupleSchemeFactory implements SchemeFactory {
      public addOrderForSeckill_argsTupleScheme getScheme() {
        return new addOrderForSeckill_argsTupleScheme();
      }
    }

    private static class addOrderForSeckill_argsTupleScheme extends TupleScheme<addOrderForSeckill_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addOrderForSeckill_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAddOrderForSeckillVoReq()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetAddOrderForSeckillVoReq()) {
          struct.addOrderForSeckillVoReq.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addOrderForSeckill_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.addOrderForSeckillVoReq = new com.froad.thrift.vo.order.AddOrderForSeckillVoReq();
          struct.addOrderForSeckillVoReq.read(iprot);
          struct.setAddOrderForSeckillVoReqIsSet(true);
        }
      }
    }

  }

  public static class addOrderForSeckill_result implements org.apache.thrift.TBase<addOrderForSeckill_result, addOrderForSeckill_result._Fields>, java.io.Serializable, Cloneable, Comparable<addOrderForSeckill_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addOrderForSeckill_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addOrderForSeckill_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addOrderForSeckill_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.order.AddOrderForSeckillVoRes success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.order.AddOrderForSeckillVoRes.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addOrderForSeckill_result.class, metaDataMap);
    }

    public addOrderForSeckill_result() {
    }

    public addOrderForSeckill_result(
      com.froad.thrift.vo.order.AddOrderForSeckillVoRes success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addOrderForSeckill_result(addOrderForSeckill_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.order.AddOrderForSeckillVoRes(other.success);
      }
    }

    public addOrderForSeckill_result deepCopy() {
      return new addOrderForSeckill_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.order.AddOrderForSeckillVoRes getSuccess() {
      return this.success;
    }

    public addOrderForSeckill_result setSuccess(com.froad.thrift.vo.order.AddOrderForSeckillVoRes success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.order.AddOrderForSeckillVoRes)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addOrderForSeckill_result)
        return this.equals((addOrderForSeckill_result)that);
      return false;
    }

    public boolean equals(addOrderForSeckill_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(addOrderForSeckill_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addOrderForSeckill_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addOrderForSeckill_resultStandardSchemeFactory implements SchemeFactory {
      public addOrderForSeckill_resultStandardScheme getScheme() {
        return new addOrderForSeckill_resultStandardScheme();
      }
    }

    private static class addOrderForSeckill_resultStandardScheme extends StandardScheme<addOrderForSeckill_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addOrderForSeckill_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.order.AddOrderForSeckillVoRes();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addOrderForSeckill_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addOrderForSeckill_resultTupleSchemeFactory implements SchemeFactory {
      public addOrderForSeckill_resultTupleScheme getScheme() {
        return new addOrderForSeckill_resultTupleScheme();
      }
    }

    private static class addOrderForSeckill_resultTupleScheme extends TupleScheme<addOrderForSeckill_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addOrderForSeckill_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addOrderForSeckill_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.order.AddOrderForSeckillVoRes();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
