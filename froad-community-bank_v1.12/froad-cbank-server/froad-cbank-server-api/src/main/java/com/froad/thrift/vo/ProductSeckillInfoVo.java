/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.vo;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 商品秒杀配置明细信息
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class ProductSeckillInfoVo implements org.apache.thrift.TBase<ProductSeckillInfoVo, ProductSeckillInfoVo._Fields>, java.io.Serializable, Cloneable, Comparable<ProductSeckillInfoVo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ProductSeckillInfoVo");

  private static final org.apache.thrift.protocol.TField PLAT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("platType", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField PRODUCT_SECKILL_FIELD_DESC = new org.apache.thrift.protocol.TField("productSeckill", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField PRODUCT_CATEGORY_FIELD_DESC = new org.apache.thrift.protocol.TField("productCategory", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField BUY_LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("buyLimit", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField IMAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("image", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField OUTLET_FIELD_DESC = new org.apache.thrift.protocol.TField("outlet", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField ACTIVITIES_FIELD_DESC = new org.apache.thrift.protocol.TField("activities", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField ORG_CODES_FIELD_DESC = new org.apache.thrift.protocol.TField("orgCodes", org.apache.thrift.protocol.TType.LIST, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ProductSeckillInfoVoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ProductSeckillInfoVoTupleSchemeFactory());
  }

  /**
   * 商品新加修改管理平台
   */
  public String platType; // required
  /**
   * 商品秒杀配置基础信息
   */
  public ProductSeckillVo productSeckill; // required
  /**
   * 商品分类
   */
  public ProductCategoryVo productCategory; // required
  /**
   * 商品限购信息
   */
  public ProductBuyLimitVo buyLimit; // required
  /**
   * 商品图片列表
   */
  public List<ProductImageVo> image; // required
  /**
   * 商品门店列表
   */
  public List<ProductOutletVo> outlet; // required
  /**
   * 商品活动
   */
  public List<ProductActivitiesVo> activities; // required
  /**
   * 商品对应网店所属的机构代码列表
   */
  public List<String> orgCodes; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 商品新加修改管理平台
     */
    PLAT_TYPE((short)1, "platType"),
    /**
     * 商品秒杀配置基础信息
     */
    PRODUCT_SECKILL((short)2, "productSeckill"),
    /**
     * 商品分类
     */
    PRODUCT_CATEGORY((short)3, "productCategory"),
    /**
     * 商品限购信息
     */
    BUY_LIMIT((short)4, "buyLimit"),
    /**
     * 商品图片列表
     */
    IMAGE((short)5, "image"),
    /**
     * 商品门店列表
     */
    OUTLET((short)6, "outlet"),
    /**
     * 商品活动
     */
    ACTIVITIES((short)7, "activities"),
    /**
     * 商品对应网店所属的机构代码列表
     */
    ORG_CODES((short)8, "orgCodes");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PLAT_TYPE
          return PLAT_TYPE;
        case 2: // PRODUCT_SECKILL
          return PRODUCT_SECKILL;
        case 3: // PRODUCT_CATEGORY
          return PRODUCT_CATEGORY;
        case 4: // BUY_LIMIT
          return BUY_LIMIT;
        case 5: // IMAGE
          return IMAGE;
        case 6: // OUTLET
          return OUTLET;
        case 7: // ACTIVITIES
          return ACTIVITIES;
        case 8: // ORG_CODES
          return ORG_CODES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PLAT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("platType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRODUCT_SECKILL, new org.apache.thrift.meta_data.FieldMetaData("productSeckill", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ProductSeckillVo.class)));
    tmpMap.put(_Fields.PRODUCT_CATEGORY, new org.apache.thrift.meta_data.FieldMetaData("productCategory", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ProductCategoryVo.class)));
    tmpMap.put(_Fields.BUY_LIMIT, new org.apache.thrift.meta_data.FieldMetaData("buyLimit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ProductBuyLimitVo.class)));
    tmpMap.put(_Fields.IMAGE, new org.apache.thrift.meta_data.FieldMetaData("image", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ProductImageVo.class))));
    tmpMap.put(_Fields.OUTLET, new org.apache.thrift.meta_data.FieldMetaData("outlet", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ProductOutletVo.class))));
    tmpMap.put(_Fields.ACTIVITIES, new org.apache.thrift.meta_data.FieldMetaData("activities", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ProductActivitiesVo.class))));
    tmpMap.put(_Fields.ORG_CODES, new org.apache.thrift.meta_data.FieldMetaData("orgCodes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ProductSeckillInfoVo.class, metaDataMap);
  }

  public ProductSeckillInfoVo() {
  }

  public ProductSeckillInfoVo(
    String platType,
    ProductSeckillVo productSeckill,
    ProductCategoryVo productCategory,
    ProductBuyLimitVo buyLimit,
    List<ProductImageVo> image,
    List<ProductOutletVo> outlet,
    List<ProductActivitiesVo> activities,
    List<String> orgCodes)
  {
    this();
    this.platType = platType;
    this.productSeckill = productSeckill;
    this.productCategory = productCategory;
    this.buyLimit = buyLimit;
    this.image = image;
    this.outlet = outlet;
    this.activities = activities;
    this.orgCodes = orgCodes;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ProductSeckillInfoVo(ProductSeckillInfoVo other) {
    if (other.isSetPlatType()) {
      this.platType = other.platType;
    }
    if (other.isSetProductSeckill()) {
      this.productSeckill = new ProductSeckillVo(other.productSeckill);
    }
    if (other.isSetProductCategory()) {
      this.productCategory = new ProductCategoryVo(other.productCategory);
    }
    if (other.isSetBuyLimit()) {
      this.buyLimit = new ProductBuyLimitVo(other.buyLimit);
    }
    if (other.isSetImage()) {
      List<ProductImageVo> __this__image = new ArrayList<ProductImageVo>(other.image.size());
      for (ProductImageVo other_element : other.image) {
        __this__image.add(new ProductImageVo(other_element));
      }
      this.image = __this__image;
    }
    if (other.isSetOutlet()) {
      List<ProductOutletVo> __this__outlet = new ArrayList<ProductOutletVo>(other.outlet.size());
      for (ProductOutletVo other_element : other.outlet) {
        __this__outlet.add(new ProductOutletVo(other_element));
      }
      this.outlet = __this__outlet;
    }
    if (other.isSetActivities()) {
      List<ProductActivitiesVo> __this__activities = new ArrayList<ProductActivitiesVo>(other.activities.size());
      for (ProductActivitiesVo other_element : other.activities) {
        __this__activities.add(new ProductActivitiesVo(other_element));
      }
      this.activities = __this__activities;
    }
    if (other.isSetOrgCodes()) {
      List<String> __this__orgCodes = new ArrayList<String>(other.orgCodes);
      this.orgCodes = __this__orgCodes;
    }
  }

  public ProductSeckillInfoVo deepCopy() {
    return new ProductSeckillInfoVo(this);
  }

  @Override
  public void clear() {
    this.platType = null;
    this.productSeckill = null;
    this.productCategory = null;
    this.buyLimit = null;
    this.image = null;
    this.outlet = null;
    this.activities = null;
    this.orgCodes = null;
  }

  /**
   * 商品新加修改管理平台
   */
  public String getPlatType() {
    return this.platType;
  }

  /**
   * 商品新加修改管理平台
   */
  public ProductSeckillInfoVo setPlatType(String platType) {
    this.platType = platType;
    return this;
  }

  public void unsetPlatType() {
    this.platType = null;
  }

  /** Returns true if field platType is set (has been assigned a value) and false otherwise */
  public boolean isSetPlatType() {
    return this.platType != null;
  }

  public void setPlatTypeIsSet(boolean value) {
    if (!value) {
      this.platType = null;
    }
  }

  /**
   * 商品秒杀配置基础信息
   */
  public ProductSeckillVo getProductSeckill() {
    return this.productSeckill;
  }

  /**
   * 商品秒杀配置基础信息
   */
  public ProductSeckillInfoVo setProductSeckill(ProductSeckillVo productSeckill) {
    this.productSeckill = productSeckill;
    return this;
  }

  public void unsetProductSeckill() {
    this.productSeckill = null;
  }

  /** Returns true if field productSeckill is set (has been assigned a value) and false otherwise */
  public boolean isSetProductSeckill() {
    return this.productSeckill != null;
  }

  public void setProductSeckillIsSet(boolean value) {
    if (!value) {
      this.productSeckill = null;
    }
  }

  /**
   * 商品分类
   */
  public ProductCategoryVo getProductCategory() {
    return this.productCategory;
  }

  /**
   * 商品分类
   */
  public ProductSeckillInfoVo setProductCategory(ProductCategoryVo productCategory) {
    this.productCategory = productCategory;
    return this;
  }

  public void unsetProductCategory() {
    this.productCategory = null;
  }

  /** Returns true if field productCategory is set (has been assigned a value) and false otherwise */
  public boolean isSetProductCategory() {
    return this.productCategory != null;
  }

  public void setProductCategoryIsSet(boolean value) {
    if (!value) {
      this.productCategory = null;
    }
  }

  /**
   * 商品限购信息
   */
  public ProductBuyLimitVo getBuyLimit() {
    return this.buyLimit;
  }

  /**
   * 商品限购信息
   */
  public ProductSeckillInfoVo setBuyLimit(ProductBuyLimitVo buyLimit) {
    this.buyLimit = buyLimit;
    return this;
  }

  public void unsetBuyLimit() {
    this.buyLimit = null;
  }

  /** Returns true if field buyLimit is set (has been assigned a value) and false otherwise */
  public boolean isSetBuyLimit() {
    return this.buyLimit != null;
  }

  public void setBuyLimitIsSet(boolean value) {
    if (!value) {
      this.buyLimit = null;
    }
  }

  public int getImageSize() {
    return (this.image == null) ? 0 : this.image.size();
  }

  public java.util.Iterator<ProductImageVo> getImageIterator() {
    return (this.image == null) ? null : this.image.iterator();
  }

  public void addToImage(ProductImageVo elem) {
    if (this.image == null) {
      this.image = new ArrayList<ProductImageVo>();
    }
    this.image.add(elem);
  }

  /**
   * 商品图片列表
   */
  public List<ProductImageVo> getImage() {
    return this.image;
  }

  /**
   * 商品图片列表
   */
  public ProductSeckillInfoVo setImage(List<ProductImageVo> image) {
    this.image = image;
    return this;
  }

  public void unsetImage() {
    this.image = null;
  }

  /** Returns true if field image is set (has been assigned a value) and false otherwise */
  public boolean isSetImage() {
    return this.image != null;
  }

  public void setImageIsSet(boolean value) {
    if (!value) {
      this.image = null;
    }
  }

  public int getOutletSize() {
    return (this.outlet == null) ? 0 : this.outlet.size();
  }

  public java.util.Iterator<ProductOutletVo> getOutletIterator() {
    return (this.outlet == null) ? null : this.outlet.iterator();
  }

  public void addToOutlet(ProductOutletVo elem) {
    if (this.outlet == null) {
      this.outlet = new ArrayList<ProductOutletVo>();
    }
    this.outlet.add(elem);
  }

  /**
   * 商品门店列表
   */
  public List<ProductOutletVo> getOutlet() {
    return this.outlet;
  }

  /**
   * 商品门店列表
   */
  public ProductSeckillInfoVo setOutlet(List<ProductOutletVo> outlet) {
    this.outlet = outlet;
    return this;
  }

  public void unsetOutlet() {
    this.outlet = null;
  }

  /** Returns true if field outlet is set (has been assigned a value) and false otherwise */
  public boolean isSetOutlet() {
    return this.outlet != null;
  }

  public void setOutletIsSet(boolean value) {
    if (!value) {
      this.outlet = null;
    }
  }

  public int getActivitiesSize() {
    return (this.activities == null) ? 0 : this.activities.size();
  }

  public java.util.Iterator<ProductActivitiesVo> getActivitiesIterator() {
    return (this.activities == null) ? null : this.activities.iterator();
  }

  public void addToActivities(ProductActivitiesVo elem) {
    if (this.activities == null) {
      this.activities = new ArrayList<ProductActivitiesVo>();
    }
    this.activities.add(elem);
  }

  /**
   * 商品活动
   */
  public List<ProductActivitiesVo> getActivities() {
    return this.activities;
  }

  /**
   * 商品活动
   */
  public ProductSeckillInfoVo setActivities(List<ProductActivitiesVo> activities) {
    this.activities = activities;
    return this;
  }

  public void unsetActivities() {
    this.activities = null;
  }

  /** Returns true if field activities is set (has been assigned a value) and false otherwise */
  public boolean isSetActivities() {
    return this.activities != null;
  }

  public void setActivitiesIsSet(boolean value) {
    if (!value) {
      this.activities = null;
    }
  }

  public int getOrgCodesSize() {
    return (this.orgCodes == null) ? 0 : this.orgCodes.size();
  }

  public java.util.Iterator<String> getOrgCodesIterator() {
    return (this.orgCodes == null) ? null : this.orgCodes.iterator();
  }

  public void addToOrgCodes(String elem) {
    if (this.orgCodes == null) {
      this.orgCodes = new ArrayList<String>();
    }
    this.orgCodes.add(elem);
  }

  /**
   * 商品对应网店所属的机构代码列表
   */
  public List<String> getOrgCodes() {
    return this.orgCodes;
  }

  /**
   * 商品对应网店所属的机构代码列表
   */
  public ProductSeckillInfoVo setOrgCodes(List<String> orgCodes) {
    this.orgCodes = orgCodes;
    return this;
  }

  public void unsetOrgCodes() {
    this.orgCodes = null;
  }

  /** Returns true if field orgCodes is set (has been assigned a value) and false otherwise */
  public boolean isSetOrgCodes() {
    return this.orgCodes != null;
  }

  public void setOrgCodesIsSet(boolean value) {
    if (!value) {
      this.orgCodes = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PLAT_TYPE:
      if (value == null) {
        unsetPlatType();
      } else {
        setPlatType((String)value);
      }
      break;

    case PRODUCT_SECKILL:
      if (value == null) {
        unsetProductSeckill();
      } else {
        setProductSeckill((ProductSeckillVo)value);
      }
      break;

    case PRODUCT_CATEGORY:
      if (value == null) {
        unsetProductCategory();
      } else {
        setProductCategory((ProductCategoryVo)value);
      }
      break;

    case BUY_LIMIT:
      if (value == null) {
        unsetBuyLimit();
      } else {
        setBuyLimit((ProductBuyLimitVo)value);
      }
      break;

    case IMAGE:
      if (value == null) {
        unsetImage();
      } else {
        setImage((List<ProductImageVo>)value);
      }
      break;

    case OUTLET:
      if (value == null) {
        unsetOutlet();
      } else {
        setOutlet((List<ProductOutletVo>)value);
      }
      break;

    case ACTIVITIES:
      if (value == null) {
        unsetActivities();
      } else {
        setActivities((List<ProductActivitiesVo>)value);
      }
      break;

    case ORG_CODES:
      if (value == null) {
        unsetOrgCodes();
      } else {
        setOrgCodes((List<String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PLAT_TYPE:
      return getPlatType();

    case PRODUCT_SECKILL:
      return getProductSeckill();

    case PRODUCT_CATEGORY:
      return getProductCategory();

    case BUY_LIMIT:
      return getBuyLimit();

    case IMAGE:
      return getImage();

    case OUTLET:
      return getOutlet();

    case ACTIVITIES:
      return getActivities();

    case ORG_CODES:
      return getOrgCodes();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PLAT_TYPE:
      return isSetPlatType();
    case PRODUCT_SECKILL:
      return isSetProductSeckill();
    case PRODUCT_CATEGORY:
      return isSetProductCategory();
    case BUY_LIMIT:
      return isSetBuyLimit();
    case IMAGE:
      return isSetImage();
    case OUTLET:
      return isSetOutlet();
    case ACTIVITIES:
      return isSetActivities();
    case ORG_CODES:
      return isSetOrgCodes();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ProductSeckillInfoVo)
      return this.equals((ProductSeckillInfoVo)that);
    return false;
  }

  public boolean equals(ProductSeckillInfoVo that) {
    if (that == null)
      return false;

    boolean this_present_platType = true && this.isSetPlatType();
    boolean that_present_platType = true && that.isSetPlatType();
    if (this_present_platType || that_present_platType) {
      if (!(this_present_platType && that_present_platType))
        return false;
      if (!this.platType.equals(that.platType))
        return false;
    }

    boolean this_present_productSeckill = true && this.isSetProductSeckill();
    boolean that_present_productSeckill = true && that.isSetProductSeckill();
    if (this_present_productSeckill || that_present_productSeckill) {
      if (!(this_present_productSeckill && that_present_productSeckill))
        return false;
      if (!this.productSeckill.equals(that.productSeckill))
        return false;
    }

    boolean this_present_productCategory = true && this.isSetProductCategory();
    boolean that_present_productCategory = true && that.isSetProductCategory();
    if (this_present_productCategory || that_present_productCategory) {
      if (!(this_present_productCategory && that_present_productCategory))
        return false;
      if (!this.productCategory.equals(that.productCategory))
        return false;
    }

    boolean this_present_buyLimit = true && this.isSetBuyLimit();
    boolean that_present_buyLimit = true && that.isSetBuyLimit();
    if (this_present_buyLimit || that_present_buyLimit) {
      if (!(this_present_buyLimit && that_present_buyLimit))
        return false;
      if (!this.buyLimit.equals(that.buyLimit))
        return false;
    }

    boolean this_present_image = true && this.isSetImage();
    boolean that_present_image = true && that.isSetImage();
    if (this_present_image || that_present_image) {
      if (!(this_present_image && that_present_image))
        return false;
      if (!this.image.equals(that.image))
        return false;
    }

    boolean this_present_outlet = true && this.isSetOutlet();
    boolean that_present_outlet = true && that.isSetOutlet();
    if (this_present_outlet || that_present_outlet) {
      if (!(this_present_outlet && that_present_outlet))
        return false;
      if (!this.outlet.equals(that.outlet))
        return false;
    }

    boolean this_present_activities = true && this.isSetActivities();
    boolean that_present_activities = true && that.isSetActivities();
    if (this_present_activities || that_present_activities) {
      if (!(this_present_activities && that_present_activities))
        return false;
      if (!this.activities.equals(that.activities))
        return false;
    }

    boolean this_present_orgCodes = true && this.isSetOrgCodes();
    boolean that_present_orgCodes = true && that.isSetOrgCodes();
    if (this_present_orgCodes || that_present_orgCodes) {
      if (!(this_present_orgCodes && that_present_orgCodes))
        return false;
      if (!this.orgCodes.equals(that.orgCodes))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_platType = true && (isSetPlatType());
    list.add(present_platType);
    if (present_platType)
      list.add(platType);

    boolean present_productSeckill = true && (isSetProductSeckill());
    list.add(present_productSeckill);
    if (present_productSeckill)
      list.add(productSeckill);

    boolean present_productCategory = true && (isSetProductCategory());
    list.add(present_productCategory);
    if (present_productCategory)
      list.add(productCategory);

    boolean present_buyLimit = true && (isSetBuyLimit());
    list.add(present_buyLimit);
    if (present_buyLimit)
      list.add(buyLimit);

    boolean present_image = true && (isSetImage());
    list.add(present_image);
    if (present_image)
      list.add(image);

    boolean present_outlet = true && (isSetOutlet());
    list.add(present_outlet);
    if (present_outlet)
      list.add(outlet);

    boolean present_activities = true && (isSetActivities());
    list.add(present_activities);
    if (present_activities)
      list.add(activities);

    boolean present_orgCodes = true && (isSetOrgCodes());
    list.add(present_orgCodes);
    if (present_orgCodes)
      list.add(orgCodes);

    return list.hashCode();
  }

  @Override
  public int compareTo(ProductSeckillInfoVo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPlatType()).compareTo(other.isSetPlatType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlatType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platType, other.platType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductSeckill()).compareTo(other.isSetProductSeckill());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductSeckill()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productSeckill, other.productSeckill);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductCategory()).compareTo(other.isSetProductCategory());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductCategory()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productCategory, other.productCategory);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBuyLimit()).compareTo(other.isSetBuyLimit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBuyLimit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.buyLimit, other.buyLimit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetImage()).compareTo(other.isSetImage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.image, other.image);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOutlet()).compareTo(other.isSetOutlet());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOutlet()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outlet, other.outlet);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActivities()).compareTo(other.isSetActivities());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActivities()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.activities, other.activities);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrgCodes()).compareTo(other.isSetOrgCodes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrgCodes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orgCodes, other.orgCodes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ProductSeckillInfoVo(");
    boolean first = true;

    sb.append("platType:");
    if (this.platType == null) {
      sb.append("null");
    } else {
      sb.append(this.platType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("productSeckill:");
    if (this.productSeckill == null) {
      sb.append("null");
    } else {
      sb.append(this.productSeckill);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("productCategory:");
    if (this.productCategory == null) {
      sb.append("null");
    } else {
      sb.append(this.productCategory);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("buyLimit:");
    if (this.buyLimit == null) {
      sb.append("null");
    } else {
      sb.append(this.buyLimit);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("image:");
    if (this.image == null) {
      sb.append("null");
    } else {
      sb.append(this.image);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("outlet:");
    if (this.outlet == null) {
      sb.append("null");
    } else {
      sb.append(this.outlet);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("activities:");
    if (this.activities == null) {
      sb.append("null");
    } else {
      sb.append(this.activities);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("orgCodes:");
    if (this.orgCodes == null) {
      sb.append("null");
    } else {
      sb.append(this.orgCodes);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (productSeckill != null) {
      productSeckill.validate();
    }
    if (productCategory != null) {
      productCategory.validate();
    }
    if (buyLimit != null) {
      buyLimit.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ProductSeckillInfoVoStandardSchemeFactory implements SchemeFactory {
    public ProductSeckillInfoVoStandardScheme getScheme() {
      return new ProductSeckillInfoVoStandardScheme();
    }
  }

  private static class ProductSeckillInfoVoStandardScheme extends StandardScheme<ProductSeckillInfoVo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ProductSeckillInfoVo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PLAT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.platType = iprot.readString();
              struct.setPlatTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PRODUCT_SECKILL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.productSeckill = new ProductSeckillVo();
              struct.productSeckill.read(iprot);
              struct.setProductSeckillIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PRODUCT_CATEGORY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.productCategory = new ProductCategoryVo();
              struct.productCategory.read(iprot);
              struct.setProductCategoryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // BUY_LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.buyLimit = new ProductBuyLimitVo();
              struct.buyLimit.read(iprot);
              struct.setBuyLimitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // IMAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list168 = iprot.readListBegin();
                struct.image = new ArrayList<ProductImageVo>(_list168.size);
                ProductImageVo _elem169;
                for (int _i170 = 0; _i170 < _list168.size; ++_i170)
                {
                  _elem169 = new ProductImageVo();
                  _elem169.read(iprot);
                  struct.image.add(_elem169);
                }
                iprot.readListEnd();
              }
              struct.setImageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // OUTLET
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list171 = iprot.readListBegin();
                struct.outlet = new ArrayList<ProductOutletVo>(_list171.size);
                ProductOutletVo _elem172;
                for (int _i173 = 0; _i173 < _list171.size; ++_i173)
                {
                  _elem172 = new ProductOutletVo();
                  _elem172.read(iprot);
                  struct.outlet.add(_elem172);
                }
                iprot.readListEnd();
              }
              struct.setOutletIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ACTIVITIES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list174 = iprot.readListBegin();
                struct.activities = new ArrayList<ProductActivitiesVo>(_list174.size);
                ProductActivitiesVo _elem175;
                for (int _i176 = 0; _i176 < _list174.size; ++_i176)
                {
                  _elem175 = new ProductActivitiesVo();
                  _elem175.read(iprot);
                  struct.activities.add(_elem175);
                }
                iprot.readListEnd();
              }
              struct.setActivitiesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ORG_CODES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list177 = iprot.readListBegin();
                struct.orgCodes = new ArrayList<String>(_list177.size);
                String _elem178;
                for (int _i179 = 0; _i179 < _list177.size; ++_i179)
                {
                  _elem178 = iprot.readString();
                  struct.orgCodes.add(_elem178);
                }
                iprot.readListEnd();
              }
              struct.setOrgCodesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ProductSeckillInfoVo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.platType != null) {
        oprot.writeFieldBegin(PLAT_TYPE_FIELD_DESC);
        oprot.writeString(struct.platType);
        oprot.writeFieldEnd();
      }
      if (struct.productSeckill != null) {
        oprot.writeFieldBegin(PRODUCT_SECKILL_FIELD_DESC);
        struct.productSeckill.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.productCategory != null) {
        oprot.writeFieldBegin(PRODUCT_CATEGORY_FIELD_DESC);
        struct.productCategory.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.buyLimit != null) {
        oprot.writeFieldBegin(BUY_LIMIT_FIELD_DESC);
        struct.buyLimit.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.image != null) {
        oprot.writeFieldBegin(IMAGE_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.image.size()));
          for (ProductImageVo _iter180 : struct.image)
          {
            _iter180.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.outlet != null) {
        oprot.writeFieldBegin(OUTLET_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.outlet.size()));
          for (ProductOutletVo _iter181 : struct.outlet)
          {
            _iter181.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.activities != null) {
        oprot.writeFieldBegin(ACTIVITIES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.activities.size()));
          for (ProductActivitiesVo _iter182 : struct.activities)
          {
            _iter182.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.orgCodes != null) {
        oprot.writeFieldBegin(ORG_CODES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.orgCodes.size()));
          for (String _iter183 : struct.orgCodes)
          {
            oprot.writeString(_iter183);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ProductSeckillInfoVoTupleSchemeFactory implements SchemeFactory {
    public ProductSeckillInfoVoTupleScheme getScheme() {
      return new ProductSeckillInfoVoTupleScheme();
    }
  }

  private static class ProductSeckillInfoVoTupleScheme extends TupleScheme<ProductSeckillInfoVo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ProductSeckillInfoVo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPlatType()) {
        optionals.set(0);
      }
      if (struct.isSetProductSeckill()) {
        optionals.set(1);
      }
      if (struct.isSetProductCategory()) {
        optionals.set(2);
      }
      if (struct.isSetBuyLimit()) {
        optionals.set(3);
      }
      if (struct.isSetImage()) {
        optionals.set(4);
      }
      if (struct.isSetOutlet()) {
        optionals.set(5);
      }
      if (struct.isSetActivities()) {
        optionals.set(6);
      }
      if (struct.isSetOrgCodes()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetPlatType()) {
        oprot.writeString(struct.platType);
      }
      if (struct.isSetProductSeckill()) {
        struct.productSeckill.write(oprot);
      }
      if (struct.isSetProductCategory()) {
        struct.productCategory.write(oprot);
      }
      if (struct.isSetBuyLimit()) {
        struct.buyLimit.write(oprot);
      }
      if (struct.isSetImage()) {
        {
          oprot.writeI32(struct.image.size());
          for (ProductImageVo _iter184 : struct.image)
          {
            _iter184.write(oprot);
          }
        }
      }
      if (struct.isSetOutlet()) {
        {
          oprot.writeI32(struct.outlet.size());
          for (ProductOutletVo _iter185 : struct.outlet)
          {
            _iter185.write(oprot);
          }
        }
      }
      if (struct.isSetActivities()) {
        {
          oprot.writeI32(struct.activities.size());
          for (ProductActivitiesVo _iter186 : struct.activities)
          {
            _iter186.write(oprot);
          }
        }
      }
      if (struct.isSetOrgCodes()) {
        {
          oprot.writeI32(struct.orgCodes.size());
          for (String _iter187 : struct.orgCodes)
          {
            oprot.writeString(_iter187);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ProductSeckillInfoVo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.platType = iprot.readString();
        struct.setPlatTypeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.productSeckill = new ProductSeckillVo();
        struct.productSeckill.read(iprot);
        struct.setProductSeckillIsSet(true);
      }
      if (incoming.get(2)) {
        struct.productCategory = new ProductCategoryVo();
        struct.productCategory.read(iprot);
        struct.setProductCategoryIsSet(true);
      }
      if (incoming.get(3)) {
        struct.buyLimit = new ProductBuyLimitVo();
        struct.buyLimit.read(iprot);
        struct.setBuyLimitIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list188 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.image = new ArrayList<ProductImageVo>(_list188.size);
          ProductImageVo _elem189;
          for (int _i190 = 0; _i190 < _list188.size; ++_i190)
          {
            _elem189 = new ProductImageVo();
            _elem189.read(iprot);
            struct.image.add(_elem189);
          }
        }
        struct.setImageIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list191 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.outlet = new ArrayList<ProductOutletVo>(_list191.size);
          ProductOutletVo _elem192;
          for (int _i193 = 0; _i193 < _list191.size; ++_i193)
          {
            _elem192 = new ProductOutletVo();
            _elem192.read(iprot);
            struct.outlet.add(_elem192);
          }
        }
        struct.setOutletIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list194 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.activities = new ArrayList<ProductActivitiesVo>(_list194.size);
          ProductActivitiesVo _elem195;
          for (int _i196 = 0; _i196 < _list194.size; ++_i196)
          {
            _elem195 = new ProductActivitiesVo();
            _elem195.read(iprot);
            struct.activities.add(_elem195);
          }
        }
        struct.setActivitiesIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TList _list197 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.orgCodes = new ArrayList<String>(_list197.size);
          String _elem198;
          for (int _i199 = 0; _i199 < _list197.size; ++_i199)
          {
            _elem198 = iprot.readString();
            struct.orgCodes.add(_elem198);
          }
        }
        struct.setOrgCodesIsSet(true);
      }
    }
  }

}

