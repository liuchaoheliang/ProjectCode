/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class TerminalStartService {

  /**
   * 客户端启动页服务接口
   * TerminalStartService
   */
  public interface Iface extends com.froad.thrift.monitor.service.BizMonitorService.Iface {

    /**
     * 客户端启动页查询
     * @param clientId 客户端id
     * @param appType 客户端类型  1-个人 2-商户
     * @param terminalType 终端类型 1-pc 2-andriod 3-ios
     * @return 启动页详情
     * 
     * @param clientId
     * @param appType
     * @param terminalType
     */
    public com.froad.thrift.vo.TerminalStartVo getTerminalStart(String clientId, String appType, String terminalType) throws org.apache.thrift.TException;

  }

  public interface AsyncIface extends com.froad.thrift.monitor.service.BizMonitorService .AsyncIface {

    public void getTerminalStart(String clientId, String appType, String terminalType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends com.froad.thrift.monitor.service.BizMonitorService.Client implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public com.froad.thrift.vo.TerminalStartVo getTerminalStart(String clientId, String appType, String terminalType) throws org.apache.thrift.TException
    {
      send_getTerminalStart(clientId, appType, terminalType);
      return recv_getTerminalStart();
    }

    public void send_getTerminalStart(String clientId, String appType, String terminalType) throws org.apache.thrift.TException
    {
      getTerminalStart_args args = new getTerminalStart_args();
      args.setClientId(clientId);
      args.setAppType(appType);
      args.setTerminalType(terminalType);
      sendBase("getTerminalStart", args);
    }

    public com.froad.thrift.vo.TerminalStartVo recv_getTerminalStart() throws org.apache.thrift.TException
    {
      getTerminalStart_result result = new getTerminalStart_result();
      receiveBase(result, "getTerminalStart");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTerminalStart failed: unknown result");
    }

  }
  public static class AsyncClient extends com.froad.thrift.monitor.service.BizMonitorService.AsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getTerminalStart(String clientId, String appType, String terminalType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getTerminalStart_call method_call = new getTerminalStart_call(clientId, appType, terminalType, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getTerminalStart_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String clientId;
      private String appType;
      private String terminalType;
      public getTerminalStart_call(String clientId, String appType, String terminalType, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.clientId = clientId;
        this.appType = appType;
        this.terminalType = terminalType;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTerminalStart", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getTerminalStart_args args = new getTerminalStart_args();
        args.setClientId(clientId);
        args.setAppType(appType);
        args.setTerminalType(terminalType);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.TerminalStartVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getTerminalStart();
      }
    }

  }

  public static class Processor<I extends Iface> extends com.froad.thrift.monitor.service.BizMonitorService.Processor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getTerminalStart", new getTerminalStart());
      return processMap;
    }

    public static class getTerminalStart<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTerminalStart_args> {
      public getTerminalStart() {
        super("getTerminalStart");
      }

      public getTerminalStart_args getEmptyArgsInstance() {
        return new getTerminalStart_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getTerminalStart_result getResult(I iface, getTerminalStart_args args) throws org.apache.thrift.TException {
        getTerminalStart_result result = new getTerminalStart_result();
        result.success = iface.getTerminalStart(args.clientId, args.appType, args.terminalType);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends com.froad.thrift.monitor.service.BizMonitorService.AsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getTerminalStart", new getTerminalStart());
      return processMap;
    }

    public static class getTerminalStart<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getTerminalStart_args, com.froad.thrift.vo.TerminalStartVo> {
      public getTerminalStart() {
        super("getTerminalStart");
      }

      public getTerminalStart_args getEmptyArgsInstance() {
        return new getTerminalStart_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.TerminalStartVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.TerminalStartVo>() { 
          public void onComplete(com.froad.thrift.vo.TerminalStartVo o) {
            getTerminalStart_result result = new getTerminalStart_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getTerminalStart_result result = new getTerminalStart_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getTerminalStart_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.TerminalStartVo> resultHandler) throws TException {
        iface.getTerminalStart(args.clientId, args.appType, args.terminalType,resultHandler);
      }
    }

  }

  public static class getTerminalStart_args implements org.apache.thrift.TBase<getTerminalStart_args, getTerminalStart_args._Fields>, java.io.Serializable, Cloneable, Comparable<getTerminalStart_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTerminalStart_args");

    private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField APP_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("appType", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField TERMINAL_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("terminalType", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTerminalStart_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTerminalStart_argsTupleSchemeFactory());
    }

    public String clientId; // required
    public String appType; // required
    public String terminalType; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CLIENT_ID((short)1, "clientId"),
      APP_TYPE((short)2, "appType"),
      TERMINAL_TYPE((short)3, "terminalType");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CLIENT_ID
            return CLIENT_ID;
          case 2: // APP_TYPE
            return APP_TYPE;
          case 3: // TERMINAL_TYPE
            return TERMINAL_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.APP_TYPE, new org.apache.thrift.meta_data.FieldMetaData("appType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TERMINAL_TYPE, new org.apache.thrift.meta_data.FieldMetaData("terminalType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTerminalStart_args.class, metaDataMap);
    }

    public getTerminalStart_args() {
    }

    public getTerminalStart_args(
      String clientId,
      String appType,
      String terminalType)
    {
      this();
      this.clientId = clientId;
      this.appType = appType;
      this.terminalType = terminalType;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTerminalStart_args(getTerminalStart_args other) {
      if (other.isSetClientId()) {
        this.clientId = other.clientId;
      }
      if (other.isSetAppType()) {
        this.appType = other.appType;
      }
      if (other.isSetTerminalType()) {
        this.terminalType = other.terminalType;
      }
    }

    public getTerminalStart_args deepCopy() {
      return new getTerminalStart_args(this);
    }

    @Override
    public void clear() {
      this.clientId = null;
      this.appType = null;
      this.terminalType = null;
    }

    public String getClientId() {
      return this.clientId;
    }

    public getTerminalStart_args setClientId(String clientId) {
      this.clientId = clientId;
      return this;
    }

    public void unsetClientId() {
      this.clientId = null;
    }

    /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
    public boolean isSetClientId() {
      return this.clientId != null;
    }

    public void setClientIdIsSet(boolean value) {
      if (!value) {
        this.clientId = null;
      }
    }

    public String getAppType() {
      return this.appType;
    }

    public getTerminalStart_args setAppType(String appType) {
      this.appType = appType;
      return this;
    }

    public void unsetAppType() {
      this.appType = null;
    }

    /** Returns true if field appType is set (has been assigned a value) and false otherwise */
    public boolean isSetAppType() {
      return this.appType != null;
    }

    public void setAppTypeIsSet(boolean value) {
      if (!value) {
        this.appType = null;
      }
    }

    public String getTerminalType() {
      return this.terminalType;
    }

    public getTerminalStart_args setTerminalType(String terminalType) {
      this.terminalType = terminalType;
      return this;
    }

    public void unsetTerminalType() {
      this.terminalType = null;
    }

    /** Returns true if field terminalType is set (has been assigned a value) and false otherwise */
    public boolean isSetTerminalType() {
      return this.terminalType != null;
    }

    public void setTerminalTypeIsSet(boolean value) {
      if (!value) {
        this.terminalType = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CLIENT_ID:
        if (value == null) {
          unsetClientId();
        } else {
          setClientId((String)value);
        }
        break;

      case APP_TYPE:
        if (value == null) {
          unsetAppType();
        } else {
          setAppType((String)value);
        }
        break;

      case TERMINAL_TYPE:
        if (value == null) {
          unsetTerminalType();
        } else {
          setTerminalType((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CLIENT_ID:
        return getClientId();

      case APP_TYPE:
        return getAppType();

      case TERMINAL_TYPE:
        return getTerminalType();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CLIENT_ID:
        return isSetClientId();
      case APP_TYPE:
        return isSetAppType();
      case TERMINAL_TYPE:
        return isSetTerminalType();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTerminalStart_args)
        return this.equals((getTerminalStart_args)that);
      return false;
    }

    public boolean equals(getTerminalStart_args that) {
      if (that == null)
        return false;

      boolean this_present_clientId = true && this.isSetClientId();
      boolean that_present_clientId = true && that.isSetClientId();
      if (this_present_clientId || that_present_clientId) {
        if (!(this_present_clientId && that_present_clientId))
          return false;
        if (!this.clientId.equals(that.clientId))
          return false;
      }

      boolean this_present_appType = true && this.isSetAppType();
      boolean that_present_appType = true && that.isSetAppType();
      if (this_present_appType || that_present_appType) {
        if (!(this_present_appType && that_present_appType))
          return false;
        if (!this.appType.equals(that.appType))
          return false;
      }

      boolean this_present_terminalType = true && this.isSetTerminalType();
      boolean that_present_terminalType = true && that.isSetTerminalType();
      if (this_present_terminalType || that_present_terminalType) {
        if (!(this_present_terminalType && that_present_terminalType))
          return false;
        if (!this.terminalType.equals(that.terminalType))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_clientId = true && (isSetClientId());
      list.add(present_clientId);
      if (present_clientId)
        list.add(clientId);

      boolean present_appType = true && (isSetAppType());
      list.add(present_appType);
      if (present_appType)
        list.add(appType);

      boolean present_terminalType = true && (isSetTerminalType());
      list.add(present_terminalType);
      if (present_terminalType)
        list.add(terminalType);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTerminalStart_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAppType()).compareTo(other.isSetAppType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAppType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appType, other.appType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTerminalType()).compareTo(other.isSetTerminalType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTerminalType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.terminalType, other.terminalType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTerminalStart_args(");
      boolean first = true;

      sb.append("clientId:");
      if (this.clientId == null) {
        sb.append("null");
      } else {
        sb.append(this.clientId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("appType:");
      if (this.appType == null) {
        sb.append("null");
      } else {
        sb.append(this.appType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("terminalType:");
      if (this.terminalType == null) {
        sb.append("null");
      } else {
        sb.append(this.terminalType);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTerminalStart_argsStandardSchemeFactory implements SchemeFactory {
      public getTerminalStart_argsStandardScheme getScheme() {
        return new getTerminalStart_argsStandardScheme();
      }
    }

    private static class getTerminalStart_argsStandardScheme extends StandardScheme<getTerminalStart_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTerminalStart_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CLIENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clientId = iprot.readString();
                struct.setClientIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // APP_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.appType = iprot.readString();
                struct.setAppTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TERMINAL_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.terminalType = iprot.readString();
                struct.setTerminalTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTerminalStart_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.clientId != null) {
          oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
          oprot.writeString(struct.clientId);
          oprot.writeFieldEnd();
        }
        if (struct.appType != null) {
          oprot.writeFieldBegin(APP_TYPE_FIELD_DESC);
          oprot.writeString(struct.appType);
          oprot.writeFieldEnd();
        }
        if (struct.terminalType != null) {
          oprot.writeFieldBegin(TERMINAL_TYPE_FIELD_DESC);
          oprot.writeString(struct.terminalType);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTerminalStart_argsTupleSchemeFactory implements SchemeFactory {
      public getTerminalStart_argsTupleScheme getScheme() {
        return new getTerminalStart_argsTupleScheme();
      }
    }

    private static class getTerminalStart_argsTupleScheme extends TupleScheme<getTerminalStart_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTerminalStart_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetClientId()) {
          optionals.set(0);
        }
        if (struct.isSetAppType()) {
          optionals.set(1);
        }
        if (struct.isSetTerminalType()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetClientId()) {
          oprot.writeString(struct.clientId);
        }
        if (struct.isSetAppType()) {
          oprot.writeString(struct.appType);
        }
        if (struct.isSetTerminalType()) {
          oprot.writeString(struct.terminalType);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTerminalStart_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.clientId = iprot.readString();
          struct.setClientIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.appType = iprot.readString();
          struct.setAppTypeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.terminalType = iprot.readString();
          struct.setTerminalTypeIsSet(true);
        }
      }
    }

  }

  public static class getTerminalStart_result implements org.apache.thrift.TBase<getTerminalStart_result, getTerminalStart_result._Fields>, java.io.Serializable, Cloneable, Comparable<getTerminalStart_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTerminalStart_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTerminalStart_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTerminalStart_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.TerminalStartVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.TerminalStartVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTerminalStart_result.class, metaDataMap);
    }

    public getTerminalStart_result() {
    }

    public getTerminalStart_result(
      com.froad.thrift.vo.TerminalStartVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTerminalStart_result(getTerminalStart_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.TerminalStartVo(other.success);
      }
    }

    public getTerminalStart_result deepCopy() {
      return new getTerminalStart_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.TerminalStartVo getSuccess() {
      return this.success;
    }

    public getTerminalStart_result setSuccess(com.froad.thrift.vo.TerminalStartVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.TerminalStartVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTerminalStart_result)
        return this.equals((getTerminalStart_result)that);
      return false;
    }

    public boolean equals(getTerminalStart_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTerminalStart_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTerminalStart_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTerminalStart_resultStandardSchemeFactory implements SchemeFactory {
      public getTerminalStart_resultStandardScheme getScheme() {
        return new getTerminalStart_resultStandardScheme();
      }
    }

    private static class getTerminalStart_resultStandardScheme extends StandardScheme<getTerminalStart_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTerminalStart_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.TerminalStartVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTerminalStart_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTerminalStart_resultTupleSchemeFactory implements SchemeFactory {
      public getTerminalStart_resultTupleScheme getScheme() {
        return new getTerminalStart_resultTupleScheme();
      }
    }

    private static class getTerminalStart_resultTupleScheme extends TupleScheme<getTerminalStart_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTerminalStart_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTerminalStart_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.TerminalStartVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
