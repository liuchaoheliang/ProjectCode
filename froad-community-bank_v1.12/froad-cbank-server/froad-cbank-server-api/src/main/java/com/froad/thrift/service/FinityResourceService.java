/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class FinityResourceService {

  /**
   * 资源服务接口
   * FinityResourceService
   */
  public interface Iface extends com.froad.thrift.monitor.service.BizMonitorService.Iface {

    /**
     * 增加 FinityResource
     * @param FinityResource 资源对象
     * @return long    主键ID(异常及错误返回-1)
     * 
     * @param originVo
     * @param finityResourceVo
     */
    public com.froad.thrift.vo.CommonAddVoRes addFinityResource(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.finity.FinityResourceVo finityResourceVo) throws org.apache.thrift.TException;

    /**
     * 删除 FinityResource
     * @param FinityResource
     * @return boolean
     * 
     * @param originVo
     * @param platform
     * @param resourceId
     */
    public com.froad.thrift.vo.ResultVo deleteFinityResource(com.froad.thrift.vo.OriginVo originVo, String platform, long resourceId) throws org.apache.thrift.TException;

    /**
     * 修改 FinityResource
     * @param FinityResource
     * @return boolean
     * 
     * @param originVo
     * @param finityResourceVo
     */
    public com.froad.thrift.vo.ResultVo updateFinityResource(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.finity.FinityResourceVo finityResourceVo) throws org.apache.thrift.TException;

    /**
     * 菜单位移
     * @param list<FinityVo.FinityResourceVo>
     * @return
     * 
     * @param originVo
     * @param finityResourceVoList
     */
    public com.froad.thrift.vo.ResultVo moveMenu(com.froad.thrift.vo.OriginVo originVo, List<com.froad.thrift.vo.finity.FinityResourceVo> finityResourceVoList) throws org.apache.thrift.TException;

    /**
     * 查询 FinityResource
     * @param FinityResource 过滤条件
     * @return List<FinityResourceVo>
     * 
     * @param finityResourceVo
     */
    public List<com.froad.thrift.vo.finity.FinityResourceVo> getBossFinityResource(com.froad.thrift.vo.finity.FinityResourceVo finityResourceVo) throws org.apache.thrift.TException;

    /**
     * 查询 FinityResource
     * @param FinityResource 过滤条件
     * @return List<FinityResourceVo>
     * 
     * @param finityResourceVo
     */
    public List<com.froad.thrift.vo.finity.FinityResourceVo> getFinityResource(com.froad.thrift.vo.finity.FinityResourceVo finityResourceVo) throws org.apache.thrift.TException;

    /**
     * 查询 FinityResource by 用户
     * @param FinityResource 过滤条件
     * @return List<FinityResourceVo>
     * 
     * @param finityResourceVo
     * @param userId
     * @param userType
     */
    public List<com.froad.thrift.vo.finity.FinityResourceVo> getFinityResourceByUser(com.froad.thrift.vo.finity.FinityResourceVo finityResourceVo, long userId, int userType) throws org.apache.thrift.TException;

    /**
     * 查询 FinityResource by 角色
     * @param FinityResource 过滤条件
     * @return List<FinityResourceVo>
     * 
     * @param finityResourceVo
     * @param roles
     */
    public List<com.froad.thrift.vo.finity.FinityResourceVo> getFinityResourceByRole(com.froad.thrift.vo.finity.FinityResourceVo finityResourceVo, List<Long> roles) throws org.apache.thrift.TException;

  }

  public interface AsyncIface extends com.froad.thrift.monitor.service.BizMonitorService .AsyncIface {

    public void addFinityResource(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.finity.FinityResourceVo finityResourceVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteFinityResource(com.froad.thrift.vo.OriginVo originVo, String platform, long resourceId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateFinityResource(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.finity.FinityResourceVo finityResourceVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void moveMenu(com.froad.thrift.vo.OriginVo originVo, List<com.froad.thrift.vo.finity.FinityResourceVo> finityResourceVoList, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getBossFinityResource(com.froad.thrift.vo.finity.FinityResourceVo finityResourceVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getFinityResource(com.froad.thrift.vo.finity.FinityResourceVo finityResourceVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getFinityResourceByUser(com.froad.thrift.vo.finity.FinityResourceVo finityResourceVo, long userId, int userType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getFinityResourceByRole(com.froad.thrift.vo.finity.FinityResourceVo finityResourceVo, List<Long> roles, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends com.froad.thrift.monitor.service.BizMonitorService.Client implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public com.froad.thrift.vo.CommonAddVoRes addFinityResource(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.finity.FinityResourceVo finityResourceVo) throws org.apache.thrift.TException
    {
      send_addFinityResource(originVo, finityResourceVo);
      return recv_addFinityResource();
    }

    public void send_addFinityResource(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.finity.FinityResourceVo finityResourceVo) throws org.apache.thrift.TException
    {
      addFinityResource_args args = new addFinityResource_args();
      args.setOriginVo(originVo);
      args.setFinityResourceVo(finityResourceVo);
      sendBase("addFinityResource", args);
    }

    public com.froad.thrift.vo.CommonAddVoRes recv_addFinityResource() throws org.apache.thrift.TException
    {
      addFinityResource_result result = new addFinityResource_result();
      receiveBase(result, "addFinityResource");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addFinityResource failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo deleteFinityResource(com.froad.thrift.vo.OriginVo originVo, String platform, long resourceId) throws org.apache.thrift.TException
    {
      send_deleteFinityResource(originVo, platform, resourceId);
      return recv_deleteFinityResource();
    }

    public void send_deleteFinityResource(com.froad.thrift.vo.OriginVo originVo, String platform, long resourceId) throws org.apache.thrift.TException
    {
      deleteFinityResource_args args = new deleteFinityResource_args();
      args.setOriginVo(originVo);
      args.setPlatform(platform);
      args.setResourceId(resourceId);
      sendBase("deleteFinityResource", args);
    }

    public com.froad.thrift.vo.ResultVo recv_deleteFinityResource() throws org.apache.thrift.TException
    {
      deleteFinityResource_result result = new deleteFinityResource_result();
      receiveBase(result, "deleteFinityResource");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteFinityResource failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo updateFinityResource(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.finity.FinityResourceVo finityResourceVo) throws org.apache.thrift.TException
    {
      send_updateFinityResource(originVo, finityResourceVo);
      return recv_updateFinityResource();
    }

    public void send_updateFinityResource(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.finity.FinityResourceVo finityResourceVo) throws org.apache.thrift.TException
    {
      updateFinityResource_args args = new updateFinityResource_args();
      args.setOriginVo(originVo);
      args.setFinityResourceVo(finityResourceVo);
      sendBase("updateFinityResource", args);
    }

    public com.froad.thrift.vo.ResultVo recv_updateFinityResource() throws org.apache.thrift.TException
    {
      updateFinityResource_result result = new updateFinityResource_result();
      receiveBase(result, "updateFinityResource");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateFinityResource failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo moveMenu(com.froad.thrift.vo.OriginVo originVo, List<com.froad.thrift.vo.finity.FinityResourceVo> finityResourceVoList) throws org.apache.thrift.TException
    {
      send_moveMenu(originVo, finityResourceVoList);
      return recv_moveMenu();
    }

    public void send_moveMenu(com.froad.thrift.vo.OriginVo originVo, List<com.froad.thrift.vo.finity.FinityResourceVo> finityResourceVoList) throws org.apache.thrift.TException
    {
      moveMenu_args args = new moveMenu_args();
      args.setOriginVo(originVo);
      args.setFinityResourceVoList(finityResourceVoList);
      sendBase("moveMenu", args);
    }

    public com.froad.thrift.vo.ResultVo recv_moveMenu() throws org.apache.thrift.TException
    {
      moveMenu_result result = new moveMenu_result();
      receiveBase(result, "moveMenu");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "moveMenu failed: unknown result");
    }

    public List<com.froad.thrift.vo.finity.FinityResourceVo> getBossFinityResource(com.froad.thrift.vo.finity.FinityResourceVo finityResourceVo) throws org.apache.thrift.TException
    {
      send_getBossFinityResource(finityResourceVo);
      return recv_getBossFinityResource();
    }

    public void send_getBossFinityResource(com.froad.thrift.vo.finity.FinityResourceVo finityResourceVo) throws org.apache.thrift.TException
    {
      getBossFinityResource_args args = new getBossFinityResource_args();
      args.setFinityResourceVo(finityResourceVo);
      sendBase("getBossFinityResource", args);
    }

    public List<com.froad.thrift.vo.finity.FinityResourceVo> recv_getBossFinityResource() throws org.apache.thrift.TException
    {
      getBossFinityResource_result result = new getBossFinityResource_result();
      receiveBase(result, "getBossFinityResource");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getBossFinityResource failed: unknown result");
    }

    public List<com.froad.thrift.vo.finity.FinityResourceVo> getFinityResource(com.froad.thrift.vo.finity.FinityResourceVo finityResourceVo) throws org.apache.thrift.TException
    {
      send_getFinityResource(finityResourceVo);
      return recv_getFinityResource();
    }

    public void send_getFinityResource(com.froad.thrift.vo.finity.FinityResourceVo finityResourceVo) throws org.apache.thrift.TException
    {
      getFinityResource_args args = new getFinityResource_args();
      args.setFinityResourceVo(finityResourceVo);
      sendBase("getFinityResource", args);
    }

    public List<com.froad.thrift.vo.finity.FinityResourceVo> recv_getFinityResource() throws org.apache.thrift.TException
    {
      getFinityResource_result result = new getFinityResource_result();
      receiveBase(result, "getFinityResource");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getFinityResource failed: unknown result");
    }

    public List<com.froad.thrift.vo.finity.FinityResourceVo> getFinityResourceByUser(com.froad.thrift.vo.finity.FinityResourceVo finityResourceVo, long userId, int userType) throws org.apache.thrift.TException
    {
      send_getFinityResourceByUser(finityResourceVo, userId, userType);
      return recv_getFinityResourceByUser();
    }

    public void send_getFinityResourceByUser(com.froad.thrift.vo.finity.FinityResourceVo finityResourceVo, long userId, int userType) throws org.apache.thrift.TException
    {
      getFinityResourceByUser_args args = new getFinityResourceByUser_args();
      args.setFinityResourceVo(finityResourceVo);
      args.setUserId(userId);
      args.setUserType(userType);
      sendBase("getFinityResourceByUser", args);
    }

    public List<com.froad.thrift.vo.finity.FinityResourceVo> recv_getFinityResourceByUser() throws org.apache.thrift.TException
    {
      getFinityResourceByUser_result result = new getFinityResourceByUser_result();
      receiveBase(result, "getFinityResourceByUser");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getFinityResourceByUser failed: unknown result");
    }

    public List<com.froad.thrift.vo.finity.FinityResourceVo> getFinityResourceByRole(com.froad.thrift.vo.finity.FinityResourceVo finityResourceVo, List<Long> roles) throws org.apache.thrift.TException
    {
      send_getFinityResourceByRole(finityResourceVo, roles);
      return recv_getFinityResourceByRole();
    }

    public void send_getFinityResourceByRole(com.froad.thrift.vo.finity.FinityResourceVo finityResourceVo, List<Long> roles) throws org.apache.thrift.TException
    {
      getFinityResourceByRole_args args = new getFinityResourceByRole_args();
      args.setFinityResourceVo(finityResourceVo);
      args.setRoles(roles);
      sendBase("getFinityResourceByRole", args);
    }

    public List<com.froad.thrift.vo.finity.FinityResourceVo> recv_getFinityResourceByRole() throws org.apache.thrift.TException
    {
      getFinityResourceByRole_result result = new getFinityResourceByRole_result();
      receiveBase(result, "getFinityResourceByRole");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getFinityResourceByRole failed: unknown result");
    }

  }
  public static class AsyncClient extends com.froad.thrift.monitor.service.BizMonitorService.AsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void addFinityResource(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.finity.FinityResourceVo finityResourceVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addFinityResource_call method_call = new addFinityResource_call(originVo, finityResourceVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addFinityResource_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.OriginVo originVo;
      private com.froad.thrift.vo.finity.FinityResourceVo finityResourceVo;
      public addFinityResource_call(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.finity.FinityResourceVo finityResourceVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.originVo = originVo;
        this.finityResourceVo = finityResourceVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addFinityResource", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addFinityResource_args args = new addFinityResource_args();
        args.setOriginVo(originVo);
        args.setFinityResourceVo(finityResourceVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.CommonAddVoRes getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addFinityResource();
      }
    }

    public void deleteFinityResource(com.froad.thrift.vo.OriginVo originVo, String platform, long resourceId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteFinityResource_call method_call = new deleteFinityResource_call(originVo, platform, resourceId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteFinityResource_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.OriginVo originVo;
      private String platform;
      private long resourceId;
      public deleteFinityResource_call(com.froad.thrift.vo.OriginVo originVo, String platform, long resourceId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.originVo = originVo;
        this.platform = platform;
        this.resourceId = resourceId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteFinityResource", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteFinityResource_args args = new deleteFinityResource_args();
        args.setOriginVo(originVo);
        args.setPlatform(platform);
        args.setResourceId(resourceId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteFinityResource();
      }
    }

    public void updateFinityResource(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.finity.FinityResourceVo finityResourceVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateFinityResource_call method_call = new updateFinityResource_call(originVo, finityResourceVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateFinityResource_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.OriginVo originVo;
      private com.froad.thrift.vo.finity.FinityResourceVo finityResourceVo;
      public updateFinityResource_call(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.finity.FinityResourceVo finityResourceVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.originVo = originVo;
        this.finityResourceVo = finityResourceVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateFinityResource", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateFinityResource_args args = new updateFinityResource_args();
        args.setOriginVo(originVo);
        args.setFinityResourceVo(finityResourceVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateFinityResource();
      }
    }

    public void moveMenu(com.froad.thrift.vo.OriginVo originVo, List<com.froad.thrift.vo.finity.FinityResourceVo> finityResourceVoList, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      moveMenu_call method_call = new moveMenu_call(originVo, finityResourceVoList, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class moveMenu_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.OriginVo originVo;
      private List<com.froad.thrift.vo.finity.FinityResourceVo> finityResourceVoList;
      public moveMenu_call(com.froad.thrift.vo.OriginVo originVo, List<com.froad.thrift.vo.finity.FinityResourceVo> finityResourceVoList, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.originVo = originVo;
        this.finityResourceVoList = finityResourceVoList;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("moveMenu", org.apache.thrift.protocol.TMessageType.CALL, 0));
        moveMenu_args args = new moveMenu_args();
        args.setOriginVo(originVo);
        args.setFinityResourceVoList(finityResourceVoList);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_moveMenu();
      }
    }

    public void getBossFinityResource(com.froad.thrift.vo.finity.FinityResourceVo finityResourceVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getBossFinityResource_call method_call = new getBossFinityResource_call(finityResourceVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getBossFinityResource_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.finity.FinityResourceVo finityResourceVo;
      public getBossFinityResource_call(com.froad.thrift.vo.finity.FinityResourceVo finityResourceVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.finityResourceVo = finityResourceVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getBossFinityResource", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getBossFinityResource_args args = new getBossFinityResource_args();
        args.setFinityResourceVo(finityResourceVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.froad.thrift.vo.finity.FinityResourceVo> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getBossFinityResource();
      }
    }

    public void getFinityResource(com.froad.thrift.vo.finity.FinityResourceVo finityResourceVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getFinityResource_call method_call = new getFinityResource_call(finityResourceVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getFinityResource_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.finity.FinityResourceVo finityResourceVo;
      public getFinityResource_call(com.froad.thrift.vo.finity.FinityResourceVo finityResourceVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.finityResourceVo = finityResourceVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getFinityResource", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getFinityResource_args args = new getFinityResource_args();
        args.setFinityResourceVo(finityResourceVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.froad.thrift.vo.finity.FinityResourceVo> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getFinityResource();
      }
    }

    public void getFinityResourceByUser(com.froad.thrift.vo.finity.FinityResourceVo finityResourceVo, long userId, int userType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getFinityResourceByUser_call method_call = new getFinityResourceByUser_call(finityResourceVo, userId, userType, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getFinityResourceByUser_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.finity.FinityResourceVo finityResourceVo;
      private long userId;
      private int userType;
      public getFinityResourceByUser_call(com.froad.thrift.vo.finity.FinityResourceVo finityResourceVo, long userId, int userType, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.finityResourceVo = finityResourceVo;
        this.userId = userId;
        this.userType = userType;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getFinityResourceByUser", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getFinityResourceByUser_args args = new getFinityResourceByUser_args();
        args.setFinityResourceVo(finityResourceVo);
        args.setUserId(userId);
        args.setUserType(userType);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.froad.thrift.vo.finity.FinityResourceVo> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getFinityResourceByUser();
      }
    }

    public void getFinityResourceByRole(com.froad.thrift.vo.finity.FinityResourceVo finityResourceVo, List<Long> roles, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getFinityResourceByRole_call method_call = new getFinityResourceByRole_call(finityResourceVo, roles, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getFinityResourceByRole_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.finity.FinityResourceVo finityResourceVo;
      private List<Long> roles;
      public getFinityResourceByRole_call(com.froad.thrift.vo.finity.FinityResourceVo finityResourceVo, List<Long> roles, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.finityResourceVo = finityResourceVo;
        this.roles = roles;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getFinityResourceByRole", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getFinityResourceByRole_args args = new getFinityResourceByRole_args();
        args.setFinityResourceVo(finityResourceVo);
        args.setRoles(roles);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.froad.thrift.vo.finity.FinityResourceVo> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getFinityResourceByRole();
      }
    }

  }

  public static class Processor<I extends Iface> extends com.froad.thrift.monitor.service.BizMonitorService.Processor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("addFinityResource", new addFinityResource());
      processMap.put("deleteFinityResource", new deleteFinityResource());
      processMap.put("updateFinityResource", new updateFinityResource());
      processMap.put("moveMenu", new moveMenu());
      processMap.put("getBossFinityResource", new getBossFinityResource());
      processMap.put("getFinityResource", new getFinityResource());
      processMap.put("getFinityResourceByUser", new getFinityResourceByUser());
      processMap.put("getFinityResourceByRole", new getFinityResourceByRole());
      return processMap;
    }

    public static class addFinityResource<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addFinityResource_args> {
      public addFinityResource() {
        super("addFinityResource");
      }

      public addFinityResource_args getEmptyArgsInstance() {
        return new addFinityResource_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addFinityResource_result getResult(I iface, addFinityResource_args args) throws org.apache.thrift.TException {
        addFinityResource_result result = new addFinityResource_result();
        result.success = iface.addFinityResource(args.originVo, args.finityResourceVo);
        return result;
      }
    }

    public static class deleteFinityResource<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteFinityResource_args> {
      public deleteFinityResource() {
        super("deleteFinityResource");
      }

      public deleteFinityResource_args getEmptyArgsInstance() {
        return new deleteFinityResource_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteFinityResource_result getResult(I iface, deleteFinityResource_args args) throws org.apache.thrift.TException {
        deleteFinityResource_result result = new deleteFinityResource_result();
        result.success = iface.deleteFinityResource(args.originVo, args.platform, args.resourceId);
        return result;
      }
    }

    public static class updateFinityResource<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateFinityResource_args> {
      public updateFinityResource() {
        super("updateFinityResource");
      }

      public updateFinityResource_args getEmptyArgsInstance() {
        return new updateFinityResource_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateFinityResource_result getResult(I iface, updateFinityResource_args args) throws org.apache.thrift.TException {
        updateFinityResource_result result = new updateFinityResource_result();
        result.success = iface.updateFinityResource(args.originVo, args.finityResourceVo);
        return result;
      }
    }

    public static class moveMenu<I extends Iface> extends org.apache.thrift.ProcessFunction<I, moveMenu_args> {
      public moveMenu() {
        super("moveMenu");
      }

      public moveMenu_args getEmptyArgsInstance() {
        return new moveMenu_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public moveMenu_result getResult(I iface, moveMenu_args args) throws org.apache.thrift.TException {
        moveMenu_result result = new moveMenu_result();
        result.success = iface.moveMenu(args.originVo, args.finityResourceVoList);
        return result;
      }
    }

    public static class getBossFinityResource<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getBossFinityResource_args> {
      public getBossFinityResource() {
        super("getBossFinityResource");
      }

      public getBossFinityResource_args getEmptyArgsInstance() {
        return new getBossFinityResource_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getBossFinityResource_result getResult(I iface, getBossFinityResource_args args) throws org.apache.thrift.TException {
        getBossFinityResource_result result = new getBossFinityResource_result();
        result.success = iface.getBossFinityResource(args.finityResourceVo);
        return result;
      }
    }

    public static class getFinityResource<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getFinityResource_args> {
      public getFinityResource() {
        super("getFinityResource");
      }

      public getFinityResource_args getEmptyArgsInstance() {
        return new getFinityResource_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getFinityResource_result getResult(I iface, getFinityResource_args args) throws org.apache.thrift.TException {
        getFinityResource_result result = new getFinityResource_result();
        result.success = iface.getFinityResource(args.finityResourceVo);
        return result;
      }
    }

    public static class getFinityResourceByUser<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getFinityResourceByUser_args> {
      public getFinityResourceByUser() {
        super("getFinityResourceByUser");
      }

      public getFinityResourceByUser_args getEmptyArgsInstance() {
        return new getFinityResourceByUser_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getFinityResourceByUser_result getResult(I iface, getFinityResourceByUser_args args) throws org.apache.thrift.TException {
        getFinityResourceByUser_result result = new getFinityResourceByUser_result();
        result.success = iface.getFinityResourceByUser(args.finityResourceVo, args.userId, args.userType);
        return result;
      }
    }

    public static class getFinityResourceByRole<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getFinityResourceByRole_args> {
      public getFinityResourceByRole() {
        super("getFinityResourceByRole");
      }

      public getFinityResourceByRole_args getEmptyArgsInstance() {
        return new getFinityResourceByRole_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getFinityResourceByRole_result getResult(I iface, getFinityResourceByRole_args args) throws org.apache.thrift.TException {
        getFinityResourceByRole_result result = new getFinityResourceByRole_result();
        result.success = iface.getFinityResourceByRole(args.finityResourceVo, args.roles);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends com.froad.thrift.monitor.service.BizMonitorService.AsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("addFinityResource", new addFinityResource());
      processMap.put("deleteFinityResource", new deleteFinityResource());
      processMap.put("updateFinityResource", new updateFinityResource());
      processMap.put("moveMenu", new moveMenu());
      processMap.put("getBossFinityResource", new getBossFinityResource());
      processMap.put("getFinityResource", new getFinityResource());
      processMap.put("getFinityResourceByUser", new getFinityResourceByUser());
      processMap.put("getFinityResourceByRole", new getFinityResourceByRole());
      return processMap;
    }

    public static class addFinityResource<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addFinityResource_args, com.froad.thrift.vo.CommonAddVoRes> {
      public addFinityResource() {
        super("addFinityResource");
      }

      public addFinityResource_args getEmptyArgsInstance() {
        return new addFinityResource_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.CommonAddVoRes> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.CommonAddVoRes>() { 
          public void onComplete(com.froad.thrift.vo.CommonAddVoRes o) {
            addFinityResource_result result = new addFinityResource_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addFinityResource_result result = new addFinityResource_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addFinityResource_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.CommonAddVoRes> resultHandler) throws TException {
        iface.addFinityResource(args.originVo, args.finityResourceVo,resultHandler);
      }
    }

    public static class deleteFinityResource<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteFinityResource_args, com.froad.thrift.vo.ResultVo> {
      public deleteFinityResource() {
        super("deleteFinityResource");
      }

      public deleteFinityResource_args getEmptyArgsInstance() {
        return new deleteFinityResource_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            deleteFinityResource_result result = new deleteFinityResource_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteFinityResource_result result = new deleteFinityResource_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteFinityResource_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.deleteFinityResource(args.originVo, args.platform, args.resourceId,resultHandler);
      }
    }

    public static class updateFinityResource<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateFinityResource_args, com.froad.thrift.vo.ResultVo> {
      public updateFinityResource() {
        super("updateFinityResource");
      }

      public updateFinityResource_args getEmptyArgsInstance() {
        return new updateFinityResource_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            updateFinityResource_result result = new updateFinityResource_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateFinityResource_result result = new updateFinityResource_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateFinityResource_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.updateFinityResource(args.originVo, args.finityResourceVo,resultHandler);
      }
    }

    public static class moveMenu<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, moveMenu_args, com.froad.thrift.vo.ResultVo> {
      public moveMenu() {
        super("moveMenu");
      }

      public moveMenu_args getEmptyArgsInstance() {
        return new moveMenu_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            moveMenu_result result = new moveMenu_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            moveMenu_result result = new moveMenu_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, moveMenu_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.moveMenu(args.originVo, args.finityResourceVoList,resultHandler);
      }
    }

    public static class getBossFinityResource<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getBossFinityResource_args, List<com.froad.thrift.vo.finity.FinityResourceVo>> {
      public getBossFinityResource() {
        super("getBossFinityResource");
      }

      public getBossFinityResource_args getEmptyArgsInstance() {
        return new getBossFinityResource_args();
      }

      public AsyncMethodCallback<List<com.froad.thrift.vo.finity.FinityResourceVo>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.froad.thrift.vo.finity.FinityResourceVo>>() { 
          public void onComplete(List<com.froad.thrift.vo.finity.FinityResourceVo> o) {
            getBossFinityResource_result result = new getBossFinityResource_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getBossFinityResource_result result = new getBossFinityResource_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getBossFinityResource_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.froad.thrift.vo.finity.FinityResourceVo>> resultHandler) throws TException {
        iface.getBossFinityResource(args.finityResourceVo,resultHandler);
      }
    }

    public static class getFinityResource<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getFinityResource_args, List<com.froad.thrift.vo.finity.FinityResourceVo>> {
      public getFinityResource() {
        super("getFinityResource");
      }

      public getFinityResource_args getEmptyArgsInstance() {
        return new getFinityResource_args();
      }

      public AsyncMethodCallback<List<com.froad.thrift.vo.finity.FinityResourceVo>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.froad.thrift.vo.finity.FinityResourceVo>>() { 
          public void onComplete(List<com.froad.thrift.vo.finity.FinityResourceVo> o) {
            getFinityResource_result result = new getFinityResource_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getFinityResource_result result = new getFinityResource_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getFinityResource_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.froad.thrift.vo.finity.FinityResourceVo>> resultHandler) throws TException {
        iface.getFinityResource(args.finityResourceVo,resultHandler);
      }
    }

    public static class getFinityResourceByUser<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getFinityResourceByUser_args, List<com.froad.thrift.vo.finity.FinityResourceVo>> {
      public getFinityResourceByUser() {
        super("getFinityResourceByUser");
      }

      public getFinityResourceByUser_args getEmptyArgsInstance() {
        return new getFinityResourceByUser_args();
      }

      public AsyncMethodCallback<List<com.froad.thrift.vo.finity.FinityResourceVo>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.froad.thrift.vo.finity.FinityResourceVo>>() { 
          public void onComplete(List<com.froad.thrift.vo.finity.FinityResourceVo> o) {
            getFinityResourceByUser_result result = new getFinityResourceByUser_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getFinityResourceByUser_result result = new getFinityResourceByUser_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getFinityResourceByUser_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.froad.thrift.vo.finity.FinityResourceVo>> resultHandler) throws TException {
        iface.getFinityResourceByUser(args.finityResourceVo, args.userId, args.userType,resultHandler);
      }
    }

    public static class getFinityResourceByRole<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getFinityResourceByRole_args, List<com.froad.thrift.vo.finity.FinityResourceVo>> {
      public getFinityResourceByRole() {
        super("getFinityResourceByRole");
      }

      public getFinityResourceByRole_args getEmptyArgsInstance() {
        return new getFinityResourceByRole_args();
      }

      public AsyncMethodCallback<List<com.froad.thrift.vo.finity.FinityResourceVo>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.froad.thrift.vo.finity.FinityResourceVo>>() { 
          public void onComplete(List<com.froad.thrift.vo.finity.FinityResourceVo> o) {
            getFinityResourceByRole_result result = new getFinityResourceByRole_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getFinityResourceByRole_result result = new getFinityResourceByRole_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getFinityResourceByRole_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.froad.thrift.vo.finity.FinityResourceVo>> resultHandler) throws TException {
        iface.getFinityResourceByRole(args.finityResourceVo, args.roles,resultHandler);
      }
    }

  }

  public static class addFinityResource_args implements org.apache.thrift.TBase<addFinityResource_args, addFinityResource_args._Fields>, java.io.Serializable, Cloneable, Comparable<addFinityResource_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addFinityResource_args");

    private static final org.apache.thrift.protocol.TField ORIGIN_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("originVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField FINITY_RESOURCE_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("finityResourceVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addFinityResource_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addFinityResource_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OriginVo originVo; // required
    public com.froad.thrift.vo.finity.FinityResourceVo finityResourceVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORIGIN_VO((short)1, "originVo"),
      FINITY_RESOURCE_VO((short)2, "finityResourceVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORIGIN_VO
            return ORIGIN_VO;
          case 2: // FINITY_RESOURCE_VO
            return FINITY_RESOURCE_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORIGIN_VO, new org.apache.thrift.meta_data.FieldMetaData("originVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OriginVo.class)));
      tmpMap.put(_Fields.FINITY_RESOURCE_VO, new org.apache.thrift.meta_data.FieldMetaData("finityResourceVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.finity.FinityResourceVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addFinityResource_args.class, metaDataMap);
    }

    public addFinityResource_args() {
    }

    public addFinityResource_args(
      com.froad.thrift.vo.OriginVo originVo,
      com.froad.thrift.vo.finity.FinityResourceVo finityResourceVo)
    {
      this();
      this.originVo = originVo;
      this.finityResourceVo = finityResourceVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addFinityResource_args(addFinityResource_args other) {
      if (other.isSetOriginVo()) {
        this.originVo = new com.froad.thrift.vo.OriginVo(other.originVo);
      }
      if (other.isSetFinityResourceVo()) {
        this.finityResourceVo = new com.froad.thrift.vo.finity.FinityResourceVo(other.finityResourceVo);
      }
    }

    public addFinityResource_args deepCopy() {
      return new addFinityResource_args(this);
    }

    @Override
    public void clear() {
      this.originVo = null;
      this.finityResourceVo = null;
    }

    public com.froad.thrift.vo.OriginVo getOriginVo() {
      return this.originVo;
    }

    public addFinityResource_args setOriginVo(com.froad.thrift.vo.OriginVo originVo) {
      this.originVo = originVo;
      return this;
    }

    public void unsetOriginVo() {
      this.originVo = null;
    }

    /** Returns true if field originVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginVo() {
      return this.originVo != null;
    }

    public void setOriginVoIsSet(boolean value) {
      if (!value) {
        this.originVo = null;
      }
    }

    public com.froad.thrift.vo.finity.FinityResourceVo getFinityResourceVo() {
      return this.finityResourceVo;
    }

    public addFinityResource_args setFinityResourceVo(com.froad.thrift.vo.finity.FinityResourceVo finityResourceVo) {
      this.finityResourceVo = finityResourceVo;
      return this;
    }

    public void unsetFinityResourceVo() {
      this.finityResourceVo = null;
    }

    /** Returns true if field finityResourceVo is set (has been assigned a value) and false otherwise */
    public boolean isSetFinityResourceVo() {
      return this.finityResourceVo != null;
    }

    public void setFinityResourceVoIsSet(boolean value) {
      if (!value) {
        this.finityResourceVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORIGIN_VO:
        if (value == null) {
          unsetOriginVo();
        } else {
          setOriginVo((com.froad.thrift.vo.OriginVo)value);
        }
        break;

      case FINITY_RESOURCE_VO:
        if (value == null) {
          unsetFinityResourceVo();
        } else {
          setFinityResourceVo((com.froad.thrift.vo.finity.FinityResourceVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORIGIN_VO:
        return getOriginVo();

      case FINITY_RESOURCE_VO:
        return getFinityResourceVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORIGIN_VO:
        return isSetOriginVo();
      case FINITY_RESOURCE_VO:
        return isSetFinityResourceVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addFinityResource_args)
        return this.equals((addFinityResource_args)that);
      return false;
    }

    public boolean equals(addFinityResource_args that) {
      if (that == null)
        return false;

      boolean this_present_originVo = true && this.isSetOriginVo();
      boolean that_present_originVo = true && that.isSetOriginVo();
      if (this_present_originVo || that_present_originVo) {
        if (!(this_present_originVo && that_present_originVo))
          return false;
        if (!this.originVo.equals(that.originVo))
          return false;
      }

      boolean this_present_finityResourceVo = true && this.isSetFinityResourceVo();
      boolean that_present_finityResourceVo = true && that.isSetFinityResourceVo();
      if (this_present_finityResourceVo || that_present_finityResourceVo) {
        if (!(this_present_finityResourceVo && that_present_finityResourceVo))
          return false;
        if (!this.finityResourceVo.equals(that.finityResourceVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_originVo = true && (isSetOriginVo());
      list.add(present_originVo);
      if (present_originVo)
        list.add(originVo);

      boolean present_finityResourceVo = true && (isSetFinityResourceVo());
      list.add(present_finityResourceVo);
      if (present_finityResourceVo)
        list.add(finityResourceVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(addFinityResource_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOriginVo()).compareTo(other.isSetOriginVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originVo, other.originVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFinityResourceVo()).compareTo(other.isSetFinityResourceVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFinityResourceVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.finityResourceVo, other.finityResourceVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addFinityResource_args(");
      boolean first = true;

      sb.append("originVo:");
      if (this.originVo == null) {
        sb.append("null");
      } else {
        sb.append(this.originVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("finityResourceVo:");
      if (this.finityResourceVo == null) {
        sb.append("null");
      } else {
        sb.append(this.finityResourceVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (originVo != null) {
        originVo.validate();
      }
      if (finityResourceVo != null) {
        finityResourceVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addFinityResource_argsStandardSchemeFactory implements SchemeFactory {
      public addFinityResource_argsStandardScheme getScheme() {
        return new addFinityResource_argsStandardScheme();
      }
    }

    private static class addFinityResource_argsStandardScheme extends StandardScheme<addFinityResource_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addFinityResource_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORIGIN_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.originVo = new com.froad.thrift.vo.OriginVo();
                struct.originVo.read(iprot);
                struct.setOriginVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FINITY_RESOURCE_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.finityResourceVo = new com.froad.thrift.vo.finity.FinityResourceVo();
                struct.finityResourceVo.read(iprot);
                struct.setFinityResourceVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addFinityResource_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.originVo != null) {
          oprot.writeFieldBegin(ORIGIN_VO_FIELD_DESC);
          struct.originVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.finityResourceVo != null) {
          oprot.writeFieldBegin(FINITY_RESOURCE_VO_FIELD_DESC);
          struct.finityResourceVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addFinityResource_argsTupleSchemeFactory implements SchemeFactory {
      public addFinityResource_argsTupleScheme getScheme() {
        return new addFinityResource_argsTupleScheme();
      }
    }

    private static class addFinityResource_argsTupleScheme extends TupleScheme<addFinityResource_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addFinityResource_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOriginVo()) {
          optionals.set(0);
        }
        if (struct.isSetFinityResourceVo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOriginVo()) {
          struct.originVo.write(oprot);
        }
        if (struct.isSetFinityResourceVo()) {
          struct.finityResourceVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addFinityResource_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.originVo = new com.froad.thrift.vo.OriginVo();
          struct.originVo.read(iprot);
          struct.setOriginVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.finityResourceVo = new com.froad.thrift.vo.finity.FinityResourceVo();
          struct.finityResourceVo.read(iprot);
          struct.setFinityResourceVoIsSet(true);
        }
      }
    }

  }

  public static class addFinityResource_result implements org.apache.thrift.TBase<addFinityResource_result, addFinityResource_result._Fields>, java.io.Serializable, Cloneable, Comparable<addFinityResource_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addFinityResource_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addFinityResource_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addFinityResource_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.CommonAddVoRes success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.CommonAddVoRes.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addFinityResource_result.class, metaDataMap);
    }

    public addFinityResource_result() {
    }

    public addFinityResource_result(
      com.froad.thrift.vo.CommonAddVoRes success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addFinityResource_result(addFinityResource_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.CommonAddVoRes(other.success);
      }
    }

    public addFinityResource_result deepCopy() {
      return new addFinityResource_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.CommonAddVoRes getSuccess() {
      return this.success;
    }

    public addFinityResource_result setSuccess(com.froad.thrift.vo.CommonAddVoRes success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.CommonAddVoRes)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addFinityResource_result)
        return this.equals((addFinityResource_result)that);
      return false;
    }

    public boolean equals(addFinityResource_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(addFinityResource_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addFinityResource_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addFinityResource_resultStandardSchemeFactory implements SchemeFactory {
      public addFinityResource_resultStandardScheme getScheme() {
        return new addFinityResource_resultStandardScheme();
      }
    }

    private static class addFinityResource_resultStandardScheme extends StandardScheme<addFinityResource_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addFinityResource_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.CommonAddVoRes();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addFinityResource_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addFinityResource_resultTupleSchemeFactory implements SchemeFactory {
      public addFinityResource_resultTupleScheme getScheme() {
        return new addFinityResource_resultTupleScheme();
      }
    }

    private static class addFinityResource_resultTupleScheme extends TupleScheme<addFinityResource_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addFinityResource_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addFinityResource_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.CommonAddVoRes();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class deleteFinityResource_args implements org.apache.thrift.TBase<deleteFinityResource_args, deleteFinityResource_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteFinityResource_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteFinityResource_args");

    private static final org.apache.thrift.protocol.TField ORIGIN_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("originVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PLATFORM_FIELD_DESC = new org.apache.thrift.protocol.TField("platform", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField RESOURCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("resourceId", org.apache.thrift.protocol.TType.I64, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteFinityResource_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteFinityResource_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OriginVo originVo; // required
    public String platform; // required
    public long resourceId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORIGIN_VO((short)1, "originVo"),
      PLATFORM((short)2, "platform"),
      RESOURCE_ID((short)3, "resourceId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORIGIN_VO
            return ORIGIN_VO;
          case 2: // PLATFORM
            return PLATFORM;
          case 3: // RESOURCE_ID
            return RESOURCE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __RESOURCEID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORIGIN_VO, new org.apache.thrift.meta_data.FieldMetaData("originVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OriginVo.class)));
      tmpMap.put(_Fields.PLATFORM, new org.apache.thrift.meta_data.FieldMetaData("platform", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.RESOURCE_ID, new org.apache.thrift.meta_data.FieldMetaData("resourceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteFinityResource_args.class, metaDataMap);
    }

    public deleteFinityResource_args() {
    }

    public deleteFinityResource_args(
      com.froad.thrift.vo.OriginVo originVo,
      String platform,
      long resourceId)
    {
      this();
      this.originVo = originVo;
      this.platform = platform;
      this.resourceId = resourceId;
      setResourceIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteFinityResource_args(deleteFinityResource_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetOriginVo()) {
        this.originVo = new com.froad.thrift.vo.OriginVo(other.originVo);
      }
      if (other.isSetPlatform()) {
        this.platform = other.platform;
      }
      this.resourceId = other.resourceId;
    }

    public deleteFinityResource_args deepCopy() {
      return new deleteFinityResource_args(this);
    }

    @Override
    public void clear() {
      this.originVo = null;
      this.platform = null;
      setResourceIdIsSet(false);
      this.resourceId = 0;
    }

    public com.froad.thrift.vo.OriginVo getOriginVo() {
      return this.originVo;
    }

    public deleteFinityResource_args setOriginVo(com.froad.thrift.vo.OriginVo originVo) {
      this.originVo = originVo;
      return this;
    }

    public void unsetOriginVo() {
      this.originVo = null;
    }

    /** Returns true if field originVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginVo() {
      return this.originVo != null;
    }

    public void setOriginVoIsSet(boolean value) {
      if (!value) {
        this.originVo = null;
      }
    }

    public String getPlatform() {
      return this.platform;
    }

    public deleteFinityResource_args setPlatform(String platform) {
      this.platform = platform;
      return this;
    }

    public void unsetPlatform() {
      this.platform = null;
    }

    /** Returns true if field platform is set (has been assigned a value) and false otherwise */
    public boolean isSetPlatform() {
      return this.platform != null;
    }

    public void setPlatformIsSet(boolean value) {
      if (!value) {
        this.platform = null;
      }
    }

    public long getResourceId() {
      return this.resourceId;
    }

    public deleteFinityResource_args setResourceId(long resourceId) {
      this.resourceId = resourceId;
      setResourceIdIsSet(true);
      return this;
    }

    public void unsetResourceId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RESOURCEID_ISSET_ID);
    }

    /** Returns true if field resourceId is set (has been assigned a value) and false otherwise */
    public boolean isSetResourceId() {
      return EncodingUtils.testBit(__isset_bitfield, __RESOURCEID_ISSET_ID);
    }

    public void setResourceIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RESOURCEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORIGIN_VO:
        if (value == null) {
          unsetOriginVo();
        } else {
          setOriginVo((com.froad.thrift.vo.OriginVo)value);
        }
        break;

      case PLATFORM:
        if (value == null) {
          unsetPlatform();
        } else {
          setPlatform((String)value);
        }
        break;

      case RESOURCE_ID:
        if (value == null) {
          unsetResourceId();
        } else {
          setResourceId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORIGIN_VO:
        return getOriginVo();

      case PLATFORM:
        return getPlatform();

      case RESOURCE_ID:
        return Long.valueOf(getResourceId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORIGIN_VO:
        return isSetOriginVo();
      case PLATFORM:
        return isSetPlatform();
      case RESOURCE_ID:
        return isSetResourceId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteFinityResource_args)
        return this.equals((deleteFinityResource_args)that);
      return false;
    }

    public boolean equals(deleteFinityResource_args that) {
      if (that == null)
        return false;

      boolean this_present_originVo = true && this.isSetOriginVo();
      boolean that_present_originVo = true && that.isSetOriginVo();
      if (this_present_originVo || that_present_originVo) {
        if (!(this_present_originVo && that_present_originVo))
          return false;
        if (!this.originVo.equals(that.originVo))
          return false;
      }

      boolean this_present_platform = true && this.isSetPlatform();
      boolean that_present_platform = true && that.isSetPlatform();
      if (this_present_platform || that_present_platform) {
        if (!(this_present_platform && that_present_platform))
          return false;
        if (!this.platform.equals(that.platform))
          return false;
      }

      boolean this_present_resourceId = true;
      boolean that_present_resourceId = true;
      if (this_present_resourceId || that_present_resourceId) {
        if (!(this_present_resourceId && that_present_resourceId))
          return false;
        if (this.resourceId != that.resourceId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_originVo = true && (isSetOriginVo());
      list.add(present_originVo);
      if (present_originVo)
        list.add(originVo);

      boolean present_platform = true && (isSetPlatform());
      list.add(present_platform);
      if (present_platform)
        list.add(platform);

      boolean present_resourceId = true;
      list.add(present_resourceId);
      if (present_resourceId)
        list.add(resourceId);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteFinityResource_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOriginVo()).compareTo(other.isSetOriginVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originVo, other.originVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPlatform()).compareTo(other.isSetPlatform());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPlatform()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platform, other.platform);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetResourceId()).compareTo(other.isSetResourceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetResourceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resourceId, other.resourceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteFinityResource_args(");
      boolean first = true;

      sb.append("originVo:");
      if (this.originVo == null) {
        sb.append("null");
      } else {
        sb.append(this.originVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("platform:");
      if (this.platform == null) {
        sb.append("null");
      } else {
        sb.append(this.platform);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("resourceId:");
      sb.append(this.resourceId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (originVo != null) {
        originVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteFinityResource_argsStandardSchemeFactory implements SchemeFactory {
      public deleteFinityResource_argsStandardScheme getScheme() {
        return new deleteFinityResource_argsStandardScheme();
      }
    }

    private static class deleteFinityResource_argsStandardScheme extends StandardScheme<deleteFinityResource_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteFinityResource_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORIGIN_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.originVo = new com.froad.thrift.vo.OriginVo();
                struct.originVo.read(iprot);
                struct.setOriginVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PLATFORM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.platform = iprot.readString();
                struct.setPlatformIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // RESOURCE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.resourceId = iprot.readI64();
                struct.setResourceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteFinityResource_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.originVo != null) {
          oprot.writeFieldBegin(ORIGIN_VO_FIELD_DESC);
          struct.originVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.platform != null) {
          oprot.writeFieldBegin(PLATFORM_FIELD_DESC);
          oprot.writeString(struct.platform);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(RESOURCE_ID_FIELD_DESC);
        oprot.writeI64(struct.resourceId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteFinityResource_argsTupleSchemeFactory implements SchemeFactory {
      public deleteFinityResource_argsTupleScheme getScheme() {
        return new deleteFinityResource_argsTupleScheme();
      }
    }

    private static class deleteFinityResource_argsTupleScheme extends TupleScheme<deleteFinityResource_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteFinityResource_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOriginVo()) {
          optionals.set(0);
        }
        if (struct.isSetPlatform()) {
          optionals.set(1);
        }
        if (struct.isSetResourceId()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetOriginVo()) {
          struct.originVo.write(oprot);
        }
        if (struct.isSetPlatform()) {
          oprot.writeString(struct.platform);
        }
        if (struct.isSetResourceId()) {
          oprot.writeI64(struct.resourceId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteFinityResource_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.originVo = new com.froad.thrift.vo.OriginVo();
          struct.originVo.read(iprot);
          struct.setOriginVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.platform = iprot.readString();
          struct.setPlatformIsSet(true);
        }
        if (incoming.get(2)) {
          struct.resourceId = iprot.readI64();
          struct.setResourceIdIsSet(true);
        }
      }
    }

  }

  public static class deleteFinityResource_result implements org.apache.thrift.TBase<deleteFinityResource_result, deleteFinityResource_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteFinityResource_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteFinityResource_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteFinityResource_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteFinityResource_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteFinityResource_result.class, metaDataMap);
    }

    public deleteFinityResource_result() {
    }

    public deleteFinityResource_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteFinityResource_result(deleteFinityResource_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public deleteFinityResource_result deepCopy() {
      return new deleteFinityResource_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public deleteFinityResource_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteFinityResource_result)
        return this.equals((deleteFinityResource_result)that);
      return false;
    }

    public boolean equals(deleteFinityResource_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteFinityResource_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteFinityResource_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteFinityResource_resultStandardSchemeFactory implements SchemeFactory {
      public deleteFinityResource_resultStandardScheme getScheme() {
        return new deleteFinityResource_resultStandardScheme();
      }
    }

    private static class deleteFinityResource_resultStandardScheme extends StandardScheme<deleteFinityResource_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteFinityResource_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteFinityResource_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteFinityResource_resultTupleSchemeFactory implements SchemeFactory {
      public deleteFinityResource_resultTupleScheme getScheme() {
        return new deleteFinityResource_resultTupleScheme();
      }
    }

    private static class deleteFinityResource_resultTupleScheme extends TupleScheme<deleteFinityResource_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteFinityResource_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteFinityResource_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateFinityResource_args implements org.apache.thrift.TBase<updateFinityResource_args, updateFinityResource_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateFinityResource_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateFinityResource_args");

    private static final org.apache.thrift.protocol.TField ORIGIN_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("originVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField FINITY_RESOURCE_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("finityResourceVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateFinityResource_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateFinityResource_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OriginVo originVo; // required
    public com.froad.thrift.vo.finity.FinityResourceVo finityResourceVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORIGIN_VO((short)1, "originVo"),
      FINITY_RESOURCE_VO((short)2, "finityResourceVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORIGIN_VO
            return ORIGIN_VO;
          case 2: // FINITY_RESOURCE_VO
            return FINITY_RESOURCE_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORIGIN_VO, new org.apache.thrift.meta_data.FieldMetaData("originVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OriginVo.class)));
      tmpMap.put(_Fields.FINITY_RESOURCE_VO, new org.apache.thrift.meta_data.FieldMetaData("finityResourceVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.finity.FinityResourceVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateFinityResource_args.class, metaDataMap);
    }

    public updateFinityResource_args() {
    }

    public updateFinityResource_args(
      com.froad.thrift.vo.OriginVo originVo,
      com.froad.thrift.vo.finity.FinityResourceVo finityResourceVo)
    {
      this();
      this.originVo = originVo;
      this.finityResourceVo = finityResourceVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateFinityResource_args(updateFinityResource_args other) {
      if (other.isSetOriginVo()) {
        this.originVo = new com.froad.thrift.vo.OriginVo(other.originVo);
      }
      if (other.isSetFinityResourceVo()) {
        this.finityResourceVo = new com.froad.thrift.vo.finity.FinityResourceVo(other.finityResourceVo);
      }
    }

    public updateFinityResource_args deepCopy() {
      return new updateFinityResource_args(this);
    }

    @Override
    public void clear() {
      this.originVo = null;
      this.finityResourceVo = null;
    }

    public com.froad.thrift.vo.OriginVo getOriginVo() {
      return this.originVo;
    }

    public updateFinityResource_args setOriginVo(com.froad.thrift.vo.OriginVo originVo) {
      this.originVo = originVo;
      return this;
    }

    public void unsetOriginVo() {
      this.originVo = null;
    }

    /** Returns true if field originVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginVo() {
      return this.originVo != null;
    }

    public void setOriginVoIsSet(boolean value) {
      if (!value) {
        this.originVo = null;
      }
    }

    public com.froad.thrift.vo.finity.FinityResourceVo getFinityResourceVo() {
      return this.finityResourceVo;
    }

    public updateFinityResource_args setFinityResourceVo(com.froad.thrift.vo.finity.FinityResourceVo finityResourceVo) {
      this.finityResourceVo = finityResourceVo;
      return this;
    }

    public void unsetFinityResourceVo() {
      this.finityResourceVo = null;
    }

    /** Returns true if field finityResourceVo is set (has been assigned a value) and false otherwise */
    public boolean isSetFinityResourceVo() {
      return this.finityResourceVo != null;
    }

    public void setFinityResourceVoIsSet(boolean value) {
      if (!value) {
        this.finityResourceVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORIGIN_VO:
        if (value == null) {
          unsetOriginVo();
        } else {
          setOriginVo((com.froad.thrift.vo.OriginVo)value);
        }
        break;

      case FINITY_RESOURCE_VO:
        if (value == null) {
          unsetFinityResourceVo();
        } else {
          setFinityResourceVo((com.froad.thrift.vo.finity.FinityResourceVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORIGIN_VO:
        return getOriginVo();

      case FINITY_RESOURCE_VO:
        return getFinityResourceVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORIGIN_VO:
        return isSetOriginVo();
      case FINITY_RESOURCE_VO:
        return isSetFinityResourceVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateFinityResource_args)
        return this.equals((updateFinityResource_args)that);
      return false;
    }

    public boolean equals(updateFinityResource_args that) {
      if (that == null)
        return false;

      boolean this_present_originVo = true && this.isSetOriginVo();
      boolean that_present_originVo = true && that.isSetOriginVo();
      if (this_present_originVo || that_present_originVo) {
        if (!(this_present_originVo && that_present_originVo))
          return false;
        if (!this.originVo.equals(that.originVo))
          return false;
      }

      boolean this_present_finityResourceVo = true && this.isSetFinityResourceVo();
      boolean that_present_finityResourceVo = true && that.isSetFinityResourceVo();
      if (this_present_finityResourceVo || that_present_finityResourceVo) {
        if (!(this_present_finityResourceVo && that_present_finityResourceVo))
          return false;
        if (!this.finityResourceVo.equals(that.finityResourceVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_originVo = true && (isSetOriginVo());
      list.add(present_originVo);
      if (present_originVo)
        list.add(originVo);

      boolean present_finityResourceVo = true && (isSetFinityResourceVo());
      list.add(present_finityResourceVo);
      if (present_finityResourceVo)
        list.add(finityResourceVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateFinityResource_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOriginVo()).compareTo(other.isSetOriginVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originVo, other.originVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFinityResourceVo()).compareTo(other.isSetFinityResourceVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFinityResourceVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.finityResourceVo, other.finityResourceVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateFinityResource_args(");
      boolean first = true;

      sb.append("originVo:");
      if (this.originVo == null) {
        sb.append("null");
      } else {
        sb.append(this.originVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("finityResourceVo:");
      if (this.finityResourceVo == null) {
        sb.append("null");
      } else {
        sb.append(this.finityResourceVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (originVo != null) {
        originVo.validate();
      }
      if (finityResourceVo != null) {
        finityResourceVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateFinityResource_argsStandardSchemeFactory implements SchemeFactory {
      public updateFinityResource_argsStandardScheme getScheme() {
        return new updateFinityResource_argsStandardScheme();
      }
    }

    private static class updateFinityResource_argsStandardScheme extends StandardScheme<updateFinityResource_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateFinityResource_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORIGIN_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.originVo = new com.froad.thrift.vo.OriginVo();
                struct.originVo.read(iprot);
                struct.setOriginVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FINITY_RESOURCE_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.finityResourceVo = new com.froad.thrift.vo.finity.FinityResourceVo();
                struct.finityResourceVo.read(iprot);
                struct.setFinityResourceVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateFinityResource_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.originVo != null) {
          oprot.writeFieldBegin(ORIGIN_VO_FIELD_DESC);
          struct.originVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.finityResourceVo != null) {
          oprot.writeFieldBegin(FINITY_RESOURCE_VO_FIELD_DESC);
          struct.finityResourceVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateFinityResource_argsTupleSchemeFactory implements SchemeFactory {
      public updateFinityResource_argsTupleScheme getScheme() {
        return new updateFinityResource_argsTupleScheme();
      }
    }

    private static class updateFinityResource_argsTupleScheme extends TupleScheme<updateFinityResource_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateFinityResource_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOriginVo()) {
          optionals.set(0);
        }
        if (struct.isSetFinityResourceVo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOriginVo()) {
          struct.originVo.write(oprot);
        }
        if (struct.isSetFinityResourceVo()) {
          struct.finityResourceVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateFinityResource_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.originVo = new com.froad.thrift.vo.OriginVo();
          struct.originVo.read(iprot);
          struct.setOriginVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.finityResourceVo = new com.froad.thrift.vo.finity.FinityResourceVo();
          struct.finityResourceVo.read(iprot);
          struct.setFinityResourceVoIsSet(true);
        }
      }
    }

  }

  public static class updateFinityResource_result implements org.apache.thrift.TBase<updateFinityResource_result, updateFinityResource_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateFinityResource_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateFinityResource_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateFinityResource_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateFinityResource_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateFinityResource_result.class, metaDataMap);
    }

    public updateFinityResource_result() {
    }

    public updateFinityResource_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateFinityResource_result(updateFinityResource_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public updateFinityResource_result deepCopy() {
      return new updateFinityResource_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public updateFinityResource_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateFinityResource_result)
        return this.equals((updateFinityResource_result)that);
      return false;
    }

    public boolean equals(updateFinityResource_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateFinityResource_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateFinityResource_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateFinityResource_resultStandardSchemeFactory implements SchemeFactory {
      public updateFinityResource_resultStandardScheme getScheme() {
        return new updateFinityResource_resultStandardScheme();
      }
    }

    private static class updateFinityResource_resultStandardScheme extends StandardScheme<updateFinityResource_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateFinityResource_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateFinityResource_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateFinityResource_resultTupleSchemeFactory implements SchemeFactory {
      public updateFinityResource_resultTupleScheme getScheme() {
        return new updateFinityResource_resultTupleScheme();
      }
    }

    private static class updateFinityResource_resultTupleScheme extends TupleScheme<updateFinityResource_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateFinityResource_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateFinityResource_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class moveMenu_args implements org.apache.thrift.TBase<moveMenu_args, moveMenu_args._Fields>, java.io.Serializable, Cloneable, Comparable<moveMenu_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("moveMenu_args");

    private static final org.apache.thrift.protocol.TField ORIGIN_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("originVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField FINITY_RESOURCE_VO_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("finityResourceVoList", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new moveMenu_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new moveMenu_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OriginVo originVo; // required
    public List<com.froad.thrift.vo.finity.FinityResourceVo> finityResourceVoList; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORIGIN_VO((short)1, "originVo"),
      FINITY_RESOURCE_VO_LIST((short)2, "finityResourceVoList");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORIGIN_VO
            return ORIGIN_VO;
          case 2: // FINITY_RESOURCE_VO_LIST
            return FINITY_RESOURCE_VO_LIST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORIGIN_VO, new org.apache.thrift.meta_data.FieldMetaData("originVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OriginVo.class)));
      tmpMap.put(_Fields.FINITY_RESOURCE_VO_LIST, new org.apache.thrift.meta_data.FieldMetaData("finityResourceVoList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.finity.FinityResourceVo.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(moveMenu_args.class, metaDataMap);
    }

    public moveMenu_args() {
    }

    public moveMenu_args(
      com.froad.thrift.vo.OriginVo originVo,
      List<com.froad.thrift.vo.finity.FinityResourceVo> finityResourceVoList)
    {
      this();
      this.originVo = originVo;
      this.finityResourceVoList = finityResourceVoList;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public moveMenu_args(moveMenu_args other) {
      if (other.isSetOriginVo()) {
        this.originVo = new com.froad.thrift.vo.OriginVo(other.originVo);
      }
      if (other.isSetFinityResourceVoList()) {
        List<com.froad.thrift.vo.finity.FinityResourceVo> __this__finityResourceVoList = new ArrayList<com.froad.thrift.vo.finity.FinityResourceVo>(other.finityResourceVoList.size());
        for (com.froad.thrift.vo.finity.FinityResourceVo other_element : other.finityResourceVoList) {
          __this__finityResourceVoList.add(new com.froad.thrift.vo.finity.FinityResourceVo(other_element));
        }
        this.finityResourceVoList = __this__finityResourceVoList;
      }
    }

    public moveMenu_args deepCopy() {
      return new moveMenu_args(this);
    }

    @Override
    public void clear() {
      this.originVo = null;
      this.finityResourceVoList = null;
    }

    public com.froad.thrift.vo.OriginVo getOriginVo() {
      return this.originVo;
    }

    public moveMenu_args setOriginVo(com.froad.thrift.vo.OriginVo originVo) {
      this.originVo = originVo;
      return this;
    }

    public void unsetOriginVo() {
      this.originVo = null;
    }

    /** Returns true if field originVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginVo() {
      return this.originVo != null;
    }

    public void setOriginVoIsSet(boolean value) {
      if (!value) {
        this.originVo = null;
      }
    }

    public int getFinityResourceVoListSize() {
      return (this.finityResourceVoList == null) ? 0 : this.finityResourceVoList.size();
    }

    public java.util.Iterator<com.froad.thrift.vo.finity.FinityResourceVo> getFinityResourceVoListIterator() {
      return (this.finityResourceVoList == null) ? null : this.finityResourceVoList.iterator();
    }

    public void addToFinityResourceVoList(com.froad.thrift.vo.finity.FinityResourceVo elem) {
      if (this.finityResourceVoList == null) {
        this.finityResourceVoList = new ArrayList<com.froad.thrift.vo.finity.FinityResourceVo>();
      }
      this.finityResourceVoList.add(elem);
    }

    public List<com.froad.thrift.vo.finity.FinityResourceVo> getFinityResourceVoList() {
      return this.finityResourceVoList;
    }

    public moveMenu_args setFinityResourceVoList(List<com.froad.thrift.vo.finity.FinityResourceVo> finityResourceVoList) {
      this.finityResourceVoList = finityResourceVoList;
      return this;
    }

    public void unsetFinityResourceVoList() {
      this.finityResourceVoList = null;
    }

    /** Returns true if field finityResourceVoList is set (has been assigned a value) and false otherwise */
    public boolean isSetFinityResourceVoList() {
      return this.finityResourceVoList != null;
    }

    public void setFinityResourceVoListIsSet(boolean value) {
      if (!value) {
        this.finityResourceVoList = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORIGIN_VO:
        if (value == null) {
          unsetOriginVo();
        } else {
          setOriginVo((com.froad.thrift.vo.OriginVo)value);
        }
        break;

      case FINITY_RESOURCE_VO_LIST:
        if (value == null) {
          unsetFinityResourceVoList();
        } else {
          setFinityResourceVoList((List<com.froad.thrift.vo.finity.FinityResourceVo>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORIGIN_VO:
        return getOriginVo();

      case FINITY_RESOURCE_VO_LIST:
        return getFinityResourceVoList();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORIGIN_VO:
        return isSetOriginVo();
      case FINITY_RESOURCE_VO_LIST:
        return isSetFinityResourceVoList();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof moveMenu_args)
        return this.equals((moveMenu_args)that);
      return false;
    }

    public boolean equals(moveMenu_args that) {
      if (that == null)
        return false;

      boolean this_present_originVo = true && this.isSetOriginVo();
      boolean that_present_originVo = true && that.isSetOriginVo();
      if (this_present_originVo || that_present_originVo) {
        if (!(this_present_originVo && that_present_originVo))
          return false;
        if (!this.originVo.equals(that.originVo))
          return false;
      }

      boolean this_present_finityResourceVoList = true && this.isSetFinityResourceVoList();
      boolean that_present_finityResourceVoList = true && that.isSetFinityResourceVoList();
      if (this_present_finityResourceVoList || that_present_finityResourceVoList) {
        if (!(this_present_finityResourceVoList && that_present_finityResourceVoList))
          return false;
        if (!this.finityResourceVoList.equals(that.finityResourceVoList))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_originVo = true && (isSetOriginVo());
      list.add(present_originVo);
      if (present_originVo)
        list.add(originVo);

      boolean present_finityResourceVoList = true && (isSetFinityResourceVoList());
      list.add(present_finityResourceVoList);
      if (present_finityResourceVoList)
        list.add(finityResourceVoList);

      return list.hashCode();
    }

    @Override
    public int compareTo(moveMenu_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOriginVo()).compareTo(other.isSetOriginVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originVo, other.originVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFinityResourceVoList()).compareTo(other.isSetFinityResourceVoList());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFinityResourceVoList()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.finityResourceVoList, other.finityResourceVoList);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("moveMenu_args(");
      boolean first = true;

      sb.append("originVo:");
      if (this.originVo == null) {
        sb.append("null");
      } else {
        sb.append(this.originVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("finityResourceVoList:");
      if (this.finityResourceVoList == null) {
        sb.append("null");
      } else {
        sb.append(this.finityResourceVoList);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (originVo != null) {
        originVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class moveMenu_argsStandardSchemeFactory implements SchemeFactory {
      public moveMenu_argsStandardScheme getScheme() {
        return new moveMenu_argsStandardScheme();
      }
    }

    private static class moveMenu_argsStandardScheme extends StandardScheme<moveMenu_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, moveMenu_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORIGIN_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.originVo = new com.froad.thrift.vo.OriginVo();
                struct.originVo.read(iprot);
                struct.setOriginVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FINITY_RESOURCE_VO_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.finityResourceVoList = new ArrayList<com.froad.thrift.vo.finity.FinityResourceVo>(_list0.size);
                  com.froad.thrift.vo.finity.FinityResourceVo _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    _elem1 = new com.froad.thrift.vo.finity.FinityResourceVo();
                    _elem1.read(iprot);
                    struct.finityResourceVoList.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setFinityResourceVoListIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, moveMenu_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.originVo != null) {
          oprot.writeFieldBegin(ORIGIN_VO_FIELD_DESC);
          struct.originVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.finityResourceVoList != null) {
          oprot.writeFieldBegin(FINITY_RESOURCE_VO_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.finityResourceVoList.size()));
            for (com.froad.thrift.vo.finity.FinityResourceVo _iter3 : struct.finityResourceVoList)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class moveMenu_argsTupleSchemeFactory implements SchemeFactory {
      public moveMenu_argsTupleScheme getScheme() {
        return new moveMenu_argsTupleScheme();
      }
    }

    private static class moveMenu_argsTupleScheme extends TupleScheme<moveMenu_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, moveMenu_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOriginVo()) {
          optionals.set(0);
        }
        if (struct.isSetFinityResourceVoList()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOriginVo()) {
          struct.originVo.write(oprot);
        }
        if (struct.isSetFinityResourceVoList()) {
          {
            oprot.writeI32(struct.finityResourceVoList.size());
            for (com.froad.thrift.vo.finity.FinityResourceVo _iter4 : struct.finityResourceVoList)
            {
              _iter4.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, moveMenu_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.originVo = new com.froad.thrift.vo.OriginVo();
          struct.originVo.read(iprot);
          struct.setOriginVoIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.finityResourceVoList = new ArrayList<com.froad.thrift.vo.finity.FinityResourceVo>(_list5.size);
            com.froad.thrift.vo.finity.FinityResourceVo _elem6;
            for (int _i7 = 0; _i7 < _list5.size; ++_i7)
            {
              _elem6 = new com.froad.thrift.vo.finity.FinityResourceVo();
              _elem6.read(iprot);
              struct.finityResourceVoList.add(_elem6);
            }
          }
          struct.setFinityResourceVoListIsSet(true);
        }
      }
    }

  }

  public static class moveMenu_result implements org.apache.thrift.TBase<moveMenu_result, moveMenu_result._Fields>, java.io.Serializable, Cloneable, Comparable<moveMenu_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("moveMenu_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new moveMenu_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new moveMenu_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(moveMenu_result.class, metaDataMap);
    }

    public moveMenu_result() {
    }

    public moveMenu_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public moveMenu_result(moveMenu_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public moveMenu_result deepCopy() {
      return new moveMenu_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public moveMenu_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof moveMenu_result)
        return this.equals((moveMenu_result)that);
      return false;
    }

    public boolean equals(moveMenu_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(moveMenu_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("moveMenu_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class moveMenu_resultStandardSchemeFactory implements SchemeFactory {
      public moveMenu_resultStandardScheme getScheme() {
        return new moveMenu_resultStandardScheme();
      }
    }

    private static class moveMenu_resultStandardScheme extends StandardScheme<moveMenu_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, moveMenu_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, moveMenu_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class moveMenu_resultTupleSchemeFactory implements SchemeFactory {
      public moveMenu_resultTupleScheme getScheme() {
        return new moveMenu_resultTupleScheme();
      }
    }

    private static class moveMenu_resultTupleScheme extends TupleScheme<moveMenu_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, moveMenu_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, moveMenu_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getBossFinityResource_args implements org.apache.thrift.TBase<getBossFinityResource_args, getBossFinityResource_args._Fields>, java.io.Serializable, Cloneable, Comparable<getBossFinityResource_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBossFinityResource_args");

    private static final org.apache.thrift.protocol.TField FINITY_RESOURCE_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("finityResourceVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getBossFinityResource_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getBossFinityResource_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.finity.FinityResourceVo finityResourceVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FINITY_RESOURCE_VO((short)1, "finityResourceVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FINITY_RESOURCE_VO
            return FINITY_RESOURCE_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FINITY_RESOURCE_VO, new org.apache.thrift.meta_data.FieldMetaData("finityResourceVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.finity.FinityResourceVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBossFinityResource_args.class, metaDataMap);
    }

    public getBossFinityResource_args() {
    }

    public getBossFinityResource_args(
      com.froad.thrift.vo.finity.FinityResourceVo finityResourceVo)
    {
      this();
      this.finityResourceVo = finityResourceVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBossFinityResource_args(getBossFinityResource_args other) {
      if (other.isSetFinityResourceVo()) {
        this.finityResourceVo = new com.froad.thrift.vo.finity.FinityResourceVo(other.finityResourceVo);
      }
    }

    public getBossFinityResource_args deepCopy() {
      return new getBossFinityResource_args(this);
    }

    @Override
    public void clear() {
      this.finityResourceVo = null;
    }

    public com.froad.thrift.vo.finity.FinityResourceVo getFinityResourceVo() {
      return this.finityResourceVo;
    }

    public getBossFinityResource_args setFinityResourceVo(com.froad.thrift.vo.finity.FinityResourceVo finityResourceVo) {
      this.finityResourceVo = finityResourceVo;
      return this;
    }

    public void unsetFinityResourceVo() {
      this.finityResourceVo = null;
    }

    /** Returns true if field finityResourceVo is set (has been assigned a value) and false otherwise */
    public boolean isSetFinityResourceVo() {
      return this.finityResourceVo != null;
    }

    public void setFinityResourceVoIsSet(boolean value) {
      if (!value) {
        this.finityResourceVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FINITY_RESOURCE_VO:
        if (value == null) {
          unsetFinityResourceVo();
        } else {
          setFinityResourceVo((com.froad.thrift.vo.finity.FinityResourceVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FINITY_RESOURCE_VO:
        return getFinityResourceVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FINITY_RESOURCE_VO:
        return isSetFinityResourceVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBossFinityResource_args)
        return this.equals((getBossFinityResource_args)that);
      return false;
    }

    public boolean equals(getBossFinityResource_args that) {
      if (that == null)
        return false;

      boolean this_present_finityResourceVo = true && this.isSetFinityResourceVo();
      boolean that_present_finityResourceVo = true && that.isSetFinityResourceVo();
      if (this_present_finityResourceVo || that_present_finityResourceVo) {
        if (!(this_present_finityResourceVo && that_present_finityResourceVo))
          return false;
        if (!this.finityResourceVo.equals(that.finityResourceVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_finityResourceVo = true && (isSetFinityResourceVo());
      list.add(present_finityResourceVo);
      if (present_finityResourceVo)
        list.add(finityResourceVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(getBossFinityResource_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetFinityResourceVo()).compareTo(other.isSetFinityResourceVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFinityResourceVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.finityResourceVo, other.finityResourceVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getBossFinityResource_args(");
      boolean first = true;

      sb.append("finityResourceVo:");
      if (this.finityResourceVo == null) {
        sb.append("null");
      } else {
        sb.append(this.finityResourceVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (finityResourceVo != null) {
        finityResourceVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getBossFinityResource_argsStandardSchemeFactory implements SchemeFactory {
      public getBossFinityResource_argsStandardScheme getScheme() {
        return new getBossFinityResource_argsStandardScheme();
      }
    }

    private static class getBossFinityResource_argsStandardScheme extends StandardScheme<getBossFinityResource_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getBossFinityResource_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FINITY_RESOURCE_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.finityResourceVo = new com.froad.thrift.vo.finity.FinityResourceVo();
                struct.finityResourceVo.read(iprot);
                struct.setFinityResourceVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getBossFinityResource_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.finityResourceVo != null) {
          oprot.writeFieldBegin(FINITY_RESOURCE_VO_FIELD_DESC);
          struct.finityResourceVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getBossFinityResource_argsTupleSchemeFactory implements SchemeFactory {
      public getBossFinityResource_argsTupleScheme getScheme() {
        return new getBossFinityResource_argsTupleScheme();
      }
    }

    private static class getBossFinityResource_argsTupleScheme extends TupleScheme<getBossFinityResource_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getBossFinityResource_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFinityResourceVo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetFinityResourceVo()) {
          struct.finityResourceVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getBossFinityResource_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.finityResourceVo = new com.froad.thrift.vo.finity.FinityResourceVo();
          struct.finityResourceVo.read(iprot);
          struct.setFinityResourceVoIsSet(true);
        }
      }
    }

  }

  public static class getBossFinityResource_result implements org.apache.thrift.TBase<getBossFinityResource_result, getBossFinityResource_result._Fields>, java.io.Serializable, Cloneable, Comparable<getBossFinityResource_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBossFinityResource_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getBossFinityResource_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getBossFinityResource_resultTupleSchemeFactory());
    }

    public List<com.froad.thrift.vo.finity.FinityResourceVo> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.finity.FinityResourceVo.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBossFinityResource_result.class, metaDataMap);
    }

    public getBossFinityResource_result() {
    }

    public getBossFinityResource_result(
      List<com.froad.thrift.vo.finity.FinityResourceVo> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBossFinityResource_result(getBossFinityResource_result other) {
      if (other.isSetSuccess()) {
        List<com.froad.thrift.vo.finity.FinityResourceVo> __this__success = new ArrayList<com.froad.thrift.vo.finity.FinityResourceVo>(other.success.size());
        for (com.froad.thrift.vo.finity.FinityResourceVo other_element : other.success) {
          __this__success.add(new com.froad.thrift.vo.finity.FinityResourceVo(other_element));
        }
        this.success = __this__success;
      }
    }

    public getBossFinityResource_result deepCopy() {
      return new getBossFinityResource_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.froad.thrift.vo.finity.FinityResourceVo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.froad.thrift.vo.finity.FinityResourceVo elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.froad.thrift.vo.finity.FinityResourceVo>();
      }
      this.success.add(elem);
    }

    public List<com.froad.thrift.vo.finity.FinityResourceVo> getSuccess() {
      return this.success;
    }

    public getBossFinityResource_result setSuccess(List<com.froad.thrift.vo.finity.FinityResourceVo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.froad.thrift.vo.finity.FinityResourceVo>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBossFinityResource_result)
        return this.equals((getBossFinityResource_result)that);
      return false;
    }

    public boolean equals(getBossFinityResource_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getBossFinityResource_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getBossFinityResource_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getBossFinityResource_resultStandardSchemeFactory implements SchemeFactory {
      public getBossFinityResource_resultStandardScheme getScheme() {
        return new getBossFinityResource_resultStandardScheme();
      }
    }

    private static class getBossFinityResource_resultStandardScheme extends StandardScheme<getBossFinityResource_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getBossFinityResource_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.success = new ArrayList<com.froad.thrift.vo.finity.FinityResourceVo>(_list8.size);
                  com.froad.thrift.vo.finity.FinityResourceVo _elem9;
                  for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                  {
                    _elem9 = new com.froad.thrift.vo.finity.FinityResourceVo();
                    _elem9.read(iprot);
                    struct.success.add(_elem9);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getBossFinityResource_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.froad.thrift.vo.finity.FinityResourceVo _iter11 : struct.success)
            {
              _iter11.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getBossFinityResource_resultTupleSchemeFactory implements SchemeFactory {
      public getBossFinityResource_resultTupleScheme getScheme() {
        return new getBossFinityResource_resultTupleScheme();
      }
    }

    private static class getBossFinityResource_resultTupleScheme extends TupleScheme<getBossFinityResource_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getBossFinityResource_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.froad.thrift.vo.finity.FinityResourceVo _iter12 : struct.success)
            {
              _iter12.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getBossFinityResource_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.froad.thrift.vo.finity.FinityResourceVo>(_list13.size);
            com.froad.thrift.vo.finity.FinityResourceVo _elem14;
            for (int _i15 = 0; _i15 < _list13.size; ++_i15)
            {
              _elem14 = new com.froad.thrift.vo.finity.FinityResourceVo();
              _elem14.read(iprot);
              struct.success.add(_elem14);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getFinityResource_args implements org.apache.thrift.TBase<getFinityResource_args, getFinityResource_args._Fields>, java.io.Serializable, Cloneable, Comparable<getFinityResource_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFinityResource_args");

    private static final org.apache.thrift.protocol.TField FINITY_RESOURCE_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("finityResourceVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getFinityResource_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getFinityResource_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.finity.FinityResourceVo finityResourceVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FINITY_RESOURCE_VO((short)1, "finityResourceVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FINITY_RESOURCE_VO
            return FINITY_RESOURCE_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FINITY_RESOURCE_VO, new org.apache.thrift.meta_data.FieldMetaData("finityResourceVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.finity.FinityResourceVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFinityResource_args.class, metaDataMap);
    }

    public getFinityResource_args() {
    }

    public getFinityResource_args(
      com.froad.thrift.vo.finity.FinityResourceVo finityResourceVo)
    {
      this();
      this.finityResourceVo = finityResourceVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFinityResource_args(getFinityResource_args other) {
      if (other.isSetFinityResourceVo()) {
        this.finityResourceVo = new com.froad.thrift.vo.finity.FinityResourceVo(other.finityResourceVo);
      }
    }

    public getFinityResource_args deepCopy() {
      return new getFinityResource_args(this);
    }

    @Override
    public void clear() {
      this.finityResourceVo = null;
    }

    public com.froad.thrift.vo.finity.FinityResourceVo getFinityResourceVo() {
      return this.finityResourceVo;
    }

    public getFinityResource_args setFinityResourceVo(com.froad.thrift.vo.finity.FinityResourceVo finityResourceVo) {
      this.finityResourceVo = finityResourceVo;
      return this;
    }

    public void unsetFinityResourceVo() {
      this.finityResourceVo = null;
    }

    /** Returns true if field finityResourceVo is set (has been assigned a value) and false otherwise */
    public boolean isSetFinityResourceVo() {
      return this.finityResourceVo != null;
    }

    public void setFinityResourceVoIsSet(boolean value) {
      if (!value) {
        this.finityResourceVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FINITY_RESOURCE_VO:
        if (value == null) {
          unsetFinityResourceVo();
        } else {
          setFinityResourceVo((com.froad.thrift.vo.finity.FinityResourceVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FINITY_RESOURCE_VO:
        return getFinityResourceVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FINITY_RESOURCE_VO:
        return isSetFinityResourceVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFinityResource_args)
        return this.equals((getFinityResource_args)that);
      return false;
    }

    public boolean equals(getFinityResource_args that) {
      if (that == null)
        return false;

      boolean this_present_finityResourceVo = true && this.isSetFinityResourceVo();
      boolean that_present_finityResourceVo = true && that.isSetFinityResourceVo();
      if (this_present_finityResourceVo || that_present_finityResourceVo) {
        if (!(this_present_finityResourceVo && that_present_finityResourceVo))
          return false;
        if (!this.finityResourceVo.equals(that.finityResourceVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_finityResourceVo = true && (isSetFinityResourceVo());
      list.add(present_finityResourceVo);
      if (present_finityResourceVo)
        list.add(finityResourceVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(getFinityResource_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetFinityResourceVo()).compareTo(other.isSetFinityResourceVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFinityResourceVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.finityResourceVo, other.finityResourceVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFinityResource_args(");
      boolean first = true;

      sb.append("finityResourceVo:");
      if (this.finityResourceVo == null) {
        sb.append("null");
      } else {
        sb.append(this.finityResourceVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (finityResourceVo != null) {
        finityResourceVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getFinityResource_argsStandardSchemeFactory implements SchemeFactory {
      public getFinityResource_argsStandardScheme getScheme() {
        return new getFinityResource_argsStandardScheme();
      }
    }

    private static class getFinityResource_argsStandardScheme extends StandardScheme<getFinityResource_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getFinityResource_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FINITY_RESOURCE_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.finityResourceVo = new com.froad.thrift.vo.finity.FinityResourceVo();
                struct.finityResourceVo.read(iprot);
                struct.setFinityResourceVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getFinityResource_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.finityResourceVo != null) {
          oprot.writeFieldBegin(FINITY_RESOURCE_VO_FIELD_DESC);
          struct.finityResourceVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getFinityResource_argsTupleSchemeFactory implements SchemeFactory {
      public getFinityResource_argsTupleScheme getScheme() {
        return new getFinityResource_argsTupleScheme();
      }
    }

    private static class getFinityResource_argsTupleScheme extends TupleScheme<getFinityResource_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getFinityResource_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFinityResourceVo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetFinityResourceVo()) {
          struct.finityResourceVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getFinityResource_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.finityResourceVo = new com.froad.thrift.vo.finity.FinityResourceVo();
          struct.finityResourceVo.read(iprot);
          struct.setFinityResourceVoIsSet(true);
        }
      }
    }

  }

  public static class getFinityResource_result implements org.apache.thrift.TBase<getFinityResource_result, getFinityResource_result._Fields>, java.io.Serializable, Cloneable, Comparable<getFinityResource_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFinityResource_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getFinityResource_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getFinityResource_resultTupleSchemeFactory());
    }

    public List<com.froad.thrift.vo.finity.FinityResourceVo> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.finity.FinityResourceVo.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFinityResource_result.class, metaDataMap);
    }

    public getFinityResource_result() {
    }

    public getFinityResource_result(
      List<com.froad.thrift.vo.finity.FinityResourceVo> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFinityResource_result(getFinityResource_result other) {
      if (other.isSetSuccess()) {
        List<com.froad.thrift.vo.finity.FinityResourceVo> __this__success = new ArrayList<com.froad.thrift.vo.finity.FinityResourceVo>(other.success.size());
        for (com.froad.thrift.vo.finity.FinityResourceVo other_element : other.success) {
          __this__success.add(new com.froad.thrift.vo.finity.FinityResourceVo(other_element));
        }
        this.success = __this__success;
      }
    }

    public getFinityResource_result deepCopy() {
      return new getFinityResource_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.froad.thrift.vo.finity.FinityResourceVo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.froad.thrift.vo.finity.FinityResourceVo elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.froad.thrift.vo.finity.FinityResourceVo>();
      }
      this.success.add(elem);
    }

    public List<com.froad.thrift.vo.finity.FinityResourceVo> getSuccess() {
      return this.success;
    }

    public getFinityResource_result setSuccess(List<com.froad.thrift.vo.finity.FinityResourceVo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.froad.thrift.vo.finity.FinityResourceVo>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFinityResource_result)
        return this.equals((getFinityResource_result)that);
      return false;
    }

    public boolean equals(getFinityResource_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getFinityResource_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFinityResource_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getFinityResource_resultStandardSchemeFactory implements SchemeFactory {
      public getFinityResource_resultStandardScheme getScheme() {
        return new getFinityResource_resultStandardScheme();
      }
    }

    private static class getFinityResource_resultStandardScheme extends StandardScheme<getFinityResource_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getFinityResource_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                  struct.success = new ArrayList<com.froad.thrift.vo.finity.FinityResourceVo>(_list16.size);
                  com.froad.thrift.vo.finity.FinityResourceVo _elem17;
                  for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                  {
                    _elem17 = new com.froad.thrift.vo.finity.FinityResourceVo();
                    _elem17.read(iprot);
                    struct.success.add(_elem17);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getFinityResource_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.froad.thrift.vo.finity.FinityResourceVo _iter19 : struct.success)
            {
              _iter19.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getFinityResource_resultTupleSchemeFactory implements SchemeFactory {
      public getFinityResource_resultTupleScheme getScheme() {
        return new getFinityResource_resultTupleScheme();
      }
    }

    private static class getFinityResource_resultTupleScheme extends TupleScheme<getFinityResource_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getFinityResource_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.froad.thrift.vo.finity.FinityResourceVo _iter20 : struct.success)
            {
              _iter20.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getFinityResource_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.froad.thrift.vo.finity.FinityResourceVo>(_list21.size);
            com.froad.thrift.vo.finity.FinityResourceVo _elem22;
            for (int _i23 = 0; _i23 < _list21.size; ++_i23)
            {
              _elem22 = new com.froad.thrift.vo.finity.FinityResourceVo();
              _elem22.read(iprot);
              struct.success.add(_elem22);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getFinityResourceByUser_args implements org.apache.thrift.TBase<getFinityResourceByUser_args, getFinityResourceByUser_args._Fields>, java.io.Serializable, Cloneable, Comparable<getFinityResourceByUser_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFinityResourceByUser_args");

    private static final org.apache.thrift.protocol.TField FINITY_RESOURCE_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("finityResourceVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField USER_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("userType", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getFinityResourceByUser_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getFinityResourceByUser_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.finity.FinityResourceVo finityResourceVo; // required
    public long userId; // required
    public int userType; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FINITY_RESOURCE_VO((short)1, "finityResourceVo"),
      USER_ID((short)2, "userId"),
      USER_TYPE((short)3, "userType");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FINITY_RESOURCE_VO
            return FINITY_RESOURCE_VO;
          case 2: // USER_ID
            return USER_ID;
          case 3: // USER_TYPE
            return USER_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USERID_ISSET_ID = 0;
    private static final int __USERTYPE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FINITY_RESOURCE_VO, new org.apache.thrift.meta_data.FieldMetaData("finityResourceVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.finity.FinityResourceVo.class)));
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.USER_TYPE, new org.apache.thrift.meta_data.FieldMetaData("userType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFinityResourceByUser_args.class, metaDataMap);
    }

    public getFinityResourceByUser_args() {
    }

    public getFinityResourceByUser_args(
      com.froad.thrift.vo.finity.FinityResourceVo finityResourceVo,
      long userId,
      int userType)
    {
      this();
      this.finityResourceVo = finityResourceVo;
      this.userId = userId;
      setUserIdIsSet(true);
      this.userType = userType;
      setUserTypeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFinityResourceByUser_args(getFinityResourceByUser_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetFinityResourceVo()) {
        this.finityResourceVo = new com.froad.thrift.vo.finity.FinityResourceVo(other.finityResourceVo);
      }
      this.userId = other.userId;
      this.userType = other.userType;
    }

    public getFinityResourceByUser_args deepCopy() {
      return new getFinityResourceByUser_args(this);
    }

    @Override
    public void clear() {
      this.finityResourceVo = null;
      setUserIdIsSet(false);
      this.userId = 0;
      setUserTypeIsSet(false);
      this.userType = 0;
    }

    public com.froad.thrift.vo.finity.FinityResourceVo getFinityResourceVo() {
      return this.finityResourceVo;
    }

    public getFinityResourceByUser_args setFinityResourceVo(com.froad.thrift.vo.finity.FinityResourceVo finityResourceVo) {
      this.finityResourceVo = finityResourceVo;
      return this;
    }

    public void unsetFinityResourceVo() {
      this.finityResourceVo = null;
    }

    /** Returns true if field finityResourceVo is set (has been assigned a value) and false otherwise */
    public boolean isSetFinityResourceVo() {
      return this.finityResourceVo != null;
    }

    public void setFinityResourceVoIsSet(boolean value) {
      if (!value) {
        this.finityResourceVo = null;
      }
    }

    public long getUserId() {
      return this.userId;
    }

    public getFinityResourceByUser_args setUserId(long userId) {
      this.userId = userId;
      setUserIdIsSet(true);
      return this;
    }

    public void unsetUserId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    public void setUserIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
    }

    public int getUserType() {
      return this.userType;
    }

    public getFinityResourceByUser_args setUserType(int userType) {
      this.userType = userType;
      setUserTypeIsSet(true);
      return this;
    }

    public void unsetUserType() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERTYPE_ISSET_ID);
    }

    /** Returns true if field userType is set (has been assigned a value) and false otherwise */
    public boolean isSetUserType() {
      return EncodingUtils.testBit(__isset_bitfield, __USERTYPE_ISSET_ID);
    }

    public void setUserTypeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERTYPE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FINITY_RESOURCE_VO:
        if (value == null) {
          unsetFinityResourceVo();
        } else {
          setFinityResourceVo((com.froad.thrift.vo.finity.FinityResourceVo)value);
        }
        break;

      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((Long)value);
        }
        break;

      case USER_TYPE:
        if (value == null) {
          unsetUserType();
        } else {
          setUserType((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FINITY_RESOURCE_VO:
        return getFinityResourceVo();

      case USER_ID:
        return Long.valueOf(getUserId());

      case USER_TYPE:
        return Integer.valueOf(getUserType());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FINITY_RESOURCE_VO:
        return isSetFinityResourceVo();
      case USER_ID:
        return isSetUserId();
      case USER_TYPE:
        return isSetUserType();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFinityResourceByUser_args)
        return this.equals((getFinityResourceByUser_args)that);
      return false;
    }

    public boolean equals(getFinityResourceByUser_args that) {
      if (that == null)
        return false;

      boolean this_present_finityResourceVo = true && this.isSetFinityResourceVo();
      boolean that_present_finityResourceVo = true && that.isSetFinityResourceVo();
      if (this_present_finityResourceVo || that_present_finityResourceVo) {
        if (!(this_present_finityResourceVo && that_present_finityResourceVo))
          return false;
        if (!this.finityResourceVo.equals(that.finityResourceVo))
          return false;
      }

      boolean this_present_userId = true;
      boolean that_present_userId = true;
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (this.userId != that.userId)
          return false;
      }

      boolean this_present_userType = true;
      boolean that_present_userType = true;
      if (this_present_userType || that_present_userType) {
        if (!(this_present_userType && that_present_userType))
          return false;
        if (this.userType != that.userType)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_finityResourceVo = true && (isSetFinityResourceVo());
      list.add(present_finityResourceVo);
      if (present_finityResourceVo)
        list.add(finityResourceVo);

      boolean present_userId = true;
      list.add(present_userId);
      if (present_userId)
        list.add(userId);

      boolean present_userType = true;
      list.add(present_userType);
      if (present_userType)
        list.add(userType);

      return list.hashCode();
    }

    @Override
    public int compareTo(getFinityResourceByUser_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetFinityResourceVo()).compareTo(other.isSetFinityResourceVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFinityResourceVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.finityResourceVo, other.finityResourceVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserType()).compareTo(other.isSetUserType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userType, other.userType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFinityResourceByUser_args(");
      boolean first = true;

      sb.append("finityResourceVo:");
      if (this.finityResourceVo == null) {
        sb.append("null");
      } else {
        sb.append(this.finityResourceVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userId:");
      sb.append(this.userId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("userType:");
      sb.append(this.userType);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (finityResourceVo != null) {
        finityResourceVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getFinityResourceByUser_argsStandardSchemeFactory implements SchemeFactory {
      public getFinityResourceByUser_argsStandardScheme getScheme() {
        return new getFinityResourceByUser_argsStandardScheme();
      }
    }

    private static class getFinityResourceByUser_argsStandardScheme extends StandardScheme<getFinityResourceByUser_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getFinityResourceByUser_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FINITY_RESOURCE_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.finityResourceVo = new com.froad.thrift.vo.finity.FinityResourceVo();
                struct.finityResourceVo.read(iprot);
                struct.setFinityResourceVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.userId = iprot.readI64();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // USER_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.userType = iprot.readI32();
                struct.setUserTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getFinityResourceByUser_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.finityResourceVo != null) {
          oprot.writeFieldBegin(FINITY_RESOURCE_VO_FIELD_DESC);
          struct.finityResourceVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI64(struct.userId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(USER_TYPE_FIELD_DESC);
        oprot.writeI32(struct.userType);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getFinityResourceByUser_argsTupleSchemeFactory implements SchemeFactory {
      public getFinityResourceByUser_argsTupleScheme getScheme() {
        return new getFinityResourceByUser_argsTupleScheme();
      }
    }

    private static class getFinityResourceByUser_argsTupleScheme extends TupleScheme<getFinityResourceByUser_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getFinityResourceByUser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFinityResourceVo()) {
          optionals.set(0);
        }
        if (struct.isSetUserId()) {
          optionals.set(1);
        }
        if (struct.isSetUserType()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetFinityResourceVo()) {
          struct.finityResourceVo.write(oprot);
        }
        if (struct.isSetUserId()) {
          oprot.writeI64(struct.userId);
        }
        if (struct.isSetUserType()) {
          oprot.writeI32(struct.userType);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getFinityResourceByUser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.finityResourceVo = new com.froad.thrift.vo.finity.FinityResourceVo();
          struct.finityResourceVo.read(iprot);
          struct.setFinityResourceVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.userId = iprot.readI64();
          struct.setUserIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.userType = iprot.readI32();
          struct.setUserTypeIsSet(true);
        }
      }
    }

  }

  public static class getFinityResourceByUser_result implements org.apache.thrift.TBase<getFinityResourceByUser_result, getFinityResourceByUser_result._Fields>, java.io.Serializable, Cloneable, Comparable<getFinityResourceByUser_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFinityResourceByUser_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getFinityResourceByUser_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getFinityResourceByUser_resultTupleSchemeFactory());
    }

    public List<com.froad.thrift.vo.finity.FinityResourceVo> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.finity.FinityResourceVo.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFinityResourceByUser_result.class, metaDataMap);
    }

    public getFinityResourceByUser_result() {
    }

    public getFinityResourceByUser_result(
      List<com.froad.thrift.vo.finity.FinityResourceVo> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFinityResourceByUser_result(getFinityResourceByUser_result other) {
      if (other.isSetSuccess()) {
        List<com.froad.thrift.vo.finity.FinityResourceVo> __this__success = new ArrayList<com.froad.thrift.vo.finity.FinityResourceVo>(other.success.size());
        for (com.froad.thrift.vo.finity.FinityResourceVo other_element : other.success) {
          __this__success.add(new com.froad.thrift.vo.finity.FinityResourceVo(other_element));
        }
        this.success = __this__success;
      }
    }

    public getFinityResourceByUser_result deepCopy() {
      return new getFinityResourceByUser_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.froad.thrift.vo.finity.FinityResourceVo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.froad.thrift.vo.finity.FinityResourceVo elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.froad.thrift.vo.finity.FinityResourceVo>();
      }
      this.success.add(elem);
    }

    public List<com.froad.thrift.vo.finity.FinityResourceVo> getSuccess() {
      return this.success;
    }

    public getFinityResourceByUser_result setSuccess(List<com.froad.thrift.vo.finity.FinityResourceVo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.froad.thrift.vo.finity.FinityResourceVo>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFinityResourceByUser_result)
        return this.equals((getFinityResourceByUser_result)that);
      return false;
    }

    public boolean equals(getFinityResourceByUser_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getFinityResourceByUser_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFinityResourceByUser_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getFinityResourceByUser_resultStandardSchemeFactory implements SchemeFactory {
      public getFinityResourceByUser_resultStandardScheme getScheme() {
        return new getFinityResourceByUser_resultStandardScheme();
      }
    }

    private static class getFinityResourceByUser_resultStandardScheme extends StandardScheme<getFinityResourceByUser_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getFinityResourceByUser_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                  struct.success = new ArrayList<com.froad.thrift.vo.finity.FinityResourceVo>(_list24.size);
                  com.froad.thrift.vo.finity.FinityResourceVo _elem25;
                  for (int _i26 = 0; _i26 < _list24.size; ++_i26)
                  {
                    _elem25 = new com.froad.thrift.vo.finity.FinityResourceVo();
                    _elem25.read(iprot);
                    struct.success.add(_elem25);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getFinityResourceByUser_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.froad.thrift.vo.finity.FinityResourceVo _iter27 : struct.success)
            {
              _iter27.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getFinityResourceByUser_resultTupleSchemeFactory implements SchemeFactory {
      public getFinityResourceByUser_resultTupleScheme getScheme() {
        return new getFinityResourceByUser_resultTupleScheme();
      }
    }

    private static class getFinityResourceByUser_resultTupleScheme extends TupleScheme<getFinityResourceByUser_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getFinityResourceByUser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.froad.thrift.vo.finity.FinityResourceVo _iter28 : struct.success)
            {
              _iter28.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getFinityResourceByUser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.froad.thrift.vo.finity.FinityResourceVo>(_list29.size);
            com.froad.thrift.vo.finity.FinityResourceVo _elem30;
            for (int _i31 = 0; _i31 < _list29.size; ++_i31)
            {
              _elem30 = new com.froad.thrift.vo.finity.FinityResourceVo();
              _elem30.read(iprot);
              struct.success.add(_elem30);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getFinityResourceByRole_args implements org.apache.thrift.TBase<getFinityResourceByRole_args, getFinityResourceByRole_args._Fields>, java.io.Serializable, Cloneable, Comparable<getFinityResourceByRole_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFinityResourceByRole_args");

    private static final org.apache.thrift.protocol.TField FINITY_RESOURCE_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("finityResourceVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ROLES_FIELD_DESC = new org.apache.thrift.protocol.TField("roles", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getFinityResourceByRole_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getFinityResourceByRole_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.finity.FinityResourceVo finityResourceVo; // required
    public List<Long> roles; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FINITY_RESOURCE_VO((short)1, "finityResourceVo"),
      ROLES((short)2, "roles");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FINITY_RESOURCE_VO
            return FINITY_RESOURCE_VO;
          case 2: // ROLES
            return ROLES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FINITY_RESOURCE_VO, new org.apache.thrift.meta_data.FieldMetaData("finityResourceVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.finity.FinityResourceVo.class)));
      tmpMap.put(_Fields.ROLES, new org.apache.thrift.meta_data.FieldMetaData("roles", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFinityResourceByRole_args.class, metaDataMap);
    }

    public getFinityResourceByRole_args() {
    }

    public getFinityResourceByRole_args(
      com.froad.thrift.vo.finity.FinityResourceVo finityResourceVo,
      List<Long> roles)
    {
      this();
      this.finityResourceVo = finityResourceVo;
      this.roles = roles;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFinityResourceByRole_args(getFinityResourceByRole_args other) {
      if (other.isSetFinityResourceVo()) {
        this.finityResourceVo = new com.froad.thrift.vo.finity.FinityResourceVo(other.finityResourceVo);
      }
      if (other.isSetRoles()) {
        List<Long> __this__roles = new ArrayList<Long>(other.roles);
        this.roles = __this__roles;
      }
    }

    public getFinityResourceByRole_args deepCopy() {
      return new getFinityResourceByRole_args(this);
    }

    @Override
    public void clear() {
      this.finityResourceVo = null;
      this.roles = null;
    }

    public com.froad.thrift.vo.finity.FinityResourceVo getFinityResourceVo() {
      return this.finityResourceVo;
    }

    public getFinityResourceByRole_args setFinityResourceVo(com.froad.thrift.vo.finity.FinityResourceVo finityResourceVo) {
      this.finityResourceVo = finityResourceVo;
      return this;
    }

    public void unsetFinityResourceVo() {
      this.finityResourceVo = null;
    }

    /** Returns true if field finityResourceVo is set (has been assigned a value) and false otherwise */
    public boolean isSetFinityResourceVo() {
      return this.finityResourceVo != null;
    }

    public void setFinityResourceVoIsSet(boolean value) {
      if (!value) {
        this.finityResourceVo = null;
      }
    }

    public int getRolesSize() {
      return (this.roles == null) ? 0 : this.roles.size();
    }

    public java.util.Iterator<Long> getRolesIterator() {
      return (this.roles == null) ? null : this.roles.iterator();
    }

    public void addToRoles(long elem) {
      if (this.roles == null) {
        this.roles = new ArrayList<Long>();
      }
      this.roles.add(elem);
    }

    public List<Long> getRoles() {
      return this.roles;
    }

    public getFinityResourceByRole_args setRoles(List<Long> roles) {
      this.roles = roles;
      return this;
    }

    public void unsetRoles() {
      this.roles = null;
    }

    /** Returns true if field roles is set (has been assigned a value) and false otherwise */
    public boolean isSetRoles() {
      return this.roles != null;
    }

    public void setRolesIsSet(boolean value) {
      if (!value) {
        this.roles = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FINITY_RESOURCE_VO:
        if (value == null) {
          unsetFinityResourceVo();
        } else {
          setFinityResourceVo((com.froad.thrift.vo.finity.FinityResourceVo)value);
        }
        break;

      case ROLES:
        if (value == null) {
          unsetRoles();
        } else {
          setRoles((List<Long>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FINITY_RESOURCE_VO:
        return getFinityResourceVo();

      case ROLES:
        return getRoles();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FINITY_RESOURCE_VO:
        return isSetFinityResourceVo();
      case ROLES:
        return isSetRoles();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFinityResourceByRole_args)
        return this.equals((getFinityResourceByRole_args)that);
      return false;
    }

    public boolean equals(getFinityResourceByRole_args that) {
      if (that == null)
        return false;

      boolean this_present_finityResourceVo = true && this.isSetFinityResourceVo();
      boolean that_present_finityResourceVo = true && that.isSetFinityResourceVo();
      if (this_present_finityResourceVo || that_present_finityResourceVo) {
        if (!(this_present_finityResourceVo && that_present_finityResourceVo))
          return false;
        if (!this.finityResourceVo.equals(that.finityResourceVo))
          return false;
      }

      boolean this_present_roles = true && this.isSetRoles();
      boolean that_present_roles = true && that.isSetRoles();
      if (this_present_roles || that_present_roles) {
        if (!(this_present_roles && that_present_roles))
          return false;
        if (!this.roles.equals(that.roles))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_finityResourceVo = true && (isSetFinityResourceVo());
      list.add(present_finityResourceVo);
      if (present_finityResourceVo)
        list.add(finityResourceVo);

      boolean present_roles = true && (isSetRoles());
      list.add(present_roles);
      if (present_roles)
        list.add(roles);

      return list.hashCode();
    }

    @Override
    public int compareTo(getFinityResourceByRole_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetFinityResourceVo()).compareTo(other.isSetFinityResourceVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFinityResourceVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.finityResourceVo, other.finityResourceVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRoles()).compareTo(other.isSetRoles());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRoles()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.roles, other.roles);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFinityResourceByRole_args(");
      boolean first = true;

      sb.append("finityResourceVo:");
      if (this.finityResourceVo == null) {
        sb.append("null");
      } else {
        sb.append(this.finityResourceVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("roles:");
      if (this.roles == null) {
        sb.append("null");
      } else {
        sb.append(this.roles);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (finityResourceVo != null) {
        finityResourceVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getFinityResourceByRole_argsStandardSchemeFactory implements SchemeFactory {
      public getFinityResourceByRole_argsStandardScheme getScheme() {
        return new getFinityResourceByRole_argsStandardScheme();
      }
    }

    private static class getFinityResourceByRole_argsStandardScheme extends StandardScheme<getFinityResourceByRole_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getFinityResourceByRole_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FINITY_RESOURCE_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.finityResourceVo = new com.froad.thrift.vo.finity.FinityResourceVo();
                struct.finityResourceVo.read(iprot);
                struct.setFinityResourceVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ROLES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                  struct.roles = new ArrayList<Long>(_list32.size);
                  long _elem33;
                  for (int _i34 = 0; _i34 < _list32.size; ++_i34)
                  {
                    _elem33 = iprot.readI64();
                    struct.roles.add(_elem33);
                  }
                  iprot.readListEnd();
                }
                struct.setRolesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getFinityResourceByRole_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.finityResourceVo != null) {
          oprot.writeFieldBegin(FINITY_RESOURCE_VO_FIELD_DESC);
          struct.finityResourceVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.roles != null) {
          oprot.writeFieldBegin(ROLES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.roles.size()));
            for (long _iter35 : struct.roles)
            {
              oprot.writeI64(_iter35);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getFinityResourceByRole_argsTupleSchemeFactory implements SchemeFactory {
      public getFinityResourceByRole_argsTupleScheme getScheme() {
        return new getFinityResourceByRole_argsTupleScheme();
      }
    }

    private static class getFinityResourceByRole_argsTupleScheme extends TupleScheme<getFinityResourceByRole_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getFinityResourceByRole_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFinityResourceVo()) {
          optionals.set(0);
        }
        if (struct.isSetRoles()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetFinityResourceVo()) {
          struct.finityResourceVo.write(oprot);
        }
        if (struct.isSetRoles()) {
          {
            oprot.writeI32(struct.roles.size());
            for (long _iter36 : struct.roles)
            {
              oprot.writeI64(_iter36);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getFinityResourceByRole_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.finityResourceVo = new com.froad.thrift.vo.finity.FinityResourceVo();
          struct.finityResourceVo.read(iprot);
          struct.setFinityResourceVoIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list37 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.roles = new ArrayList<Long>(_list37.size);
            long _elem38;
            for (int _i39 = 0; _i39 < _list37.size; ++_i39)
            {
              _elem38 = iprot.readI64();
              struct.roles.add(_elem38);
            }
          }
          struct.setRolesIsSet(true);
        }
      }
    }

  }

  public static class getFinityResourceByRole_result implements org.apache.thrift.TBase<getFinityResourceByRole_result, getFinityResourceByRole_result._Fields>, java.io.Serializable, Cloneable, Comparable<getFinityResourceByRole_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFinityResourceByRole_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getFinityResourceByRole_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getFinityResourceByRole_resultTupleSchemeFactory());
    }

    public List<com.froad.thrift.vo.finity.FinityResourceVo> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.finity.FinityResourceVo.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFinityResourceByRole_result.class, metaDataMap);
    }

    public getFinityResourceByRole_result() {
    }

    public getFinityResourceByRole_result(
      List<com.froad.thrift.vo.finity.FinityResourceVo> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFinityResourceByRole_result(getFinityResourceByRole_result other) {
      if (other.isSetSuccess()) {
        List<com.froad.thrift.vo.finity.FinityResourceVo> __this__success = new ArrayList<com.froad.thrift.vo.finity.FinityResourceVo>(other.success.size());
        for (com.froad.thrift.vo.finity.FinityResourceVo other_element : other.success) {
          __this__success.add(new com.froad.thrift.vo.finity.FinityResourceVo(other_element));
        }
        this.success = __this__success;
      }
    }

    public getFinityResourceByRole_result deepCopy() {
      return new getFinityResourceByRole_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.froad.thrift.vo.finity.FinityResourceVo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.froad.thrift.vo.finity.FinityResourceVo elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.froad.thrift.vo.finity.FinityResourceVo>();
      }
      this.success.add(elem);
    }

    public List<com.froad.thrift.vo.finity.FinityResourceVo> getSuccess() {
      return this.success;
    }

    public getFinityResourceByRole_result setSuccess(List<com.froad.thrift.vo.finity.FinityResourceVo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.froad.thrift.vo.finity.FinityResourceVo>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFinityResourceByRole_result)
        return this.equals((getFinityResourceByRole_result)that);
      return false;
    }

    public boolean equals(getFinityResourceByRole_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getFinityResourceByRole_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFinityResourceByRole_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getFinityResourceByRole_resultStandardSchemeFactory implements SchemeFactory {
      public getFinityResourceByRole_resultStandardScheme getScheme() {
        return new getFinityResourceByRole_resultStandardScheme();
      }
    }

    private static class getFinityResourceByRole_resultStandardScheme extends StandardScheme<getFinityResourceByRole_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getFinityResourceByRole_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list40 = iprot.readListBegin();
                  struct.success = new ArrayList<com.froad.thrift.vo.finity.FinityResourceVo>(_list40.size);
                  com.froad.thrift.vo.finity.FinityResourceVo _elem41;
                  for (int _i42 = 0; _i42 < _list40.size; ++_i42)
                  {
                    _elem41 = new com.froad.thrift.vo.finity.FinityResourceVo();
                    _elem41.read(iprot);
                    struct.success.add(_elem41);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getFinityResourceByRole_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.froad.thrift.vo.finity.FinityResourceVo _iter43 : struct.success)
            {
              _iter43.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getFinityResourceByRole_resultTupleSchemeFactory implements SchemeFactory {
      public getFinityResourceByRole_resultTupleScheme getScheme() {
        return new getFinityResourceByRole_resultTupleScheme();
      }
    }

    private static class getFinityResourceByRole_resultTupleScheme extends TupleScheme<getFinityResourceByRole_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getFinityResourceByRole_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.froad.thrift.vo.finity.FinityResourceVo _iter44 : struct.success)
            {
              _iter44.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getFinityResourceByRole_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.froad.thrift.vo.finity.FinityResourceVo>(_list45.size);
            com.froad.thrift.vo.finity.FinityResourceVo _elem46;
            for (int _i47 = 0; _i47 < _list45.size; ++_i47)
            {
              _elem46 = new com.froad.thrift.vo.finity.FinityResourceVo();
              _elem46.read(iprot);
              struct.success.add(_elem46);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
