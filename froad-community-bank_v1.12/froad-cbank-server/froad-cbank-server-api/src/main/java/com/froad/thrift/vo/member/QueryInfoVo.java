/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.vo.member;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class QueryInfoVo implements org.apache.thrift.TBase<QueryInfoVo, QueryInfoVo._Fields>, java.io.Serializable, Cloneable, Comparable<QueryInfoVo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("QueryInfoVo");

  private static final org.apache.thrift.protocol.TField PAGE_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("pageNum", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TOTAL_PAGE_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("totalPageNum", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("pageSize", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField TOTAL_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("totalCount", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new QueryInfoVoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new QueryInfoVoTupleSchemeFactory());
  }

  public String pageNum; // required
  public String totalPageNum; // required
  public String pageSize; // required
  public String totalCount; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PAGE_NUM((short)1, "pageNum"),
    TOTAL_PAGE_NUM((short)2, "totalPageNum"),
    PAGE_SIZE((short)3, "pageSize"),
    TOTAL_COUNT((short)4, "totalCount");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PAGE_NUM
          return PAGE_NUM;
        case 2: // TOTAL_PAGE_NUM
          return TOTAL_PAGE_NUM;
        case 3: // PAGE_SIZE
          return PAGE_SIZE;
        case 4: // TOTAL_COUNT
          return TOTAL_COUNT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PAGE_NUM, new org.apache.thrift.meta_data.FieldMetaData("pageNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TOTAL_PAGE_NUM, new org.apache.thrift.meta_data.FieldMetaData("totalPageNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("pageSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TOTAL_COUNT, new org.apache.thrift.meta_data.FieldMetaData("totalCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(QueryInfoVo.class, metaDataMap);
  }

  public QueryInfoVo() {
  }

  public QueryInfoVo(
    String pageNum,
    String totalPageNum,
    String pageSize,
    String totalCount)
  {
    this();
    this.pageNum = pageNum;
    this.totalPageNum = totalPageNum;
    this.pageSize = pageSize;
    this.totalCount = totalCount;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public QueryInfoVo(QueryInfoVo other) {
    if (other.isSetPageNum()) {
      this.pageNum = other.pageNum;
    }
    if (other.isSetTotalPageNum()) {
      this.totalPageNum = other.totalPageNum;
    }
    if (other.isSetPageSize()) {
      this.pageSize = other.pageSize;
    }
    if (other.isSetTotalCount()) {
      this.totalCount = other.totalCount;
    }
  }

  public QueryInfoVo deepCopy() {
    return new QueryInfoVo(this);
  }

  @Override
  public void clear() {
    this.pageNum = null;
    this.totalPageNum = null;
    this.pageSize = null;
    this.totalCount = null;
  }

  public String getPageNum() {
    return this.pageNum;
  }

  public QueryInfoVo setPageNum(String pageNum) {
    this.pageNum = pageNum;
    return this;
  }

  public void unsetPageNum() {
    this.pageNum = null;
  }

  /** Returns true if field pageNum is set (has been assigned a value) and false otherwise */
  public boolean isSetPageNum() {
    return this.pageNum != null;
  }

  public void setPageNumIsSet(boolean value) {
    if (!value) {
      this.pageNum = null;
    }
  }

  public String getTotalPageNum() {
    return this.totalPageNum;
  }

  public QueryInfoVo setTotalPageNum(String totalPageNum) {
    this.totalPageNum = totalPageNum;
    return this;
  }

  public void unsetTotalPageNum() {
    this.totalPageNum = null;
  }

  /** Returns true if field totalPageNum is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalPageNum() {
    return this.totalPageNum != null;
  }

  public void setTotalPageNumIsSet(boolean value) {
    if (!value) {
      this.totalPageNum = null;
    }
  }

  public String getPageSize() {
    return this.pageSize;
  }

  public QueryInfoVo setPageSize(String pageSize) {
    this.pageSize = pageSize;
    return this;
  }

  public void unsetPageSize() {
    this.pageSize = null;
  }

  /** Returns true if field pageSize is set (has been assigned a value) and false otherwise */
  public boolean isSetPageSize() {
    return this.pageSize != null;
  }

  public void setPageSizeIsSet(boolean value) {
    if (!value) {
      this.pageSize = null;
    }
  }

  public String getTotalCount() {
    return this.totalCount;
  }

  public QueryInfoVo setTotalCount(String totalCount) {
    this.totalCount = totalCount;
    return this;
  }

  public void unsetTotalCount() {
    this.totalCount = null;
  }

  /** Returns true if field totalCount is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalCount() {
    return this.totalCount != null;
  }

  public void setTotalCountIsSet(boolean value) {
    if (!value) {
      this.totalCount = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PAGE_NUM:
      if (value == null) {
        unsetPageNum();
      } else {
        setPageNum((String)value);
      }
      break;

    case TOTAL_PAGE_NUM:
      if (value == null) {
        unsetTotalPageNum();
      } else {
        setTotalPageNum((String)value);
      }
      break;

    case PAGE_SIZE:
      if (value == null) {
        unsetPageSize();
      } else {
        setPageSize((String)value);
      }
      break;

    case TOTAL_COUNT:
      if (value == null) {
        unsetTotalCount();
      } else {
        setTotalCount((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PAGE_NUM:
      return getPageNum();

    case TOTAL_PAGE_NUM:
      return getTotalPageNum();

    case PAGE_SIZE:
      return getPageSize();

    case TOTAL_COUNT:
      return getTotalCount();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PAGE_NUM:
      return isSetPageNum();
    case TOTAL_PAGE_NUM:
      return isSetTotalPageNum();
    case PAGE_SIZE:
      return isSetPageSize();
    case TOTAL_COUNT:
      return isSetTotalCount();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof QueryInfoVo)
      return this.equals((QueryInfoVo)that);
    return false;
  }

  public boolean equals(QueryInfoVo that) {
    if (that == null)
      return false;

    boolean this_present_pageNum = true && this.isSetPageNum();
    boolean that_present_pageNum = true && that.isSetPageNum();
    if (this_present_pageNum || that_present_pageNum) {
      if (!(this_present_pageNum && that_present_pageNum))
        return false;
      if (!this.pageNum.equals(that.pageNum))
        return false;
    }

    boolean this_present_totalPageNum = true && this.isSetTotalPageNum();
    boolean that_present_totalPageNum = true && that.isSetTotalPageNum();
    if (this_present_totalPageNum || that_present_totalPageNum) {
      if (!(this_present_totalPageNum && that_present_totalPageNum))
        return false;
      if (!this.totalPageNum.equals(that.totalPageNum))
        return false;
    }

    boolean this_present_pageSize = true && this.isSetPageSize();
    boolean that_present_pageSize = true && that.isSetPageSize();
    if (this_present_pageSize || that_present_pageSize) {
      if (!(this_present_pageSize && that_present_pageSize))
        return false;
      if (!this.pageSize.equals(that.pageSize))
        return false;
    }

    boolean this_present_totalCount = true && this.isSetTotalCount();
    boolean that_present_totalCount = true && that.isSetTotalCount();
    if (this_present_totalCount || that_present_totalCount) {
      if (!(this_present_totalCount && that_present_totalCount))
        return false;
      if (!this.totalCount.equals(that.totalCount))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pageNum = true && (isSetPageNum());
    list.add(present_pageNum);
    if (present_pageNum)
      list.add(pageNum);

    boolean present_totalPageNum = true && (isSetTotalPageNum());
    list.add(present_totalPageNum);
    if (present_totalPageNum)
      list.add(totalPageNum);

    boolean present_pageSize = true && (isSetPageSize());
    list.add(present_pageSize);
    if (present_pageSize)
      list.add(pageSize);

    boolean present_totalCount = true && (isSetTotalCount());
    list.add(present_totalCount);
    if (present_totalCount)
      list.add(totalCount);

    return list.hashCode();
  }

  @Override
  public int compareTo(QueryInfoVo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPageNum()).compareTo(other.isSetPageNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPageNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageNum, other.pageNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalPageNum()).compareTo(other.isSetTotalPageNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalPageNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalPageNum, other.totalPageNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPageSize()).compareTo(other.isSetPageSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPageSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageSize, other.pageSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalCount()).compareTo(other.isSetTotalCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalCount, other.totalCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("QueryInfoVo(");
    boolean first = true;

    sb.append("pageNum:");
    if (this.pageNum == null) {
      sb.append("null");
    } else {
      sb.append(this.pageNum);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalPageNum:");
    if (this.totalPageNum == null) {
      sb.append("null");
    } else {
      sb.append(this.totalPageNum);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pageSize:");
    if (this.pageSize == null) {
      sb.append("null");
    } else {
      sb.append(this.pageSize);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalCount:");
    if (this.totalCount == null) {
      sb.append("null");
    } else {
      sb.append(this.totalCount);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class QueryInfoVoStandardSchemeFactory implements SchemeFactory {
    public QueryInfoVoStandardScheme getScheme() {
      return new QueryInfoVoStandardScheme();
    }
  }

  private static class QueryInfoVoStandardScheme extends StandardScheme<QueryInfoVo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, QueryInfoVo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PAGE_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pageNum = iprot.readString();
              struct.setPageNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TOTAL_PAGE_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.totalPageNum = iprot.readString();
              struct.setTotalPageNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PAGE_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pageSize = iprot.readString();
              struct.setPageSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TOTAL_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.totalCount = iprot.readString();
              struct.setTotalCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, QueryInfoVo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.pageNum != null) {
        oprot.writeFieldBegin(PAGE_NUM_FIELD_DESC);
        oprot.writeString(struct.pageNum);
        oprot.writeFieldEnd();
      }
      if (struct.totalPageNum != null) {
        oprot.writeFieldBegin(TOTAL_PAGE_NUM_FIELD_DESC);
        oprot.writeString(struct.totalPageNum);
        oprot.writeFieldEnd();
      }
      if (struct.pageSize != null) {
        oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
        oprot.writeString(struct.pageSize);
        oprot.writeFieldEnd();
      }
      if (struct.totalCount != null) {
        oprot.writeFieldBegin(TOTAL_COUNT_FIELD_DESC);
        oprot.writeString(struct.totalCount);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class QueryInfoVoTupleSchemeFactory implements SchemeFactory {
    public QueryInfoVoTupleScheme getScheme() {
      return new QueryInfoVoTupleScheme();
    }
  }

  private static class QueryInfoVoTupleScheme extends TupleScheme<QueryInfoVo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, QueryInfoVo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPageNum()) {
        optionals.set(0);
      }
      if (struct.isSetTotalPageNum()) {
        optionals.set(1);
      }
      if (struct.isSetPageSize()) {
        optionals.set(2);
      }
      if (struct.isSetTotalCount()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetPageNum()) {
        oprot.writeString(struct.pageNum);
      }
      if (struct.isSetTotalPageNum()) {
        oprot.writeString(struct.totalPageNum);
      }
      if (struct.isSetPageSize()) {
        oprot.writeString(struct.pageSize);
      }
      if (struct.isSetTotalCount()) {
        oprot.writeString(struct.totalCount);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, QueryInfoVo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.pageNum = iprot.readString();
        struct.setPageNumIsSet(true);
      }
      if (incoming.get(1)) {
        struct.totalPageNum = iprot.readString();
        struct.setTotalPageNumIsSet(true);
      }
      if (incoming.get(2)) {
        struct.pageSize = iprot.readString();
        struct.setPageSizeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.totalCount = iprot.readString();
        struct.setTotalCountIsSet(true);
      }
    }
  }

}

