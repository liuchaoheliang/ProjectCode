/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class BizInstanceAttrService {

  /**
   * BizInstanceAttrService
   */
  public interface Iface extends com.froad.thrift.monitor.service.BizMonitorService.Iface {

    /**
     * 增加 BizInstanceAttr
     * @param originVo 源信息对象
     * @param bizInstanceAttrVo
     * @return long    主键ID
     * 
     * @param originVo
     * @param bizInstanceAttrVo
     */
    public long addBizInstanceAttr(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.BizInstanceAttrVo bizInstanceAttrVo) throws org.apache.thrift.TException;

    /**
     * 删除 BizInstanceAttr
     * @param originVo 源信息对象
     * @param bizInstanceAttrVo
     * @return boolean
     * 
     * @param originVo
     * @param bizInstanceAttrVo
     */
    public boolean deleteBizInstanceAttr(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.BizInstanceAttrVo bizInstanceAttrVo) throws org.apache.thrift.TException;

    /**
     * 根据id删除单个 BizInstanceAttr
     * @param originVo 源信息对象
     * @param id
     * @return BizInstanceAttrVo
     * 
     * @param originVo
     * @param id
     */
    public boolean deleteBizInstanceAttrById(com.froad.thrift.vo.OriginVo originVo, long id) throws org.apache.thrift.TException;

    /**
     * 修改 BizInstanceAttr
     * @param originVo 源信息对象
     * @param bizInstanceAttrVo
     * @return boolean
     * 
     * @param originVo
     * @param bizInstanceAttrVo
     */
    public boolean updateBizInstanceAttr(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.BizInstanceAttrVo bizInstanceAttrVo) throws org.apache.thrift.TException;

    /**
     * 根据id修改单个 BizInstanceAttr
     * @param originVo 源信息对象
     * @param id
     * @return BizInstanceAttrVo
     * 
     * @param originVo
     * @param bizInstanceAttrVo
     */
    public boolean updateBizInstanceAttrById(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.BizInstanceAttrVo bizInstanceAttrVo) throws org.apache.thrift.TException;

    /**
     * 根据id查询单个 BizInstanceAttr
     * @param id
     * @return BizInstanceAttrVo
     * 
     * @param id
     */
    public com.froad.thrift.vo.BizInstanceAttrVo getBizInstanceAttrById(long id) throws org.apache.thrift.TException;

    /**
     * 根据条件查询一个 BizInstanceAttr
     * @param bizInstanceAttrVo
     * @return BizInstanceAttrVo
     * 
     * @param bizInstanceAttrVo
     */
    public com.froad.thrift.vo.BizInstanceAttrVo getOneBizInstanceAttr(com.froad.thrift.vo.BizInstanceAttrVo bizInstanceAttrVo) throws org.apache.thrift.TException;

    /**
     * 根据条件统计 BizInstanceAttr
     * @param bizInstanceAttrVo
     * @return int
     * 
     * @param bizInstanceAttrVo
     */
    public int countBizInstanceAttr(com.froad.thrift.vo.BizInstanceAttrVo bizInstanceAttrVo) throws org.apache.thrift.TException;

    /**
     * 查询 BizInstanceAttr
     * @param bizInstanceAttrVo
     * @return List<BizInstanceAttrVo>
     * 
     * @param bizInstanceAttrVo
     */
    public List<com.froad.thrift.vo.BizInstanceAttrVo> getBizInstanceAttr(com.froad.thrift.vo.BizInstanceAttrVo bizInstanceAttrVo) throws org.apache.thrift.TException;

    /**
     * 分页查询 BizInstanceAttr
     * @param bizInstanceAttrVo
     * @return BizInstanceAttrPageVoRes
     * 
     * @param page
     * @param bizInstanceAttrVo
     */
    public com.froad.thrift.vo.BizInstanceAttrPageVoRes getBizInstanceAttrByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.BizInstanceAttrVo bizInstanceAttrVo) throws org.apache.thrift.TException;

  }

  public interface AsyncIface extends com.froad.thrift.monitor.service.BizMonitorService .AsyncIface {

    public void addBizInstanceAttr(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.BizInstanceAttrVo bizInstanceAttrVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteBizInstanceAttr(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.BizInstanceAttrVo bizInstanceAttrVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteBizInstanceAttrById(com.froad.thrift.vo.OriginVo originVo, long id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateBizInstanceAttr(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.BizInstanceAttrVo bizInstanceAttrVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateBizInstanceAttrById(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.BizInstanceAttrVo bizInstanceAttrVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getBizInstanceAttrById(long id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getOneBizInstanceAttr(com.froad.thrift.vo.BizInstanceAttrVo bizInstanceAttrVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void countBizInstanceAttr(com.froad.thrift.vo.BizInstanceAttrVo bizInstanceAttrVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getBizInstanceAttr(com.froad.thrift.vo.BizInstanceAttrVo bizInstanceAttrVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getBizInstanceAttrByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.BizInstanceAttrVo bizInstanceAttrVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends com.froad.thrift.monitor.service.BizMonitorService.Client implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public long addBizInstanceAttr(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.BizInstanceAttrVo bizInstanceAttrVo) throws org.apache.thrift.TException
    {
      send_addBizInstanceAttr(originVo, bizInstanceAttrVo);
      return recv_addBizInstanceAttr();
    }

    public void send_addBizInstanceAttr(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.BizInstanceAttrVo bizInstanceAttrVo) throws org.apache.thrift.TException
    {
      addBizInstanceAttr_args args = new addBizInstanceAttr_args();
      args.setOriginVo(originVo);
      args.setBizInstanceAttrVo(bizInstanceAttrVo);
      sendBase("addBizInstanceAttr", args);
    }

    public long recv_addBizInstanceAttr() throws org.apache.thrift.TException
    {
      addBizInstanceAttr_result result = new addBizInstanceAttr_result();
      receiveBase(result, "addBizInstanceAttr");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addBizInstanceAttr failed: unknown result");
    }

    public boolean deleteBizInstanceAttr(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.BizInstanceAttrVo bizInstanceAttrVo) throws org.apache.thrift.TException
    {
      send_deleteBizInstanceAttr(originVo, bizInstanceAttrVo);
      return recv_deleteBizInstanceAttr();
    }

    public void send_deleteBizInstanceAttr(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.BizInstanceAttrVo bizInstanceAttrVo) throws org.apache.thrift.TException
    {
      deleteBizInstanceAttr_args args = new deleteBizInstanceAttr_args();
      args.setOriginVo(originVo);
      args.setBizInstanceAttrVo(bizInstanceAttrVo);
      sendBase("deleteBizInstanceAttr", args);
    }

    public boolean recv_deleteBizInstanceAttr() throws org.apache.thrift.TException
    {
      deleteBizInstanceAttr_result result = new deleteBizInstanceAttr_result();
      receiveBase(result, "deleteBizInstanceAttr");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteBizInstanceAttr failed: unknown result");
    }

    public boolean deleteBizInstanceAttrById(com.froad.thrift.vo.OriginVo originVo, long id) throws org.apache.thrift.TException
    {
      send_deleteBizInstanceAttrById(originVo, id);
      return recv_deleteBizInstanceAttrById();
    }

    public void send_deleteBizInstanceAttrById(com.froad.thrift.vo.OriginVo originVo, long id) throws org.apache.thrift.TException
    {
      deleteBizInstanceAttrById_args args = new deleteBizInstanceAttrById_args();
      args.setOriginVo(originVo);
      args.setId(id);
      sendBase("deleteBizInstanceAttrById", args);
    }

    public boolean recv_deleteBizInstanceAttrById() throws org.apache.thrift.TException
    {
      deleteBizInstanceAttrById_result result = new deleteBizInstanceAttrById_result();
      receiveBase(result, "deleteBizInstanceAttrById");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteBizInstanceAttrById failed: unknown result");
    }

    public boolean updateBizInstanceAttr(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.BizInstanceAttrVo bizInstanceAttrVo) throws org.apache.thrift.TException
    {
      send_updateBizInstanceAttr(originVo, bizInstanceAttrVo);
      return recv_updateBizInstanceAttr();
    }

    public void send_updateBizInstanceAttr(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.BizInstanceAttrVo bizInstanceAttrVo) throws org.apache.thrift.TException
    {
      updateBizInstanceAttr_args args = new updateBizInstanceAttr_args();
      args.setOriginVo(originVo);
      args.setBizInstanceAttrVo(bizInstanceAttrVo);
      sendBase("updateBizInstanceAttr", args);
    }

    public boolean recv_updateBizInstanceAttr() throws org.apache.thrift.TException
    {
      updateBizInstanceAttr_result result = new updateBizInstanceAttr_result();
      receiveBase(result, "updateBizInstanceAttr");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateBizInstanceAttr failed: unknown result");
    }

    public boolean updateBizInstanceAttrById(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.BizInstanceAttrVo bizInstanceAttrVo) throws org.apache.thrift.TException
    {
      send_updateBizInstanceAttrById(originVo, bizInstanceAttrVo);
      return recv_updateBizInstanceAttrById();
    }

    public void send_updateBizInstanceAttrById(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.BizInstanceAttrVo bizInstanceAttrVo) throws org.apache.thrift.TException
    {
      updateBizInstanceAttrById_args args = new updateBizInstanceAttrById_args();
      args.setOriginVo(originVo);
      args.setBizInstanceAttrVo(bizInstanceAttrVo);
      sendBase("updateBizInstanceAttrById", args);
    }

    public boolean recv_updateBizInstanceAttrById() throws org.apache.thrift.TException
    {
      updateBizInstanceAttrById_result result = new updateBizInstanceAttrById_result();
      receiveBase(result, "updateBizInstanceAttrById");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateBizInstanceAttrById failed: unknown result");
    }

    public com.froad.thrift.vo.BizInstanceAttrVo getBizInstanceAttrById(long id) throws org.apache.thrift.TException
    {
      send_getBizInstanceAttrById(id);
      return recv_getBizInstanceAttrById();
    }

    public void send_getBizInstanceAttrById(long id) throws org.apache.thrift.TException
    {
      getBizInstanceAttrById_args args = new getBizInstanceAttrById_args();
      args.setId(id);
      sendBase("getBizInstanceAttrById", args);
    }

    public com.froad.thrift.vo.BizInstanceAttrVo recv_getBizInstanceAttrById() throws org.apache.thrift.TException
    {
      getBizInstanceAttrById_result result = new getBizInstanceAttrById_result();
      receiveBase(result, "getBizInstanceAttrById");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getBizInstanceAttrById failed: unknown result");
    }

    public com.froad.thrift.vo.BizInstanceAttrVo getOneBizInstanceAttr(com.froad.thrift.vo.BizInstanceAttrVo bizInstanceAttrVo) throws org.apache.thrift.TException
    {
      send_getOneBizInstanceAttr(bizInstanceAttrVo);
      return recv_getOneBizInstanceAttr();
    }

    public void send_getOneBizInstanceAttr(com.froad.thrift.vo.BizInstanceAttrVo bizInstanceAttrVo) throws org.apache.thrift.TException
    {
      getOneBizInstanceAttr_args args = new getOneBizInstanceAttr_args();
      args.setBizInstanceAttrVo(bizInstanceAttrVo);
      sendBase("getOneBizInstanceAttr", args);
    }

    public com.froad.thrift.vo.BizInstanceAttrVo recv_getOneBizInstanceAttr() throws org.apache.thrift.TException
    {
      getOneBizInstanceAttr_result result = new getOneBizInstanceAttr_result();
      receiveBase(result, "getOneBizInstanceAttr");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getOneBizInstanceAttr failed: unknown result");
    }

    public int countBizInstanceAttr(com.froad.thrift.vo.BizInstanceAttrVo bizInstanceAttrVo) throws org.apache.thrift.TException
    {
      send_countBizInstanceAttr(bizInstanceAttrVo);
      return recv_countBizInstanceAttr();
    }

    public void send_countBizInstanceAttr(com.froad.thrift.vo.BizInstanceAttrVo bizInstanceAttrVo) throws org.apache.thrift.TException
    {
      countBizInstanceAttr_args args = new countBizInstanceAttr_args();
      args.setBizInstanceAttrVo(bizInstanceAttrVo);
      sendBase("countBizInstanceAttr", args);
    }

    public int recv_countBizInstanceAttr() throws org.apache.thrift.TException
    {
      countBizInstanceAttr_result result = new countBizInstanceAttr_result();
      receiveBase(result, "countBizInstanceAttr");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "countBizInstanceAttr failed: unknown result");
    }

    public List<com.froad.thrift.vo.BizInstanceAttrVo> getBizInstanceAttr(com.froad.thrift.vo.BizInstanceAttrVo bizInstanceAttrVo) throws org.apache.thrift.TException
    {
      send_getBizInstanceAttr(bizInstanceAttrVo);
      return recv_getBizInstanceAttr();
    }

    public void send_getBizInstanceAttr(com.froad.thrift.vo.BizInstanceAttrVo bizInstanceAttrVo) throws org.apache.thrift.TException
    {
      getBizInstanceAttr_args args = new getBizInstanceAttr_args();
      args.setBizInstanceAttrVo(bizInstanceAttrVo);
      sendBase("getBizInstanceAttr", args);
    }

    public List<com.froad.thrift.vo.BizInstanceAttrVo> recv_getBizInstanceAttr() throws org.apache.thrift.TException
    {
      getBizInstanceAttr_result result = new getBizInstanceAttr_result();
      receiveBase(result, "getBizInstanceAttr");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getBizInstanceAttr failed: unknown result");
    }

    public com.froad.thrift.vo.BizInstanceAttrPageVoRes getBizInstanceAttrByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.BizInstanceAttrVo bizInstanceAttrVo) throws org.apache.thrift.TException
    {
      send_getBizInstanceAttrByPage(page, bizInstanceAttrVo);
      return recv_getBizInstanceAttrByPage();
    }

    public void send_getBizInstanceAttrByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.BizInstanceAttrVo bizInstanceAttrVo) throws org.apache.thrift.TException
    {
      getBizInstanceAttrByPage_args args = new getBizInstanceAttrByPage_args();
      args.setPage(page);
      args.setBizInstanceAttrVo(bizInstanceAttrVo);
      sendBase("getBizInstanceAttrByPage", args);
    }

    public com.froad.thrift.vo.BizInstanceAttrPageVoRes recv_getBizInstanceAttrByPage() throws org.apache.thrift.TException
    {
      getBizInstanceAttrByPage_result result = new getBizInstanceAttrByPage_result();
      receiveBase(result, "getBizInstanceAttrByPage");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getBizInstanceAttrByPage failed: unknown result");
    }

  }
  public static class AsyncClient extends com.froad.thrift.monitor.service.BizMonitorService.AsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void addBizInstanceAttr(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.BizInstanceAttrVo bizInstanceAttrVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addBizInstanceAttr_call method_call = new addBizInstanceAttr_call(originVo, bizInstanceAttrVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addBizInstanceAttr_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.OriginVo originVo;
      private com.froad.thrift.vo.BizInstanceAttrVo bizInstanceAttrVo;
      public addBizInstanceAttr_call(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.BizInstanceAttrVo bizInstanceAttrVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.originVo = originVo;
        this.bizInstanceAttrVo = bizInstanceAttrVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addBizInstanceAttr", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addBizInstanceAttr_args args = new addBizInstanceAttr_args();
        args.setOriginVo(originVo);
        args.setBizInstanceAttrVo(bizInstanceAttrVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addBizInstanceAttr();
      }
    }

    public void deleteBizInstanceAttr(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.BizInstanceAttrVo bizInstanceAttrVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteBizInstanceAttr_call method_call = new deleteBizInstanceAttr_call(originVo, bizInstanceAttrVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteBizInstanceAttr_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.OriginVo originVo;
      private com.froad.thrift.vo.BizInstanceAttrVo bizInstanceAttrVo;
      public deleteBizInstanceAttr_call(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.BizInstanceAttrVo bizInstanceAttrVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.originVo = originVo;
        this.bizInstanceAttrVo = bizInstanceAttrVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteBizInstanceAttr", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteBizInstanceAttr_args args = new deleteBizInstanceAttr_args();
        args.setOriginVo(originVo);
        args.setBizInstanceAttrVo(bizInstanceAttrVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteBizInstanceAttr();
      }
    }

    public void deleteBizInstanceAttrById(com.froad.thrift.vo.OriginVo originVo, long id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteBizInstanceAttrById_call method_call = new deleteBizInstanceAttrById_call(originVo, id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteBizInstanceAttrById_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.OriginVo originVo;
      private long id;
      public deleteBizInstanceAttrById_call(com.froad.thrift.vo.OriginVo originVo, long id, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.originVo = originVo;
        this.id = id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteBizInstanceAttrById", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteBizInstanceAttrById_args args = new deleteBizInstanceAttrById_args();
        args.setOriginVo(originVo);
        args.setId(id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteBizInstanceAttrById();
      }
    }

    public void updateBizInstanceAttr(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.BizInstanceAttrVo bizInstanceAttrVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateBizInstanceAttr_call method_call = new updateBizInstanceAttr_call(originVo, bizInstanceAttrVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateBizInstanceAttr_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.OriginVo originVo;
      private com.froad.thrift.vo.BizInstanceAttrVo bizInstanceAttrVo;
      public updateBizInstanceAttr_call(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.BizInstanceAttrVo bizInstanceAttrVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.originVo = originVo;
        this.bizInstanceAttrVo = bizInstanceAttrVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateBizInstanceAttr", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateBizInstanceAttr_args args = new updateBizInstanceAttr_args();
        args.setOriginVo(originVo);
        args.setBizInstanceAttrVo(bizInstanceAttrVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateBizInstanceAttr();
      }
    }

    public void updateBizInstanceAttrById(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.BizInstanceAttrVo bizInstanceAttrVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateBizInstanceAttrById_call method_call = new updateBizInstanceAttrById_call(originVo, bizInstanceAttrVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateBizInstanceAttrById_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.OriginVo originVo;
      private com.froad.thrift.vo.BizInstanceAttrVo bizInstanceAttrVo;
      public updateBizInstanceAttrById_call(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.BizInstanceAttrVo bizInstanceAttrVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.originVo = originVo;
        this.bizInstanceAttrVo = bizInstanceAttrVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateBizInstanceAttrById", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateBizInstanceAttrById_args args = new updateBizInstanceAttrById_args();
        args.setOriginVo(originVo);
        args.setBizInstanceAttrVo(bizInstanceAttrVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateBizInstanceAttrById();
      }
    }

    public void getBizInstanceAttrById(long id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getBizInstanceAttrById_call method_call = new getBizInstanceAttrById_call(id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getBizInstanceAttrById_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long id;
      public getBizInstanceAttrById_call(long id, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getBizInstanceAttrById", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getBizInstanceAttrById_args args = new getBizInstanceAttrById_args();
        args.setId(id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.BizInstanceAttrVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getBizInstanceAttrById();
      }
    }

    public void getOneBizInstanceAttr(com.froad.thrift.vo.BizInstanceAttrVo bizInstanceAttrVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getOneBizInstanceAttr_call method_call = new getOneBizInstanceAttr_call(bizInstanceAttrVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getOneBizInstanceAttr_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.BizInstanceAttrVo bizInstanceAttrVo;
      public getOneBizInstanceAttr_call(com.froad.thrift.vo.BizInstanceAttrVo bizInstanceAttrVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bizInstanceAttrVo = bizInstanceAttrVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getOneBizInstanceAttr", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getOneBizInstanceAttr_args args = new getOneBizInstanceAttr_args();
        args.setBizInstanceAttrVo(bizInstanceAttrVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.BizInstanceAttrVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getOneBizInstanceAttr();
      }
    }

    public void countBizInstanceAttr(com.froad.thrift.vo.BizInstanceAttrVo bizInstanceAttrVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      countBizInstanceAttr_call method_call = new countBizInstanceAttr_call(bizInstanceAttrVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class countBizInstanceAttr_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.BizInstanceAttrVo bizInstanceAttrVo;
      public countBizInstanceAttr_call(com.froad.thrift.vo.BizInstanceAttrVo bizInstanceAttrVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bizInstanceAttrVo = bizInstanceAttrVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("countBizInstanceAttr", org.apache.thrift.protocol.TMessageType.CALL, 0));
        countBizInstanceAttr_args args = new countBizInstanceAttr_args();
        args.setBizInstanceAttrVo(bizInstanceAttrVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_countBizInstanceAttr();
      }
    }

    public void getBizInstanceAttr(com.froad.thrift.vo.BizInstanceAttrVo bizInstanceAttrVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getBizInstanceAttr_call method_call = new getBizInstanceAttr_call(bizInstanceAttrVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getBizInstanceAttr_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.BizInstanceAttrVo bizInstanceAttrVo;
      public getBizInstanceAttr_call(com.froad.thrift.vo.BizInstanceAttrVo bizInstanceAttrVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bizInstanceAttrVo = bizInstanceAttrVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getBizInstanceAttr", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getBizInstanceAttr_args args = new getBizInstanceAttr_args();
        args.setBizInstanceAttrVo(bizInstanceAttrVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.froad.thrift.vo.BizInstanceAttrVo> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getBizInstanceAttr();
      }
    }

    public void getBizInstanceAttrByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.BizInstanceAttrVo bizInstanceAttrVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getBizInstanceAttrByPage_call method_call = new getBizInstanceAttrByPage_call(page, bizInstanceAttrVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getBizInstanceAttrByPage_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.PageVo page;
      private com.froad.thrift.vo.BizInstanceAttrVo bizInstanceAttrVo;
      public getBizInstanceAttrByPage_call(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.BizInstanceAttrVo bizInstanceAttrVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.page = page;
        this.bizInstanceAttrVo = bizInstanceAttrVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getBizInstanceAttrByPage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getBizInstanceAttrByPage_args args = new getBizInstanceAttrByPage_args();
        args.setPage(page);
        args.setBizInstanceAttrVo(bizInstanceAttrVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.BizInstanceAttrPageVoRes getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getBizInstanceAttrByPage();
      }
    }

  }

  public static class Processor<I extends Iface> extends com.froad.thrift.monitor.service.BizMonitorService.Processor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("addBizInstanceAttr", new addBizInstanceAttr());
      processMap.put("deleteBizInstanceAttr", new deleteBizInstanceAttr());
      processMap.put("deleteBizInstanceAttrById", new deleteBizInstanceAttrById());
      processMap.put("updateBizInstanceAttr", new updateBizInstanceAttr());
      processMap.put("updateBizInstanceAttrById", new updateBizInstanceAttrById());
      processMap.put("getBizInstanceAttrById", new getBizInstanceAttrById());
      processMap.put("getOneBizInstanceAttr", new getOneBizInstanceAttr());
      processMap.put("countBizInstanceAttr", new countBizInstanceAttr());
      processMap.put("getBizInstanceAttr", new getBizInstanceAttr());
      processMap.put("getBizInstanceAttrByPage", new getBizInstanceAttrByPage());
      return processMap;
    }

    public static class addBizInstanceAttr<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addBizInstanceAttr_args> {
      public addBizInstanceAttr() {
        super("addBizInstanceAttr");
      }

      public addBizInstanceAttr_args getEmptyArgsInstance() {
        return new addBizInstanceAttr_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addBizInstanceAttr_result getResult(I iface, addBizInstanceAttr_args args) throws org.apache.thrift.TException {
        addBizInstanceAttr_result result = new addBizInstanceAttr_result();
        result.success = iface.addBizInstanceAttr(args.originVo, args.bizInstanceAttrVo);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class deleteBizInstanceAttr<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteBizInstanceAttr_args> {
      public deleteBizInstanceAttr() {
        super("deleteBizInstanceAttr");
      }

      public deleteBizInstanceAttr_args getEmptyArgsInstance() {
        return new deleteBizInstanceAttr_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteBizInstanceAttr_result getResult(I iface, deleteBizInstanceAttr_args args) throws org.apache.thrift.TException {
        deleteBizInstanceAttr_result result = new deleteBizInstanceAttr_result();
        result.success = iface.deleteBizInstanceAttr(args.originVo, args.bizInstanceAttrVo);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class deleteBizInstanceAttrById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteBizInstanceAttrById_args> {
      public deleteBizInstanceAttrById() {
        super("deleteBizInstanceAttrById");
      }

      public deleteBizInstanceAttrById_args getEmptyArgsInstance() {
        return new deleteBizInstanceAttrById_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteBizInstanceAttrById_result getResult(I iface, deleteBizInstanceAttrById_args args) throws org.apache.thrift.TException {
        deleteBizInstanceAttrById_result result = new deleteBizInstanceAttrById_result();
        result.success = iface.deleteBizInstanceAttrById(args.originVo, args.id);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class updateBizInstanceAttr<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateBizInstanceAttr_args> {
      public updateBizInstanceAttr() {
        super("updateBizInstanceAttr");
      }

      public updateBizInstanceAttr_args getEmptyArgsInstance() {
        return new updateBizInstanceAttr_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateBizInstanceAttr_result getResult(I iface, updateBizInstanceAttr_args args) throws org.apache.thrift.TException {
        updateBizInstanceAttr_result result = new updateBizInstanceAttr_result();
        result.success = iface.updateBizInstanceAttr(args.originVo, args.bizInstanceAttrVo);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class updateBizInstanceAttrById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateBizInstanceAttrById_args> {
      public updateBizInstanceAttrById() {
        super("updateBizInstanceAttrById");
      }

      public updateBizInstanceAttrById_args getEmptyArgsInstance() {
        return new updateBizInstanceAttrById_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateBizInstanceAttrById_result getResult(I iface, updateBizInstanceAttrById_args args) throws org.apache.thrift.TException {
        updateBizInstanceAttrById_result result = new updateBizInstanceAttrById_result();
        result.success = iface.updateBizInstanceAttrById(args.originVo, args.bizInstanceAttrVo);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getBizInstanceAttrById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getBizInstanceAttrById_args> {
      public getBizInstanceAttrById() {
        super("getBizInstanceAttrById");
      }

      public getBizInstanceAttrById_args getEmptyArgsInstance() {
        return new getBizInstanceAttrById_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getBizInstanceAttrById_result getResult(I iface, getBizInstanceAttrById_args args) throws org.apache.thrift.TException {
        getBizInstanceAttrById_result result = new getBizInstanceAttrById_result();
        result.success = iface.getBizInstanceAttrById(args.id);
        return result;
      }
    }

    public static class getOneBizInstanceAttr<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getOneBizInstanceAttr_args> {
      public getOneBizInstanceAttr() {
        super("getOneBizInstanceAttr");
      }

      public getOneBizInstanceAttr_args getEmptyArgsInstance() {
        return new getOneBizInstanceAttr_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getOneBizInstanceAttr_result getResult(I iface, getOneBizInstanceAttr_args args) throws org.apache.thrift.TException {
        getOneBizInstanceAttr_result result = new getOneBizInstanceAttr_result();
        result.success = iface.getOneBizInstanceAttr(args.bizInstanceAttrVo);
        return result;
      }
    }

    public static class countBizInstanceAttr<I extends Iface> extends org.apache.thrift.ProcessFunction<I, countBizInstanceAttr_args> {
      public countBizInstanceAttr() {
        super("countBizInstanceAttr");
      }

      public countBizInstanceAttr_args getEmptyArgsInstance() {
        return new countBizInstanceAttr_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public countBizInstanceAttr_result getResult(I iface, countBizInstanceAttr_args args) throws org.apache.thrift.TException {
        countBizInstanceAttr_result result = new countBizInstanceAttr_result();
        result.success = iface.countBizInstanceAttr(args.bizInstanceAttrVo);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getBizInstanceAttr<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getBizInstanceAttr_args> {
      public getBizInstanceAttr() {
        super("getBizInstanceAttr");
      }

      public getBizInstanceAttr_args getEmptyArgsInstance() {
        return new getBizInstanceAttr_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getBizInstanceAttr_result getResult(I iface, getBizInstanceAttr_args args) throws org.apache.thrift.TException {
        getBizInstanceAttr_result result = new getBizInstanceAttr_result();
        result.success = iface.getBizInstanceAttr(args.bizInstanceAttrVo);
        return result;
      }
    }

    public static class getBizInstanceAttrByPage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getBizInstanceAttrByPage_args> {
      public getBizInstanceAttrByPage() {
        super("getBizInstanceAttrByPage");
      }

      public getBizInstanceAttrByPage_args getEmptyArgsInstance() {
        return new getBizInstanceAttrByPage_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getBizInstanceAttrByPage_result getResult(I iface, getBizInstanceAttrByPage_args args) throws org.apache.thrift.TException {
        getBizInstanceAttrByPage_result result = new getBizInstanceAttrByPage_result();
        result.success = iface.getBizInstanceAttrByPage(args.page, args.bizInstanceAttrVo);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends com.froad.thrift.monitor.service.BizMonitorService.AsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("addBizInstanceAttr", new addBizInstanceAttr());
      processMap.put("deleteBizInstanceAttr", new deleteBizInstanceAttr());
      processMap.put("deleteBizInstanceAttrById", new deleteBizInstanceAttrById());
      processMap.put("updateBizInstanceAttr", new updateBizInstanceAttr());
      processMap.put("updateBizInstanceAttrById", new updateBizInstanceAttrById());
      processMap.put("getBizInstanceAttrById", new getBizInstanceAttrById());
      processMap.put("getOneBizInstanceAttr", new getOneBizInstanceAttr());
      processMap.put("countBizInstanceAttr", new countBizInstanceAttr());
      processMap.put("getBizInstanceAttr", new getBizInstanceAttr());
      processMap.put("getBizInstanceAttrByPage", new getBizInstanceAttrByPage());
      return processMap;
    }

    public static class addBizInstanceAttr<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addBizInstanceAttr_args, Long> {
      public addBizInstanceAttr() {
        super("addBizInstanceAttr");
      }

      public addBizInstanceAttr_args getEmptyArgsInstance() {
        return new addBizInstanceAttr_args();
      }

      public AsyncMethodCallback<Long> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Long>() { 
          public void onComplete(Long o) {
            addBizInstanceAttr_result result = new addBizInstanceAttr_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addBizInstanceAttr_result result = new addBizInstanceAttr_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addBizInstanceAttr_args args, org.apache.thrift.async.AsyncMethodCallback<Long> resultHandler) throws TException {
        iface.addBizInstanceAttr(args.originVo, args.bizInstanceAttrVo,resultHandler);
      }
    }

    public static class deleteBizInstanceAttr<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteBizInstanceAttr_args, Boolean> {
      public deleteBizInstanceAttr() {
        super("deleteBizInstanceAttr");
      }

      public deleteBizInstanceAttr_args getEmptyArgsInstance() {
        return new deleteBizInstanceAttr_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            deleteBizInstanceAttr_result result = new deleteBizInstanceAttr_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteBizInstanceAttr_result result = new deleteBizInstanceAttr_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteBizInstanceAttr_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.deleteBizInstanceAttr(args.originVo, args.bizInstanceAttrVo,resultHandler);
      }
    }

    public static class deleteBizInstanceAttrById<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteBizInstanceAttrById_args, Boolean> {
      public deleteBizInstanceAttrById() {
        super("deleteBizInstanceAttrById");
      }

      public deleteBizInstanceAttrById_args getEmptyArgsInstance() {
        return new deleteBizInstanceAttrById_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            deleteBizInstanceAttrById_result result = new deleteBizInstanceAttrById_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteBizInstanceAttrById_result result = new deleteBizInstanceAttrById_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteBizInstanceAttrById_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.deleteBizInstanceAttrById(args.originVo, args.id,resultHandler);
      }
    }

    public static class updateBizInstanceAttr<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateBizInstanceAttr_args, Boolean> {
      public updateBizInstanceAttr() {
        super("updateBizInstanceAttr");
      }

      public updateBizInstanceAttr_args getEmptyArgsInstance() {
        return new updateBizInstanceAttr_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            updateBizInstanceAttr_result result = new updateBizInstanceAttr_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateBizInstanceAttr_result result = new updateBizInstanceAttr_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateBizInstanceAttr_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.updateBizInstanceAttr(args.originVo, args.bizInstanceAttrVo,resultHandler);
      }
    }

    public static class updateBizInstanceAttrById<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateBizInstanceAttrById_args, Boolean> {
      public updateBizInstanceAttrById() {
        super("updateBizInstanceAttrById");
      }

      public updateBizInstanceAttrById_args getEmptyArgsInstance() {
        return new updateBizInstanceAttrById_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            updateBizInstanceAttrById_result result = new updateBizInstanceAttrById_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateBizInstanceAttrById_result result = new updateBizInstanceAttrById_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateBizInstanceAttrById_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.updateBizInstanceAttrById(args.originVo, args.bizInstanceAttrVo,resultHandler);
      }
    }

    public static class getBizInstanceAttrById<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getBizInstanceAttrById_args, com.froad.thrift.vo.BizInstanceAttrVo> {
      public getBizInstanceAttrById() {
        super("getBizInstanceAttrById");
      }

      public getBizInstanceAttrById_args getEmptyArgsInstance() {
        return new getBizInstanceAttrById_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.BizInstanceAttrVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.BizInstanceAttrVo>() { 
          public void onComplete(com.froad.thrift.vo.BizInstanceAttrVo o) {
            getBizInstanceAttrById_result result = new getBizInstanceAttrById_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getBizInstanceAttrById_result result = new getBizInstanceAttrById_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getBizInstanceAttrById_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.BizInstanceAttrVo> resultHandler) throws TException {
        iface.getBizInstanceAttrById(args.id,resultHandler);
      }
    }

    public static class getOneBizInstanceAttr<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getOneBizInstanceAttr_args, com.froad.thrift.vo.BizInstanceAttrVo> {
      public getOneBizInstanceAttr() {
        super("getOneBizInstanceAttr");
      }

      public getOneBizInstanceAttr_args getEmptyArgsInstance() {
        return new getOneBizInstanceAttr_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.BizInstanceAttrVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.BizInstanceAttrVo>() { 
          public void onComplete(com.froad.thrift.vo.BizInstanceAttrVo o) {
            getOneBizInstanceAttr_result result = new getOneBizInstanceAttr_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getOneBizInstanceAttr_result result = new getOneBizInstanceAttr_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getOneBizInstanceAttr_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.BizInstanceAttrVo> resultHandler) throws TException {
        iface.getOneBizInstanceAttr(args.bizInstanceAttrVo,resultHandler);
      }
    }

    public static class countBizInstanceAttr<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, countBizInstanceAttr_args, Integer> {
      public countBizInstanceAttr() {
        super("countBizInstanceAttr");
      }

      public countBizInstanceAttr_args getEmptyArgsInstance() {
        return new countBizInstanceAttr_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            countBizInstanceAttr_result result = new countBizInstanceAttr_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            countBizInstanceAttr_result result = new countBizInstanceAttr_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, countBizInstanceAttr_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.countBizInstanceAttr(args.bizInstanceAttrVo,resultHandler);
      }
    }

    public static class getBizInstanceAttr<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getBizInstanceAttr_args, List<com.froad.thrift.vo.BizInstanceAttrVo>> {
      public getBizInstanceAttr() {
        super("getBizInstanceAttr");
      }

      public getBizInstanceAttr_args getEmptyArgsInstance() {
        return new getBizInstanceAttr_args();
      }

      public AsyncMethodCallback<List<com.froad.thrift.vo.BizInstanceAttrVo>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.froad.thrift.vo.BizInstanceAttrVo>>() { 
          public void onComplete(List<com.froad.thrift.vo.BizInstanceAttrVo> o) {
            getBizInstanceAttr_result result = new getBizInstanceAttr_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getBizInstanceAttr_result result = new getBizInstanceAttr_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getBizInstanceAttr_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.froad.thrift.vo.BizInstanceAttrVo>> resultHandler) throws TException {
        iface.getBizInstanceAttr(args.bizInstanceAttrVo,resultHandler);
      }
    }

    public static class getBizInstanceAttrByPage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getBizInstanceAttrByPage_args, com.froad.thrift.vo.BizInstanceAttrPageVoRes> {
      public getBizInstanceAttrByPage() {
        super("getBizInstanceAttrByPage");
      }

      public getBizInstanceAttrByPage_args getEmptyArgsInstance() {
        return new getBizInstanceAttrByPage_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.BizInstanceAttrPageVoRes> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.BizInstanceAttrPageVoRes>() { 
          public void onComplete(com.froad.thrift.vo.BizInstanceAttrPageVoRes o) {
            getBizInstanceAttrByPage_result result = new getBizInstanceAttrByPage_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getBizInstanceAttrByPage_result result = new getBizInstanceAttrByPage_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getBizInstanceAttrByPage_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.BizInstanceAttrPageVoRes> resultHandler) throws TException {
        iface.getBizInstanceAttrByPage(args.page, args.bizInstanceAttrVo,resultHandler);
      }
    }

  }

  public static class addBizInstanceAttr_args implements org.apache.thrift.TBase<addBizInstanceAttr_args, addBizInstanceAttr_args._Fields>, java.io.Serializable, Cloneable, Comparable<addBizInstanceAttr_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addBizInstanceAttr_args");

    private static final org.apache.thrift.protocol.TField ORIGIN_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("originVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField BIZ_INSTANCE_ATTR_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("bizInstanceAttrVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addBizInstanceAttr_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addBizInstanceAttr_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OriginVo originVo; // required
    public com.froad.thrift.vo.BizInstanceAttrVo bizInstanceAttrVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORIGIN_VO((short)1, "originVo"),
      BIZ_INSTANCE_ATTR_VO((short)2, "bizInstanceAttrVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORIGIN_VO
            return ORIGIN_VO;
          case 2: // BIZ_INSTANCE_ATTR_VO
            return BIZ_INSTANCE_ATTR_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORIGIN_VO, new org.apache.thrift.meta_data.FieldMetaData("originVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OriginVo.class)));
      tmpMap.put(_Fields.BIZ_INSTANCE_ATTR_VO, new org.apache.thrift.meta_data.FieldMetaData("bizInstanceAttrVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.BizInstanceAttrVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addBizInstanceAttr_args.class, metaDataMap);
    }

    public addBizInstanceAttr_args() {
    }

    public addBizInstanceAttr_args(
      com.froad.thrift.vo.OriginVo originVo,
      com.froad.thrift.vo.BizInstanceAttrVo bizInstanceAttrVo)
    {
      this();
      this.originVo = originVo;
      this.bizInstanceAttrVo = bizInstanceAttrVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addBizInstanceAttr_args(addBizInstanceAttr_args other) {
      if (other.isSetOriginVo()) {
        this.originVo = new com.froad.thrift.vo.OriginVo(other.originVo);
      }
      if (other.isSetBizInstanceAttrVo()) {
        this.bizInstanceAttrVo = new com.froad.thrift.vo.BizInstanceAttrVo(other.bizInstanceAttrVo);
      }
    }

    public addBizInstanceAttr_args deepCopy() {
      return new addBizInstanceAttr_args(this);
    }

    @Override
    public void clear() {
      this.originVo = null;
      this.bizInstanceAttrVo = null;
    }

    public com.froad.thrift.vo.OriginVo getOriginVo() {
      return this.originVo;
    }

    public addBizInstanceAttr_args setOriginVo(com.froad.thrift.vo.OriginVo originVo) {
      this.originVo = originVo;
      return this;
    }

    public void unsetOriginVo() {
      this.originVo = null;
    }

    /** Returns true if field originVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginVo() {
      return this.originVo != null;
    }

    public void setOriginVoIsSet(boolean value) {
      if (!value) {
        this.originVo = null;
      }
    }

    public com.froad.thrift.vo.BizInstanceAttrVo getBizInstanceAttrVo() {
      return this.bizInstanceAttrVo;
    }

    public addBizInstanceAttr_args setBizInstanceAttrVo(com.froad.thrift.vo.BizInstanceAttrVo bizInstanceAttrVo) {
      this.bizInstanceAttrVo = bizInstanceAttrVo;
      return this;
    }

    public void unsetBizInstanceAttrVo() {
      this.bizInstanceAttrVo = null;
    }

    /** Returns true if field bizInstanceAttrVo is set (has been assigned a value) and false otherwise */
    public boolean isSetBizInstanceAttrVo() {
      return this.bizInstanceAttrVo != null;
    }

    public void setBizInstanceAttrVoIsSet(boolean value) {
      if (!value) {
        this.bizInstanceAttrVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORIGIN_VO:
        if (value == null) {
          unsetOriginVo();
        } else {
          setOriginVo((com.froad.thrift.vo.OriginVo)value);
        }
        break;

      case BIZ_INSTANCE_ATTR_VO:
        if (value == null) {
          unsetBizInstanceAttrVo();
        } else {
          setBizInstanceAttrVo((com.froad.thrift.vo.BizInstanceAttrVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORIGIN_VO:
        return getOriginVo();

      case BIZ_INSTANCE_ATTR_VO:
        return getBizInstanceAttrVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORIGIN_VO:
        return isSetOriginVo();
      case BIZ_INSTANCE_ATTR_VO:
        return isSetBizInstanceAttrVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addBizInstanceAttr_args)
        return this.equals((addBizInstanceAttr_args)that);
      return false;
    }

    public boolean equals(addBizInstanceAttr_args that) {
      if (that == null)
        return false;

      boolean this_present_originVo = true && this.isSetOriginVo();
      boolean that_present_originVo = true && that.isSetOriginVo();
      if (this_present_originVo || that_present_originVo) {
        if (!(this_present_originVo && that_present_originVo))
          return false;
        if (!this.originVo.equals(that.originVo))
          return false;
      }

      boolean this_present_bizInstanceAttrVo = true && this.isSetBizInstanceAttrVo();
      boolean that_present_bizInstanceAttrVo = true && that.isSetBizInstanceAttrVo();
      if (this_present_bizInstanceAttrVo || that_present_bizInstanceAttrVo) {
        if (!(this_present_bizInstanceAttrVo && that_present_bizInstanceAttrVo))
          return false;
        if (!this.bizInstanceAttrVo.equals(that.bizInstanceAttrVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_originVo = true && (isSetOriginVo());
      list.add(present_originVo);
      if (present_originVo)
        list.add(originVo);

      boolean present_bizInstanceAttrVo = true && (isSetBizInstanceAttrVo());
      list.add(present_bizInstanceAttrVo);
      if (present_bizInstanceAttrVo)
        list.add(bizInstanceAttrVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(addBizInstanceAttr_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOriginVo()).compareTo(other.isSetOriginVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originVo, other.originVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBizInstanceAttrVo()).compareTo(other.isSetBizInstanceAttrVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBizInstanceAttrVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bizInstanceAttrVo, other.bizInstanceAttrVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addBizInstanceAttr_args(");
      boolean first = true;

      sb.append("originVo:");
      if (this.originVo == null) {
        sb.append("null");
      } else {
        sb.append(this.originVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("bizInstanceAttrVo:");
      if (this.bizInstanceAttrVo == null) {
        sb.append("null");
      } else {
        sb.append(this.bizInstanceAttrVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (originVo != null) {
        originVo.validate();
      }
      if (bizInstanceAttrVo != null) {
        bizInstanceAttrVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addBizInstanceAttr_argsStandardSchemeFactory implements SchemeFactory {
      public addBizInstanceAttr_argsStandardScheme getScheme() {
        return new addBizInstanceAttr_argsStandardScheme();
      }
    }

    private static class addBizInstanceAttr_argsStandardScheme extends StandardScheme<addBizInstanceAttr_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addBizInstanceAttr_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORIGIN_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.originVo = new com.froad.thrift.vo.OriginVo();
                struct.originVo.read(iprot);
                struct.setOriginVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BIZ_INSTANCE_ATTR_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.bizInstanceAttrVo = new com.froad.thrift.vo.BizInstanceAttrVo();
                struct.bizInstanceAttrVo.read(iprot);
                struct.setBizInstanceAttrVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addBizInstanceAttr_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.originVo != null) {
          oprot.writeFieldBegin(ORIGIN_VO_FIELD_DESC);
          struct.originVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.bizInstanceAttrVo != null) {
          oprot.writeFieldBegin(BIZ_INSTANCE_ATTR_VO_FIELD_DESC);
          struct.bizInstanceAttrVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addBizInstanceAttr_argsTupleSchemeFactory implements SchemeFactory {
      public addBizInstanceAttr_argsTupleScheme getScheme() {
        return new addBizInstanceAttr_argsTupleScheme();
      }
    }

    private static class addBizInstanceAttr_argsTupleScheme extends TupleScheme<addBizInstanceAttr_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addBizInstanceAttr_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOriginVo()) {
          optionals.set(0);
        }
        if (struct.isSetBizInstanceAttrVo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOriginVo()) {
          struct.originVo.write(oprot);
        }
        if (struct.isSetBizInstanceAttrVo()) {
          struct.bizInstanceAttrVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addBizInstanceAttr_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.originVo = new com.froad.thrift.vo.OriginVo();
          struct.originVo.read(iprot);
          struct.setOriginVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.bizInstanceAttrVo = new com.froad.thrift.vo.BizInstanceAttrVo();
          struct.bizInstanceAttrVo.read(iprot);
          struct.setBizInstanceAttrVoIsSet(true);
        }
      }
    }

  }

  public static class addBizInstanceAttr_result implements org.apache.thrift.TBase<addBizInstanceAttr_result, addBizInstanceAttr_result._Fields>, java.io.Serializable, Cloneable, Comparable<addBizInstanceAttr_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addBizInstanceAttr_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addBizInstanceAttr_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addBizInstanceAttr_resultTupleSchemeFactory());
    }

    public long success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addBizInstanceAttr_result.class, metaDataMap);
    }

    public addBizInstanceAttr_result() {
    }

    public addBizInstanceAttr_result(
      long success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addBizInstanceAttr_result(addBizInstanceAttr_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public addBizInstanceAttr_result deepCopy() {
      return new addBizInstanceAttr_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public long getSuccess() {
      return this.success;
    }

    public addBizInstanceAttr_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Long.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addBizInstanceAttr_result)
        return this.equals((addBizInstanceAttr_result)that);
      return false;
    }

    public boolean equals(addBizInstanceAttr_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(addBizInstanceAttr_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addBizInstanceAttr_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addBizInstanceAttr_resultStandardSchemeFactory implements SchemeFactory {
      public addBizInstanceAttr_resultStandardScheme getScheme() {
        return new addBizInstanceAttr_resultStandardScheme();
      }
    }

    private static class addBizInstanceAttr_resultStandardScheme extends StandardScheme<addBizInstanceAttr_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addBizInstanceAttr_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addBizInstanceAttr_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addBizInstanceAttr_resultTupleSchemeFactory implements SchemeFactory {
      public addBizInstanceAttr_resultTupleScheme getScheme() {
        return new addBizInstanceAttr_resultTupleScheme();
      }
    }

    private static class addBizInstanceAttr_resultTupleScheme extends TupleScheme<addBizInstanceAttr_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addBizInstanceAttr_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addBizInstanceAttr_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class deleteBizInstanceAttr_args implements org.apache.thrift.TBase<deleteBizInstanceAttr_args, deleteBizInstanceAttr_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteBizInstanceAttr_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteBizInstanceAttr_args");

    private static final org.apache.thrift.protocol.TField ORIGIN_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("originVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField BIZ_INSTANCE_ATTR_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("bizInstanceAttrVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteBizInstanceAttr_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteBizInstanceAttr_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OriginVo originVo; // required
    public com.froad.thrift.vo.BizInstanceAttrVo bizInstanceAttrVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORIGIN_VO((short)1, "originVo"),
      BIZ_INSTANCE_ATTR_VO((short)2, "bizInstanceAttrVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORIGIN_VO
            return ORIGIN_VO;
          case 2: // BIZ_INSTANCE_ATTR_VO
            return BIZ_INSTANCE_ATTR_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORIGIN_VO, new org.apache.thrift.meta_data.FieldMetaData("originVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OriginVo.class)));
      tmpMap.put(_Fields.BIZ_INSTANCE_ATTR_VO, new org.apache.thrift.meta_data.FieldMetaData("bizInstanceAttrVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.BizInstanceAttrVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteBizInstanceAttr_args.class, metaDataMap);
    }

    public deleteBizInstanceAttr_args() {
    }

    public deleteBizInstanceAttr_args(
      com.froad.thrift.vo.OriginVo originVo,
      com.froad.thrift.vo.BizInstanceAttrVo bizInstanceAttrVo)
    {
      this();
      this.originVo = originVo;
      this.bizInstanceAttrVo = bizInstanceAttrVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteBizInstanceAttr_args(deleteBizInstanceAttr_args other) {
      if (other.isSetOriginVo()) {
        this.originVo = new com.froad.thrift.vo.OriginVo(other.originVo);
      }
      if (other.isSetBizInstanceAttrVo()) {
        this.bizInstanceAttrVo = new com.froad.thrift.vo.BizInstanceAttrVo(other.bizInstanceAttrVo);
      }
    }

    public deleteBizInstanceAttr_args deepCopy() {
      return new deleteBizInstanceAttr_args(this);
    }

    @Override
    public void clear() {
      this.originVo = null;
      this.bizInstanceAttrVo = null;
    }

    public com.froad.thrift.vo.OriginVo getOriginVo() {
      return this.originVo;
    }

    public deleteBizInstanceAttr_args setOriginVo(com.froad.thrift.vo.OriginVo originVo) {
      this.originVo = originVo;
      return this;
    }

    public void unsetOriginVo() {
      this.originVo = null;
    }

    /** Returns true if field originVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginVo() {
      return this.originVo != null;
    }

    public void setOriginVoIsSet(boolean value) {
      if (!value) {
        this.originVo = null;
      }
    }

    public com.froad.thrift.vo.BizInstanceAttrVo getBizInstanceAttrVo() {
      return this.bizInstanceAttrVo;
    }

    public deleteBizInstanceAttr_args setBizInstanceAttrVo(com.froad.thrift.vo.BizInstanceAttrVo bizInstanceAttrVo) {
      this.bizInstanceAttrVo = bizInstanceAttrVo;
      return this;
    }

    public void unsetBizInstanceAttrVo() {
      this.bizInstanceAttrVo = null;
    }

    /** Returns true if field bizInstanceAttrVo is set (has been assigned a value) and false otherwise */
    public boolean isSetBizInstanceAttrVo() {
      return this.bizInstanceAttrVo != null;
    }

    public void setBizInstanceAttrVoIsSet(boolean value) {
      if (!value) {
        this.bizInstanceAttrVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORIGIN_VO:
        if (value == null) {
          unsetOriginVo();
        } else {
          setOriginVo((com.froad.thrift.vo.OriginVo)value);
        }
        break;

      case BIZ_INSTANCE_ATTR_VO:
        if (value == null) {
          unsetBizInstanceAttrVo();
        } else {
          setBizInstanceAttrVo((com.froad.thrift.vo.BizInstanceAttrVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORIGIN_VO:
        return getOriginVo();

      case BIZ_INSTANCE_ATTR_VO:
        return getBizInstanceAttrVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORIGIN_VO:
        return isSetOriginVo();
      case BIZ_INSTANCE_ATTR_VO:
        return isSetBizInstanceAttrVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteBizInstanceAttr_args)
        return this.equals((deleteBizInstanceAttr_args)that);
      return false;
    }

    public boolean equals(deleteBizInstanceAttr_args that) {
      if (that == null)
        return false;

      boolean this_present_originVo = true && this.isSetOriginVo();
      boolean that_present_originVo = true && that.isSetOriginVo();
      if (this_present_originVo || that_present_originVo) {
        if (!(this_present_originVo && that_present_originVo))
          return false;
        if (!this.originVo.equals(that.originVo))
          return false;
      }

      boolean this_present_bizInstanceAttrVo = true && this.isSetBizInstanceAttrVo();
      boolean that_present_bizInstanceAttrVo = true && that.isSetBizInstanceAttrVo();
      if (this_present_bizInstanceAttrVo || that_present_bizInstanceAttrVo) {
        if (!(this_present_bizInstanceAttrVo && that_present_bizInstanceAttrVo))
          return false;
        if (!this.bizInstanceAttrVo.equals(that.bizInstanceAttrVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_originVo = true && (isSetOriginVo());
      list.add(present_originVo);
      if (present_originVo)
        list.add(originVo);

      boolean present_bizInstanceAttrVo = true && (isSetBizInstanceAttrVo());
      list.add(present_bizInstanceAttrVo);
      if (present_bizInstanceAttrVo)
        list.add(bizInstanceAttrVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteBizInstanceAttr_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOriginVo()).compareTo(other.isSetOriginVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originVo, other.originVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBizInstanceAttrVo()).compareTo(other.isSetBizInstanceAttrVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBizInstanceAttrVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bizInstanceAttrVo, other.bizInstanceAttrVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteBizInstanceAttr_args(");
      boolean first = true;

      sb.append("originVo:");
      if (this.originVo == null) {
        sb.append("null");
      } else {
        sb.append(this.originVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("bizInstanceAttrVo:");
      if (this.bizInstanceAttrVo == null) {
        sb.append("null");
      } else {
        sb.append(this.bizInstanceAttrVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (originVo != null) {
        originVo.validate();
      }
      if (bizInstanceAttrVo != null) {
        bizInstanceAttrVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteBizInstanceAttr_argsStandardSchemeFactory implements SchemeFactory {
      public deleteBizInstanceAttr_argsStandardScheme getScheme() {
        return new deleteBizInstanceAttr_argsStandardScheme();
      }
    }

    private static class deleteBizInstanceAttr_argsStandardScheme extends StandardScheme<deleteBizInstanceAttr_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteBizInstanceAttr_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORIGIN_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.originVo = new com.froad.thrift.vo.OriginVo();
                struct.originVo.read(iprot);
                struct.setOriginVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BIZ_INSTANCE_ATTR_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.bizInstanceAttrVo = new com.froad.thrift.vo.BizInstanceAttrVo();
                struct.bizInstanceAttrVo.read(iprot);
                struct.setBizInstanceAttrVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteBizInstanceAttr_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.originVo != null) {
          oprot.writeFieldBegin(ORIGIN_VO_FIELD_DESC);
          struct.originVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.bizInstanceAttrVo != null) {
          oprot.writeFieldBegin(BIZ_INSTANCE_ATTR_VO_FIELD_DESC);
          struct.bizInstanceAttrVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteBizInstanceAttr_argsTupleSchemeFactory implements SchemeFactory {
      public deleteBizInstanceAttr_argsTupleScheme getScheme() {
        return new deleteBizInstanceAttr_argsTupleScheme();
      }
    }

    private static class deleteBizInstanceAttr_argsTupleScheme extends TupleScheme<deleteBizInstanceAttr_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteBizInstanceAttr_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOriginVo()) {
          optionals.set(0);
        }
        if (struct.isSetBizInstanceAttrVo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOriginVo()) {
          struct.originVo.write(oprot);
        }
        if (struct.isSetBizInstanceAttrVo()) {
          struct.bizInstanceAttrVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteBizInstanceAttr_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.originVo = new com.froad.thrift.vo.OriginVo();
          struct.originVo.read(iprot);
          struct.setOriginVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.bizInstanceAttrVo = new com.froad.thrift.vo.BizInstanceAttrVo();
          struct.bizInstanceAttrVo.read(iprot);
          struct.setBizInstanceAttrVoIsSet(true);
        }
      }
    }

  }

  public static class deleteBizInstanceAttr_result implements org.apache.thrift.TBase<deleteBizInstanceAttr_result, deleteBizInstanceAttr_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteBizInstanceAttr_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteBizInstanceAttr_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteBizInstanceAttr_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteBizInstanceAttr_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteBizInstanceAttr_result.class, metaDataMap);
    }

    public deleteBizInstanceAttr_result() {
    }

    public deleteBizInstanceAttr_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteBizInstanceAttr_result(deleteBizInstanceAttr_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public deleteBizInstanceAttr_result deepCopy() {
      return new deleteBizInstanceAttr_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public deleteBizInstanceAttr_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteBizInstanceAttr_result)
        return this.equals((deleteBizInstanceAttr_result)that);
      return false;
    }

    public boolean equals(deleteBizInstanceAttr_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteBizInstanceAttr_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteBizInstanceAttr_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteBizInstanceAttr_resultStandardSchemeFactory implements SchemeFactory {
      public deleteBizInstanceAttr_resultStandardScheme getScheme() {
        return new deleteBizInstanceAttr_resultStandardScheme();
      }
    }

    private static class deleteBizInstanceAttr_resultStandardScheme extends StandardScheme<deleteBizInstanceAttr_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteBizInstanceAttr_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteBizInstanceAttr_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteBizInstanceAttr_resultTupleSchemeFactory implements SchemeFactory {
      public deleteBizInstanceAttr_resultTupleScheme getScheme() {
        return new deleteBizInstanceAttr_resultTupleScheme();
      }
    }

    private static class deleteBizInstanceAttr_resultTupleScheme extends TupleScheme<deleteBizInstanceAttr_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteBizInstanceAttr_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteBizInstanceAttr_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class deleteBizInstanceAttrById_args implements org.apache.thrift.TBase<deleteBizInstanceAttrById_args, deleteBizInstanceAttrById_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteBizInstanceAttrById_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteBizInstanceAttrById_args");

    private static final org.apache.thrift.protocol.TField ORIGIN_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("originVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteBizInstanceAttrById_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteBizInstanceAttrById_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OriginVo originVo; // required
    public long id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORIGIN_VO((short)1, "originVo"),
      ID((short)2, "id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORIGIN_VO
            return ORIGIN_VO;
          case 2: // ID
            return ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORIGIN_VO, new org.apache.thrift.meta_data.FieldMetaData("originVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OriginVo.class)));
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteBizInstanceAttrById_args.class, metaDataMap);
    }

    public deleteBizInstanceAttrById_args() {
    }

    public deleteBizInstanceAttrById_args(
      com.froad.thrift.vo.OriginVo originVo,
      long id)
    {
      this();
      this.originVo = originVo;
      this.id = id;
      setIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteBizInstanceAttrById_args(deleteBizInstanceAttrById_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetOriginVo()) {
        this.originVo = new com.froad.thrift.vo.OriginVo(other.originVo);
      }
      this.id = other.id;
    }

    public deleteBizInstanceAttrById_args deepCopy() {
      return new deleteBizInstanceAttrById_args(this);
    }

    @Override
    public void clear() {
      this.originVo = null;
      setIdIsSet(false);
      this.id = 0;
    }

    public com.froad.thrift.vo.OriginVo getOriginVo() {
      return this.originVo;
    }

    public deleteBizInstanceAttrById_args setOriginVo(com.froad.thrift.vo.OriginVo originVo) {
      this.originVo = originVo;
      return this;
    }

    public void unsetOriginVo() {
      this.originVo = null;
    }

    /** Returns true if field originVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginVo() {
      return this.originVo != null;
    }

    public void setOriginVoIsSet(boolean value) {
      if (!value) {
        this.originVo = null;
      }
    }

    public long getId() {
      return this.id;
    }

    public deleteBizInstanceAttrById_args setId(long id) {
      this.id = id;
      setIdIsSet(true);
      return this;
    }

    public void unsetId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
    }

    public void setIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORIGIN_VO:
        if (value == null) {
          unsetOriginVo();
        } else {
          setOriginVo((com.froad.thrift.vo.OriginVo)value);
        }
        break;

      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORIGIN_VO:
        return getOriginVo();

      case ID:
        return Long.valueOf(getId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORIGIN_VO:
        return isSetOriginVo();
      case ID:
        return isSetId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteBizInstanceAttrById_args)
        return this.equals((deleteBizInstanceAttrById_args)that);
      return false;
    }

    public boolean equals(deleteBizInstanceAttrById_args that) {
      if (that == null)
        return false;

      boolean this_present_originVo = true && this.isSetOriginVo();
      boolean that_present_originVo = true && that.isSetOriginVo();
      if (this_present_originVo || that_present_originVo) {
        if (!(this_present_originVo && that_present_originVo))
          return false;
        if (!this.originVo.equals(that.originVo))
          return false;
      }

      boolean this_present_id = true;
      boolean that_present_id = true;
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (this.id != that.id)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_originVo = true && (isSetOriginVo());
      list.add(present_originVo);
      if (present_originVo)
        list.add(originVo);

      boolean present_id = true;
      list.add(present_id);
      if (present_id)
        list.add(id);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteBizInstanceAttrById_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOriginVo()).compareTo(other.isSetOriginVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originVo, other.originVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteBizInstanceAttrById_args(");
      boolean first = true;

      sb.append("originVo:");
      if (this.originVo == null) {
        sb.append("null");
      } else {
        sb.append(this.originVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("id:");
      sb.append(this.id);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (originVo != null) {
        originVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteBizInstanceAttrById_argsStandardSchemeFactory implements SchemeFactory {
      public deleteBizInstanceAttrById_argsStandardScheme getScheme() {
        return new deleteBizInstanceAttrById_argsStandardScheme();
      }
    }

    private static class deleteBizInstanceAttrById_argsStandardScheme extends StandardScheme<deleteBizInstanceAttrById_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteBizInstanceAttrById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORIGIN_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.originVo = new com.froad.thrift.vo.OriginVo();
                struct.originVo.read(iprot);
                struct.setOriginVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.id = iprot.readI64();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteBizInstanceAttrById_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.originVo != null) {
          oprot.writeFieldBegin(ORIGIN_VO_FIELD_DESC);
          struct.originVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI64(struct.id);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteBizInstanceAttrById_argsTupleSchemeFactory implements SchemeFactory {
      public deleteBizInstanceAttrById_argsTupleScheme getScheme() {
        return new deleteBizInstanceAttrById_argsTupleScheme();
      }
    }

    private static class deleteBizInstanceAttrById_argsTupleScheme extends TupleScheme<deleteBizInstanceAttrById_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteBizInstanceAttrById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOriginVo()) {
          optionals.set(0);
        }
        if (struct.isSetId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOriginVo()) {
          struct.originVo.write(oprot);
        }
        if (struct.isSetId()) {
          oprot.writeI64(struct.id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteBizInstanceAttrById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.originVo = new com.froad.thrift.vo.OriginVo();
          struct.originVo.read(iprot);
          struct.setOriginVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.id = iprot.readI64();
          struct.setIdIsSet(true);
        }
      }
    }

  }

  public static class deleteBizInstanceAttrById_result implements org.apache.thrift.TBase<deleteBizInstanceAttrById_result, deleteBizInstanceAttrById_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteBizInstanceAttrById_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteBizInstanceAttrById_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteBizInstanceAttrById_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteBizInstanceAttrById_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteBizInstanceAttrById_result.class, metaDataMap);
    }

    public deleteBizInstanceAttrById_result() {
    }

    public deleteBizInstanceAttrById_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteBizInstanceAttrById_result(deleteBizInstanceAttrById_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public deleteBizInstanceAttrById_result deepCopy() {
      return new deleteBizInstanceAttrById_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public deleteBizInstanceAttrById_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteBizInstanceAttrById_result)
        return this.equals((deleteBizInstanceAttrById_result)that);
      return false;
    }

    public boolean equals(deleteBizInstanceAttrById_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteBizInstanceAttrById_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteBizInstanceAttrById_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteBizInstanceAttrById_resultStandardSchemeFactory implements SchemeFactory {
      public deleteBizInstanceAttrById_resultStandardScheme getScheme() {
        return new deleteBizInstanceAttrById_resultStandardScheme();
      }
    }

    private static class deleteBizInstanceAttrById_resultStandardScheme extends StandardScheme<deleteBizInstanceAttrById_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteBizInstanceAttrById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteBizInstanceAttrById_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteBizInstanceAttrById_resultTupleSchemeFactory implements SchemeFactory {
      public deleteBizInstanceAttrById_resultTupleScheme getScheme() {
        return new deleteBizInstanceAttrById_resultTupleScheme();
      }
    }

    private static class deleteBizInstanceAttrById_resultTupleScheme extends TupleScheme<deleteBizInstanceAttrById_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteBizInstanceAttrById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteBizInstanceAttrById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateBizInstanceAttr_args implements org.apache.thrift.TBase<updateBizInstanceAttr_args, updateBizInstanceAttr_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateBizInstanceAttr_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateBizInstanceAttr_args");

    private static final org.apache.thrift.protocol.TField ORIGIN_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("originVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField BIZ_INSTANCE_ATTR_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("bizInstanceAttrVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateBizInstanceAttr_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateBizInstanceAttr_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OriginVo originVo; // required
    public com.froad.thrift.vo.BizInstanceAttrVo bizInstanceAttrVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORIGIN_VO((short)1, "originVo"),
      BIZ_INSTANCE_ATTR_VO((short)2, "bizInstanceAttrVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORIGIN_VO
            return ORIGIN_VO;
          case 2: // BIZ_INSTANCE_ATTR_VO
            return BIZ_INSTANCE_ATTR_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORIGIN_VO, new org.apache.thrift.meta_data.FieldMetaData("originVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OriginVo.class)));
      tmpMap.put(_Fields.BIZ_INSTANCE_ATTR_VO, new org.apache.thrift.meta_data.FieldMetaData("bizInstanceAttrVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.BizInstanceAttrVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateBizInstanceAttr_args.class, metaDataMap);
    }

    public updateBizInstanceAttr_args() {
    }

    public updateBizInstanceAttr_args(
      com.froad.thrift.vo.OriginVo originVo,
      com.froad.thrift.vo.BizInstanceAttrVo bizInstanceAttrVo)
    {
      this();
      this.originVo = originVo;
      this.bizInstanceAttrVo = bizInstanceAttrVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateBizInstanceAttr_args(updateBizInstanceAttr_args other) {
      if (other.isSetOriginVo()) {
        this.originVo = new com.froad.thrift.vo.OriginVo(other.originVo);
      }
      if (other.isSetBizInstanceAttrVo()) {
        this.bizInstanceAttrVo = new com.froad.thrift.vo.BizInstanceAttrVo(other.bizInstanceAttrVo);
      }
    }

    public updateBizInstanceAttr_args deepCopy() {
      return new updateBizInstanceAttr_args(this);
    }

    @Override
    public void clear() {
      this.originVo = null;
      this.bizInstanceAttrVo = null;
    }

    public com.froad.thrift.vo.OriginVo getOriginVo() {
      return this.originVo;
    }

    public updateBizInstanceAttr_args setOriginVo(com.froad.thrift.vo.OriginVo originVo) {
      this.originVo = originVo;
      return this;
    }

    public void unsetOriginVo() {
      this.originVo = null;
    }

    /** Returns true if field originVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginVo() {
      return this.originVo != null;
    }

    public void setOriginVoIsSet(boolean value) {
      if (!value) {
        this.originVo = null;
      }
    }

    public com.froad.thrift.vo.BizInstanceAttrVo getBizInstanceAttrVo() {
      return this.bizInstanceAttrVo;
    }

    public updateBizInstanceAttr_args setBizInstanceAttrVo(com.froad.thrift.vo.BizInstanceAttrVo bizInstanceAttrVo) {
      this.bizInstanceAttrVo = bizInstanceAttrVo;
      return this;
    }

    public void unsetBizInstanceAttrVo() {
      this.bizInstanceAttrVo = null;
    }

    /** Returns true if field bizInstanceAttrVo is set (has been assigned a value) and false otherwise */
    public boolean isSetBizInstanceAttrVo() {
      return this.bizInstanceAttrVo != null;
    }

    public void setBizInstanceAttrVoIsSet(boolean value) {
      if (!value) {
        this.bizInstanceAttrVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORIGIN_VO:
        if (value == null) {
          unsetOriginVo();
        } else {
          setOriginVo((com.froad.thrift.vo.OriginVo)value);
        }
        break;

      case BIZ_INSTANCE_ATTR_VO:
        if (value == null) {
          unsetBizInstanceAttrVo();
        } else {
          setBizInstanceAttrVo((com.froad.thrift.vo.BizInstanceAttrVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORIGIN_VO:
        return getOriginVo();

      case BIZ_INSTANCE_ATTR_VO:
        return getBizInstanceAttrVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORIGIN_VO:
        return isSetOriginVo();
      case BIZ_INSTANCE_ATTR_VO:
        return isSetBizInstanceAttrVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateBizInstanceAttr_args)
        return this.equals((updateBizInstanceAttr_args)that);
      return false;
    }

    public boolean equals(updateBizInstanceAttr_args that) {
      if (that == null)
        return false;

      boolean this_present_originVo = true && this.isSetOriginVo();
      boolean that_present_originVo = true && that.isSetOriginVo();
      if (this_present_originVo || that_present_originVo) {
        if (!(this_present_originVo && that_present_originVo))
          return false;
        if (!this.originVo.equals(that.originVo))
          return false;
      }

      boolean this_present_bizInstanceAttrVo = true && this.isSetBizInstanceAttrVo();
      boolean that_present_bizInstanceAttrVo = true && that.isSetBizInstanceAttrVo();
      if (this_present_bizInstanceAttrVo || that_present_bizInstanceAttrVo) {
        if (!(this_present_bizInstanceAttrVo && that_present_bizInstanceAttrVo))
          return false;
        if (!this.bizInstanceAttrVo.equals(that.bizInstanceAttrVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_originVo = true && (isSetOriginVo());
      list.add(present_originVo);
      if (present_originVo)
        list.add(originVo);

      boolean present_bizInstanceAttrVo = true && (isSetBizInstanceAttrVo());
      list.add(present_bizInstanceAttrVo);
      if (present_bizInstanceAttrVo)
        list.add(bizInstanceAttrVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateBizInstanceAttr_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOriginVo()).compareTo(other.isSetOriginVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originVo, other.originVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBizInstanceAttrVo()).compareTo(other.isSetBizInstanceAttrVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBizInstanceAttrVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bizInstanceAttrVo, other.bizInstanceAttrVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateBizInstanceAttr_args(");
      boolean first = true;

      sb.append("originVo:");
      if (this.originVo == null) {
        sb.append("null");
      } else {
        sb.append(this.originVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("bizInstanceAttrVo:");
      if (this.bizInstanceAttrVo == null) {
        sb.append("null");
      } else {
        sb.append(this.bizInstanceAttrVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (originVo != null) {
        originVo.validate();
      }
      if (bizInstanceAttrVo != null) {
        bizInstanceAttrVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateBizInstanceAttr_argsStandardSchemeFactory implements SchemeFactory {
      public updateBizInstanceAttr_argsStandardScheme getScheme() {
        return new updateBizInstanceAttr_argsStandardScheme();
      }
    }

    private static class updateBizInstanceAttr_argsStandardScheme extends StandardScheme<updateBizInstanceAttr_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateBizInstanceAttr_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORIGIN_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.originVo = new com.froad.thrift.vo.OriginVo();
                struct.originVo.read(iprot);
                struct.setOriginVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BIZ_INSTANCE_ATTR_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.bizInstanceAttrVo = new com.froad.thrift.vo.BizInstanceAttrVo();
                struct.bizInstanceAttrVo.read(iprot);
                struct.setBizInstanceAttrVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateBizInstanceAttr_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.originVo != null) {
          oprot.writeFieldBegin(ORIGIN_VO_FIELD_DESC);
          struct.originVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.bizInstanceAttrVo != null) {
          oprot.writeFieldBegin(BIZ_INSTANCE_ATTR_VO_FIELD_DESC);
          struct.bizInstanceAttrVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateBizInstanceAttr_argsTupleSchemeFactory implements SchemeFactory {
      public updateBizInstanceAttr_argsTupleScheme getScheme() {
        return new updateBizInstanceAttr_argsTupleScheme();
      }
    }

    private static class updateBizInstanceAttr_argsTupleScheme extends TupleScheme<updateBizInstanceAttr_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateBizInstanceAttr_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOriginVo()) {
          optionals.set(0);
        }
        if (struct.isSetBizInstanceAttrVo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOriginVo()) {
          struct.originVo.write(oprot);
        }
        if (struct.isSetBizInstanceAttrVo()) {
          struct.bizInstanceAttrVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateBizInstanceAttr_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.originVo = new com.froad.thrift.vo.OriginVo();
          struct.originVo.read(iprot);
          struct.setOriginVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.bizInstanceAttrVo = new com.froad.thrift.vo.BizInstanceAttrVo();
          struct.bizInstanceAttrVo.read(iprot);
          struct.setBizInstanceAttrVoIsSet(true);
        }
      }
    }

  }

  public static class updateBizInstanceAttr_result implements org.apache.thrift.TBase<updateBizInstanceAttr_result, updateBizInstanceAttr_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateBizInstanceAttr_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateBizInstanceAttr_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateBizInstanceAttr_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateBizInstanceAttr_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateBizInstanceAttr_result.class, metaDataMap);
    }

    public updateBizInstanceAttr_result() {
    }

    public updateBizInstanceAttr_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateBizInstanceAttr_result(updateBizInstanceAttr_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public updateBizInstanceAttr_result deepCopy() {
      return new updateBizInstanceAttr_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public updateBizInstanceAttr_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateBizInstanceAttr_result)
        return this.equals((updateBizInstanceAttr_result)that);
      return false;
    }

    public boolean equals(updateBizInstanceAttr_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateBizInstanceAttr_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateBizInstanceAttr_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateBizInstanceAttr_resultStandardSchemeFactory implements SchemeFactory {
      public updateBizInstanceAttr_resultStandardScheme getScheme() {
        return new updateBizInstanceAttr_resultStandardScheme();
      }
    }

    private static class updateBizInstanceAttr_resultStandardScheme extends StandardScheme<updateBizInstanceAttr_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateBizInstanceAttr_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateBizInstanceAttr_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateBizInstanceAttr_resultTupleSchemeFactory implements SchemeFactory {
      public updateBizInstanceAttr_resultTupleScheme getScheme() {
        return new updateBizInstanceAttr_resultTupleScheme();
      }
    }

    private static class updateBizInstanceAttr_resultTupleScheme extends TupleScheme<updateBizInstanceAttr_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateBizInstanceAttr_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateBizInstanceAttr_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateBizInstanceAttrById_args implements org.apache.thrift.TBase<updateBizInstanceAttrById_args, updateBizInstanceAttrById_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateBizInstanceAttrById_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateBizInstanceAttrById_args");

    private static final org.apache.thrift.protocol.TField ORIGIN_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("originVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField BIZ_INSTANCE_ATTR_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("bizInstanceAttrVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateBizInstanceAttrById_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateBizInstanceAttrById_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OriginVo originVo; // required
    public com.froad.thrift.vo.BizInstanceAttrVo bizInstanceAttrVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORIGIN_VO((short)1, "originVo"),
      BIZ_INSTANCE_ATTR_VO((short)2, "bizInstanceAttrVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORIGIN_VO
            return ORIGIN_VO;
          case 2: // BIZ_INSTANCE_ATTR_VO
            return BIZ_INSTANCE_ATTR_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORIGIN_VO, new org.apache.thrift.meta_data.FieldMetaData("originVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OriginVo.class)));
      tmpMap.put(_Fields.BIZ_INSTANCE_ATTR_VO, new org.apache.thrift.meta_data.FieldMetaData("bizInstanceAttrVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.BizInstanceAttrVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateBizInstanceAttrById_args.class, metaDataMap);
    }

    public updateBizInstanceAttrById_args() {
    }

    public updateBizInstanceAttrById_args(
      com.froad.thrift.vo.OriginVo originVo,
      com.froad.thrift.vo.BizInstanceAttrVo bizInstanceAttrVo)
    {
      this();
      this.originVo = originVo;
      this.bizInstanceAttrVo = bizInstanceAttrVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateBizInstanceAttrById_args(updateBizInstanceAttrById_args other) {
      if (other.isSetOriginVo()) {
        this.originVo = new com.froad.thrift.vo.OriginVo(other.originVo);
      }
      if (other.isSetBizInstanceAttrVo()) {
        this.bizInstanceAttrVo = new com.froad.thrift.vo.BizInstanceAttrVo(other.bizInstanceAttrVo);
      }
    }

    public updateBizInstanceAttrById_args deepCopy() {
      return new updateBizInstanceAttrById_args(this);
    }

    @Override
    public void clear() {
      this.originVo = null;
      this.bizInstanceAttrVo = null;
    }

    public com.froad.thrift.vo.OriginVo getOriginVo() {
      return this.originVo;
    }

    public updateBizInstanceAttrById_args setOriginVo(com.froad.thrift.vo.OriginVo originVo) {
      this.originVo = originVo;
      return this;
    }

    public void unsetOriginVo() {
      this.originVo = null;
    }

    /** Returns true if field originVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginVo() {
      return this.originVo != null;
    }

    public void setOriginVoIsSet(boolean value) {
      if (!value) {
        this.originVo = null;
      }
    }

    public com.froad.thrift.vo.BizInstanceAttrVo getBizInstanceAttrVo() {
      return this.bizInstanceAttrVo;
    }

    public updateBizInstanceAttrById_args setBizInstanceAttrVo(com.froad.thrift.vo.BizInstanceAttrVo bizInstanceAttrVo) {
      this.bizInstanceAttrVo = bizInstanceAttrVo;
      return this;
    }

    public void unsetBizInstanceAttrVo() {
      this.bizInstanceAttrVo = null;
    }

    /** Returns true if field bizInstanceAttrVo is set (has been assigned a value) and false otherwise */
    public boolean isSetBizInstanceAttrVo() {
      return this.bizInstanceAttrVo != null;
    }

    public void setBizInstanceAttrVoIsSet(boolean value) {
      if (!value) {
        this.bizInstanceAttrVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORIGIN_VO:
        if (value == null) {
          unsetOriginVo();
        } else {
          setOriginVo((com.froad.thrift.vo.OriginVo)value);
        }
        break;

      case BIZ_INSTANCE_ATTR_VO:
        if (value == null) {
          unsetBizInstanceAttrVo();
        } else {
          setBizInstanceAttrVo((com.froad.thrift.vo.BizInstanceAttrVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORIGIN_VO:
        return getOriginVo();

      case BIZ_INSTANCE_ATTR_VO:
        return getBizInstanceAttrVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORIGIN_VO:
        return isSetOriginVo();
      case BIZ_INSTANCE_ATTR_VO:
        return isSetBizInstanceAttrVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateBizInstanceAttrById_args)
        return this.equals((updateBizInstanceAttrById_args)that);
      return false;
    }

    public boolean equals(updateBizInstanceAttrById_args that) {
      if (that == null)
        return false;

      boolean this_present_originVo = true && this.isSetOriginVo();
      boolean that_present_originVo = true && that.isSetOriginVo();
      if (this_present_originVo || that_present_originVo) {
        if (!(this_present_originVo && that_present_originVo))
          return false;
        if (!this.originVo.equals(that.originVo))
          return false;
      }

      boolean this_present_bizInstanceAttrVo = true && this.isSetBizInstanceAttrVo();
      boolean that_present_bizInstanceAttrVo = true && that.isSetBizInstanceAttrVo();
      if (this_present_bizInstanceAttrVo || that_present_bizInstanceAttrVo) {
        if (!(this_present_bizInstanceAttrVo && that_present_bizInstanceAttrVo))
          return false;
        if (!this.bizInstanceAttrVo.equals(that.bizInstanceAttrVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_originVo = true && (isSetOriginVo());
      list.add(present_originVo);
      if (present_originVo)
        list.add(originVo);

      boolean present_bizInstanceAttrVo = true && (isSetBizInstanceAttrVo());
      list.add(present_bizInstanceAttrVo);
      if (present_bizInstanceAttrVo)
        list.add(bizInstanceAttrVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateBizInstanceAttrById_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOriginVo()).compareTo(other.isSetOriginVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originVo, other.originVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBizInstanceAttrVo()).compareTo(other.isSetBizInstanceAttrVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBizInstanceAttrVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bizInstanceAttrVo, other.bizInstanceAttrVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateBizInstanceAttrById_args(");
      boolean first = true;

      sb.append("originVo:");
      if (this.originVo == null) {
        sb.append("null");
      } else {
        sb.append(this.originVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("bizInstanceAttrVo:");
      if (this.bizInstanceAttrVo == null) {
        sb.append("null");
      } else {
        sb.append(this.bizInstanceAttrVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (originVo != null) {
        originVo.validate();
      }
      if (bizInstanceAttrVo != null) {
        bizInstanceAttrVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateBizInstanceAttrById_argsStandardSchemeFactory implements SchemeFactory {
      public updateBizInstanceAttrById_argsStandardScheme getScheme() {
        return new updateBizInstanceAttrById_argsStandardScheme();
      }
    }

    private static class updateBizInstanceAttrById_argsStandardScheme extends StandardScheme<updateBizInstanceAttrById_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateBizInstanceAttrById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORIGIN_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.originVo = new com.froad.thrift.vo.OriginVo();
                struct.originVo.read(iprot);
                struct.setOriginVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BIZ_INSTANCE_ATTR_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.bizInstanceAttrVo = new com.froad.thrift.vo.BizInstanceAttrVo();
                struct.bizInstanceAttrVo.read(iprot);
                struct.setBizInstanceAttrVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateBizInstanceAttrById_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.originVo != null) {
          oprot.writeFieldBegin(ORIGIN_VO_FIELD_DESC);
          struct.originVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.bizInstanceAttrVo != null) {
          oprot.writeFieldBegin(BIZ_INSTANCE_ATTR_VO_FIELD_DESC);
          struct.bizInstanceAttrVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateBizInstanceAttrById_argsTupleSchemeFactory implements SchemeFactory {
      public updateBizInstanceAttrById_argsTupleScheme getScheme() {
        return new updateBizInstanceAttrById_argsTupleScheme();
      }
    }

    private static class updateBizInstanceAttrById_argsTupleScheme extends TupleScheme<updateBizInstanceAttrById_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateBizInstanceAttrById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOriginVo()) {
          optionals.set(0);
        }
        if (struct.isSetBizInstanceAttrVo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOriginVo()) {
          struct.originVo.write(oprot);
        }
        if (struct.isSetBizInstanceAttrVo()) {
          struct.bizInstanceAttrVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateBizInstanceAttrById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.originVo = new com.froad.thrift.vo.OriginVo();
          struct.originVo.read(iprot);
          struct.setOriginVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.bizInstanceAttrVo = new com.froad.thrift.vo.BizInstanceAttrVo();
          struct.bizInstanceAttrVo.read(iprot);
          struct.setBizInstanceAttrVoIsSet(true);
        }
      }
    }

  }

  public static class updateBizInstanceAttrById_result implements org.apache.thrift.TBase<updateBizInstanceAttrById_result, updateBizInstanceAttrById_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateBizInstanceAttrById_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateBizInstanceAttrById_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateBizInstanceAttrById_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateBizInstanceAttrById_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateBizInstanceAttrById_result.class, metaDataMap);
    }

    public updateBizInstanceAttrById_result() {
    }

    public updateBizInstanceAttrById_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateBizInstanceAttrById_result(updateBizInstanceAttrById_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public updateBizInstanceAttrById_result deepCopy() {
      return new updateBizInstanceAttrById_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public updateBizInstanceAttrById_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateBizInstanceAttrById_result)
        return this.equals((updateBizInstanceAttrById_result)that);
      return false;
    }

    public boolean equals(updateBizInstanceAttrById_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateBizInstanceAttrById_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateBizInstanceAttrById_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateBizInstanceAttrById_resultStandardSchemeFactory implements SchemeFactory {
      public updateBizInstanceAttrById_resultStandardScheme getScheme() {
        return new updateBizInstanceAttrById_resultStandardScheme();
      }
    }

    private static class updateBizInstanceAttrById_resultStandardScheme extends StandardScheme<updateBizInstanceAttrById_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateBizInstanceAttrById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateBizInstanceAttrById_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateBizInstanceAttrById_resultTupleSchemeFactory implements SchemeFactory {
      public updateBizInstanceAttrById_resultTupleScheme getScheme() {
        return new updateBizInstanceAttrById_resultTupleScheme();
      }
    }

    private static class updateBizInstanceAttrById_resultTupleScheme extends TupleScheme<updateBizInstanceAttrById_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateBizInstanceAttrById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateBizInstanceAttrById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getBizInstanceAttrById_args implements org.apache.thrift.TBase<getBizInstanceAttrById_args, getBizInstanceAttrById_args._Fields>, java.io.Serializable, Cloneable, Comparable<getBizInstanceAttrById_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBizInstanceAttrById_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getBizInstanceAttrById_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getBizInstanceAttrById_argsTupleSchemeFactory());
    }

    public long id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBizInstanceAttrById_args.class, metaDataMap);
    }

    public getBizInstanceAttrById_args() {
    }

    public getBizInstanceAttrById_args(
      long id)
    {
      this();
      this.id = id;
      setIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBizInstanceAttrById_args(getBizInstanceAttrById_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.id = other.id;
    }

    public getBizInstanceAttrById_args deepCopy() {
      return new getBizInstanceAttrById_args(this);
    }

    @Override
    public void clear() {
      setIdIsSet(false);
      this.id = 0;
    }

    public long getId() {
      return this.id;
    }

    public getBizInstanceAttrById_args setId(long id) {
      this.id = id;
      setIdIsSet(true);
      return this;
    }

    public void unsetId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
    }

    public void setIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return Long.valueOf(getId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBizInstanceAttrById_args)
        return this.equals((getBizInstanceAttrById_args)that);
      return false;
    }

    public boolean equals(getBizInstanceAttrById_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true;
      boolean that_present_id = true;
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (this.id != that.id)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_id = true;
      list.add(present_id);
      if (present_id)
        list.add(id);

      return list.hashCode();
    }

    @Override
    public int compareTo(getBizInstanceAttrById_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getBizInstanceAttrById_args(");
      boolean first = true;

      sb.append("id:");
      sb.append(this.id);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getBizInstanceAttrById_argsStandardSchemeFactory implements SchemeFactory {
      public getBizInstanceAttrById_argsStandardScheme getScheme() {
        return new getBizInstanceAttrById_argsStandardScheme();
      }
    }

    private static class getBizInstanceAttrById_argsStandardScheme extends StandardScheme<getBizInstanceAttrById_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getBizInstanceAttrById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.id = iprot.readI64();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getBizInstanceAttrById_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI64(struct.id);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getBizInstanceAttrById_argsTupleSchemeFactory implements SchemeFactory {
      public getBizInstanceAttrById_argsTupleScheme getScheme() {
        return new getBizInstanceAttrById_argsTupleScheme();
      }
    }

    private static class getBizInstanceAttrById_argsTupleScheme extends TupleScheme<getBizInstanceAttrById_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getBizInstanceAttrById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetId()) {
          oprot.writeI64(struct.id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getBizInstanceAttrById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.id = iprot.readI64();
          struct.setIdIsSet(true);
        }
      }
    }

  }

  public static class getBizInstanceAttrById_result implements org.apache.thrift.TBase<getBizInstanceAttrById_result, getBizInstanceAttrById_result._Fields>, java.io.Serializable, Cloneable, Comparable<getBizInstanceAttrById_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBizInstanceAttrById_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getBizInstanceAttrById_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getBizInstanceAttrById_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.BizInstanceAttrVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.BizInstanceAttrVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBizInstanceAttrById_result.class, metaDataMap);
    }

    public getBizInstanceAttrById_result() {
    }

    public getBizInstanceAttrById_result(
      com.froad.thrift.vo.BizInstanceAttrVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBizInstanceAttrById_result(getBizInstanceAttrById_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.BizInstanceAttrVo(other.success);
      }
    }

    public getBizInstanceAttrById_result deepCopy() {
      return new getBizInstanceAttrById_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.BizInstanceAttrVo getSuccess() {
      return this.success;
    }

    public getBizInstanceAttrById_result setSuccess(com.froad.thrift.vo.BizInstanceAttrVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.BizInstanceAttrVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBizInstanceAttrById_result)
        return this.equals((getBizInstanceAttrById_result)that);
      return false;
    }

    public boolean equals(getBizInstanceAttrById_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getBizInstanceAttrById_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getBizInstanceAttrById_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getBizInstanceAttrById_resultStandardSchemeFactory implements SchemeFactory {
      public getBizInstanceAttrById_resultStandardScheme getScheme() {
        return new getBizInstanceAttrById_resultStandardScheme();
      }
    }

    private static class getBizInstanceAttrById_resultStandardScheme extends StandardScheme<getBizInstanceAttrById_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getBizInstanceAttrById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.BizInstanceAttrVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getBizInstanceAttrById_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getBizInstanceAttrById_resultTupleSchemeFactory implements SchemeFactory {
      public getBizInstanceAttrById_resultTupleScheme getScheme() {
        return new getBizInstanceAttrById_resultTupleScheme();
      }
    }

    private static class getBizInstanceAttrById_resultTupleScheme extends TupleScheme<getBizInstanceAttrById_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getBizInstanceAttrById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getBizInstanceAttrById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.BizInstanceAttrVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getOneBizInstanceAttr_args implements org.apache.thrift.TBase<getOneBizInstanceAttr_args, getOneBizInstanceAttr_args._Fields>, java.io.Serializable, Cloneable, Comparable<getOneBizInstanceAttr_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOneBizInstanceAttr_args");

    private static final org.apache.thrift.protocol.TField BIZ_INSTANCE_ATTR_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("bizInstanceAttrVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOneBizInstanceAttr_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOneBizInstanceAttr_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.BizInstanceAttrVo bizInstanceAttrVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BIZ_INSTANCE_ATTR_VO((short)1, "bizInstanceAttrVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BIZ_INSTANCE_ATTR_VO
            return BIZ_INSTANCE_ATTR_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BIZ_INSTANCE_ATTR_VO, new org.apache.thrift.meta_data.FieldMetaData("bizInstanceAttrVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.BizInstanceAttrVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOneBizInstanceAttr_args.class, metaDataMap);
    }

    public getOneBizInstanceAttr_args() {
    }

    public getOneBizInstanceAttr_args(
      com.froad.thrift.vo.BizInstanceAttrVo bizInstanceAttrVo)
    {
      this();
      this.bizInstanceAttrVo = bizInstanceAttrVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOneBizInstanceAttr_args(getOneBizInstanceAttr_args other) {
      if (other.isSetBizInstanceAttrVo()) {
        this.bizInstanceAttrVo = new com.froad.thrift.vo.BizInstanceAttrVo(other.bizInstanceAttrVo);
      }
    }

    public getOneBizInstanceAttr_args deepCopy() {
      return new getOneBizInstanceAttr_args(this);
    }

    @Override
    public void clear() {
      this.bizInstanceAttrVo = null;
    }

    public com.froad.thrift.vo.BizInstanceAttrVo getBizInstanceAttrVo() {
      return this.bizInstanceAttrVo;
    }

    public getOneBizInstanceAttr_args setBizInstanceAttrVo(com.froad.thrift.vo.BizInstanceAttrVo bizInstanceAttrVo) {
      this.bizInstanceAttrVo = bizInstanceAttrVo;
      return this;
    }

    public void unsetBizInstanceAttrVo() {
      this.bizInstanceAttrVo = null;
    }

    /** Returns true if field bizInstanceAttrVo is set (has been assigned a value) and false otherwise */
    public boolean isSetBizInstanceAttrVo() {
      return this.bizInstanceAttrVo != null;
    }

    public void setBizInstanceAttrVoIsSet(boolean value) {
      if (!value) {
        this.bizInstanceAttrVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BIZ_INSTANCE_ATTR_VO:
        if (value == null) {
          unsetBizInstanceAttrVo();
        } else {
          setBizInstanceAttrVo((com.froad.thrift.vo.BizInstanceAttrVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BIZ_INSTANCE_ATTR_VO:
        return getBizInstanceAttrVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BIZ_INSTANCE_ATTR_VO:
        return isSetBizInstanceAttrVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOneBizInstanceAttr_args)
        return this.equals((getOneBizInstanceAttr_args)that);
      return false;
    }

    public boolean equals(getOneBizInstanceAttr_args that) {
      if (that == null)
        return false;

      boolean this_present_bizInstanceAttrVo = true && this.isSetBizInstanceAttrVo();
      boolean that_present_bizInstanceAttrVo = true && that.isSetBizInstanceAttrVo();
      if (this_present_bizInstanceAttrVo || that_present_bizInstanceAttrVo) {
        if (!(this_present_bizInstanceAttrVo && that_present_bizInstanceAttrVo))
          return false;
        if (!this.bizInstanceAttrVo.equals(that.bizInstanceAttrVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_bizInstanceAttrVo = true && (isSetBizInstanceAttrVo());
      list.add(present_bizInstanceAttrVo);
      if (present_bizInstanceAttrVo)
        list.add(bizInstanceAttrVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(getOneBizInstanceAttr_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetBizInstanceAttrVo()).compareTo(other.isSetBizInstanceAttrVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBizInstanceAttrVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bizInstanceAttrVo, other.bizInstanceAttrVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOneBizInstanceAttr_args(");
      boolean first = true;

      sb.append("bizInstanceAttrVo:");
      if (this.bizInstanceAttrVo == null) {
        sb.append("null");
      } else {
        sb.append(this.bizInstanceAttrVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (bizInstanceAttrVo != null) {
        bizInstanceAttrVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOneBizInstanceAttr_argsStandardSchemeFactory implements SchemeFactory {
      public getOneBizInstanceAttr_argsStandardScheme getScheme() {
        return new getOneBizInstanceAttr_argsStandardScheme();
      }
    }

    private static class getOneBizInstanceAttr_argsStandardScheme extends StandardScheme<getOneBizInstanceAttr_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOneBizInstanceAttr_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BIZ_INSTANCE_ATTR_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.bizInstanceAttrVo = new com.froad.thrift.vo.BizInstanceAttrVo();
                struct.bizInstanceAttrVo.read(iprot);
                struct.setBizInstanceAttrVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOneBizInstanceAttr_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.bizInstanceAttrVo != null) {
          oprot.writeFieldBegin(BIZ_INSTANCE_ATTR_VO_FIELD_DESC);
          struct.bizInstanceAttrVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOneBizInstanceAttr_argsTupleSchemeFactory implements SchemeFactory {
      public getOneBizInstanceAttr_argsTupleScheme getScheme() {
        return new getOneBizInstanceAttr_argsTupleScheme();
      }
    }

    private static class getOneBizInstanceAttr_argsTupleScheme extends TupleScheme<getOneBizInstanceAttr_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOneBizInstanceAttr_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBizInstanceAttrVo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBizInstanceAttrVo()) {
          struct.bizInstanceAttrVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOneBizInstanceAttr_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.bizInstanceAttrVo = new com.froad.thrift.vo.BizInstanceAttrVo();
          struct.bizInstanceAttrVo.read(iprot);
          struct.setBizInstanceAttrVoIsSet(true);
        }
      }
    }

  }

  public static class getOneBizInstanceAttr_result implements org.apache.thrift.TBase<getOneBizInstanceAttr_result, getOneBizInstanceAttr_result._Fields>, java.io.Serializable, Cloneable, Comparable<getOneBizInstanceAttr_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOneBizInstanceAttr_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOneBizInstanceAttr_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOneBizInstanceAttr_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.BizInstanceAttrVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.BizInstanceAttrVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOneBizInstanceAttr_result.class, metaDataMap);
    }

    public getOneBizInstanceAttr_result() {
    }

    public getOneBizInstanceAttr_result(
      com.froad.thrift.vo.BizInstanceAttrVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOneBizInstanceAttr_result(getOneBizInstanceAttr_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.BizInstanceAttrVo(other.success);
      }
    }

    public getOneBizInstanceAttr_result deepCopy() {
      return new getOneBizInstanceAttr_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.BizInstanceAttrVo getSuccess() {
      return this.success;
    }

    public getOneBizInstanceAttr_result setSuccess(com.froad.thrift.vo.BizInstanceAttrVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.BizInstanceAttrVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOneBizInstanceAttr_result)
        return this.equals((getOneBizInstanceAttr_result)that);
      return false;
    }

    public boolean equals(getOneBizInstanceAttr_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getOneBizInstanceAttr_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOneBizInstanceAttr_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOneBizInstanceAttr_resultStandardSchemeFactory implements SchemeFactory {
      public getOneBizInstanceAttr_resultStandardScheme getScheme() {
        return new getOneBizInstanceAttr_resultStandardScheme();
      }
    }

    private static class getOneBizInstanceAttr_resultStandardScheme extends StandardScheme<getOneBizInstanceAttr_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOneBizInstanceAttr_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.BizInstanceAttrVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOneBizInstanceAttr_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOneBizInstanceAttr_resultTupleSchemeFactory implements SchemeFactory {
      public getOneBizInstanceAttr_resultTupleScheme getScheme() {
        return new getOneBizInstanceAttr_resultTupleScheme();
      }
    }

    private static class getOneBizInstanceAttr_resultTupleScheme extends TupleScheme<getOneBizInstanceAttr_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOneBizInstanceAttr_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOneBizInstanceAttr_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.BizInstanceAttrVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class countBizInstanceAttr_args implements org.apache.thrift.TBase<countBizInstanceAttr_args, countBizInstanceAttr_args._Fields>, java.io.Serializable, Cloneable, Comparable<countBizInstanceAttr_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("countBizInstanceAttr_args");

    private static final org.apache.thrift.protocol.TField BIZ_INSTANCE_ATTR_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("bizInstanceAttrVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new countBizInstanceAttr_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new countBizInstanceAttr_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.BizInstanceAttrVo bizInstanceAttrVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BIZ_INSTANCE_ATTR_VO((short)1, "bizInstanceAttrVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BIZ_INSTANCE_ATTR_VO
            return BIZ_INSTANCE_ATTR_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BIZ_INSTANCE_ATTR_VO, new org.apache.thrift.meta_data.FieldMetaData("bizInstanceAttrVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.BizInstanceAttrVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(countBizInstanceAttr_args.class, metaDataMap);
    }

    public countBizInstanceAttr_args() {
    }

    public countBizInstanceAttr_args(
      com.froad.thrift.vo.BizInstanceAttrVo bizInstanceAttrVo)
    {
      this();
      this.bizInstanceAttrVo = bizInstanceAttrVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public countBizInstanceAttr_args(countBizInstanceAttr_args other) {
      if (other.isSetBizInstanceAttrVo()) {
        this.bizInstanceAttrVo = new com.froad.thrift.vo.BizInstanceAttrVo(other.bizInstanceAttrVo);
      }
    }

    public countBizInstanceAttr_args deepCopy() {
      return new countBizInstanceAttr_args(this);
    }

    @Override
    public void clear() {
      this.bizInstanceAttrVo = null;
    }

    public com.froad.thrift.vo.BizInstanceAttrVo getBizInstanceAttrVo() {
      return this.bizInstanceAttrVo;
    }

    public countBizInstanceAttr_args setBizInstanceAttrVo(com.froad.thrift.vo.BizInstanceAttrVo bizInstanceAttrVo) {
      this.bizInstanceAttrVo = bizInstanceAttrVo;
      return this;
    }

    public void unsetBizInstanceAttrVo() {
      this.bizInstanceAttrVo = null;
    }

    /** Returns true if field bizInstanceAttrVo is set (has been assigned a value) and false otherwise */
    public boolean isSetBizInstanceAttrVo() {
      return this.bizInstanceAttrVo != null;
    }

    public void setBizInstanceAttrVoIsSet(boolean value) {
      if (!value) {
        this.bizInstanceAttrVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BIZ_INSTANCE_ATTR_VO:
        if (value == null) {
          unsetBizInstanceAttrVo();
        } else {
          setBizInstanceAttrVo((com.froad.thrift.vo.BizInstanceAttrVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BIZ_INSTANCE_ATTR_VO:
        return getBizInstanceAttrVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BIZ_INSTANCE_ATTR_VO:
        return isSetBizInstanceAttrVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof countBizInstanceAttr_args)
        return this.equals((countBizInstanceAttr_args)that);
      return false;
    }

    public boolean equals(countBizInstanceAttr_args that) {
      if (that == null)
        return false;

      boolean this_present_bizInstanceAttrVo = true && this.isSetBizInstanceAttrVo();
      boolean that_present_bizInstanceAttrVo = true && that.isSetBizInstanceAttrVo();
      if (this_present_bizInstanceAttrVo || that_present_bizInstanceAttrVo) {
        if (!(this_present_bizInstanceAttrVo && that_present_bizInstanceAttrVo))
          return false;
        if (!this.bizInstanceAttrVo.equals(that.bizInstanceAttrVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_bizInstanceAttrVo = true && (isSetBizInstanceAttrVo());
      list.add(present_bizInstanceAttrVo);
      if (present_bizInstanceAttrVo)
        list.add(bizInstanceAttrVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(countBizInstanceAttr_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetBizInstanceAttrVo()).compareTo(other.isSetBizInstanceAttrVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBizInstanceAttrVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bizInstanceAttrVo, other.bizInstanceAttrVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("countBizInstanceAttr_args(");
      boolean first = true;

      sb.append("bizInstanceAttrVo:");
      if (this.bizInstanceAttrVo == null) {
        sb.append("null");
      } else {
        sb.append(this.bizInstanceAttrVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (bizInstanceAttrVo != null) {
        bizInstanceAttrVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class countBizInstanceAttr_argsStandardSchemeFactory implements SchemeFactory {
      public countBizInstanceAttr_argsStandardScheme getScheme() {
        return new countBizInstanceAttr_argsStandardScheme();
      }
    }

    private static class countBizInstanceAttr_argsStandardScheme extends StandardScheme<countBizInstanceAttr_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, countBizInstanceAttr_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BIZ_INSTANCE_ATTR_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.bizInstanceAttrVo = new com.froad.thrift.vo.BizInstanceAttrVo();
                struct.bizInstanceAttrVo.read(iprot);
                struct.setBizInstanceAttrVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, countBizInstanceAttr_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.bizInstanceAttrVo != null) {
          oprot.writeFieldBegin(BIZ_INSTANCE_ATTR_VO_FIELD_DESC);
          struct.bizInstanceAttrVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class countBizInstanceAttr_argsTupleSchemeFactory implements SchemeFactory {
      public countBizInstanceAttr_argsTupleScheme getScheme() {
        return new countBizInstanceAttr_argsTupleScheme();
      }
    }

    private static class countBizInstanceAttr_argsTupleScheme extends TupleScheme<countBizInstanceAttr_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, countBizInstanceAttr_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBizInstanceAttrVo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBizInstanceAttrVo()) {
          struct.bizInstanceAttrVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, countBizInstanceAttr_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.bizInstanceAttrVo = new com.froad.thrift.vo.BizInstanceAttrVo();
          struct.bizInstanceAttrVo.read(iprot);
          struct.setBizInstanceAttrVoIsSet(true);
        }
      }
    }

  }

  public static class countBizInstanceAttr_result implements org.apache.thrift.TBase<countBizInstanceAttr_result, countBizInstanceAttr_result._Fields>, java.io.Serializable, Cloneable, Comparable<countBizInstanceAttr_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("countBizInstanceAttr_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new countBizInstanceAttr_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new countBizInstanceAttr_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(countBizInstanceAttr_result.class, metaDataMap);
    }

    public countBizInstanceAttr_result() {
    }

    public countBizInstanceAttr_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public countBizInstanceAttr_result(countBizInstanceAttr_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public countBizInstanceAttr_result deepCopy() {
      return new countBizInstanceAttr_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public countBizInstanceAttr_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof countBizInstanceAttr_result)
        return this.equals((countBizInstanceAttr_result)that);
      return false;
    }

    public boolean equals(countBizInstanceAttr_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(countBizInstanceAttr_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("countBizInstanceAttr_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class countBizInstanceAttr_resultStandardSchemeFactory implements SchemeFactory {
      public countBizInstanceAttr_resultStandardScheme getScheme() {
        return new countBizInstanceAttr_resultStandardScheme();
      }
    }

    private static class countBizInstanceAttr_resultStandardScheme extends StandardScheme<countBizInstanceAttr_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, countBizInstanceAttr_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, countBizInstanceAttr_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class countBizInstanceAttr_resultTupleSchemeFactory implements SchemeFactory {
      public countBizInstanceAttr_resultTupleScheme getScheme() {
        return new countBizInstanceAttr_resultTupleScheme();
      }
    }

    private static class countBizInstanceAttr_resultTupleScheme extends TupleScheme<countBizInstanceAttr_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, countBizInstanceAttr_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, countBizInstanceAttr_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getBizInstanceAttr_args implements org.apache.thrift.TBase<getBizInstanceAttr_args, getBizInstanceAttr_args._Fields>, java.io.Serializable, Cloneable, Comparable<getBizInstanceAttr_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBizInstanceAttr_args");

    private static final org.apache.thrift.protocol.TField BIZ_INSTANCE_ATTR_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("bizInstanceAttrVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getBizInstanceAttr_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getBizInstanceAttr_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.BizInstanceAttrVo bizInstanceAttrVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BIZ_INSTANCE_ATTR_VO((short)1, "bizInstanceAttrVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BIZ_INSTANCE_ATTR_VO
            return BIZ_INSTANCE_ATTR_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BIZ_INSTANCE_ATTR_VO, new org.apache.thrift.meta_data.FieldMetaData("bizInstanceAttrVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.BizInstanceAttrVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBizInstanceAttr_args.class, metaDataMap);
    }

    public getBizInstanceAttr_args() {
    }

    public getBizInstanceAttr_args(
      com.froad.thrift.vo.BizInstanceAttrVo bizInstanceAttrVo)
    {
      this();
      this.bizInstanceAttrVo = bizInstanceAttrVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBizInstanceAttr_args(getBizInstanceAttr_args other) {
      if (other.isSetBizInstanceAttrVo()) {
        this.bizInstanceAttrVo = new com.froad.thrift.vo.BizInstanceAttrVo(other.bizInstanceAttrVo);
      }
    }

    public getBizInstanceAttr_args deepCopy() {
      return new getBizInstanceAttr_args(this);
    }

    @Override
    public void clear() {
      this.bizInstanceAttrVo = null;
    }

    public com.froad.thrift.vo.BizInstanceAttrVo getBizInstanceAttrVo() {
      return this.bizInstanceAttrVo;
    }

    public getBizInstanceAttr_args setBizInstanceAttrVo(com.froad.thrift.vo.BizInstanceAttrVo bizInstanceAttrVo) {
      this.bizInstanceAttrVo = bizInstanceAttrVo;
      return this;
    }

    public void unsetBizInstanceAttrVo() {
      this.bizInstanceAttrVo = null;
    }

    /** Returns true if field bizInstanceAttrVo is set (has been assigned a value) and false otherwise */
    public boolean isSetBizInstanceAttrVo() {
      return this.bizInstanceAttrVo != null;
    }

    public void setBizInstanceAttrVoIsSet(boolean value) {
      if (!value) {
        this.bizInstanceAttrVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BIZ_INSTANCE_ATTR_VO:
        if (value == null) {
          unsetBizInstanceAttrVo();
        } else {
          setBizInstanceAttrVo((com.froad.thrift.vo.BizInstanceAttrVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BIZ_INSTANCE_ATTR_VO:
        return getBizInstanceAttrVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BIZ_INSTANCE_ATTR_VO:
        return isSetBizInstanceAttrVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBizInstanceAttr_args)
        return this.equals((getBizInstanceAttr_args)that);
      return false;
    }

    public boolean equals(getBizInstanceAttr_args that) {
      if (that == null)
        return false;

      boolean this_present_bizInstanceAttrVo = true && this.isSetBizInstanceAttrVo();
      boolean that_present_bizInstanceAttrVo = true && that.isSetBizInstanceAttrVo();
      if (this_present_bizInstanceAttrVo || that_present_bizInstanceAttrVo) {
        if (!(this_present_bizInstanceAttrVo && that_present_bizInstanceAttrVo))
          return false;
        if (!this.bizInstanceAttrVo.equals(that.bizInstanceAttrVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_bizInstanceAttrVo = true && (isSetBizInstanceAttrVo());
      list.add(present_bizInstanceAttrVo);
      if (present_bizInstanceAttrVo)
        list.add(bizInstanceAttrVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(getBizInstanceAttr_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetBizInstanceAttrVo()).compareTo(other.isSetBizInstanceAttrVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBizInstanceAttrVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bizInstanceAttrVo, other.bizInstanceAttrVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getBizInstanceAttr_args(");
      boolean first = true;

      sb.append("bizInstanceAttrVo:");
      if (this.bizInstanceAttrVo == null) {
        sb.append("null");
      } else {
        sb.append(this.bizInstanceAttrVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (bizInstanceAttrVo != null) {
        bizInstanceAttrVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getBizInstanceAttr_argsStandardSchemeFactory implements SchemeFactory {
      public getBizInstanceAttr_argsStandardScheme getScheme() {
        return new getBizInstanceAttr_argsStandardScheme();
      }
    }

    private static class getBizInstanceAttr_argsStandardScheme extends StandardScheme<getBizInstanceAttr_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getBizInstanceAttr_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BIZ_INSTANCE_ATTR_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.bizInstanceAttrVo = new com.froad.thrift.vo.BizInstanceAttrVo();
                struct.bizInstanceAttrVo.read(iprot);
                struct.setBizInstanceAttrVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getBizInstanceAttr_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.bizInstanceAttrVo != null) {
          oprot.writeFieldBegin(BIZ_INSTANCE_ATTR_VO_FIELD_DESC);
          struct.bizInstanceAttrVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getBizInstanceAttr_argsTupleSchemeFactory implements SchemeFactory {
      public getBizInstanceAttr_argsTupleScheme getScheme() {
        return new getBizInstanceAttr_argsTupleScheme();
      }
    }

    private static class getBizInstanceAttr_argsTupleScheme extends TupleScheme<getBizInstanceAttr_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getBizInstanceAttr_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBizInstanceAttrVo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBizInstanceAttrVo()) {
          struct.bizInstanceAttrVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getBizInstanceAttr_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.bizInstanceAttrVo = new com.froad.thrift.vo.BizInstanceAttrVo();
          struct.bizInstanceAttrVo.read(iprot);
          struct.setBizInstanceAttrVoIsSet(true);
        }
      }
    }

  }

  public static class getBizInstanceAttr_result implements org.apache.thrift.TBase<getBizInstanceAttr_result, getBizInstanceAttr_result._Fields>, java.io.Serializable, Cloneable, Comparable<getBizInstanceAttr_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBizInstanceAttr_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getBizInstanceAttr_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getBizInstanceAttr_resultTupleSchemeFactory());
    }

    public List<com.froad.thrift.vo.BizInstanceAttrVo> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.BizInstanceAttrVo.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBizInstanceAttr_result.class, metaDataMap);
    }

    public getBizInstanceAttr_result() {
    }

    public getBizInstanceAttr_result(
      List<com.froad.thrift.vo.BizInstanceAttrVo> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBizInstanceAttr_result(getBizInstanceAttr_result other) {
      if (other.isSetSuccess()) {
        List<com.froad.thrift.vo.BizInstanceAttrVo> __this__success = new ArrayList<com.froad.thrift.vo.BizInstanceAttrVo>(other.success.size());
        for (com.froad.thrift.vo.BizInstanceAttrVo other_element : other.success) {
          __this__success.add(new com.froad.thrift.vo.BizInstanceAttrVo(other_element));
        }
        this.success = __this__success;
      }
    }

    public getBizInstanceAttr_result deepCopy() {
      return new getBizInstanceAttr_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.froad.thrift.vo.BizInstanceAttrVo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.froad.thrift.vo.BizInstanceAttrVo elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.froad.thrift.vo.BizInstanceAttrVo>();
      }
      this.success.add(elem);
    }

    public List<com.froad.thrift.vo.BizInstanceAttrVo> getSuccess() {
      return this.success;
    }

    public getBizInstanceAttr_result setSuccess(List<com.froad.thrift.vo.BizInstanceAttrVo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.froad.thrift.vo.BizInstanceAttrVo>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBizInstanceAttr_result)
        return this.equals((getBizInstanceAttr_result)that);
      return false;
    }

    public boolean equals(getBizInstanceAttr_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getBizInstanceAttr_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getBizInstanceAttr_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getBizInstanceAttr_resultStandardSchemeFactory implements SchemeFactory {
      public getBizInstanceAttr_resultStandardScheme getScheme() {
        return new getBizInstanceAttr_resultStandardScheme();
      }
    }

    private static class getBizInstanceAttr_resultStandardScheme extends StandardScheme<getBizInstanceAttr_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getBizInstanceAttr_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.success = new ArrayList<com.froad.thrift.vo.BizInstanceAttrVo>(_list0.size);
                  com.froad.thrift.vo.BizInstanceAttrVo _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    _elem1 = new com.froad.thrift.vo.BizInstanceAttrVo();
                    _elem1.read(iprot);
                    struct.success.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getBizInstanceAttr_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.froad.thrift.vo.BizInstanceAttrVo _iter3 : struct.success)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getBizInstanceAttr_resultTupleSchemeFactory implements SchemeFactory {
      public getBizInstanceAttr_resultTupleScheme getScheme() {
        return new getBizInstanceAttr_resultTupleScheme();
      }
    }

    private static class getBizInstanceAttr_resultTupleScheme extends TupleScheme<getBizInstanceAttr_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getBizInstanceAttr_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.froad.thrift.vo.BizInstanceAttrVo _iter4 : struct.success)
            {
              _iter4.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getBizInstanceAttr_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.froad.thrift.vo.BizInstanceAttrVo>(_list5.size);
            com.froad.thrift.vo.BizInstanceAttrVo _elem6;
            for (int _i7 = 0; _i7 < _list5.size; ++_i7)
            {
              _elem6 = new com.froad.thrift.vo.BizInstanceAttrVo();
              _elem6.read(iprot);
              struct.success.add(_elem6);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getBizInstanceAttrByPage_args implements org.apache.thrift.TBase<getBizInstanceAttrByPage_args, getBizInstanceAttrByPage_args._Fields>, java.io.Serializable, Cloneable, Comparable<getBizInstanceAttrByPage_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBizInstanceAttrByPage_args");

    private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField BIZ_INSTANCE_ATTR_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("bizInstanceAttrVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getBizInstanceAttrByPage_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getBizInstanceAttrByPage_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.PageVo page; // required
    public com.froad.thrift.vo.BizInstanceAttrVo bizInstanceAttrVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PAGE((short)1, "page"),
      BIZ_INSTANCE_ATTR_VO((short)2, "bizInstanceAttrVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PAGE
            return PAGE;
          case 2: // BIZ_INSTANCE_ATTR_VO
            return BIZ_INSTANCE_ATTR_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.PageVo.class)));
      tmpMap.put(_Fields.BIZ_INSTANCE_ATTR_VO, new org.apache.thrift.meta_data.FieldMetaData("bizInstanceAttrVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.BizInstanceAttrVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBizInstanceAttrByPage_args.class, metaDataMap);
    }

    public getBizInstanceAttrByPage_args() {
    }

    public getBizInstanceAttrByPage_args(
      com.froad.thrift.vo.PageVo page,
      com.froad.thrift.vo.BizInstanceAttrVo bizInstanceAttrVo)
    {
      this();
      this.page = page;
      this.bizInstanceAttrVo = bizInstanceAttrVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBizInstanceAttrByPage_args(getBizInstanceAttrByPage_args other) {
      if (other.isSetPage()) {
        this.page = new com.froad.thrift.vo.PageVo(other.page);
      }
      if (other.isSetBizInstanceAttrVo()) {
        this.bizInstanceAttrVo = new com.froad.thrift.vo.BizInstanceAttrVo(other.bizInstanceAttrVo);
      }
    }

    public getBizInstanceAttrByPage_args deepCopy() {
      return new getBizInstanceAttrByPage_args(this);
    }

    @Override
    public void clear() {
      this.page = null;
      this.bizInstanceAttrVo = null;
    }

    public com.froad.thrift.vo.PageVo getPage() {
      return this.page;
    }

    public getBizInstanceAttrByPage_args setPage(com.froad.thrift.vo.PageVo page) {
      this.page = page;
      return this;
    }

    public void unsetPage() {
      this.page = null;
    }

    /** Returns true if field page is set (has been assigned a value) and false otherwise */
    public boolean isSetPage() {
      return this.page != null;
    }

    public void setPageIsSet(boolean value) {
      if (!value) {
        this.page = null;
      }
    }

    public com.froad.thrift.vo.BizInstanceAttrVo getBizInstanceAttrVo() {
      return this.bizInstanceAttrVo;
    }

    public getBizInstanceAttrByPage_args setBizInstanceAttrVo(com.froad.thrift.vo.BizInstanceAttrVo bizInstanceAttrVo) {
      this.bizInstanceAttrVo = bizInstanceAttrVo;
      return this;
    }

    public void unsetBizInstanceAttrVo() {
      this.bizInstanceAttrVo = null;
    }

    /** Returns true if field bizInstanceAttrVo is set (has been assigned a value) and false otherwise */
    public boolean isSetBizInstanceAttrVo() {
      return this.bizInstanceAttrVo != null;
    }

    public void setBizInstanceAttrVoIsSet(boolean value) {
      if (!value) {
        this.bizInstanceAttrVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PAGE:
        if (value == null) {
          unsetPage();
        } else {
          setPage((com.froad.thrift.vo.PageVo)value);
        }
        break;

      case BIZ_INSTANCE_ATTR_VO:
        if (value == null) {
          unsetBizInstanceAttrVo();
        } else {
          setBizInstanceAttrVo((com.froad.thrift.vo.BizInstanceAttrVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PAGE:
        return getPage();

      case BIZ_INSTANCE_ATTR_VO:
        return getBizInstanceAttrVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PAGE:
        return isSetPage();
      case BIZ_INSTANCE_ATTR_VO:
        return isSetBizInstanceAttrVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBizInstanceAttrByPage_args)
        return this.equals((getBizInstanceAttrByPage_args)that);
      return false;
    }

    public boolean equals(getBizInstanceAttrByPage_args that) {
      if (that == null)
        return false;

      boolean this_present_page = true && this.isSetPage();
      boolean that_present_page = true && that.isSetPage();
      if (this_present_page || that_present_page) {
        if (!(this_present_page && that_present_page))
          return false;
        if (!this.page.equals(that.page))
          return false;
      }

      boolean this_present_bizInstanceAttrVo = true && this.isSetBizInstanceAttrVo();
      boolean that_present_bizInstanceAttrVo = true && that.isSetBizInstanceAttrVo();
      if (this_present_bizInstanceAttrVo || that_present_bizInstanceAttrVo) {
        if (!(this_present_bizInstanceAttrVo && that_present_bizInstanceAttrVo))
          return false;
        if (!this.bizInstanceAttrVo.equals(that.bizInstanceAttrVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_page = true && (isSetPage());
      list.add(present_page);
      if (present_page)
        list.add(page);

      boolean present_bizInstanceAttrVo = true && (isSetBizInstanceAttrVo());
      list.add(present_bizInstanceAttrVo);
      if (present_bizInstanceAttrVo)
        list.add(bizInstanceAttrVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(getBizInstanceAttrByPage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBizInstanceAttrVo()).compareTo(other.isSetBizInstanceAttrVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBizInstanceAttrVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bizInstanceAttrVo, other.bizInstanceAttrVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getBizInstanceAttrByPage_args(");
      boolean first = true;

      sb.append("page:");
      if (this.page == null) {
        sb.append("null");
      } else {
        sb.append(this.page);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("bizInstanceAttrVo:");
      if (this.bizInstanceAttrVo == null) {
        sb.append("null");
      } else {
        sb.append(this.bizInstanceAttrVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (page != null) {
        page.validate();
      }
      if (bizInstanceAttrVo != null) {
        bizInstanceAttrVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getBizInstanceAttrByPage_argsStandardSchemeFactory implements SchemeFactory {
      public getBizInstanceAttrByPage_argsStandardScheme getScheme() {
        return new getBizInstanceAttrByPage_argsStandardScheme();
      }
    }

    private static class getBizInstanceAttrByPage_argsStandardScheme extends StandardScheme<getBizInstanceAttrByPage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getBizInstanceAttrByPage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.page = new com.froad.thrift.vo.PageVo();
                struct.page.read(iprot);
                struct.setPageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BIZ_INSTANCE_ATTR_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.bizInstanceAttrVo = new com.froad.thrift.vo.BizInstanceAttrVo();
                struct.bizInstanceAttrVo.read(iprot);
                struct.setBizInstanceAttrVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getBizInstanceAttrByPage_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.page != null) {
          oprot.writeFieldBegin(PAGE_FIELD_DESC);
          struct.page.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.bizInstanceAttrVo != null) {
          oprot.writeFieldBegin(BIZ_INSTANCE_ATTR_VO_FIELD_DESC);
          struct.bizInstanceAttrVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getBizInstanceAttrByPage_argsTupleSchemeFactory implements SchemeFactory {
      public getBizInstanceAttrByPage_argsTupleScheme getScheme() {
        return new getBizInstanceAttrByPage_argsTupleScheme();
      }
    }

    private static class getBizInstanceAttrByPage_argsTupleScheme extends TupleScheme<getBizInstanceAttrByPage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getBizInstanceAttrByPage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPage()) {
          optionals.set(0);
        }
        if (struct.isSetBizInstanceAttrVo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPage()) {
          struct.page.write(oprot);
        }
        if (struct.isSetBizInstanceAttrVo()) {
          struct.bizInstanceAttrVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getBizInstanceAttrByPage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.page = new com.froad.thrift.vo.PageVo();
          struct.page.read(iprot);
          struct.setPageIsSet(true);
        }
        if (incoming.get(1)) {
          struct.bizInstanceAttrVo = new com.froad.thrift.vo.BizInstanceAttrVo();
          struct.bizInstanceAttrVo.read(iprot);
          struct.setBizInstanceAttrVoIsSet(true);
        }
      }
    }

  }

  public static class getBizInstanceAttrByPage_result implements org.apache.thrift.TBase<getBizInstanceAttrByPage_result, getBizInstanceAttrByPage_result._Fields>, java.io.Serializable, Cloneable, Comparable<getBizInstanceAttrByPage_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBizInstanceAttrByPage_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getBizInstanceAttrByPage_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getBizInstanceAttrByPage_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.BizInstanceAttrPageVoRes success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.BizInstanceAttrPageVoRes.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBizInstanceAttrByPage_result.class, metaDataMap);
    }

    public getBizInstanceAttrByPage_result() {
    }

    public getBizInstanceAttrByPage_result(
      com.froad.thrift.vo.BizInstanceAttrPageVoRes success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBizInstanceAttrByPage_result(getBizInstanceAttrByPage_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.BizInstanceAttrPageVoRes(other.success);
      }
    }

    public getBizInstanceAttrByPage_result deepCopy() {
      return new getBizInstanceAttrByPage_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.BizInstanceAttrPageVoRes getSuccess() {
      return this.success;
    }

    public getBizInstanceAttrByPage_result setSuccess(com.froad.thrift.vo.BizInstanceAttrPageVoRes success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.BizInstanceAttrPageVoRes)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBizInstanceAttrByPage_result)
        return this.equals((getBizInstanceAttrByPage_result)that);
      return false;
    }

    public boolean equals(getBizInstanceAttrByPage_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getBizInstanceAttrByPage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getBizInstanceAttrByPage_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getBizInstanceAttrByPage_resultStandardSchemeFactory implements SchemeFactory {
      public getBizInstanceAttrByPage_resultStandardScheme getScheme() {
        return new getBizInstanceAttrByPage_resultStandardScheme();
      }
    }

    private static class getBizInstanceAttrByPage_resultStandardScheme extends StandardScheme<getBizInstanceAttrByPage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getBizInstanceAttrByPage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.BizInstanceAttrPageVoRes();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getBizInstanceAttrByPage_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getBizInstanceAttrByPage_resultTupleSchemeFactory implements SchemeFactory {
      public getBizInstanceAttrByPage_resultTupleScheme getScheme() {
        return new getBizInstanceAttrByPage_resultTupleScheme();
      }
    }

    private static class getBizInstanceAttrByPage_resultTupleScheme extends TupleScheme<getBizInstanceAttrByPage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getBizInstanceAttrByPage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getBizInstanceAttrByPage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.BizInstanceAttrPageVoRes();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
