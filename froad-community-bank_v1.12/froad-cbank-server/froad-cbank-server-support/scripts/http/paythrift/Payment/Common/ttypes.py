#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#
#!/usr/bin/env python

#-*-coding:utf-8-*-

import sys
reload(sys)
sys.setdefaultencoding('utf8') 
from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class PageVo:
  """

  Attributes:
   - pageNumber
   - pageSize
   - totalCount
   - pageCount
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'pageNumber', None, 1, ), # 1
    (2, TType.I32, 'pageSize', None, 20, ), # 2
    (3, TType.I32, 'totalCount', None, 0, ), # 3
    (4, TType.I32, 'pageCount', None, 0, ), # 4
  )

  def __init__(self, pageNumber=thrift_spec[1][4], pageSize=thrift_spec[2][4], totalCount=thrift_spec[3][4], pageCount=thrift_spec[4][4],):
    self.pageNumber = pageNumber
    self.pageSize = pageSize
    self.totalCount = totalCount
    self.pageCount = pageCount

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.pageNumber = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.pageSize = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.totalCount = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.pageCount = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PageVo')
    if self.pageNumber is not None:
      oprot.writeFieldBegin('pageNumber', TType.I32, 1)
      oprot.writeI32(self.pageNumber)
      oprot.writeFieldEnd()
    if self.pageSize is not None:
      oprot.writeFieldBegin('pageSize', TType.I32, 2)
      oprot.writeI32(self.pageSize)
      oprot.writeFieldEnd()
    if self.totalCount is not None:
      oprot.writeFieldBegin('totalCount', TType.I32, 3)
      oprot.writeI32(self.totalCount)
      oprot.writeFieldEnd()
    if self.pageCount is not None:
      oprot.writeFieldBegin('pageCount', TType.I32, 4)
      oprot.writeI32(self.pageCount)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.pageNumber)
    value = (value * 31) ^ hash(self.pageSize)
    value = (value * 31) ^ hash(self.totalCount)
    value = (value * 31) ^ hash(self.pageCount)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ResultVo:
  """
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'resultCode', None, None, ), # 1
    (2, TType.STRING, 'resultDesc', None, None, ), # 2
  )

  def __init__(self, resultCode=None, resultDesc=None,):
    self.resultCode = resultCode
    self.resultDesc = resultDesc

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.resultCode = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.resultDesc = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ResultVo')
    if self.resultCode is not None:
      oprot.writeFieldBegin('resultCode', TType.STRING, 1)
      oprot.writeString(self.resultCode)
      oprot.writeFieldEnd()
    if self.resultDesc is not None:
      oprot.writeFieldBegin('resultDesc', TType.STRING, 2)
      oprot.writeString(self.resultDesc)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.resultCode)
    value = (value * 31) ^ hash(self.resultDesc)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
