#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#
#!/usr/bin/env python

#-*-coding:utf-8-*-

import sys
reload(sys)
sys.setdefaultencoding('utf8') 
from thrift.Thrift import TType, TMessageType, TException, TApplicationException
import Common.ttypes
import VO.ttypes


from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class DoPayOrdersVoReq:
  """

  Attributes:
   - clientId
   - orderId
   - pointOrgNo
   - cashOrgNo
   - payType
   - cashType
   - pointAmount
   - cashAmount
   - foilCardNum
   - token
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'clientId', None, None, ), # 1
    (2, TType.STRING, 'orderId', None, None, ), # 2
    (3, TType.STRING, 'pointOrgNo', None, None, ), # 3
    (4, TType.STRING, 'cashOrgNo', None, None, ), # 4
    (5, TType.I32, 'payType', None, None, ), # 5
    (6, TType.I32, 'cashType', None, None, ), # 6
    (7, TType.DOUBLE, 'pointAmount', None, None, ), # 7
    (8, TType.DOUBLE, 'cashAmount', None, None, ), # 8
    (9, TType.STRING, 'foilCardNum', None, None, ), # 9
    (10, TType.STRING, 'token', None, None, ), # 10
  )

  def __init__(self, clientId=None, orderId=None, pointOrgNo=None, cashOrgNo=None, payType=None, cashType=None, pointAmount=None, cashAmount=None, foilCardNum=None, token=None,):
    self.clientId = clientId
    self.orderId = orderId
    self.pointOrgNo = pointOrgNo
    self.cashOrgNo = cashOrgNo
    self.payType = payType
    self.cashType = cashType
    self.pointAmount = pointAmount
    self.cashAmount = cashAmount
    self.foilCardNum = foilCardNum
    self.token = token

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.clientId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.orderId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.pointOrgNo = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.cashOrgNo = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.payType = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.cashType = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.DOUBLE:
          self.pointAmount = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.DOUBLE:
          self.cashAmount = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.foilCardNum = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.token = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DoPayOrdersVoReq')
    if self.clientId is not None:
      oprot.writeFieldBegin('clientId', TType.I64, 1)
      oprot.writeI64(self.clientId)
      oprot.writeFieldEnd()
    if self.orderId is not None:
      oprot.writeFieldBegin('orderId', TType.STRING, 2)
      oprot.writeString(self.orderId)
      oprot.writeFieldEnd()
    if self.pointOrgNo is not None:
      oprot.writeFieldBegin('pointOrgNo', TType.STRING, 3)
      oprot.writeString(self.pointOrgNo)
      oprot.writeFieldEnd()
    if self.cashOrgNo is not None:
      oprot.writeFieldBegin('cashOrgNo', TType.STRING, 4)
      oprot.writeString(self.cashOrgNo)
      oprot.writeFieldEnd()
    if self.payType is not None:
      oprot.writeFieldBegin('payType', TType.I32, 5)
      oprot.writeI32(self.payType)
      oprot.writeFieldEnd()
    if self.cashType is not None:
      oprot.writeFieldBegin('cashType', TType.I32, 6)
      oprot.writeI32(self.cashType)
      oprot.writeFieldEnd()
    if self.pointAmount is not None:
      oprot.writeFieldBegin('pointAmount', TType.DOUBLE, 7)
      oprot.writeDouble(self.pointAmount)
      oprot.writeFieldEnd()
    if self.cashAmount is not None:
      oprot.writeFieldBegin('cashAmount', TType.DOUBLE, 8)
      oprot.writeDouble(self.cashAmount)
      oprot.writeFieldEnd()
    if self.foilCardNum is not None:
      oprot.writeFieldBegin('foilCardNum', TType.STRING, 9)
      oprot.writeString(self.foilCardNum)
      oprot.writeFieldEnd()
    if self.token is not None:
      oprot.writeFieldBegin('token', TType.STRING, 10)
      oprot.writeString(self.token)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.clientId)
    value = (value * 31) ^ hash(self.orderId)
    value = (value * 31) ^ hash(self.pointOrgNo)
    value = (value * 31) ^ hash(self.cashOrgNo)
    value = (value * 31) ^ hash(self.payType)
    value = (value * 31) ^ hash(self.cashType)
    value = (value * 31) ^ hash(self.pointAmount)
    value = (value * 31) ^ hash(self.cashAmount)
    value = (value * 31) ^ hash(self.foilCardNum)
    value = (value * 31) ^ hash(self.token)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DoPayOrdersVoRes:
  """

  Attributes:
   - resultCode
   - resultDesc
   - resultForm
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'resultCode', None, None, ), # 1
    (2, TType.STRING, 'resultDesc', None, None, ), # 2
    (3, TType.STRING, 'resultForm', None, None, ), # 3
  )

  def __init__(self, resultCode=None, resultDesc=None, resultForm=None,):
    self.resultCode = resultCode
    self.resultDesc = resultDesc
    self.resultForm = resultForm

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.resultCode = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.resultDesc = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.resultForm = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DoPayOrdersVoRes')
    if self.resultCode is not None:
      oprot.writeFieldBegin('resultCode', TType.STRING, 1)
      oprot.writeString(self.resultCode)
      oprot.writeFieldEnd()
    if self.resultDesc is not None:
      oprot.writeFieldBegin('resultDesc', TType.STRING, 2)
      oprot.writeString(self.resultDesc)
      oprot.writeFieldEnd()
    if self.resultForm is not None:
      oprot.writeFieldBegin('resultForm', TType.STRING, 3)
      oprot.writeString(self.resultForm)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.resultCode)
    value = (value * 31) ^ hash(self.resultDesc)
    value = (value * 31) ^ hash(self.resultForm)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
