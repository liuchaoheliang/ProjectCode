#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class MerchantAccountVo:
  """
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'id', None, None, ), # 1
    (2, TType.I64, 'createTime', None, None, ), # 2
    (3, TType.I64, 'clientId', None, None, ), # 3
    (4, TType.STRING, 'merchantId', None, None, ), # 4
    (5, TType.STRING, 'outletId', None, None, ), # 5
    (6, TType.STRING, 'acctName', None, None, ), # 6
    (7, TType.STRING, 'acctNumber', None, None, ), # 7
    (8, TType.STRING, 'acctType', None, None, ), # 8
    (9, TType.STRING, 'openingBank', None, None, ), # 9
    (10, TType.BOOL, 'isDelete', None, None, ), # 10
  )

  def __init__(self, id=None, createTime=None, clientId=None, merchantId=None, outletId=None, acctName=None, acctNumber=None, acctType=None, openingBank=None, isDelete=None,):
    self.id = id
    self.createTime = createTime
    self.clientId = clientId
    self.merchantId = merchantId
    self.outletId = outletId
    self.acctName = acctName
    self.acctNumber = acctNumber
    self.acctType = acctType
    self.openingBank = openingBank
    self.isDelete = isDelete

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.createTime = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.clientId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.merchantId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.outletId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.acctName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.acctNumber = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.acctType = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.openingBank = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.BOOL:
          self.isDelete = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('MerchantAccountVo')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I64, 1)
      oprot.writeI64(self.id)
      oprot.writeFieldEnd()
    if self.createTime is not None:
      oprot.writeFieldBegin('createTime', TType.I64, 2)
      oprot.writeI64(self.createTime)
      oprot.writeFieldEnd()
    if self.clientId is not None:
      oprot.writeFieldBegin('clientId', TType.I64, 3)
      oprot.writeI64(self.clientId)
      oprot.writeFieldEnd()
    if self.merchantId is not None:
      oprot.writeFieldBegin('merchantId', TType.STRING, 4)
      oprot.writeString(self.merchantId)
      oprot.writeFieldEnd()
    if self.outletId is not None:
      oprot.writeFieldBegin('outletId', TType.STRING, 5)
      oprot.writeString(self.outletId)
      oprot.writeFieldEnd()
    if self.acctName is not None:
      oprot.writeFieldBegin('acctName', TType.STRING, 6)
      oprot.writeString(self.acctName)
      oprot.writeFieldEnd()
    if self.acctNumber is not None:
      oprot.writeFieldBegin('acctNumber', TType.STRING, 7)
      oprot.writeString(self.acctNumber)
      oprot.writeFieldEnd()
    if self.acctType is not None:
      oprot.writeFieldBegin('acctType', TType.STRING, 8)
      oprot.writeString(self.acctType)
      oprot.writeFieldEnd()
    if self.openingBank is not None:
      oprot.writeFieldBegin('openingBank', TType.STRING, 9)
      oprot.writeString(self.openingBank)
      oprot.writeFieldEnd()
    if self.isDelete is not None:
      oprot.writeFieldBegin('isDelete', TType.BOOL, 10)
      oprot.writeBool(self.isDelete)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.id)
    value = (value * 31) ^ hash(self.createTime)
    value = (value * 31) ^ hash(self.clientId)
    value = (value * 31) ^ hash(self.merchantId)
    value = (value * 31) ^ hash(self.outletId)
    value = (value * 31) ^ hash(self.acctName)
    value = (value * 31) ^ hash(self.acctNumber)
    value = (value * 31) ^ hash(self.acctType)
    value = (value * 31) ^ hash(self.openingBank)
    value = (value * 31) ^ hash(self.isDelete)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
