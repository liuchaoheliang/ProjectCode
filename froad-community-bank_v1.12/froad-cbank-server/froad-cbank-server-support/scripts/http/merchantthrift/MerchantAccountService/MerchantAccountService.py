#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
import BizMonitor.BizMonitorService
from ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class Iface(BizMonitor.BizMonitorService.Iface):
  """
  MerchantAccountService
  """
  def addMerchantAccount(self, merchantAccountVo):
    """

    Parameters:
     - merchantAccountVo
    """
    pass

  def deleteMerchantAccount(self, merchantAccountVo):
    """
    @param merchantAccount
    @return boolean

    Parameters:
     - merchantAccountVo
    """
    pass

  def updateMerchantAccount(self, merchantAccountVo):
    """
    @param merchantAccount
    @return boolean

    Parameters:
     - merchantAccountVo
    """
    pass

  def getMerchantAccount(self, merchantAccountVo):
    """
    @param merchantAccount
    @return List<MerchantAccountVo>

    Parameters:
     - merchantAccountVo
    """
    pass

  def getMerchantAccountByKeyAndOutletId(self, key, merchantId_outletId):
    """

    Parameters:
     - key
     - merchantId_outletId
    """
    pass

  def getMerchantAccountByPage(self, page, merchantAccountVo):
    """
    @param merchantAccount
    @return List<MerchantAccountVo>

    Parameters:
     - page
     - merchantAccountVo
    """
    pass


class Client(BizMonitor.BizMonitorService.Client, Iface):
  """
  MerchantAccountService
  """
  def __init__(self, iprot, oprot=None):
    BizMonitor.BizMonitorService.Client.__init__(self, iprot, oprot)

  def addMerchantAccount(self, merchantAccountVo):
    """

    Parameters:
     - merchantAccountVo
    """
    self.send_addMerchantAccount(merchantAccountVo)
    return self.recv_addMerchantAccount()

  def send_addMerchantAccount(self, merchantAccountVo):
    self._oprot.writeMessageBegin('addMerchantAccount', TMessageType.CALL, self._seqid)
    args = addMerchantAccount_args()
    args.merchantAccountVo = merchantAccountVo
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_addMerchantAccount(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = addMerchantAccount_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "addMerchantAccount failed: unknown result");

  def deleteMerchantAccount(self, merchantAccountVo):
    """
    @param merchantAccount
    @return boolean

    Parameters:
     - merchantAccountVo
    """
    self.send_deleteMerchantAccount(merchantAccountVo)
    return self.recv_deleteMerchantAccount()

  def send_deleteMerchantAccount(self, merchantAccountVo):
    self._oprot.writeMessageBegin('deleteMerchantAccount', TMessageType.CALL, self._seqid)
    args = deleteMerchantAccount_args()
    args.merchantAccountVo = merchantAccountVo
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_deleteMerchantAccount(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = deleteMerchantAccount_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "deleteMerchantAccount failed: unknown result");

  def updateMerchantAccount(self, merchantAccountVo):
    """
    @param merchantAccount
    @return boolean

    Parameters:
     - merchantAccountVo
    """
    self.send_updateMerchantAccount(merchantAccountVo)
    return self.recv_updateMerchantAccount()

  def send_updateMerchantAccount(self, merchantAccountVo):
    self._oprot.writeMessageBegin('updateMerchantAccount', TMessageType.CALL, self._seqid)
    args = updateMerchantAccount_args()
    args.merchantAccountVo = merchantAccountVo
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_updateMerchantAccount(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = updateMerchantAccount_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "updateMerchantAccount failed: unknown result");

  def getMerchantAccount(self, merchantAccountVo):
    """
    @param merchantAccount
    @return List<MerchantAccountVo>

    Parameters:
     - merchantAccountVo
    """
    self.send_getMerchantAccount(merchantAccountVo)
    return self.recv_getMerchantAccount()

  def send_getMerchantAccount(self, merchantAccountVo):
    self._oprot.writeMessageBegin('getMerchantAccount', TMessageType.CALL, self._seqid)
    args = getMerchantAccount_args()
    args.merchantAccountVo = merchantAccountVo
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getMerchantAccount(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getMerchantAccount_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getMerchantAccount failed: unknown result");

  def getMerchantAccountByKeyAndOutletId(self, key, merchantId_outletId):
    """

    Parameters:
     - key
     - merchantId_outletId
    """
    self.send_getMerchantAccountByKeyAndOutletId(key, merchantId_outletId)
    return self.recv_getMerchantAccountByKeyAndOutletId()

  def send_getMerchantAccountByKeyAndOutletId(self, key, merchantId_outletId):
    self._oprot.writeMessageBegin('getMerchantAccountByKeyAndOutletId', TMessageType.CALL, self._seqid)
    args = getMerchantAccountByKeyAndOutletId_args()
    args.key = key
    args.merchantId_outletId = merchantId_outletId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getMerchantAccountByKeyAndOutletId(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getMerchantAccountByKeyAndOutletId_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getMerchantAccountByKeyAndOutletId failed: unknown result");

  def getMerchantAccountByPage(self, page, merchantAccountVo):
    """
    @param merchantAccount
    @return List<MerchantAccountVo>

    Parameters:
     - page
     - merchantAccountVo
    """
    self.send_getMerchantAccountByPage(page, merchantAccountVo)
    return self.recv_getMerchantAccountByPage()

  def send_getMerchantAccountByPage(self, page, merchantAccountVo):
    self._oprot.writeMessageBegin('getMerchantAccountByPage', TMessageType.CALL, self._seqid)
    args = getMerchantAccountByPage_args()
    args.page = page
    args.merchantAccountVo = merchantAccountVo
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getMerchantAccountByPage(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getMerchantAccountByPage_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getMerchantAccountByPage failed: unknown result");


class Processor(BizMonitor.BizMonitorService.Processor, Iface, TProcessor):
  def __init__(self, handler):
    BizMonitor.BizMonitorService.Processor.__init__(self, handler)
    self._processMap["addMerchantAccount"] = Processor.process_addMerchantAccount
    self._processMap["deleteMerchantAccount"] = Processor.process_deleteMerchantAccount
    self._processMap["updateMerchantAccount"] = Processor.process_updateMerchantAccount
    self._processMap["getMerchantAccount"] = Processor.process_getMerchantAccount
    self._processMap["getMerchantAccountByKeyAndOutletId"] = Processor.process_getMerchantAccountByKeyAndOutletId
    self._processMap["getMerchantAccountByPage"] = Processor.process_getMerchantAccountByPage

  def process(self, iprot, oprot):
    (name, type, seqid) = iprot.readMessageBegin()
    if name not in self._processMap:
      iprot.skip(TType.STRUCT)
      iprot.readMessageEnd()
      x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
      oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
      x.write(oprot)
      oprot.writeMessageEnd()
      oprot.trans.flush()
      return
    else:
      self._processMap[name](self, seqid, iprot, oprot)
    return True

  def process_addMerchantAccount(self, seqid, iprot, oprot):
    args = addMerchantAccount_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = addMerchantAccount_result()
    result.success = self._handler.addMerchantAccount(args.merchantAccountVo)
    oprot.writeMessageBegin("addMerchantAccount", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_deleteMerchantAccount(self, seqid, iprot, oprot):
    args = deleteMerchantAccount_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = deleteMerchantAccount_result()
    result.success = self._handler.deleteMerchantAccount(args.merchantAccountVo)
    oprot.writeMessageBegin("deleteMerchantAccount", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_updateMerchantAccount(self, seqid, iprot, oprot):
    args = updateMerchantAccount_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = updateMerchantAccount_result()
    result.success = self._handler.updateMerchantAccount(args.merchantAccountVo)
    oprot.writeMessageBegin("updateMerchantAccount", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getMerchantAccount(self, seqid, iprot, oprot):
    args = getMerchantAccount_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getMerchantAccount_result()
    result.success = self._handler.getMerchantAccount(args.merchantAccountVo)
    oprot.writeMessageBegin("getMerchantAccount", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getMerchantAccountByKeyAndOutletId(self, seqid, iprot, oprot):
    args = getMerchantAccountByKeyAndOutletId_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getMerchantAccountByKeyAndOutletId_result()
    result.success = self._handler.getMerchantAccountByKeyAndOutletId(args.key, args.merchantId_outletId)
    oprot.writeMessageBegin("getMerchantAccountByKeyAndOutletId", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getMerchantAccountByPage(self, seqid, iprot, oprot):
    args = getMerchantAccountByPage_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getMerchantAccountByPage_result()
    result.success = self._handler.getMerchantAccountByPage(args.page, args.merchantAccountVo)
    oprot.writeMessageBegin("getMerchantAccountByPage", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()


# HELPER FUNCTIONS AND STRUCTURES

class addMerchantAccount_args:
  """
  Attributes:
   - merchantAccountVo
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'merchantAccountVo', (MerchantAccountVo.ttypes.MerchantAccountVo, MerchantAccountVo.ttypes.MerchantAccountVo.thrift_spec), None, ), # 1
  )

  def __init__(self, merchantAccountVo=None,):
    self.merchantAccountVo = merchantAccountVo

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.merchantAccountVo = MerchantAccountVo.ttypes.MerchantAccountVo()
          self.merchantAccountVo.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('addMerchantAccount_args')
    if self.merchantAccountVo is not None:
      oprot.writeFieldBegin('merchantAccountVo', TType.STRUCT, 1)
      self.merchantAccountVo.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.merchantAccountVo)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class addMerchantAccount_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('addMerchantAccount_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class deleteMerchantAccount_args:
  """
  Attributes:
   - merchantAccountVo
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'merchantAccountVo', (MerchantAccountVo.ttypes.MerchantAccountVo, MerchantAccountVo.ttypes.MerchantAccountVo.thrift_spec), None, ), # 1
  )

  def __init__(self, merchantAccountVo=None,):
    self.merchantAccountVo = merchantAccountVo

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.merchantAccountVo = MerchantAccountVo.ttypes.MerchantAccountVo()
          self.merchantAccountVo.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('deleteMerchantAccount_args')
    if self.merchantAccountVo is not None:
      oprot.writeFieldBegin('merchantAccountVo', TType.STRUCT, 1)
      self.merchantAccountVo.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.merchantAccountVo)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class deleteMerchantAccount_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('deleteMerchantAccount_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class updateMerchantAccount_args:
  """
  Attributes:
   - merchantAccountVo
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'merchantAccountVo', (MerchantAccountVo.ttypes.MerchantAccountVo, MerchantAccountVo.ttypes.MerchantAccountVo.thrift_spec), None, ), # 1
  )

  def __init__(self, merchantAccountVo=None,):
    self.merchantAccountVo = merchantAccountVo

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.merchantAccountVo = MerchantAccountVo.ttypes.MerchantAccountVo()
          self.merchantAccountVo.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('updateMerchantAccount_args')
    if self.merchantAccountVo is not None:
      oprot.writeFieldBegin('merchantAccountVo', TType.STRUCT, 1)
      self.merchantAccountVo.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.merchantAccountVo)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class updateMerchantAccount_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('updateMerchantAccount_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getMerchantAccount_args:
  """
  Attributes:
   - merchantAccountVo
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'merchantAccountVo', (MerchantAccountVo.ttypes.MerchantAccountVo, MerchantAccountVo.ttypes.MerchantAccountVo.thrift_spec), None, ), # 1
  )

  def __init__(self, merchantAccountVo=None,):
    self.merchantAccountVo = merchantAccountVo

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.merchantAccountVo = MerchantAccountVo.ttypes.MerchantAccountVo()
          self.merchantAccountVo.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getMerchantAccount_args')
    if self.merchantAccountVo is not None:
      oprot.writeFieldBegin('merchantAccountVo', TType.STRUCT, 1)
      self.merchantAccountVo.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.merchantAccountVo)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getMerchantAccount_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT,(MerchantAccountVo.ttypes.MerchantAccountVo, MerchantAccountVo.ttypes.MerchantAccountVo.thrift_spec)), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = MerchantAccountVo.ttypes.MerchantAccountVo()
            _elem5.read(iprot)
            self.success.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getMerchantAccount_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRUCT, len(self.success))
      for iter6 in self.success:
        iter6.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getMerchantAccountByKeyAndOutletId_args:
  """
  Attributes:
   - key
   - merchantId_outletId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'key', None, None, ), # 1
    (2, TType.STRING, 'merchantId_outletId', None, None, ), # 2
  )

  def __init__(self, key=None, merchantId_outletId=None,):
    self.key = key
    self.merchantId_outletId = merchantId_outletId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.key = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.merchantId_outletId = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getMerchantAccountByKeyAndOutletId_args')
    if self.key is not None:
      oprot.writeFieldBegin('key', TType.STRING, 1)
      oprot.writeString(self.key)
      oprot.writeFieldEnd()
    if self.merchantId_outletId is not None:
      oprot.writeFieldBegin('merchantId_outletId', TType.STRING, 2)
      oprot.writeString(self.merchantId_outletId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.key)
    value = (value * 31) ^ hash(self.merchantId_outletId)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getMerchantAccountByKeyAndOutletId_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRING, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRING:
          self.success = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getMerchantAccountByKeyAndOutletId_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRING, 0)
      oprot.writeString(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getMerchantAccountByPage_args:
  """
  Attributes:
   - page
   - merchantAccountVo
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'page', (Common.ttypes.PageVo, Common.ttypes.PageVo.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'merchantAccountVo', (MerchantAccountVo.ttypes.MerchantAccountVo, MerchantAccountVo.ttypes.MerchantAccountVo.thrift_spec), None, ), # 2
  )

  def __init__(self, page=None, merchantAccountVo=None,):
    self.page = page
    self.merchantAccountVo = merchantAccountVo

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.page = Common.ttypes.PageVo()
          self.page.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.merchantAccountVo = MerchantAccountVo.ttypes.MerchantAccountVo()
          self.merchantAccountVo.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getMerchantAccountByPage_args')
    if self.page is not None:
      oprot.writeFieldBegin('page', TType.STRUCT, 1)
      self.page.write(oprot)
      oprot.writeFieldEnd()
    if self.merchantAccountVo is not None:
      oprot.writeFieldBegin('merchantAccountVo', TType.STRUCT, 2)
      self.merchantAccountVo.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.page)
    value = (value * 31) ^ hash(self.merchantAccountVo)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getMerchantAccountByPage_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (MerchantAccountServiceVo.ttypes.MerchantAccountPageVoRes, MerchantAccountServiceVo.ttypes.MerchantAccountPageVoRes.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = MerchantAccountServiceVo.ttypes.MerchantAccountPageVoRes()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getMerchantAccountByPage_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
