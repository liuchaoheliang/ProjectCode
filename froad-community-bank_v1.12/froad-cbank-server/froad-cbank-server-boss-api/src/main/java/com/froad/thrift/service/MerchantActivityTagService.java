/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-1-12")
public class MerchantActivityTagService {

  public interface Iface extends com.froad.thrift.monitor.service.BizMonitorService.Iface {

    /**
     * 推荐活动列表分页查询
     * 
     * @param vo
     * @param pageVo
     */
    public com.froad.thrift.vo.recommendactivitytag.RecommendActivityTagPageVo findMerchantTagByPage(com.froad.thrift.vo.recommendactivitytag.RecommendActivityTagVo vo, com.froad.thrift.vo.PageVo pageVo) throws org.apache.thrift.TException;

    /**
     * 推荐活动列表详情查询(operator:当前操作员用户名)
     * 
     * @param reqVo
     */
    public com.froad.thrift.vo.recommendactivitytag.MerchantActivityTagDetailResVo findMerchantTagDetail(com.froad.thrift.vo.recommendactivitytag.MerchantActivityTagDetailReqVo reqVo) throws org.apache.thrift.TException;

    /**
     * 关联商户信息分页查询
     * 
     * @param pageReqVo
     */
    public com.froad.thrift.vo.recommendactivitytag.MerchantWeightActivityTagPageVo findRelateMerchantInfoByPage(com.froad.thrift.vo.recommendactivitytag.MerchantWeightActivityTagPageReqVo pageReqVo) throws org.apache.thrift.TException;

    /**
     * 启用/禁用商户推荐活动标签
     * 
     * @param reqVo
     */
    public com.froad.thrift.vo.ResultVo enableMerchantRecommendActivityTag(com.froad.thrift.vo.recommendactivitytag.EnableMerchantActivityReqVo reqVo) throws org.apache.thrift.TException;

    /**
     * 调整关联商户权重
     * 
     * @param reqVo
     */
    public com.froad.thrift.vo.ResultVo adjustMerchantWeight(com.froad.thrift.vo.recommendactivitytag.AdjustMerchantWeightReqVo reqVo) throws org.apache.thrift.TException;

    /**
     * 删除关联商户
     * 
     * @param reqVo
     */
    public com.froad.thrift.vo.ResultVo deleteRelateMerchant(com.froad.thrift.vo.recommendactivitytag.DeleteRelateMerchantReqVo reqVo) throws org.apache.thrift.TException;

    /**
     * 添加商户推荐活动标签信息
     * 
     * @param recommendVo
     */
    public com.froad.thrift.vo.ResultVo addMerchantActivityTag(com.froad.thrift.vo.recommendactivitytag.RecommendActivityTagVo recommendVo) throws org.apache.thrift.TException;

    /**
     * 更新商户推荐活动标签信息
     * 
     * @param recommendVo
     */
    public com.froad.thrift.vo.ResultVo updateMerchantActivityTag(com.froad.thrift.vo.recommendactivitytag.RecommendActivityTagVo recommendVo) throws org.apache.thrift.TException;

    /**
     * 关联商户
     * 
     * @param vo
     */
    public com.froad.thrift.vo.ResultVo relateMerchantInfo(com.froad.thrift.vo.recommendactivitytag.RelateMerchantActivityVo vo) throws org.apache.thrift.TException;

    /**
     * 批量导入关联商户
     * 
     * @param reqVo
     */
    public com.froad.thrift.vo.ResultVo inputRelateMerchantInfo(com.froad.thrift.vo.recommendactivitytag.InputRelateMerchantActivityReqVo reqVo) throws org.apache.thrift.TException;

    /**
     * 根据营业执照查询商户名称
     * 
     * @param clientId
     * @param license
     */
    public com.froad.thrift.vo.recommendactivitytag.MerchantNameResVo queryMerchantNameByLicense(String clientId, String license) throws org.apache.thrift.TException;

    /**
     * 导出关联商户标签信息
     * 
     * @param reqVo
     */
    public com.froad.thrift.vo.ExportResultRes exportMerchantRelateActivityTag(com.froad.thrift.vo.recommendactivitytag.ExportRelateActivityTagReqVo reqVo) throws org.apache.thrift.TException;

  }

  public interface AsyncIface extends com.froad.thrift.monitor.service.BizMonitorService .AsyncIface {

    public void findMerchantTagByPage(com.froad.thrift.vo.recommendactivitytag.RecommendActivityTagVo vo, com.froad.thrift.vo.PageVo pageVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void findMerchantTagDetail(com.froad.thrift.vo.recommendactivitytag.MerchantActivityTagDetailReqVo reqVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void findRelateMerchantInfoByPage(com.froad.thrift.vo.recommendactivitytag.MerchantWeightActivityTagPageReqVo pageReqVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void enableMerchantRecommendActivityTag(com.froad.thrift.vo.recommendactivitytag.EnableMerchantActivityReqVo reqVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void adjustMerchantWeight(com.froad.thrift.vo.recommendactivitytag.AdjustMerchantWeightReqVo reqVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteRelateMerchant(com.froad.thrift.vo.recommendactivitytag.DeleteRelateMerchantReqVo reqVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addMerchantActivityTag(com.froad.thrift.vo.recommendactivitytag.RecommendActivityTagVo recommendVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateMerchantActivityTag(com.froad.thrift.vo.recommendactivitytag.RecommendActivityTagVo recommendVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void relateMerchantInfo(com.froad.thrift.vo.recommendactivitytag.RelateMerchantActivityVo vo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void inputRelateMerchantInfo(com.froad.thrift.vo.recommendactivitytag.InputRelateMerchantActivityReqVo reqVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryMerchantNameByLicense(String clientId, String license, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void exportMerchantRelateActivityTag(com.froad.thrift.vo.recommendactivitytag.ExportRelateActivityTagReqVo reqVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends com.froad.thrift.monitor.service.BizMonitorService.Client implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public com.froad.thrift.vo.recommendactivitytag.RecommendActivityTagPageVo findMerchantTagByPage(com.froad.thrift.vo.recommendactivitytag.RecommendActivityTagVo vo, com.froad.thrift.vo.PageVo pageVo) throws org.apache.thrift.TException
    {
      send_findMerchantTagByPage(vo, pageVo);
      return recv_findMerchantTagByPage();
    }

    public void send_findMerchantTagByPage(com.froad.thrift.vo.recommendactivitytag.RecommendActivityTagVo vo, com.froad.thrift.vo.PageVo pageVo) throws org.apache.thrift.TException
    {
      findMerchantTagByPage_args args = new findMerchantTagByPage_args();
      args.setVo(vo);
      args.setPageVo(pageVo);
      sendBase("findMerchantTagByPage", args);
    }

    public com.froad.thrift.vo.recommendactivitytag.RecommendActivityTagPageVo recv_findMerchantTagByPage() throws org.apache.thrift.TException
    {
      findMerchantTagByPage_result result = new findMerchantTagByPage_result();
      receiveBase(result, "findMerchantTagByPage");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findMerchantTagByPage failed: unknown result");
    }

    public com.froad.thrift.vo.recommendactivitytag.MerchantActivityTagDetailResVo findMerchantTagDetail(com.froad.thrift.vo.recommendactivitytag.MerchantActivityTagDetailReqVo reqVo) throws org.apache.thrift.TException
    {
      send_findMerchantTagDetail(reqVo);
      return recv_findMerchantTagDetail();
    }

    public void send_findMerchantTagDetail(com.froad.thrift.vo.recommendactivitytag.MerchantActivityTagDetailReqVo reqVo) throws org.apache.thrift.TException
    {
      findMerchantTagDetail_args args = new findMerchantTagDetail_args();
      args.setReqVo(reqVo);
      sendBase("findMerchantTagDetail", args);
    }

    public com.froad.thrift.vo.recommendactivitytag.MerchantActivityTagDetailResVo recv_findMerchantTagDetail() throws org.apache.thrift.TException
    {
      findMerchantTagDetail_result result = new findMerchantTagDetail_result();
      receiveBase(result, "findMerchantTagDetail");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findMerchantTagDetail failed: unknown result");
    }

    public com.froad.thrift.vo.recommendactivitytag.MerchantWeightActivityTagPageVo findRelateMerchantInfoByPage(com.froad.thrift.vo.recommendactivitytag.MerchantWeightActivityTagPageReqVo pageReqVo) throws org.apache.thrift.TException
    {
      send_findRelateMerchantInfoByPage(pageReqVo);
      return recv_findRelateMerchantInfoByPage();
    }

    public void send_findRelateMerchantInfoByPage(com.froad.thrift.vo.recommendactivitytag.MerchantWeightActivityTagPageReqVo pageReqVo) throws org.apache.thrift.TException
    {
      findRelateMerchantInfoByPage_args args = new findRelateMerchantInfoByPage_args();
      args.setPageReqVo(pageReqVo);
      sendBase("findRelateMerchantInfoByPage", args);
    }

    public com.froad.thrift.vo.recommendactivitytag.MerchantWeightActivityTagPageVo recv_findRelateMerchantInfoByPage() throws org.apache.thrift.TException
    {
      findRelateMerchantInfoByPage_result result = new findRelateMerchantInfoByPage_result();
      receiveBase(result, "findRelateMerchantInfoByPage");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findRelateMerchantInfoByPage failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo enableMerchantRecommendActivityTag(com.froad.thrift.vo.recommendactivitytag.EnableMerchantActivityReqVo reqVo) throws org.apache.thrift.TException
    {
      send_enableMerchantRecommendActivityTag(reqVo);
      return recv_enableMerchantRecommendActivityTag();
    }

    public void send_enableMerchantRecommendActivityTag(com.froad.thrift.vo.recommendactivitytag.EnableMerchantActivityReqVo reqVo) throws org.apache.thrift.TException
    {
      enableMerchantRecommendActivityTag_args args = new enableMerchantRecommendActivityTag_args();
      args.setReqVo(reqVo);
      sendBase("enableMerchantRecommendActivityTag", args);
    }

    public com.froad.thrift.vo.ResultVo recv_enableMerchantRecommendActivityTag() throws org.apache.thrift.TException
    {
      enableMerchantRecommendActivityTag_result result = new enableMerchantRecommendActivityTag_result();
      receiveBase(result, "enableMerchantRecommendActivityTag");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "enableMerchantRecommendActivityTag failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo adjustMerchantWeight(com.froad.thrift.vo.recommendactivitytag.AdjustMerchantWeightReqVo reqVo) throws org.apache.thrift.TException
    {
      send_adjustMerchantWeight(reqVo);
      return recv_adjustMerchantWeight();
    }

    public void send_adjustMerchantWeight(com.froad.thrift.vo.recommendactivitytag.AdjustMerchantWeightReqVo reqVo) throws org.apache.thrift.TException
    {
      adjustMerchantWeight_args args = new adjustMerchantWeight_args();
      args.setReqVo(reqVo);
      sendBase("adjustMerchantWeight", args);
    }

    public com.froad.thrift.vo.ResultVo recv_adjustMerchantWeight() throws org.apache.thrift.TException
    {
      adjustMerchantWeight_result result = new adjustMerchantWeight_result();
      receiveBase(result, "adjustMerchantWeight");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "adjustMerchantWeight failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo deleteRelateMerchant(com.froad.thrift.vo.recommendactivitytag.DeleteRelateMerchantReqVo reqVo) throws org.apache.thrift.TException
    {
      send_deleteRelateMerchant(reqVo);
      return recv_deleteRelateMerchant();
    }

    public void send_deleteRelateMerchant(com.froad.thrift.vo.recommendactivitytag.DeleteRelateMerchantReqVo reqVo) throws org.apache.thrift.TException
    {
      deleteRelateMerchant_args args = new deleteRelateMerchant_args();
      args.setReqVo(reqVo);
      sendBase("deleteRelateMerchant", args);
    }

    public com.froad.thrift.vo.ResultVo recv_deleteRelateMerchant() throws org.apache.thrift.TException
    {
      deleteRelateMerchant_result result = new deleteRelateMerchant_result();
      receiveBase(result, "deleteRelateMerchant");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteRelateMerchant failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo addMerchantActivityTag(com.froad.thrift.vo.recommendactivitytag.RecommendActivityTagVo recommendVo) throws org.apache.thrift.TException
    {
      send_addMerchantActivityTag(recommendVo);
      return recv_addMerchantActivityTag();
    }

    public void send_addMerchantActivityTag(com.froad.thrift.vo.recommendactivitytag.RecommendActivityTagVo recommendVo) throws org.apache.thrift.TException
    {
      addMerchantActivityTag_args args = new addMerchantActivityTag_args();
      args.setRecommendVo(recommendVo);
      sendBase("addMerchantActivityTag", args);
    }

    public com.froad.thrift.vo.ResultVo recv_addMerchantActivityTag() throws org.apache.thrift.TException
    {
      addMerchantActivityTag_result result = new addMerchantActivityTag_result();
      receiveBase(result, "addMerchantActivityTag");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addMerchantActivityTag failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo updateMerchantActivityTag(com.froad.thrift.vo.recommendactivitytag.RecommendActivityTagVo recommendVo) throws org.apache.thrift.TException
    {
      send_updateMerchantActivityTag(recommendVo);
      return recv_updateMerchantActivityTag();
    }

    public void send_updateMerchantActivityTag(com.froad.thrift.vo.recommendactivitytag.RecommendActivityTagVo recommendVo) throws org.apache.thrift.TException
    {
      updateMerchantActivityTag_args args = new updateMerchantActivityTag_args();
      args.setRecommendVo(recommendVo);
      sendBase("updateMerchantActivityTag", args);
    }

    public com.froad.thrift.vo.ResultVo recv_updateMerchantActivityTag() throws org.apache.thrift.TException
    {
      updateMerchantActivityTag_result result = new updateMerchantActivityTag_result();
      receiveBase(result, "updateMerchantActivityTag");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateMerchantActivityTag failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo relateMerchantInfo(com.froad.thrift.vo.recommendactivitytag.RelateMerchantActivityVo vo) throws org.apache.thrift.TException
    {
      send_relateMerchantInfo(vo);
      return recv_relateMerchantInfo();
    }

    public void send_relateMerchantInfo(com.froad.thrift.vo.recommendactivitytag.RelateMerchantActivityVo vo) throws org.apache.thrift.TException
    {
      relateMerchantInfo_args args = new relateMerchantInfo_args();
      args.setVo(vo);
      sendBase("relateMerchantInfo", args);
    }

    public com.froad.thrift.vo.ResultVo recv_relateMerchantInfo() throws org.apache.thrift.TException
    {
      relateMerchantInfo_result result = new relateMerchantInfo_result();
      receiveBase(result, "relateMerchantInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "relateMerchantInfo failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo inputRelateMerchantInfo(com.froad.thrift.vo.recommendactivitytag.InputRelateMerchantActivityReqVo reqVo) throws org.apache.thrift.TException
    {
      send_inputRelateMerchantInfo(reqVo);
      return recv_inputRelateMerchantInfo();
    }

    public void send_inputRelateMerchantInfo(com.froad.thrift.vo.recommendactivitytag.InputRelateMerchantActivityReqVo reqVo) throws org.apache.thrift.TException
    {
      inputRelateMerchantInfo_args args = new inputRelateMerchantInfo_args();
      args.setReqVo(reqVo);
      sendBase("inputRelateMerchantInfo", args);
    }

    public com.froad.thrift.vo.ResultVo recv_inputRelateMerchantInfo() throws org.apache.thrift.TException
    {
      inputRelateMerchantInfo_result result = new inputRelateMerchantInfo_result();
      receiveBase(result, "inputRelateMerchantInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "inputRelateMerchantInfo failed: unknown result");
    }

    public com.froad.thrift.vo.recommendactivitytag.MerchantNameResVo queryMerchantNameByLicense(String clientId, String license) throws org.apache.thrift.TException
    {
      send_queryMerchantNameByLicense(clientId, license);
      return recv_queryMerchantNameByLicense();
    }

    public void send_queryMerchantNameByLicense(String clientId, String license) throws org.apache.thrift.TException
    {
      queryMerchantNameByLicense_args args = new queryMerchantNameByLicense_args();
      args.setClientId(clientId);
      args.setLicense(license);
      sendBase("queryMerchantNameByLicense", args);
    }

    public com.froad.thrift.vo.recommendactivitytag.MerchantNameResVo recv_queryMerchantNameByLicense() throws org.apache.thrift.TException
    {
      queryMerchantNameByLicense_result result = new queryMerchantNameByLicense_result();
      receiveBase(result, "queryMerchantNameByLicense");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryMerchantNameByLicense failed: unknown result");
    }

    public com.froad.thrift.vo.ExportResultRes exportMerchantRelateActivityTag(com.froad.thrift.vo.recommendactivitytag.ExportRelateActivityTagReqVo reqVo) throws org.apache.thrift.TException
    {
      send_exportMerchantRelateActivityTag(reqVo);
      return recv_exportMerchantRelateActivityTag();
    }

    public void send_exportMerchantRelateActivityTag(com.froad.thrift.vo.recommendactivitytag.ExportRelateActivityTagReqVo reqVo) throws org.apache.thrift.TException
    {
      exportMerchantRelateActivityTag_args args = new exportMerchantRelateActivityTag_args();
      args.setReqVo(reqVo);
      sendBase("exportMerchantRelateActivityTag", args);
    }

    public com.froad.thrift.vo.ExportResultRes recv_exportMerchantRelateActivityTag() throws org.apache.thrift.TException
    {
      exportMerchantRelateActivityTag_result result = new exportMerchantRelateActivityTag_result();
      receiveBase(result, "exportMerchantRelateActivityTag");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "exportMerchantRelateActivityTag failed: unknown result");
    }

  }
  public static class AsyncClient extends com.froad.thrift.monitor.service.BizMonitorService.AsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void findMerchantTagByPage(com.froad.thrift.vo.recommendactivitytag.RecommendActivityTagVo vo, com.froad.thrift.vo.PageVo pageVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findMerchantTagByPage_call method_call = new findMerchantTagByPage_call(vo, pageVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findMerchantTagByPage_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.recommendactivitytag.RecommendActivityTagVo vo;
      private com.froad.thrift.vo.PageVo pageVo;
      public findMerchantTagByPage_call(com.froad.thrift.vo.recommendactivitytag.RecommendActivityTagVo vo, com.froad.thrift.vo.PageVo pageVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.vo = vo;
        this.pageVo = pageVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findMerchantTagByPage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findMerchantTagByPage_args args = new findMerchantTagByPage_args();
        args.setVo(vo);
        args.setPageVo(pageVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.recommendactivitytag.RecommendActivityTagPageVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findMerchantTagByPage();
      }
    }

    public void findMerchantTagDetail(com.froad.thrift.vo.recommendactivitytag.MerchantActivityTagDetailReqVo reqVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findMerchantTagDetail_call method_call = new findMerchantTagDetail_call(reqVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findMerchantTagDetail_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.recommendactivitytag.MerchantActivityTagDetailReqVo reqVo;
      public findMerchantTagDetail_call(com.froad.thrift.vo.recommendactivitytag.MerchantActivityTagDetailReqVo reqVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.reqVo = reqVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findMerchantTagDetail", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findMerchantTagDetail_args args = new findMerchantTagDetail_args();
        args.setReqVo(reqVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.recommendactivitytag.MerchantActivityTagDetailResVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findMerchantTagDetail();
      }
    }

    public void findRelateMerchantInfoByPage(com.froad.thrift.vo.recommendactivitytag.MerchantWeightActivityTagPageReqVo pageReqVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findRelateMerchantInfoByPage_call method_call = new findRelateMerchantInfoByPage_call(pageReqVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findRelateMerchantInfoByPage_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.recommendactivitytag.MerchantWeightActivityTagPageReqVo pageReqVo;
      public findRelateMerchantInfoByPage_call(com.froad.thrift.vo.recommendactivitytag.MerchantWeightActivityTagPageReqVo pageReqVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pageReqVo = pageReqVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findRelateMerchantInfoByPage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findRelateMerchantInfoByPage_args args = new findRelateMerchantInfoByPage_args();
        args.setPageReqVo(pageReqVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.recommendactivitytag.MerchantWeightActivityTagPageVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findRelateMerchantInfoByPage();
      }
    }

    public void enableMerchantRecommendActivityTag(com.froad.thrift.vo.recommendactivitytag.EnableMerchantActivityReqVo reqVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      enableMerchantRecommendActivityTag_call method_call = new enableMerchantRecommendActivityTag_call(reqVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class enableMerchantRecommendActivityTag_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.recommendactivitytag.EnableMerchantActivityReqVo reqVo;
      public enableMerchantRecommendActivityTag_call(com.froad.thrift.vo.recommendactivitytag.EnableMerchantActivityReqVo reqVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.reqVo = reqVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("enableMerchantRecommendActivityTag", org.apache.thrift.protocol.TMessageType.CALL, 0));
        enableMerchantRecommendActivityTag_args args = new enableMerchantRecommendActivityTag_args();
        args.setReqVo(reqVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_enableMerchantRecommendActivityTag();
      }
    }

    public void adjustMerchantWeight(com.froad.thrift.vo.recommendactivitytag.AdjustMerchantWeightReqVo reqVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      adjustMerchantWeight_call method_call = new adjustMerchantWeight_call(reqVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class adjustMerchantWeight_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.recommendactivitytag.AdjustMerchantWeightReqVo reqVo;
      public adjustMerchantWeight_call(com.froad.thrift.vo.recommendactivitytag.AdjustMerchantWeightReqVo reqVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.reqVo = reqVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("adjustMerchantWeight", org.apache.thrift.protocol.TMessageType.CALL, 0));
        adjustMerchantWeight_args args = new adjustMerchantWeight_args();
        args.setReqVo(reqVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_adjustMerchantWeight();
      }
    }

    public void deleteRelateMerchant(com.froad.thrift.vo.recommendactivitytag.DeleteRelateMerchantReqVo reqVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteRelateMerchant_call method_call = new deleteRelateMerchant_call(reqVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteRelateMerchant_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.recommendactivitytag.DeleteRelateMerchantReqVo reqVo;
      public deleteRelateMerchant_call(com.froad.thrift.vo.recommendactivitytag.DeleteRelateMerchantReqVo reqVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.reqVo = reqVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteRelateMerchant", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteRelateMerchant_args args = new deleteRelateMerchant_args();
        args.setReqVo(reqVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteRelateMerchant();
      }
    }

    public void addMerchantActivityTag(com.froad.thrift.vo.recommendactivitytag.RecommendActivityTagVo recommendVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addMerchantActivityTag_call method_call = new addMerchantActivityTag_call(recommendVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addMerchantActivityTag_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.recommendactivitytag.RecommendActivityTagVo recommendVo;
      public addMerchantActivityTag_call(com.froad.thrift.vo.recommendactivitytag.RecommendActivityTagVo recommendVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.recommendVo = recommendVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addMerchantActivityTag", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addMerchantActivityTag_args args = new addMerchantActivityTag_args();
        args.setRecommendVo(recommendVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addMerchantActivityTag();
      }
    }

    public void updateMerchantActivityTag(com.froad.thrift.vo.recommendactivitytag.RecommendActivityTagVo recommendVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateMerchantActivityTag_call method_call = new updateMerchantActivityTag_call(recommendVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateMerchantActivityTag_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.recommendactivitytag.RecommendActivityTagVo recommendVo;
      public updateMerchantActivityTag_call(com.froad.thrift.vo.recommendactivitytag.RecommendActivityTagVo recommendVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.recommendVo = recommendVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateMerchantActivityTag", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateMerchantActivityTag_args args = new updateMerchantActivityTag_args();
        args.setRecommendVo(recommendVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateMerchantActivityTag();
      }
    }

    public void relateMerchantInfo(com.froad.thrift.vo.recommendactivitytag.RelateMerchantActivityVo vo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      relateMerchantInfo_call method_call = new relateMerchantInfo_call(vo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class relateMerchantInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.recommendactivitytag.RelateMerchantActivityVo vo;
      public relateMerchantInfo_call(com.froad.thrift.vo.recommendactivitytag.RelateMerchantActivityVo vo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.vo = vo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("relateMerchantInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        relateMerchantInfo_args args = new relateMerchantInfo_args();
        args.setVo(vo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_relateMerchantInfo();
      }
    }

    public void inputRelateMerchantInfo(com.froad.thrift.vo.recommendactivitytag.InputRelateMerchantActivityReqVo reqVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      inputRelateMerchantInfo_call method_call = new inputRelateMerchantInfo_call(reqVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class inputRelateMerchantInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.recommendactivitytag.InputRelateMerchantActivityReqVo reqVo;
      public inputRelateMerchantInfo_call(com.froad.thrift.vo.recommendactivitytag.InputRelateMerchantActivityReqVo reqVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.reqVo = reqVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("inputRelateMerchantInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        inputRelateMerchantInfo_args args = new inputRelateMerchantInfo_args();
        args.setReqVo(reqVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_inputRelateMerchantInfo();
      }
    }

    public void queryMerchantNameByLicense(String clientId, String license, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryMerchantNameByLicense_call method_call = new queryMerchantNameByLicense_call(clientId, license, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryMerchantNameByLicense_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String clientId;
      private String license;
      public queryMerchantNameByLicense_call(String clientId, String license, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.clientId = clientId;
        this.license = license;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryMerchantNameByLicense", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryMerchantNameByLicense_args args = new queryMerchantNameByLicense_args();
        args.setClientId(clientId);
        args.setLicense(license);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.recommendactivitytag.MerchantNameResVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryMerchantNameByLicense();
      }
    }

    public void exportMerchantRelateActivityTag(com.froad.thrift.vo.recommendactivitytag.ExportRelateActivityTagReqVo reqVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      exportMerchantRelateActivityTag_call method_call = new exportMerchantRelateActivityTag_call(reqVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class exportMerchantRelateActivityTag_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.recommendactivitytag.ExportRelateActivityTagReqVo reqVo;
      public exportMerchantRelateActivityTag_call(com.froad.thrift.vo.recommendactivitytag.ExportRelateActivityTagReqVo reqVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.reqVo = reqVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("exportMerchantRelateActivityTag", org.apache.thrift.protocol.TMessageType.CALL, 0));
        exportMerchantRelateActivityTag_args args = new exportMerchantRelateActivityTag_args();
        args.setReqVo(reqVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ExportResultRes getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_exportMerchantRelateActivityTag();
      }
    }

  }

  public static class Processor<I extends Iface> extends com.froad.thrift.monitor.service.BizMonitorService.Processor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("findMerchantTagByPage", new findMerchantTagByPage());
      processMap.put("findMerchantTagDetail", new findMerchantTagDetail());
      processMap.put("findRelateMerchantInfoByPage", new findRelateMerchantInfoByPage());
      processMap.put("enableMerchantRecommendActivityTag", new enableMerchantRecommendActivityTag());
      processMap.put("adjustMerchantWeight", new adjustMerchantWeight());
      processMap.put("deleteRelateMerchant", new deleteRelateMerchant());
      processMap.put("addMerchantActivityTag", new addMerchantActivityTag());
      processMap.put("updateMerchantActivityTag", new updateMerchantActivityTag());
      processMap.put("relateMerchantInfo", new relateMerchantInfo());
      processMap.put("inputRelateMerchantInfo", new inputRelateMerchantInfo());
      processMap.put("queryMerchantNameByLicense", new queryMerchantNameByLicense());
      processMap.put("exportMerchantRelateActivityTag", new exportMerchantRelateActivityTag());
      return processMap;
    }

    public static class findMerchantTagByPage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findMerchantTagByPage_args> {
      public findMerchantTagByPage() {
        super("findMerchantTagByPage");
      }

      public findMerchantTagByPage_args getEmptyArgsInstance() {
        return new findMerchantTagByPage_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findMerchantTagByPage_result getResult(I iface, findMerchantTagByPage_args args) throws org.apache.thrift.TException {
        findMerchantTagByPage_result result = new findMerchantTagByPage_result();
        result.success = iface.findMerchantTagByPage(args.vo, args.pageVo);
        return result;
      }
    }

    public static class findMerchantTagDetail<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findMerchantTagDetail_args> {
      public findMerchantTagDetail() {
        super("findMerchantTagDetail");
      }

      public findMerchantTagDetail_args getEmptyArgsInstance() {
        return new findMerchantTagDetail_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findMerchantTagDetail_result getResult(I iface, findMerchantTagDetail_args args) throws org.apache.thrift.TException {
        findMerchantTagDetail_result result = new findMerchantTagDetail_result();
        result.success = iface.findMerchantTagDetail(args.reqVo);
        return result;
      }
    }

    public static class findRelateMerchantInfoByPage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findRelateMerchantInfoByPage_args> {
      public findRelateMerchantInfoByPage() {
        super("findRelateMerchantInfoByPage");
      }

      public findRelateMerchantInfoByPage_args getEmptyArgsInstance() {
        return new findRelateMerchantInfoByPage_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findRelateMerchantInfoByPage_result getResult(I iface, findRelateMerchantInfoByPage_args args) throws org.apache.thrift.TException {
        findRelateMerchantInfoByPage_result result = new findRelateMerchantInfoByPage_result();
        result.success = iface.findRelateMerchantInfoByPage(args.pageReqVo);
        return result;
      }
    }

    public static class enableMerchantRecommendActivityTag<I extends Iface> extends org.apache.thrift.ProcessFunction<I, enableMerchantRecommendActivityTag_args> {
      public enableMerchantRecommendActivityTag() {
        super("enableMerchantRecommendActivityTag");
      }

      public enableMerchantRecommendActivityTag_args getEmptyArgsInstance() {
        return new enableMerchantRecommendActivityTag_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public enableMerchantRecommendActivityTag_result getResult(I iface, enableMerchantRecommendActivityTag_args args) throws org.apache.thrift.TException {
        enableMerchantRecommendActivityTag_result result = new enableMerchantRecommendActivityTag_result();
        result.success = iface.enableMerchantRecommendActivityTag(args.reqVo);
        return result;
      }
    }

    public static class adjustMerchantWeight<I extends Iface> extends org.apache.thrift.ProcessFunction<I, adjustMerchantWeight_args> {
      public adjustMerchantWeight() {
        super("adjustMerchantWeight");
      }

      public adjustMerchantWeight_args getEmptyArgsInstance() {
        return new adjustMerchantWeight_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public adjustMerchantWeight_result getResult(I iface, adjustMerchantWeight_args args) throws org.apache.thrift.TException {
        adjustMerchantWeight_result result = new adjustMerchantWeight_result();
        result.success = iface.adjustMerchantWeight(args.reqVo);
        return result;
      }
    }

    public static class deleteRelateMerchant<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteRelateMerchant_args> {
      public deleteRelateMerchant() {
        super("deleteRelateMerchant");
      }

      public deleteRelateMerchant_args getEmptyArgsInstance() {
        return new deleteRelateMerchant_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteRelateMerchant_result getResult(I iface, deleteRelateMerchant_args args) throws org.apache.thrift.TException {
        deleteRelateMerchant_result result = new deleteRelateMerchant_result();
        result.success = iface.deleteRelateMerchant(args.reqVo);
        return result;
      }
    }

    public static class addMerchantActivityTag<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addMerchantActivityTag_args> {
      public addMerchantActivityTag() {
        super("addMerchantActivityTag");
      }

      public addMerchantActivityTag_args getEmptyArgsInstance() {
        return new addMerchantActivityTag_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addMerchantActivityTag_result getResult(I iface, addMerchantActivityTag_args args) throws org.apache.thrift.TException {
        addMerchantActivityTag_result result = new addMerchantActivityTag_result();
        result.success = iface.addMerchantActivityTag(args.recommendVo);
        return result;
      }
    }

    public static class updateMerchantActivityTag<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateMerchantActivityTag_args> {
      public updateMerchantActivityTag() {
        super("updateMerchantActivityTag");
      }

      public updateMerchantActivityTag_args getEmptyArgsInstance() {
        return new updateMerchantActivityTag_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateMerchantActivityTag_result getResult(I iface, updateMerchantActivityTag_args args) throws org.apache.thrift.TException {
        updateMerchantActivityTag_result result = new updateMerchantActivityTag_result();
        result.success = iface.updateMerchantActivityTag(args.recommendVo);
        return result;
      }
    }

    public static class relateMerchantInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, relateMerchantInfo_args> {
      public relateMerchantInfo() {
        super("relateMerchantInfo");
      }

      public relateMerchantInfo_args getEmptyArgsInstance() {
        return new relateMerchantInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public relateMerchantInfo_result getResult(I iface, relateMerchantInfo_args args) throws org.apache.thrift.TException {
        relateMerchantInfo_result result = new relateMerchantInfo_result();
        result.success = iface.relateMerchantInfo(args.vo);
        return result;
      }
    }

    public static class inputRelateMerchantInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, inputRelateMerchantInfo_args> {
      public inputRelateMerchantInfo() {
        super("inputRelateMerchantInfo");
      }

      public inputRelateMerchantInfo_args getEmptyArgsInstance() {
        return new inputRelateMerchantInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public inputRelateMerchantInfo_result getResult(I iface, inputRelateMerchantInfo_args args) throws org.apache.thrift.TException {
        inputRelateMerchantInfo_result result = new inputRelateMerchantInfo_result();
        result.success = iface.inputRelateMerchantInfo(args.reqVo);
        return result;
      }
    }

    public static class queryMerchantNameByLicense<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryMerchantNameByLicense_args> {
      public queryMerchantNameByLicense() {
        super("queryMerchantNameByLicense");
      }

      public queryMerchantNameByLicense_args getEmptyArgsInstance() {
        return new queryMerchantNameByLicense_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryMerchantNameByLicense_result getResult(I iface, queryMerchantNameByLicense_args args) throws org.apache.thrift.TException {
        queryMerchantNameByLicense_result result = new queryMerchantNameByLicense_result();
        result.success = iface.queryMerchantNameByLicense(args.clientId, args.license);
        return result;
      }
    }

    public static class exportMerchantRelateActivityTag<I extends Iface> extends org.apache.thrift.ProcessFunction<I, exportMerchantRelateActivityTag_args> {
      public exportMerchantRelateActivityTag() {
        super("exportMerchantRelateActivityTag");
      }

      public exportMerchantRelateActivityTag_args getEmptyArgsInstance() {
        return new exportMerchantRelateActivityTag_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public exportMerchantRelateActivityTag_result getResult(I iface, exportMerchantRelateActivityTag_args args) throws org.apache.thrift.TException {
        exportMerchantRelateActivityTag_result result = new exportMerchantRelateActivityTag_result();
        result.success = iface.exportMerchantRelateActivityTag(args.reqVo);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends com.froad.thrift.monitor.service.BizMonitorService.AsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("findMerchantTagByPage", new findMerchantTagByPage());
      processMap.put("findMerchantTagDetail", new findMerchantTagDetail());
      processMap.put("findRelateMerchantInfoByPage", new findRelateMerchantInfoByPage());
      processMap.put("enableMerchantRecommendActivityTag", new enableMerchantRecommendActivityTag());
      processMap.put("adjustMerchantWeight", new adjustMerchantWeight());
      processMap.put("deleteRelateMerchant", new deleteRelateMerchant());
      processMap.put("addMerchantActivityTag", new addMerchantActivityTag());
      processMap.put("updateMerchantActivityTag", new updateMerchantActivityTag());
      processMap.put("relateMerchantInfo", new relateMerchantInfo());
      processMap.put("inputRelateMerchantInfo", new inputRelateMerchantInfo());
      processMap.put("queryMerchantNameByLicense", new queryMerchantNameByLicense());
      processMap.put("exportMerchantRelateActivityTag", new exportMerchantRelateActivityTag());
      return processMap;
    }

    public static class findMerchantTagByPage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findMerchantTagByPage_args, com.froad.thrift.vo.recommendactivitytag.RecommendActivityTagPageVo> {
      public findMerchantTagByPage() {
        super("findMerchantTagByPage");
      }

      public findMerchantTagByPage_args getEmptyArgsInstance() {
        return new findMerchantTagByPage_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.recommendactivitytag.RecommendActivityTagPageVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.recommendactivitytag.RecommendActivityTagPageVo>() { 
          public void onComplete(com.froad.thrift.vo.recommendactivitytag.RecommendActivityTagPageVo o) {
            findMerchantTagByPage_result result = new findMerchantTagByPage_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            findMerchantTagByPage_result result = new findMerchantTagByPage_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findMerchantTagByPage_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.recommendactivitytag.RecommendActivityTagPageVo> resultHandler) throws TException {
        iface.findMerchantTagByPage(args.vo, args.pageVo,resultHandler);
      }
    }

    public static class findMerchantTagDetail<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findMerchantTagDetail_args, com.froad.thrift.vo.recommendactivitytag.MerchantActivityTagDetailResVo> {
      public findMerchantTagDetail() {
        super("findMerchantTagDetail");
      }

      public findMerchantTagDetail_args getEmptyArgsInstance() {
        return new findMerchantTagDetail_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.recommendactivitytag.MerchantActivityTagDetailResVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.recommendactivitytag.MerchantActivityTagDetailResVo>() { 
          public void onComplete(com.froad.thrift.vo.recommendactivitytag.MerchantActivityTagDetailResVo o) {
            findMerchantTagDetail_result result = new findMerchantTagDetail_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            findMerchantTagDetail_result result = new findMerchantTagDetail_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findMerchantTagDetail_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.recommendactivitytag.MerchantActivityTagDetailResVo> resultHandler) throws TException {
        iface.findMerchantTagDetail(args.reqVo,resultHandler);
      }
    }

    public static class findRelateMerchantInfoByPage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findRelateMerchantInfoByPage_args, com.froad.thrift.vo.recommendactivitytag.MerchantWeightActivityTagPageVo> {
      public findRelateMerchantInfoByPage() {
        super("findRelateMerchantInfoByPage");
      }

      public findRelateMerchantInfoByPage_args getEmptyArgsInstance() {
        return new findRelateMerchantInfoByPage_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.recommendactivitytag.MerchantWeightActivityTagPageVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.recommendactivitytag.MerchantWeightActivityTagPageVo>() { 
          public void onComplete(com.froad.thrift.vo.recommendactivitytag.MerchantWeightActivityTagPageVo o) {
            findRelateMerchantInfoByPage_result result = new findRelateMerchantInfoByPage_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            findRelateMerchantInfoByPage_result result = new findRelateMerchantInfoByPage_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findRelateMerchantInfoByPage_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.recommendactivitytag.MerchantWeightActivityTagPageVo> resultHandler) throws TException {
        iface.findRelateMerchantInfoByPage(args.pageReqVo,resultHandler);
      }
    }

    public static class enableMerchantRecommendActivityTag<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, enableMerchantRecommendActivityTag_args, com.froad.thrift.vo.ResultVo> {
      public enableMerchantRecommendActivityTag() {
        super("enableMerchantRecommendActivityTag");
      }

      public enableMerchantRecommendActivityTag_args getEmptyArgsInstance() {
        return new enableMerchantRecommendActivityTag_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            enableMerchantRecommendActivityTag_result result = new enableMerchantRecommendActivityTag_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            enableMerchantRecommendActivityTag_result result = new enableMerchantRecommendActivityTag_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, enableMerchantRecommendActivityTag_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.enableMerchantRecommendActivityTag(args.reqVo,resultHandler);
      }
    }

    public static class adjustMerchantWeight<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, adjustMerchantWeight_args, com.froad.thrift.vo.ResultVo> {
      public adjustMerchantWeight() {
        super("adjustMerchantWeight");
      }

      public adjustMerchantWeight_args getEmptyArgsInstance() {
        return new adjustMerchantWeight_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            adjustMerchantWeight_result result = new adjustMerchantWeight_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            adjustMerchantWeight_result result = new adjustMerchantWeight_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, adjustMerchantWeight_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.adjustMerchantWeight(args.reqVo,resultHandler);
      }
    }

    public static class deleteRelateMerchant<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteRelateMerchant_args, com.froad.thrift.vo.ResultVo> {
      public deleteRelateMerchant() {
        super("deleteRelateMerchant");
      }

      public deleteRelateMerchant_args getEmptyArgsInstance() {
        return new deleteRelateMerchant_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            deleteRelateMerchant_result result = new deleteRelateMerchant_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteRelateMerchant_result result = new deleteRelateMerchant_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteRelateMerchant_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.deleteRelateMerchant(args.reqVo,resultHandler);
      }
    }

    public static class addMerchantActivityTag<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addMerchantActivityTag_args, com.froad.thrift.vo.ResultVo> {
      public addMerchantActivityTag() {
        super("addMerchantActivityTag");
      }

      public addMerchantActivityTag_args getEmptyArgsInstance() {
        return new addMerchantActivityTag_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            addMerchantActivityTag_result result = new addMerchantActivityTag_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addMerchantActivityTag_result result = new addMerchantActivityTag_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addMerchantActivityTag_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.addMerchantActivityTag(args.recommendVo,resultHandler);
      }
    }

    public static class updateMerchantActivityTag<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateMerchantActivityTag_args, com.froad.thrift.vo.ResultVo> {
      public updateMerchantActivityTag() {
        super("updateMerchantActivityTag");
      }

      public updateMerchantActivityTag_args getEmptyArgsInstance() {
        return new updateMerchantActivityTag_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            updateMerchantActivityTag_result result = new updateMerchantActivityTag_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateMerchantActivityTag_result result = new updateMerchantActivityTag_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateMerchantActivityTag_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.updateMerchantActivityTag(args.recommendVo,resultHandler);
      }
    }

    public static class relateMerchantInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, relateMerchantInfo_args, com.froad.thrift.vo.ResultVo> {
      public relateMerchantInfo() {
        super("relateMerchantInfo");
      }

      public relateMerchantInfo_args getEmptyArgsInstance() {
        return new relateMerchantInfo_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            relateMerchantInfo_result result = new relateMerchantInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            relateMerchantInfo_result result = new relateMerchantInfo_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, relateMerchantInfo_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.relateMerchantInfo(args.vo,resultHandler);
      }
    }

    public static class inputRelateMerchantInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, inputRelateMerchantInfo_args, com.froad.thrift.vo.ResultVo> {
      public inputRelateMerchantInfo() {
        super("inputRelateMerchantInfo");
      }

      public inputRelateMerchantInfo_args getEmptyArgsInstance() {
        return new inputRelateMerchantInfo_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            inputRelateMerchantInfo_result result = new inputRelateMerchantInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            inputRelateMerchantInfo_result result = new inputRelateMerchantInfo_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, inputRelateMerchantInfo_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.inputRelateMerchantInfo(args.reqVo,resultHandler);
      }
    }

    public static class queryMerchantNameByLicense<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryMerchantNameByLicense_args, com.froad.thrift.vo.recommendactivitytag.MerchantNameResVo> {
      public queryMerchantNameByLicense() {
        super("queryMerchantNameByLicense");
      }

      public queryMerchantNameByLicense_args getEmptyArgsInstance() {
        return new queryMerchantNameByLicense_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.recommendactivitytag.MerchantNameResVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.recommendactivitytag.MerchantNameResVo>() { 
          public void onComplete(com.froad.thrift.vo.recommendactivitytag.MerchantNameResVo o) {
            queryMerchantNameByLicense_result result = new queryMerchantNameByLicense_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryMerchantNameByLicense_result result = new queryMerchantNameByLicense_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryMerchantNameByLicense_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.recommendactivitytag.MerchantNameResVo> resultHandler) throws TException {
        iface.queryMerchantNameByLicense(args.clientId, args.license,resultHandler);
      }
    }

    public static class exportMerchantRelateActivityTag<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, exportMerchantRelateActivityTag_args, com.froad.thrift.vo.ExportResultRes> {
      public exportMerchantRelateActivityTag() {
        super("exportMerchantRelateActivityTag");
      }

      public exportMerchantRelateActivityTag_args getEmptyArgsInstance() {
        return new exportMerchantRelateActivityTag_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ExportResultRes> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ExportResultRes>() { 
          public void onComplete(com.froad.thrift.vo.ExportResultRes o) {
            exportMerchantRelateActivityTag_result result = new exportMerchantRelateActivityTag_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            exportMerchantRelateActivityTag_result result = new exportMerchantRelateActivityTag_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, exportMerchantRelateActivityTag_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ExportResultRes> resultHandler) throws TException {
        iface.exportMerchantRelateActivityTag(args.reqVo,resultHandler);
      }
    }

  }

  public static class findMerchantTagByPage_args implements org.apache.thrift.TBase<findMerchantTagByPage_args, findMerchantTagByPage_args._Fields>, java.io.Serializable, Cloneable, Comparable<findMerchantTagByPage_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findMerchantTagByPage_args");

    private static final org.apache.thrift.protocol.TField VO_FIELD_DESC = new org.apache.thrift.protocol.TField("vo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PAGE_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("pageVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findMerchantTagByPage_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findMerchantTagByPage_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.recommendactivitytag.RecommendActivityTagVo vo; // required
    public com.froad.thrift.vo.PageVo pageVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      VO((short)1, "vo"),
      PAGE_VO((short)2, "pageVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // VO
            return VO;
          case 2: // PAGE_VO
            return PAGE_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.VO, new org.apache.thrift.meta_data.FieldMetaData("vo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.recommendactivitytag.RecommendActivityTagVo.class)));
      tmpMap.put(_Fields.PAGE_VO, new org.apache.thrift.meta_data.FieldMetaData("pageVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.PageVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findMerchantTagByPage_args.class, metaDataMap);
    }

    public findMerchantTagByPage_args() {
    }

    public findMerchantTagByPage_args(
      com.froad.thrift.vo.recommendactivitytag.RecommendActivityTagVo vo,
      com.froad.thrift.vo.PageVo pageVo)
    {
      this();
      this.vo = vo;
      this.pageVo = pageVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findMerchantTagByPage_args(findMerchantTagByPage_args other) {
      if (other.isSetVo()) {
        this.vo = new com.froad.thrift.vo.recommendactivitytag.RecommendActivityTagVo(other.vo);
      }
      if (other.isSetPageVo()) {
        this.pageVo = new com.froad.thrift.vo.PageVo(other.pageVo);
      }
    }

    public findMerchantTagByPage_args deepCopy() {
      return new findMerchantTagByPage_args(this);
    }

    @Override
    public void clear() {
      this.vo = null;
      this.pageVo = null;
    }

    public com.froad.thrift.vo.recommendactivitytag.RecommendActivityTagVo getVo() {
      return this.vo;
    }

    public findMerchantTagByPage_args setVo(com.froad.thrift.vo.recommendactivitytag.RecommendActivityTagVo vo) {
      this.vo = vo;
      return this;
    }

    public void unsetVo() {
      this.vo = null;
    }

    /** Returns true if field vo is set (has been assigned a value) and false otherwise */
    public boolean isSetVo() {
      return this.vo != null;
    }

    public void setVoIsSet(boolean value) {
      if (!value) {
        this.vo = null;
      }
    }

    public com.froad.thrift.vo.PageVo getPageVo() {
      return this.pageVo;
    }

    public findMerchantTagByPage_args setPageVo(com.froad.thrift.vo.PageVo pageVo) {
      this.pageVo = pageVo;
      return this;
    }

    public void unsetPageVo() {
      this.pageVo = null;
    }

    /** Returns true if field pageVo is set (has been assigned a value) and false otherwise */
    public boolean isSetPageVo() {
      return this.pageVo != null;
    }

    public void setPageVoIsSet(boolean value) {
      if (!value) {
        this.pageVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case VO:
        if (value == null) {
          unsetVo();
        } else {
          setVo((com.froad.thrift.vo.recommendactivitytag.RecommendActivityTagVo)value);
        }
        break;

      case PAGE_VO:
        if (value == null) {
          unsetPageVo();
        } else {
          setPageVo((com.froad.thrift.vo.PageVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case VO:
        return getVo();

      case PAGE_VO:
        return getPageVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case VO:
        return isSetVo();
      case PAGE_VO:
        return isSetPageVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findMerchantTagByPage_args)
        return this.equals((findMerchantTagByPage_args)that);
      return false;
    }

    public boolean equals(findMerchantTagByPage_args that) {
      if (that == null)
        return false;

      boolean this_present_vo = true && this.isSetVo();
      boolean that_present_vo = true && that.isSetVo();
      if (this_present_vo || that_present_vo) {
        if (!(this_present_vo && that_present_vo))
          return false;
        if (!this.vo.equals(that.vo))
          return false;
      }

      boolean this_present_pageVo = true && this.isSetPageVo();
      boolean that_present_pageVo = true && that.isSetPageVo();
      if (this_present_pageVo || that_present_pageVo) {
        if (!(this_present_pageVo && that_present_pageVo))
          return false;
        if (!this.pageVo.equals(that.pageVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_vo = true && (isSetVo());
      list.add(present_vo);
      if (present_vo)
        list.add(vo);

      boolean present_pageVo = true && (isSetPageVo());
      list.add(present_pageVo);
      if (present_pageVo)
        list.add(pageVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(findMerchantTagByPage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetVo()).compareTo(other.isSetVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vo, other.vo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageVo()).compareTo(other.isSetPageVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageVo, other.pageVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findMerchantTagByPage_args(");
      boolean first = true;

      sb.append("vo:");
      if (this.vo == null) {
        sb.append("null");
      } else {
        sb.append(this.vo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageVo:");
      if (this.pageVo == null) {
        sb.append("null");
      } else {
        sb.append(this.pageVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (vo != null) {
        vo.validate();
      }
      if (pageVo != null) {
        pageVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findMerchantTagByPage_argsStandardSchemeFactory implements SchemeFactory {
      public findMerchantTagByPage_argsStandardScheme getScheme() {
        return new findMerchantTagByPage_argsStandardScheme();
      }
    }

    private static class findMerchantTagByPage_argsStandardScheme extends StandardScheme<findMerchantTagByPage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findMerchantTagByPage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.vo = new com.froad.thrift.vo.recommendactivitytag.RecommendActivityTagVo();
                struct.vo.read(iprot);
                struct.setVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PAGE_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.pageVo = new com.froad.thrift.vo.PageVo();
                struct.pageVo.read(iprot);
                struct.setPageVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findMerchantTagByPage_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.vo != null) {
          oprot.writeFieldBegin(VO_FIELD_DESC);
          struct.vo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.pageVo != null) {
          oprot.writeFieldBegin(PAGE_VO_FIELD_DESC);
          struct.pageVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findMerchantTagByPage_argsTupleSchemeFactory implements SchemeFactory {
      public findMerchantTagByPage_argsTupleScheme getScheme() {
        return new findMerchantTagByPage_argsTupleScheme();
      }
    }

    private static class findMerchantTagByPage_argsTupleScheme extends TupleScheme<findMerchantTagByPage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findMerchantTagByPage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetVo()) {
          optionals.set(0);
        }
        if (struct.isSetPageVo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetVo()) {
          struct.vo.write(oprot);
        }
        if (struct.isSetPageVo()) {
          struct.pageVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findMerchantTagByPage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.vo = new com.froad.thrift.vo.recommendactivitytag.RecommendActivityTagVo();
          struct.vo.read(iprot);
          struct.setVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.pageVo = new com.froad.thrift.vo.PageVo();
          struct.pageVo.read(iprot);
          struct.setPageVoIsSet(true);
        }
      }
    }

  }

  public static class findMerchantTagByPage_result implements org.apache.thrift.TBase<findMerchantTagByPage_result, findMerchantTagByPage_result._Fields>, java.io.Serializable, Cloneable, Comparable<findMerchantTagByPage_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findMerchantTagByPage_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findMerchantTagByPage_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findMerchantTagByPage_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.recommendactivitytag.RecommendActivityTagPageVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.recommendactivitytag.RecommendActivityTagPageVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findMerchantTagByPage_result.class, metaDataMap);
    }

    public findMerchantTagByPage_result() {
    }

    public findMerchantTagByPage_result(
      com.froad.thrift.vo.recommendactivitytag.RecommendActivityTagPageVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findMerchantTagByPage_result(findMerchantTagByPage_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.recommendactivitytag.RecommendActivityTagPageVo(other.success);
      }
    }

    public findMerchantTagByPage_result deepCopy() {
      return new findMerchantTagByPage_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.recommendactivitytag.RecommendActivityTagPageVo getSuccess() {
      return this.success;
    }

    public findMerchantTagByPage_result setSuccess(com.froad.thrift.vo.recommendactivitytag.RecommendActivityTagPageVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.recommendactivitytag.RecommendActivityTagPageVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findMerchantTagByPage_result)
        return this.equals((findMerchantTagByPage_result)that);
      return false;
    }

    public boolean equals(findMerchantTagByPage_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(findMerchantTagByPage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findMerchantTagByPage_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findMerchantTagByPage_resultStandardSchemeFactory implements SchemeFactory {
      public findMerchantTagByPage_resultStandardScheme getScheme() {
        return new findMerchantTagByPage_resultStandardScheme();
      }
    }

    private static class findMerchantTagByPage_resultStandardScheme extends StandardScheme<findMerchantTagByPage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findMerchantTagByPage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.recommendactivitytag.RecommendActivityTagPageVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findMerchantTagByPage_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findMerchantTagByPage_resultTupleSchemeFactory implements SchemeFactory {
      public findMerchantTagByPage_resultTupleScheme getScheme() {
        return new findMerchantTagByPage_resultTupleScheme();
      }
    }

    private static class findMerchantTagByPage_resultTupleScheme extends TupleScheme<findMerchantTagByPage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findMerchantTagByPage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findMerchantTagByPage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.recommendactivitytag.RecommendActivityTagPageVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class findMerchantTagDetail_args implements org.apache.thrift.TBase<findMerchantTagDetail_args, findMerchantTagDetail_args._Fields>, java.io.Serializable, Cloneable, Comparable<findMerchantTagDetail_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findMerchantTagDetail_args");

    private static final org.apache.thrift.protocol.TField REQ_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("reqVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findMerchantTagDetail_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findMerchantTagDetail_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.recommendactivitytag.MerchantActivityTagDetailReqVo reqVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQ_VO((short)1, "reqVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQ_VO
            return REQ_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQ_VO, new org.apache.thrift.meta_data.FieldMetaData("reqVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.recommendactivitytag.MerchantActivityTagDetailReqVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findMerchantTagDetail_args.class, metaDataMap);
    }

    public findMerchantTagDetail_args() {
    }

    public findMerchantTagDetail_args(
      com.froad.thrift.vo.recommendactivitytag.MerchantActivityTagDetailReqVo reqVo)
    {
      this();
      this.reqVo = reqVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findMerchantTagDetail_args(findMerchantTagDetail_args other) {
      if (other.isSetReqVo()) {
        this.reqVo = new com.froad.thrift.vo.recommendactivitytag.MerchantActivityTagDetailReqVo(other.reqVo);
      }
    }

    public findMerchantTagDetail_args deepCopy() {
      return new findMerchantTagDetail_args(this);
    }

    @Override
    public void clear() {
      this.reqVo = null;
    }

    public com.froad.thrift.vo.recommendactivitytag.MerchantActivityTagDetailReqVo getReqVo() {
      return this.reqVo;
    }

    public findMerchantTagDetail_args setReqVo(com.froad.thrift.vo.recommendactivitytag.MerchantActivityTagDetailReqVo reqVo) {
      this.reqVo = reqVo;
      return this;
    }

    public void unsetReqVo() {
      this.reqVo = null;
    }

    /** Returns true if field reqVo is set (has been assigned a value) and false otherwise */
    public boolean isSetReqVo() {
      return this.reqVo != null;
    }

    public void setReqVoIsSet(boolean value) {
      if (!value) {
        this.reqVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQ_VO:
        if (value == null) {
          unsetReqVo();
        } else {
          setReqVo((com.froad.thrift.vo.recommendactivitytag.MerchantActivityTagDetailReqVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQ_VO:
        return getReqVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQ_VO:
        return isSetReqVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findMerchantTagDetail_args)
        return this.equals((findMerchantTagDetail_args)that);
      return false;
    }

    public boolean equals(findMerchantTagDetail_args that) {
      if (that == null)
        return false;

      boolean this_present_reqVo = true && this.isSetReqVo();
      boolean that_present_reqVo = true && that.isSetReqVo();
      if (this_present_reqVo || that_present_reqVo) {
        if (!(this_present_reqVo && that_present_reqVo))
          return false;
        if (!this.reqVo.equals(that.reqVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_reqVo = true && (isSetReqVo());
      list.add(present_reqVo);
      if (present_reqVo)
        list.add(reqVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(findMerchantTagDetail_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetReqVo()).compareTo(other.isSetReqVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReqVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reqVo, other.reqVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findMerchantTagDetail_args(");
      boolean first = true;

      sb.append("reqVo:");
      if (this.reqVo == null) {
        sb.append("null");
      } else {
        sb.append(this.reqVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (reqVo != null) {
        reqVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findMerchantTagDetail_argsStandardSchemeFactory implements SchemeFactory {
      public findMerchantTagDetail_argsStandardScheme getScheme() {
        return new findMerchantTagDetail_argsStandardScheme();
      }
    }

    private static class findMerchantTagDetail_argsStandardScheme extends StandardScheme<findMerchantTagDetail_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findMerchantTagDetail_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQ_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.reqVo = new com.froad.thrift.vo.recommendactivitytag.MerchantActivityTagDetailReqVo();
                struct.reqVo.read(iprot);
                struct.setReqVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findMerchantTagDetail_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.reqVo != null) {
          oprot.writeFieldBegin(REQ_VO_FIELD_DESC);
          struct.reqVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findMerchantTagDetail_argsTupleSchemeFactory implements SchemeFactory {
      public findMerchantTagDetail_argsTupleScheme getScheme() {
        return new findMerchantTagDetail_argsTupleScheme();
      }
    }

    private static class findMerchantTagDetail_argsTupleScheme extends TupleScheme<findMerchantTagDetail_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findMerchantTagDetail_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetReqVo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetReqVo()) {
          struct.reqVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findMerchantTagDetail_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.reqVo = new com.froad.thrift.vo.recommendactivitytag.MerchantActivityTagDetailReqVo();
          struct.reqVo.read(iprot);
          struct.setReqVoIsSet(true);
        }
      }
    }

  }

  public static class findMerchantTagDetail_result implements org.apache.thrift.TBase<findMerchantTagDetail_result, findMerchantTagDetail_result._Fields>, java.io.Serializable, Cloneable, Comparable<findMerchantTagDetail_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findMerchantTagDetail_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findMerchantTagDetail_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findMerchantTagDetail_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.recommendactivitytag.MerchantActivityTagDetailResVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.recommendactivitytag.MerchantActivityTagDetailResVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findMerchantTagDetail_result.class, metaDataMap);
    }

    public findMerchantTagDetail_result() {
    }

    public findMerchantTagDetail_result(
      com.froad.thrift.vo.recommendactivitytag.MerchantActivityTagDetailResVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findMerchantTagDetail_result(findMerchantTagDetail_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.recommendactivitytag.MerchantActivityTagDetailResVo(other.success);
      }
    }

    public findMerchantTagDetail_result deepCopy() {
      return new findMerchantTagDetail_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.recommendactivitytag.MerchantActivityTagDetailResVo getSuccess() {
      return this.success;
    }

    public findMerchantTagDetail_result setSuccess(com.froad.thrift.vo.recommendactivitytag.MerchantActivityTagDetailResVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.recommendactivitytag.MerchantActivityTagDetailResVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findMerchantTagDetail_result)
        return this.equals((findMerchantTagDetail_result)that);
      return false;
    }

    public boolean equals(findMerchantTagDetail_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(findMerchantTagDetail_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findMerchantTagDetail_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findMerchantTagDetail_resultStandardSchemeFactory implements SchemeFactory {
      public findMerchantTagDetail_resultStandardScheme getScheme() {
        return new findMerchantTagDetail_resultStandardScheme();
      }
    }

    private static class findMerchantTagDetail_resultStandardScheme extends StandardScheme<findMerchantTagDetail_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findMerchantTagDetail_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.recommendactivitytag.MerchantActivityTagDetailResVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findMerchantTagDetail_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findMerchantTagDetail_resultTupleSchemeFactory implements SchemeFactory {
      public findMerchantTagDetail_resultTupleScheme getScheme() {
        return new findMerchantTagDetail_resultTupleScheme();
      }
    }

    private static class findMerchantTagDetail_resultTupleScheme extends TupleScheme<findMerchantTagDetail_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findMerchantTagDetail_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findMerchantTagDetail_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.recommendactivitytag.MerchantActivityTagDetailResVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class findRelateMerchantInfoByPage_args implements org.apache.thrift.TBase<findRelateMerchantInfoByPage_args, findRelateMerchantInfoByPage_args._Fields>, java.io.Serializable, Cloneable, Comparable<findRelateMerchantInfoByPage_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findRelateMerchantInfoByPage_args");

    private static final org.apache.thrift.protocol.TField PAGE_REQ_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("pageReqVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findRelateMerchantInfoByPage_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findRelateMerchantInfoByPage_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.recommendactivitytag.MerchantWeightActivityTagPageReqVo pageReqVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PAGE_REQ_VO((short)1, "pageReqVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PAGE_REQ_VO
            return PAGE_REQ_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PAGE_REQ_VO, new org.apache.thrift.meta_data.FieldMetaData("pageReqVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.recommendactivitytag.MerchantWeightActivityTagPageReqVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findRelateMerchantInfoByPage_args.class, metaDataMap);
    }

    public findRelateMerchantInfoByPage_args() {
    }

    public findRelateMerchantInfoByPage_args(
      com.froad.thrift.vo.recommendactivitytag.MerchantWeightActivityTagPageReqVo pageReqVo)
    {
      this();
      this.pageReqVo = pageReqVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findRelateMerchantInfoByPage_args(findRelateMerchantInfoByPage_args other) {
      if (other.isSetPageReqVo()) {
        this.pageReqVo = new com.froad.thrift.vo.recommendactivitytag.MerchantWeightActivityTagPageReqVo(other.pageReqVo);
      }
    }

    public findRelateMerchantInfoByPage_args deepCopy() {
      return new findRelateMerchantInfoByPage_args(this);
    }

    @Override
    public void clear() {
      this.pageReqVo = null;
    }

    public com.froad.thrift.vo.recommendactivitytag.MerchantWeightActivityTagPageReqVo getPageReqVo() {
      return this.pageReqVo;
    }

    public findRelateMerchantInfoByPage_args setPageReqVo(com.froad.thrift.vo.recommendactivitytag.MerchantWeightActivityTagPageReqVo pageReqVo) {
      this.pageReqVo = pageReqVo;
      return this;
    }

    public void unsetPageReqVo() {
      this.pageReqVo = null;
    }

    /** Returns true if field pageReqVo is set (has been assigned a value) and false otherwise */
    public boolean isSetPageReqVo() {
      return this.pageReqVo != null;
    }

    public void setPageReqVoIsSet(boolean value) {
      if (!value) {
        this.pageReqVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PAGE_REQ_VO:
        if (value == null) {
          unsetPageReqVo();
        } else {
          setPageReqVo((com.froad.thrift.vo.recommendactivitytag.MerchantWeightActivityTagPageReqVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PAGE_REQ_VO:
        return getPageReqVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PAGE_REQ_VO:
        return isSetPageReqVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findRelateMerchantInfoByPage_args)
        return this.equals((findRelateMerchantInfoByPage_args)that);
      return false;
    }

    public boolean equals(findRelateMerchantInfoByPage_args that) {
      if (that == null)
        return false;

      boolean this_present_pageReqVo = true && this.isSetPageReqVo();
      boolean that_present_pageReqVo = true && that.isSetPageReqVo();
      if (this_present_pageReqVo || that_present_pageReqVo) {
        if (!(this_present_pageReqVo && that_present_pageReqVo))
          return false;
        if (!this.pageReqVo.equals(that.pageReqVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_pageReqVo = true && (isSetPageReqVo());
      list.add(present_pageReqVo);
      if (present_pageReqVo)
        list.add(pageReqVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(findRelateMerchantInfoByPage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPageReqVo()).compareTo(other.isSetPageReqVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageReqVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageReqVo, other.pageReqVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findRelateMerchantInfoByPage_args(");
      boolean first = true;

      sb.append("pageReqVo:");
      if (this.pageReqVo == null) {
        sb.append("null");
      } else {
        sb.append(this.pageReqVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (pageReqVo != null) {
        pageReqVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findRelateMerchantInfoByPage_argsStandardSchemeFactory implements SchemeFactory {
      public findRelateMerchantInfoByPage_argsStandardScheme getScheme() {
        return new findRelateMerchantInfoByPage_argsStandardScheme();
      }
    }

    private static class findRelateMerchantInfoByPage_argsStandardScheme extends StandardScheme<findRelateMerchantInfoByPage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findRelateMerchantInfoByPage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PAGE_REQ_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.pageReqVo = new com.froad.thrift.vo.recommendactivitytag.MerchantWeightActivityTagPageReqVo();
                struct.pageReqVo.read(iprot);
                struct.setPageReqVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findRelateMerchantInfoByPage_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pageReqVo != null) {
          oprot.writeFieldBegin(PAGE_REQ_VO_FIELD_DESC);
          struct.pageReqVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findRelateMerchantInfoByPage_argsTupleSchemeFactory implements SchemeFactory {
      public findRelateMerchantInfoByPage_argsTupleScheme getScheme() {
        return new findRelateMerchantInfoByPage_argsTupleScheme();
      }
    }

    private static class findRelateMerchantInfoByPage_argsTupleScheme extends TupleScheme<findRelateMerchantInfoByPage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findRelateMerchantInfoByPage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPageReqVo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPageReqVo()) {
          struct.pageReqVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findRelateMerchantInfoByPage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.pageReqVo = new com.froad.thrift.vo.recommendactivitytag.MerchantWeightActivityTagPageReqVo();
          struct.pageReqVo.read(iprot);
          struct.setPageReqVoIsSet(true);
        }
      }
    }

  }

  public static class findRelateMerchantInfoByPage_result implements org.apache.thrift.TBase<findRelateMerchantInfoByPage_result, findRelateMerchantInfoByPage_result._Fields>, java.io.Serializable, Cloneable, Comparable<findRelateMerchantInfoByPage_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findRelateMerchantInfoByPage_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findRelateMerchantInfoByPage_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findRelateMerchantInfoByPage_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.recommendactivitytag.MerchantWeightActivityTagPageVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.recommendactivitytag.MerchantWeightActivityTagPageVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findRelateMerchantInfoByPage_result.class, metaDataMap);
    }

    public findRelateMerchantInfoByPage_result() {
    }

    public findRelateMerchantInfoByPage_result(
      com.froad.thrift.vo.recommendactivitytag.MerchantWeightActivityTagPageVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findRelateMerchantInfoByPage_result(findRelateMerchantInfoByPage_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.recommendactivitytag.MerchantWeightActivityTagPageVo(other.success);
      }
    }

    public findRelateMerchantInfoByPage_result deepCopy() {
      return new findRelateMerchantInfoByPage_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.recommendactivitytag.MerchantWeightActivityTagPageVo getSuccess() {
      return this.success;
    }

    public findRelateMerchantInfoByPage_result setSuccess(com.froad.thrift.vo.recommendactivitytag.MerchantWeightActivityTagPageVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.recommendactivitytag.MerchantWeightActivityTagPageVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findRelateMerchantInfoByPage_result)
        return this.equals((findRelateMerchantInfoByPage_result)that);
      return false;
    }

    public boolean equals(findRelateMerchantInfoByPage_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(findRelateMerchantInfoByPage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findRelateMerchantInfoByPage_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findRelateMerchantInfoByPage_resultStandardSchemeFactory implements SchemeFactory {
      public findRelateMerchantInfoByPage_resultStandardScheme getScheme() {
        return new findRelateMerchantInfoByPage_resultStandardScheme();
      }
    }

    private static class findRelateMerchantInfoByPage_resultStandardScheme extends StandardScheme<findRelateMerchantInfoByPage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findRelateMerchantInfoByPage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.recommendactivitytag.MerchantWeightActivityTagPageVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findRelateMerchantInfoByPage_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findRelateMerchantInfoByPage_resultTupleSchemeFactory implements SchemeFactory {
      public findRelateMerchantInfoByPage_resultTupleScheme getScheme() {
        return new findRelateMerchantInfoByPage_resultTupleScheme();
      }
    }

    private static class findRelateMerchantInfoByPage_resultTupleScheme extends TupleScheme<findRelateMerchantInfoByPage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findRelateMerchantInfoByPage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findRelateMerchantInfoByPage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.recommendactivitytag.MerchantWeightActivityTagPageVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class enableMerchantRecommendActivityTag_args implements org.apache.thrift.TBase<enableMerchantRecommendActivityTag_args, enableMerchantRecommendActivityTag_args._Fields>, java.io.Serializable, Cloneable, Comparable<enableMerchantRecommendActivityTag_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("enableMerchantRecommendActivityTag_args");

    private static final org.apache.thrift.protocol.TField REQ_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("reqVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new enableMerchantRecommendActivityTag_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new enableMerchantRecommendActivityTag_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.recommendactivitytag.EnableMerchantActivityReqVo reqVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQ_VO((short)1, "reqVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQ_VO
            return REQ_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQ_VO, new org.apache.thrift.meta_data.FieldMetaData("reqVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.recommendactivitytag.EnableMerchantActivityReqVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(enableMerchantRecommendActivityTag_args.class, metaDataMap);
    }

    public enableMerchantRecommendActivityTag_args() {
    }

    public enableMerchantRecommendActivityTag_args(
      com.froad.thrift.vo.recommendactivitytag.EnableMerchantActivityReqVo reqVo)
    {
      this();
      this.reqVo = reqVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public enableMerchantRecommendActivityTag_args(enableMerchantRecommendActivityTag_args other) {
      if (other.isSetReqVo()) {
        this.reqVo = new com.froad.thrift.vo.recommendactivitytag.EnableMerchantActivityReqVo(other.reqVo);
      }
    }

    public enableMerchantRecommendActivityTag_args deepCopy() {
      return new enableMerchantRecommendActivityTag_args(this);
    }

    @Override
    public void clear() {
      this.reqVo = null;
    }

    public com.froad.thrift.vo.recommendactivitytag.EnableMerchantActivityReqVo getReqVo() {
      return this.reqVo;
    }

    public enableMerchantRecommendActivityTag_args setReqVo(com.froad.thrift.vo.recommendactivitytag.EnableMerchantActivityReqVo reqVo) {
      this.reqVo = reqVo;
      return this;
    }

    public void unsetReqVo() {
      this.reqVo = null;
    }

    /** Returns true if field reqVo is set (has been assigned a value) and false otherwise */
    public boolean isSetReqVo() {
      return this.reqVo != null;
    }

    public void setReqVoIsSet(boolean value) {
      if (!value) {
        this.reqVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQ_VO:
        if (value == null) {
          unsetReqVo();
        } else {
          setReqVo((com.froad.thrift.vo.recommendactivitytag.EnableMerchantActivityReqVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQ_VO:
        return getReqVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQ_VO:
        return isSetReqVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof enableMerchantRecommendActivityTag_args)
        return this.equals((enableMerchantRecommendActivityTag_args)that);
      return false;
    }

    public boolean equals(enableMerchantRecommendActivityTag_args that) {
      if (that == null)
        return false;

      boolean this_present_reqVo = true && this.isSetReqVo();
      boolean that_present_reqVo = true && that.isSetReqVo();
      if (this_present_reqVo || that_present_reqVo) {
        if (!(this_present_reqVo && that_present_reqVo))
          return false;
        if (!this.reqVo.equals(that.reqVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_reqVo = true && (isSetReqVo());
      list.add(present_reqVo);
      if (present_reqVo)
        list.add(reqVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(enableMerchantRecommendActivityTag_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetReqVo()).compareTo(other.isSetReqVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReqVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reqVo, other.reqVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("enableMerchantRecommendActivityTag_args(");
      boolean first = true;

      sb.append("reqVo:");
      if (this.reqVo == null) {
        sb.append("null");
      } else {
        sb.append(this.reqVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (reqVo != null) {
        reqVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class enableMerchantRecommendActivityTag_argsStandardSchemeFactory implements SchemeFactory {
      public enableMerchantRecommendActivityTag_argsStandardScheme getScheme() {
        return new enableMerchantRecommendActivityTag_argsStandardScheme();
      }
    }

    private static class enableMerchantRecommendActivityTag_argsStandardScheme extends StandardScheme<enableMerchantRecommendActivityTag_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, enableMerchantRecommendActivityTag_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQ_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.reqVo = new com.froad.thrift.vo.recommendactivitytag.EnableMerchantActivityReqVo();
                struct.reqVo.read(iprot);
                struct.setReqVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, enableMerchantRecommendActivityTag_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.reqVo != null) {
          oprot.writeFieldBegin(REQ_VO_FIELD_DESC);
          struct.reqVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class enableMerchantRecommendActivityTag_argsTupleSchemeFactory implements SchemeFactory {
      public enableMerchantRecommendActivityTag_argsTupleScheme getScheme() {
        return new enableMerchantRecommendActivityTag_argsTupleScheme();
      }
    }

    private static class enableMerchantRecommendActivityTag_argsTupleScheme extends TupleScheme<enableMerchantRecommendActivityTag_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, enableMerchantRecommendActivityTag_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetReqVo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetReqVo()) {
          struct.reqVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, enableMerchantRecommendActivityTag_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.reqVo = new com.froad.thrift.vo.recommendactivitytag.EnableMerchantActivityReqVo();
          struct.reqVo.read(iprot);
          struct.setReqVoIsSet(true);
        }
      }
    }

  }

  public static class enableMerchantRecommendActivityTag_result implements org.apache.thrift.TBase<enableMerchantRecommendActivityTag_result, enableMerchantRecommendActivityTag_result._Fields>, java.io.Serializable, Cloneable, Comparable<enableMerchantRecommendActivityTag_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("enableMerchantRecommendActivityTag_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new enableMerchantRecommendActivityTag_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new enableMerchantRecommendActivityTag_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(enableMerchantRecommendActivityTag_result.class, metaDataMap);
    }

    public enableMerchantRecommendActivityTag_result() {
    }

    public enableMerchantRecommendActivityTag_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public enableMerchantRecommendActivityTag_result(enableMerchantRecommendActivityTag_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public enableMerchantRecommendActivityTag_result deepCopy() {
      return new enableMerchantRecommendActivityTag_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public enableMerchantRecommendActivityTag_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof enableMerchantRecommendActivityTag_result)
        return this.equals((enableMerchantRecommendActivityTag_result)that);
      return false;
    }

    public boolean equals(enableMerchantRecommendActivityTag_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(enableMerchantRecommendActivityTag_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("enableMerchantRecommendActivityTag_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class enableMerchantRecommendActivityTag_resultStandardSchemeFactory implements SchemeFactory {
      public enableMerchantRecommendActivityTag_resultStandardScheme getScheme() {
        return new enableMerchantRecommendActivityTag_resultStandardScheme();
      }
    }

    private static class enableMerchantRecommendActivityTag_resultStandardScheme extends StandardScheme<enableMerchantRecommendActivityTag_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, enableMerchantRecommendActivityTag_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, enableMerchantRecommendActivityTag_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class enableMerchantRecommendActivityTag_resultTupleSchemeFactory implements SchemeFactory {
      public enableMerchantRecommendActivityTag_resultTupleScheme getScheme() {
        return new enableMerchantRecommendActivityTag_resultTupleScheme();
      }
    }

    private static class enableMerchantRecommendActivityTag_resultTupleScheme extends TupleScheme<enableMerchantRecommendActivityTag_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, enableMerchantRecommendActivityTag_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, enableMerchantRecommendActivityTag_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class adjustMerchantWeight_args implements org.apache.thrift.TBase<adjustMerchantWeight_args, adjustMerchantWeight_args._Fields>, java.io.Serializable, Cloneable, Comparable<adjustMerchantWeight_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("adjustMerchantWeight_args");

    private static final org.apache.thrift.protocol.TField REQ_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("reqVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new adjustMerchantWeight_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new adjustMerchantWeight_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.recommendactivitytag.AdjustMerchantWeightReqVo reqVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQ_VO((short)1, "reqVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQ_VO
            return REQ_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQ_VO, new org.apache.thrift.meta_data.FieldMetaData("reqVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.recommendactivitytag.AdjustMerchantWeightReqVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(adjustMerchantWeight_args.class, metaDataMap);
    }

    public adjustMerchantWeight_args() {
    }

    public adjustMerchantWeight_args(
      com.froad.thrift.vo.recommendactivitytag.AdjustMerchantWeightReqVo reqVo)
    {
      this();
      this.reqVo = reqVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public adjustMerchantWeight_args(adjustMerchantWeight_args other) {
      if (other.isSetReqVo()) {
        this.reqVo = new com.froad.thrift.vo.recommendactivitytag.AdjustMerchantWeightReqVo(other.reqVo);
      }
    }

    public adjustMerchantWeight_args deepCopy() {
      return new adjustMerchantWeight_args(this);
    }

    @Override
    public void clear() {
      this.reqVo = null;
    }

    public com.froad.thrift.vo.recommendactivitytag.AdjustMerchantWeightReqVo getReqVo() {
      return this.reqVo;
    }

    public adjustMerchantWeight_args setReqVo(com.froad.thrift.vo.recommendactivitytag.AdjustMerchantWeightReqVo reqVo) {
      this.reqVo = reqVo;
      return this;
    }

    public void unsetReqVo() {
      this.reqVo = null;
    }

    /** Returns true if field reqVo is set (has been assigned a value) and false otherwise */
    public boolean isSetReqVo() {
      return this.reqVo != null;
    }

    public void setReqVoIsSet(boolean value) {
      if (!value) {
        this.reqVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQ_VO:
        if (value == null) {
          unsetReqVo();
        } else {
          setReqVo((com.froad.thrift.vo.recommendactivitytag.AdjustMerchantWeightReqVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQ_VO:
        return getReqVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQ_VO:
        return isSetReqVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof adjustMerchantWeight_args)
        return this.equals((adjustMerchantWeight_args)that);
      return false;
    }

    public boolean equals(adjustMerchantWeight_args that) {
      if (that == null)
        return false;

      boolean this_present_reqVo = true && this.isSetReqVo();
      boolean that_present_reqVo = true && that.isSetReqVo();
      if (this_present_reqVo || that_present_reqVo) {
        if (!(this_present_reqVo && that_present_reqVo))
          return false;
        if (!this.reqVo.equals(that.reqVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_reqVo = true && (isSetReqVo());
      list.add(present_reqVo);
      if (present_reqVo)
        list.add(reqVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(adjustMerchantWeight_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetReqVo()).compareTo(other.isSetReqVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReqVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reqVo, other.reqVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("adjustMerchantWeight_args(");
      boolean first = true;

      sb.append("reqVo:");
      if (this.reqVo == null) {
        sb.append("null");
      } else {
        sb.append(this.reqVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (reqVo != null) {
        reqVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class adjustMerchantWeight_argsStandardSchemeFactory implements SchemeFactory {
      public adjustMerchantWeight_argsStandardScheme getScheme() {
        return new adjustMerchantWeight_argsStandardScheme();
      }
    }

    private static class adjustMerchantWeight_argsStandardScheme extends StandardScheme<adjustMerchantWeight_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, adjustMerchantWeight_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQ_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.reqVo = new com.froad.thrift.vo.recommendactivitytag.AdjustMerchantWeightReqVo();
                struct.reqVo.read(iprot);
                struct.setReqVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, adjustMerchantWeight_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.reqVo != null) {
          oprot.writeFieldBegin(REQ_VO_FIELD_DESC);
          struct.reqVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class adjustMerchantWeight_argsTupleSchemeFactory implements SchemeFactory {
      public adjustMerchantWeight_argsTupleScheme getScheme() {
        return new adjustMerchantWeight_argsTupleScheme();
      }
    }

    private static class adjustMerchantWeight_argsTupleScheme extends TupleScheme<adjustMerchantWeight_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, adjustMerchantWeight_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetReqVo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetReqVo()) {
          struct.reqVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, adjustMerchantWeight_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.reqVo = new com.froad.thrift.vo.recommendactivitytag.AdjustMerchantWeightReqVo();
          struct.reqVo.read(iprot);
          struct.setReqVoIsSet(true);
        }
      }
    }

  }

  public static class adjustMerchantWeight_result implements org.apache.thrift.TBase<adjustMerchantWeight_result, adjustMerchantWeight_result._Fields>, java.io.Serializable, Cloneable, Comparable<adjustMerchantWeight_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("adjustMerchantWeight_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new adjustMerchantWeight_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new adjustMerchantWeight_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(adjustMerchantWeight_result.class, metaDataMap);
    }

    public adjustMerchantWeight_result() {
    }

    public adjustMerchantWeight_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public adjustMerchantWeight_result(adjustMerchantWeight_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public adjustMerchantWeight_result deepCopy() {
      return new adjustMerchantWeight_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public adjustMerchantWeight_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof adjustMerchantWeight_result)
        return this.equals((adjustMerchantWeight_result)that);
      return false;
    }

    public boolean equals(adjustMerchantWeight_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(adjustMerchantWeight_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("adjustMerchantWeight_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class adjustMerchantWeight_resultStandardSchemeFactory implements SchemeFactory {
      public adjustMerchantWeight_resultStandardScheme getScheme() {
        return new adjustMerchantWeight_resultStandardScheme();
      }
    }

    private static class adjustMerchantWeight_resultStandardScheme extends StandardScheme<adjustMerchantWeight_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, adjustMerchantWeight_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, adjustMerchantWeight_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class adjustMerchantWeight_resultTupleSchemeFactory implements SchemeFactory {
      public adjustMerchantWeight_resultTupleScheme getScheme() {
        return new adjustMerchantWeight_resultTupleScheme();
      }
    }

    private static class adjustMerchantWeight_resultTupleScheme extends TupleScheme<adjustMerchantWeight_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, adjustMerchantWeight_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, adjustMerchantWeight_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class deleteRelateMerchant_args implements org.apache.thrift.TBase<deleteRelateMerchant_args, deleteRelateMerchant_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteRelateMerchant_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteRelateMerchant_args");

    private static final org.apache.thrift.protocol.TField REQ_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("reqVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteRelateMerchant_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteRelateMerchant_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.recommendactivitytag.DeleteRelateMerchantReqVo reqVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQ_VO((short)1, "reqVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQ_VO
            return REQ_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQ_VO, new org.apache.thrift.meta_data.FieldMetaData("reqVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.recommendactivitytag.DeleteRelateMerchantReqVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteRelateMerchant_args.class, metaDataMap);
    }

    public deleteRelateMerchant_args() {
    }

    public deleteRelateMerchant_args(
      com.froad.thrift.vo.recommendactivitytag.DeleteRelateMerchantReqVo reqVo)
    {
      this();
      this.reqVo = reqVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteRelateMerchant_args(deleteRelateMerchant_args other) {
      if (other.isSetReqVo()) {
        this.reqVo = new com.froad.thrift.vo.recommendactivitytag.DeleteRelateMerchantReqVo(other.reqVo);
      }
    }

    public deleteRelateMerchant_args deepCopy() {
      return new deleteRelateMerchant_args(this);
    }

    @Override
    public void clear() {
      this.reqVo = null;
    }

    public com.froad.thrift.vo.recommendactivitytag.DeleteRelateMerchantReqVo getReqVo() {
      return this.reqVo;
    }

    public deleteRelateMerchant_args setReqVo(com.froad.thrift.vo.recommendactivitytag.DeleteRelateMerchantReqVo reqVo) {
      this.reqVo = reqVo;
      return this;
    }

    public void unsetReqVo() {
      this.reqVo = null;
    }

    /** Returns true if field reqVo is set (has been assigned a value) and false otherwise */
    public boolean isSetReqVo() {
      return this.reqVo != null;
    }

    public void setReqVoIsSet(boolean value) {
      if (!value) {
        this.reqVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQ_VO:
        if (value == null) {
          unsetReqVo();
        } else {
          setReqVo((com.froad.thrift.vo.recommendactivitytag.DeleteRelateMerchantReqVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQ_VO:
        return getReqVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQ_VO:
        return isSetReqVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteRelateMerchant_args)
        return this.equals((deleteRelateMerchant_args)that);
      return false;
    }

    public boolean equals(deleteRelateMerchant_args that) {
      if (that == null)
        return false;

      boolean this_present_reqVo = true && this.isSetReqVo();
      boolean that_present_reqVo = true && that.isSetReqVo();
      if (this_present_reqVo || that_present_reqVo) {
        if (!(this_present_reqVo && that_present_reqVo))
          return false;
        if (!this.reqVo.equals(that.reqVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_reqVo = true && (isSetReqVo());
      list.add(present_reqVo);
      if (present_reqVo)
        list.add(reqVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteRelateMerchant_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetReqVo()).compareTo(other.isSetReqVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReqVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reqVo, other.reqVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteRelateMerchant_args(");
      boolean first = true;

      sb.append("reqVo:");
      if (this.reqVo == null) {
        sb.append("null");
      } else {
        sb.append(this.reqVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (reqVo != null) {
        reqVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteRelateMerchant_argsStandardSchemeFactory implements SchemeFactory {
      public deleteRelateMerchant_argsStandardScheme getScheme() {
        return new deleteRelateMerchant_argsStandardScheme();
      }
    }

    private static class deleteRelateMerchant_argsStandardScheme extends StandardScheme<deleteRelateMerchant_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteRelateMerchant_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQ_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.reqVo = new com.froad.thrift.vo.recommendactivitytag.DeleteRelateMerchantReqVo();
                struct.reqVo.read(iprot);
                struct.setReqVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteRelateMerchant_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.reqVo != null) {
          oprot.writeFieldBegin(REQ_VO_FIELD_DESC);
          struct.reqVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteRelateMerchant_argsTupleSchemeFactory implements SchemeFactory {
      public deleteRelateMerchant_argsTupleScheme getScheme() {
        return new deleteRelateMerchant_argsTupleScheme();
      }
    }

    private static class deleteRelateMerchant_argsTupleScheme extends TupleScheme<deleteRelateMerchant_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteRelateMerchant_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetReqVo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetReqVo()) {
          struct.reqVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteRelateMerchant_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.reqVo = new com.froad.thrift.vo.recommendactivitytag.DeleteRelateMerchantReqVo();
          struct.reqVo.read(iprot);
          struct.setReqVoIsSet(true);
        }
      }
    }

  }

  public static class deleteRelateMerchant_result implements org.apache.thrift.TBase<deleteRelateMerchant_result, deleteRelateMerchant_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteRelateMerchant_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteRelateMerchant_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteRelateMerchant_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteRelateMerchant_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteRelateMerchant_result.class, metaDataMap);
    }

    public deleteRelateMerchant_result() {
    }

    public deleteRelateMerchant_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteRelateMerchant_result(deleteRelateMerchant_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public deleteRelateMerchant_result deepCopy() {
      return new deleteRelateMerchant_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public deleteRelateMerchant_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteRelateMerchant_result)
        return this.equals((deleteRelateMerchant_result)that);
      return false;
    }

    public boolean equals(deleteRelateMerchant_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteRelateMerchant_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteRelateMerchant_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteRelateMerchant_resultStandardSchemeFactory implements SchemeFactory {
      public deleteRelateMerchant_resultStandardScheme getScheme() {
        return new deleteRelateMerchant_resultStandardScheme();
      }
    }

    private static class deleteRelateMerchant_resultStandardScheme extends StandardScheme<deleteRelateMerchant_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteRelateMerchant_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteRelateMerchant_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteRelateMerchant_resultTupleSchemeFactory implements SchemeFactory {
      public deleteRelateMerchant_resultTupleScheme getScheme() {
        return new deleteRelateMerchant_resultTupleScheme();
      }
    }

    private static class deleteRelateMerchant_resultTupleScheme extends TupleScheme<deleteRelateMerchant_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteRelateMerchant_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteRelateMerchant_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class addMerchantActivityTag_args implements org.apache.thrift.TBase<addMerchantActivityTag_args, addMerchantActivityTag_args._Fields>, java.io.Serializable, Cloneable, Comparable<addMerchantActivityTag_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addMerchantActivityTag_args");

    private static final org.apache.thrift.protocol.TField RECOMMEND_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("recommendVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addMerchantActivityTag_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addMerchantActivityTag_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.recommendactivitytag.RecommendActivityTagVo recommendVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      RECOMMEND_VO((short)1, "recommendVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // RECOMMEND_VO
            return RECOMMEND_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.RECOMMEND_VO, new org.apache.thrift.meta_data.FieldMetaData("recommendVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.recommendactivitytag.RecommendActivityTagVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addMerchantActivityTag_args.class, metaDataMap);
    }

    public addMerchantActivityTag_args() {
    }

    public addMerchantActivityTag_args(
      com.froad.thrift.vo.recommendactivitytag.RecommendActivityTagVo recommendVo)
    {
      this();
      this.recommendVo = recommendVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addMerchantActivityTag_args(addMerchantActivityTag_args other) {
      if (other.isSetRecommendVo()) {
        this.recommendVo = new com.froad.thrift.vo.recommendactivitytag.RecommendActivityTagVo(other.recommendVo);
      }
    }

    public addMerchantActivityTag_args deepCopy() {
      return new addMerchantActivityTag_args(this);
    }

    @Override
    public void clear() {
      this.recommendVo = null;
    }

    public com.froad.thrift.vo.recommendactivitytag.RecommendActivityTagVo getRecommendVo() {
      return this.recommendVo;
    }

    public addMerchantActivityTag_args setRecommendVo(com.froad.thrift.vo.recommendactivitytag.RecommendActivityTagVo recommendVo) {
      this.recommendVo = recommendVo;
      return this;
    }

    public void unsetRecommendVo() {
      this.recommendVo = null;
    }

    /** Returns true if field recommendVo is set (has been assigned a value) and false otherwise */
    public boolean isSetRecommendVo() {
      return this.recommendVo != null;
    }

    public void setRecommendVoIsSet(boolean value) {
      if (!value) {
        this.recommendVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case RECOMMEND_VO:
        if (value == null) {
          unsetRecommendVo();
        } else {
          setRecommendVo((com.froad.thrift.vo.recommendactivitytag.RecommendActivityTagVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case RECOMMEND_VO:
        return getRecommendVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case RECOMMEND_VO:
        return isSetRecommendVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addMerchantActivityTag_args)
        return this.equals((addMerchantActivityTag_args)that);
      return false;
    }

    public boolean equals(addMerchantActivityTag_args that) {
      if (that == null)
        return false;

      boolean this_present_recommendVo = true && this.isSetRecommendVo();
      boolean that_present_recommendVo = true && that.isSetRecommendVo();
      if (this_present_recommendVo || that_present_recommendVo) {
        if (!(this_present_recommendVo && that_present_recommendVo))
          return false;
        if (!this.recommendVo.equals(that.recommendVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_recommendVo = true && (isSetRecommendVo());
      list.add(present_recommendVo);
      if (present_recommendVo)
        list.add(recommendVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(addMerchantActivityTag_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRecommendVo()).compareTo(other.isSetRecommendVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRecommendVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recommendVo, other.recommendVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addMerchantActivityTag_args(");
      boolean first = true;

      sb.append("recommendVo:");
      if (this.recommendVo == null) {
        sb.append("null");
      } else {
        sb.append(this.recommendVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (recommendVo != null) {
        recommendVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addMerchantActivityTag_argsStandardSchemeFactory implements SchemeFactory {
      public addMerchantActivityTag_argsStandardScheme getScheme() {
        return new addMerchantActivityTag_argsStandardScheme();
      }
    }

    private static class addMerchantActivityTag_argsStandardScheme extends StandardScheme<addMerchantActivityTag_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addMerchantActivityTag_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // RECOMMEND_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.recommendVo = new com.froad.thrift.vo.recommendactivitytag.RecommendActivityTagVo();
                struct.recommendVo.read(iprot);
                struct.setRecommendVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addMerchantActivityTag_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.recommendVo != null) {
          oprot.writeFieldBegin(RECOMMEND_VO_FIELD_DESC);
          struct.recommendVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addMerchantActivityTag_argsTupleSchemeFactory implements SchemeFactory {
      public addMerchantActivityTag_argsTupleScheme getScheme() {
        return new addMerchantActivityTag_argsTupleScheme();
      }
    }

    private static class addMerchantActivityTag_argsTupleScheme extends TupleScheme<addMerchantActivityTag_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addMerchantActivityTag_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRecommendVo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRecommendVo()) {
          struct.recommendVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addMerchantActivityTag_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.recommendVo = new com.froad.thrift.vo.recommendactivitytag.RecommendActivityTagVo();
          struct.recommendVo.read(iprot);
          struct.setRecommendVoIsSet(true);
        }
      }
    }

  }

  public static class addMerchantActivityTag_result implements org.apache.thrift.TBase<addMerchantActivityTag_result, addMerchantActivityTag_result._Fields>, java.io.Serializable, Cloneable, Comparable<addMerchantActivityTag_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addMerchantActivityTag_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addMerchantActivityTag_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addMerchantActivityTag_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addMerchantActivityTag_result.class, metaDataMap);
    }

    public addMerchantActivityTag_result() {
    }

    public addMerchantActivityTag_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addMerchantActivityTag_result(addMerchantActivityTag_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public addMerchantActivityTag_result deepCopy() {
      return new addMerchantActivityTag_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public addMerchantActivityTag_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addMerchantActivityTag_result)
        return this.equals((addMerchantActivityTag_result)that);
      return false;
    }

    public boolean equals(addMerchantActivityTag_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(addMerchantActivityTag_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addMerchantActivityTag_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addMerchantActivityTag_resultStandardSchemeFactory implements SchemeFactory {
      public addMerchantActivityTag_resultStandardScheme getScheme() {
        return new addMerchantActivityTag_resultStandardScheme();
      }
    }

    private static class addMerchantActivityTag_resultStandardScheme extends StandardScheme<addMerchantActivityTag_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addMerchantActivityTag_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addMerchantActivityTag_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addMerchantActivityTag_resultTupleSchemeFactory implements SchemeFactory {
      public addMerchantActivityTag_resultTupleScheme getScheme() {
        return new addMerchantActivityTag_resultTupleScheme();
      }
    }

    private static class addMerchantActivityTag_resultTupleScheme extends TupleScheme<addMerchantActivityTag_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addMerchantActivityTag_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addMerchantActivityTag_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateMerchantActivityTag_args implements org.apache.thrift.TBase<updateMerchantActivityTag_args, updateMerchantActivityTag_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateMerchantActivityTag_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateMerchantActivityTag_args");

    private static final org.apache.thrift.protocol.TField RECOMMEND_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("recommendVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateMerchantActivityTag_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateMerchantActivityTag_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.recommendactivitytag.RecommendActivityTagVo recommendVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      RECOMMEND_VO((short)1, "recommendVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // RECOMMEND_VO
            return RECOMMEND_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.RECOMMEND_VO, new org.apache.thrift.meta_data.FieldMetaData("recommendVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.recommendactivitytag.RecommendActivityTagVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateMerchantActivityTag_args.class, metaDataMap);
    }

    public updateMerchantActivityTag_args() {
    }

    public updateMerchantActivityTag_args(
      com.froad.thrift.vo.recommendactivitytag.RecommendActivityTagVo recommendVo)
    {
      this();
      this.recommendVo = recommendVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateMerchantActivityTag_args(updateMerchantActivityTag_args other) {
      if (other.isSetRecommendVo()) {
        this.recommendVo = new com.froad.thrift.vo.recommendactivitytag.RecommendActivityTagVo(other.recommendVo);
      }
    }

    public updateMerchantActivityTag_args deepCopy() {
      return new updateMerchantActivityTag_args(this);
    }

    @Override
    public void clear() {
      this.recommendVo = null;
    }

    public com.froad.thrift.vo.recommendactivitytag.RecommendActivityTagVo getRecommendVo() {
      return this.recommendVo;
    }

    public updateMerchantActivityTag_args setRecommendVo(com.froad.thrift.vo.recommendactivitytag.RecommendActivityTagVo recommendVo) {
      this.recommendVo = recommendVo;
      return this;
    }

    public void unsetRecommendVo() {
      this.recommendVo = null;
    }

    /** Returns true if field recommendVo is set (has been assigned a value) and false otherwise */
    public boolean isSetRecommendVo() {
      return this.recommendVo != null;
    }

    public void setRecommendVoIsSet(boolean value) {
      if (!value) {
        this.recommendVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case RECOMMEND_VO:
        if (value == null) {
          unsetRecommendVo();
        } else {
          setRecommendVo((com.froad.thrift.vo.recommendactivitytag.RecommendActivityTagVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case RECOMMEND_VO:
        return getRecommendVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case RECOMMEND_VO:
        return isSetRecommendVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateMerchantActivityTag_args)
        return this.equals((updateMerchantActivityTag_args)that);
      return false;
    }

    public boolean equals(updateMerchantActivityTag_args that) {
      if (that == null)
        return false;

      boolean this_present_recommendVo = true && this.isSetRecommendVo();
      boolean that_present_recommendVo = true && that.isSetRecommendVo();
      if (this_present_recommendVo || that_present_recommendVo) {
        if (!(this_present_recommendVo && that_present_recommendVo))
          return false;
        if (!this.recommendVo.equals(that.recommendVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_recommendVo = true && (isSetRecommendVo());
      list.add(present_recommendVo);
      if (present_recommendVo)
        list.add(recommendVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateMerchantActivityTag_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRecommendVo()).compareTo(other.isSetRecommendVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRecommendVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recommendVo, other.recommendVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateMerchantActivityTag_args(");
      boolean first = true;

      sb.append("recommendVo:");
      if (this.recommendVo == null) {
        sb.append("null");
      } else {
        sb.append(this.recommendVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (recommendVo != null) {
        recommendVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateMerchantActivityTag_argsStandardSchemeFactory implements SchemeFactory {
      public updateMerchantActivityTag_argsStandardScheme getScheme() {
        return new updateMerchantActivityTag_argsStandardScheme();
      }
    }

    private static class updateMerchantActivityTag_argsStandardScheme extends StandardScheme<updateMerchantActivityTag_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateMerchantActivityTag_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // RECOMMEND_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.recommendVo = new com.froad.thrift.vo.recommendactivitytag.RecommendActivityTagVo();
                struct.recommendVo.read(iprot);
                struct.setRecommendVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateMerchantActivityTag_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.recommendVo != null) {
          oprot.writeFieldBegin(RECOMMEND_VO_FIELD_DESC);
          struct.recommendVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateMerchantActivityTag_argsTupleSchemeFactory implements SchemeFactory {
      public updateMerchantActivityTag_argsTupleScheme getScheme() {
        return new updateMerchantActivityTag_argsTupleScheme();
      }
    }

    private static class updateMerchantActivityTag_argsTupleScheme extends TupleScheme<updateMerchantActivityTag_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateMerchantActivityTag_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRecommendVo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRecommendVo()) {
          struct.recommendVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateMerchantActivityTag_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.recommendVo = new com.froad.thrift.vo.recommendactivitytag.RecommendActivityTagVo();
          struct.recommendVo.read(iprot);
          struct.setRecommendVoIsSet(true);
        }
      }
    }

  }

  public static class updateMerchantActivityTag_result implements org.apache.thrift.TBase<updateMerchantActivityTag_result, updateMerchantActivityTag_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateMerchantActivityTag_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateMerchantActivityTag_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateMerchantActivityTag_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateMerchantActivityTag_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateMerchantActivityTag_result.class, metaDataMap);
    }

    public updateMerchantActivityTag_result() {
    }

    public updateMerchantActivityTag_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateMerchantActivityTag_result(updateMerchantActivityTag_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public updateMerchantActivityTag_result deepCopy() {
      return new updateMerchantActivityTag_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public updateMerchantActivityTag_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateMerchantActivityTag_result)
        return this.equals((updateMerchantActivityTag_result)that);
      return false;
    }

    public boolean equals(updateMerchantActivityTag_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateMerchantActivityTag_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateMerchantActivityTag_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateMerchantActivityTag_resultStandardSchemeFactory implements SchemeFactory {
      public updateMerchantActivityTag_resultStandardScheme getScheme() {
        return new updateMerchantActivityTag_resultStandardScheme();
      }
    }

    private static class updateMerchantActivityTag_resultStandardScheme extends StandardScheme<updateMerchantActivityTag_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateMerchantActivityTag_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateMerchantActivityTag_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateMerchantActivityTag_resultTupleSchemeFactory implements SchemeFactory {
      public updateMerchantActivityTag_resultTupleScheme getScheme() {
        return new updateMerchantActivityTag_resultTupleScheme();
      }
    }

    private static class updateMerchantActivityTag_resultTupleScheme extends TupleScheme<updateMerchantActivityTag_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateMerchantActivityTag_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateMerchantActivityTag_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class relateMerchantInfo_args implements org.apache.thrift.TBase<relateMerchantInfo_args, relateMerchantInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<relateMerchantInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("relateMerchantInfo_args");

    private static final org.apache.thrift.protocol.TField VO_FIELD_DESC = new org.apache.thrift.protocol.TField("vo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new relateMerchantInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new relateMerchantInfo_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.recommendactivitytag.RelateMerchantActivityVo vo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      VO((short)1, "vo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // VO
            return VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.VO, new org.apache.thrift.meta_data.FieldMetaData("vo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.recommendactivitytag.RelateMerchantActivityVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(relateMerchantInfo_args.class, metaDataMap);
    }

    public relateMerchantInfo_args() {
    }

    public relateMerchantInfo_args(
      com.froad.thrift.vo.recommendactivitytag.RelateMerchantActivityVo vo)
    {
      this();
      this.vo = vo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public relateMerchantInfo_args(relateMerchantInfo_args other) {
      if (other.isSetVo()) {
        this.vo = new com.froad.thrift.vo.recommendactivitytag.RelateMerchantActivityVo(other.vo);
      }
    }

    public relateMerchantInfo_args deepCopy() {
      return new relateMerchantInfo_args(this);
    }

    @Override
    public void clear() {
      this.vo = null;
    }

    public com.froad.thrift.vo.recommendactivitytag.RelateMerchantActivityVo getVo() {
      return this.vo;
    }

    public relateMerchantInfo_args setVo(com.froad.thrift.vo.recommendactivitytag.RelateMerchantActivityVo vo) {
      this.vo = vo;
      return this;
    }

    public void unsetVo() {
      this.vo = null;
    }

    /** Returns true if field vo is set (has been assigned a value) and false otherwise */
    public boolean isSetVo() {
      return this.vo != null;
    }

    public void setVoIsSet(boolean value) {
      if (!value) {
        this.vo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case VO:
        if (value == null) {
          unsetVo();
        } else {
          setVo((com.froad.thrift.vo.recommendactivitytag.RelateMerchantActivityVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case VO:
        return getVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case VO:
        return isSetVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof relateMerchantInfo_args)
        return this.equals((relateMerchantInfo_args)that);
      return false;
    }

    public boolean equals(relateMerchantInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_vo = true && this.isSetVo();
      boolean that_present_vo = true && that.isSetVo();
      if (this_present_vo || that_present_vo) {
        if (!(this_present_vo && that_present_vo))
          return false;
        if (!this.vo.equals(that.vo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_vo = true && (isSetVo());
      list.add(present_vo);
      if (present_vo)
        list.add(vo);

      return list.hashCode();
    }

    @Override
    public int compareTo(relateMerchantInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetVo()).compareTo(other.isSetVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vo, other.vo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("relateMerchantInfo_args(");
      boolean first = true;

      sb.append("vo:");
      if (this.vo == null) {
        sb.append("null");
      } else {
        sb.append(this.vo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (vo != null) {
        vo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class relateMerchantInfo_argsStandardSchemeFactory implements SchemeFactory {
      public relateMerchantInfo_argsStandardScheme getScheme() {
        return new relateMerchantInfo_argsStandardScheme();
      }
    }

    private static class relateMerchantInfo_argsStandardScheme extends StandardScheme<relateMerchantInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, relateMerchantInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.vo = new com.froad.thrift.vo.recommendactivitytag.RelateMerchantActivityVo();
                struct.vo.read(iprot);
                struct.setVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, relateMerchantInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.vo != null) {
          oprot.writeFieldBegin(VO_FIELD_DESC);
          struct.vo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class relateMerchantInfo_argsTupleSchemeFactory implements SchemeFactory {
      public relateMerchantInfo_argsTupleScheme getScheme() {
        return new relateMerchantInfo_argsTupleScheme();
      }
    }

    private static class relateMerchantInfo_argsTupleScheme extends TupleScheme<relateMerchantInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, relateMerchantInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetVo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetVo()) {
          struct.vo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, relateMerchantInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.vo = new com.froad.thrift.vo.recommendactivitytag.RelateMerchantActivityVo();
          struct.vo.read(iprot);
          struct.setVoIsSet(true);
        }
      }
    }

  }

  public static class relateMerchantInfo_result implements org.apache.thrift.TBase<relateMerchantInfo_result, relateMerchantInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<relateMerchantInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("relateMerchantInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new relateMerchantInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new relateMerchantInfo_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(relateMerchantInfo_result.class, metaDataMap);
    }

    public relateMerchantInfo_result() {
    }

    public relateMerchantInfo_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public relateMerchantInfo_result(relateMerchantInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public relateMerchantInfo_result deepCopy() {
      return new relateMerchantInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public relateMerchantInfo_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof relateMerchantInfo_result)
        return this.equals((relateMerchantInfo_result)that);
      return false;
    }

    public boolean equals(relateMerchantInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(relateMerchantInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("relateMerchantInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class relateMerchantInfo_resultStandardSchemeFactory implements SchemeFactory {
      public relateMerchantInfo_resultStandardScheme getScheme() {
        return new relateMerchantInfo_resultStandardScheme();
      }
    }

    private static class relateMerchantInfo_resultStandardScheme extends StandardScheme<relateMerchantInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, relateMerchantInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, relateMerchantInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class relateMerchantInfo_resultTupleSchemeFactory implements SchemeFactory {
      public relateMerchantInfo_resultTupleScheme getScheme() {
        return new relateMerchantInfo_resultTupleScheme();
      }
    }

    private static class relateMerchantInfo_resultTupleScheme extends TupleScheme<relateMerchantInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, relateMerchantInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, relateMerchantInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class inputRelateMerchantInfo_args implements org.apache.thrift.TBase<inputRelateMerchantInfo_args, inputRelateMerchantInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<inputRelateMerchantInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("inputRelateMerchantInfo_args");

    private static final org.apache.thrift.protocol.TField REQ_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("reqVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new inputRelateMerchantInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new inputRelateMerchantInfo_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.recommendactivitytag.InputRelateMerchantActivityReqVo reqVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQ_VO((short)1, "reqVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQ_VO
            return REQ_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQ_VO, new org.apache.thrift.meta_data.FieldMetaData("reqVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.recommendactivitytag.InputRelateMerchantActivityReqVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(inputRelateMerchantInfo_args.class, metaDataMap);
    }

    public inputRelateMerchantInfo_args() {
    }

    public inputRelateMerchantInfo_args(
      com.froad.thrift.vo.recommendactivitytag.InputRelateMerchantActivityReqVo reqVo)
    {
      this();
      this.reqVo = reqVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public inputRelateMerchantInfo_args(inputRelateMerchantInfo_args other) {
      if (other.isSetReqVo()) {
        this.reqVo = new com.froad.thrift.vo.recommendactivitytag.InputRelateMerchantActivityReqVo(other.reqVo);
      }
    }

    public inputRelateMerchantInfo_args deepCopy() {
      return new inputRelateMerchantInfo_args(this);
    }

    @Override
    public void clear() {
      this.reqVo = null;
    }

    public com.froad.thrift.vo.recommendactivitytag.InputRelateMerchantActivityReqVo getReqVo() {
      return this.reqVo;
    }

    public inputRelateMerchantInfo_args setReqVo(com.froad.thrift.vo.recommendactivitytag.InputRelateMerchantActivityReqVo reqVo) {
      this.reqVo = reqVo;
      return this;
    }

    public void unsetReqVo() {
      this.reqVo = null;
    }

    /** Returns true if field reqVo is set (has been assigned a value) and false otherwise */
    public boolean isSetReqVo() {
      return this.reqVo != null;
    }

    public void setReqVoIsSet(boolean value) {
      if (!value) {
        this.reqVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQ_VO:
        if (value == null) {
          unsetReqVo();
        } else {
          setReqVo((com.froad.thrift.vo.recommendactivitytag.InputRelateMerchantActivityReqVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQ_VO:
        return getReqVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQ_VO:
        return isSetReqVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof inputRelateMerchantInfo_args)
        return this.equals((inputRelateMerchantInfo_args)that);
      return false;
    }

    public boolean equals(inputRelateMerchantInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_reqVo = true && this.isSetReqVo();
      boolean that_present_reqVo = true && that.isSetReqVo();
      if (this_present_reqVo || that_present_reqVo) {
        if (!(this_present_reqVo && that_present_reqVo))
          return false;
        if (!this.reqVo.equals(that.reqVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_reqVo = true && (isSetReqVo());
      list.add(present_reqVo);
      if (present_reqVo)
        list.add(reqVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(inputRelateMerchantInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetReqVo()).compareTo(other.isSetReqVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReqVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reqVo, other.reqVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("inputRelateMerchantInfo_args(");
      boolean first = true;

      sb.append("reqVo:");
      if (this.reqVo == null) {
        sb.append("null");
      } else {
        sb.append(this.reqVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (reqVo != null) {
        reqVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class inputRelateMerchantInfo_argsStandardSchemeFactory implements SchemeFactory {
      public inputRelateMerchantInfo_argsStandardScheme getScheme() {
        return new inputRelateMerchantInfo_argsStandardScheme();
      }
    }

    private static class inputRelateMerchantInfo_argsStandardScheme extends StandardScheme<inputRelateMerchantInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, inputRelateMerchantInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQ_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.reqVo = new com.froad.thrift.vo.recommendactivitytag.InputRelateMerchantActivityReqVo();
                struct.reqVo.read(iprot);
                struct.setReqVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, inputRelateMerchantInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.reqVo != null) {
          oprot.writeFieldBegin(REQ_VO_FIELD_DESC);
          struct.reqVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class inputRelateMerchantInfo_argsTupleSchemeFactory implements SchemeFactory {
      public inputRelateMerchantInfo_argsTupleScheme getScheme() {
        return new inputRelateMerchantInfo_argsTupleScheme();
      }
    }

    private static class inputRelateMerchantInfo_argsTupleScheme extends TupleScheme<inputRelateMerchantInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, inputRelateMerchantInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetReqVo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetReqVo()) {
          struct.reqVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, inputRelateMerchantInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.reqVo = new com.froad.thrift.vo.recommendactivitytag.InputRelateMerchantActivityReqVo();
          struct.reqVo.read(iprot);
          struct.setReqVoIsSet(true);
        }
      }
    }

  }

  public static class inputRelateMerchantInfo_result implements org.apache.thrift.TBase<inputRelateMerchantInfo_result, inputRelateMerchantInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<inputRelateMerchantInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("inputRelateMerchantInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new inputRelateMerchantInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new inputRelateMerchantInfo_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(inputRelateMerchantInfo_result.class, metaDataMap);
    }

    public inputRelateMerchantInfo_result() {
    }

    public inputRelateMerchantInfo_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public inputRelateMerchantInfo_result(inputRelateMerchantInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public inputRelateMerchantInfo_result deepCopy() {
      return new inputRelateMerchantInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public inputRelateMerchantInfo_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof inputRelateMerchantInfo_result)
        return this.equals((inputRelateMerchantInfo_result)that);
      return false;
    }

    public boolean equals(inputRelateMerchantInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(inputRelateMerchantInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("inputRelateMerchantInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class inputRelateMerchantInfo_resultStandardSchemeFactory implements SchemeFactory {
      public inputRelateMerchantInfo_resultStandardScheme getScheme() {
        return new inputRelateMerchantInfo_resultStandardScheme();
      }
    }

    private static class inputRelateMerchantInfo_resultStandardScheme extends StandardScheme<inputRelateMerchantInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, inputRelateMerchantInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, inputRelateMerchantInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class inputRelateMerchantInfo_resultTupleSchemeFactory implements SchemeFactory {
      public inputRelateMerchantInfo_resultTupleScheme getScheme() {
        return new inputRelateMerchantInfo_resultTupleScheme();
      }
    }

    private static class inputRelateMerchantInfo_resultTupleScheme extends TupleScheme<inputRelateMerchantInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, inputRelateMerchantInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, inputRelateMerchantInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryMerchantNameByLicense_args implements org.apache.thrift.TBase<queryMerchantNameByLicense_args, queryMerchantNameByLicense_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryMerchantNameByLicense_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryMerchantNameByLicense_args");

    private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField LICENSE_FIELD_DESC = new org.apache.thrift.protocol.TField("license", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryMerchantNameByLicense_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryMerchantNameByLicense_argsTupleSchemeFactory());
    }

    public String clientId; // required
    public String license; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CLIENT_ID((short)1, "clientId"),
      LICENSE((short)2, "license");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CLIENT_ID
            return CLIENT_ID;
          case 2: // LICENSE
            return LICENSE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.LICENSE, new org.apache.thrift.meta_data.FieldMetaData("license", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryMerchantNameByLicense_args.class, metaDataMap);
    }

    public queryMerchantNameByLicense_args() {
    }

    public queryMerchantNameByLicense_args(
      String clientId,
      String license)
    {
      this();
      this.clientId = clientId;
      this.license = license;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryMerchantNameByLicense_args(queryMerchantNameByLicense_args other) {
      if (other.isSetClientId()) {
        this.clientId = other.clientId;
      }
      if (other.isSetLicense()) {
        this.license = other.license;
      }
    }

    public queryMerchantNameByLicense_args deepCopy() {
      return new queryMerchantNameByLicense_args(this);
    }

    @Override
    public void clear() {
      this.clientId = null;
      this.license = null;
    }

    public String getClientId() {
      return this.clientId;
    }

    public queryMerchantNameByLicense_args setClientId(String clientId) {
      this.clientId = clientId;
      return this;
    }

    public void unsetClientId() {
      this.clientId = null;
    }

    /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
    public boolean isSetClientId() {
      return this.clientId != null;
    }

    public void setClientIdIsSet(boolean value) {
      if (!value) {
        this.clientId = null;
      }
    }

    public String getLicense() {
      return this.license;
    }

    public queryMerchantNameByLicense_args setLicense(String license) {
      this.license = license;
      return this;
    }

    public void unsetLicense() {
      this.license = null;
    }

    /** Returns true if field license is set (has been assigned a value) and false otherwise */
    public boolean isSetLicense() {
      return this.license != null;
    }

    public void setLicenseIsSet(boolean value) {
      if (!value) {
        this.license = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CLIENT_ID:
        if (value == null) {
          unsetClientId();
        } else {
          setClientId((String)value);
        }
        break;

      case LICENSE:
        if (value == null) {
          unsetLicense();
        } else {
          setLicense((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CLIENT_ID:
        return getClientId();

      case LICENSE:
        return getLicense();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CLIENT_ID:
        return isSetClientId();
      case LICENSE:
        return isSetLicense();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryMerchantNameByLicense_args)
        return this.equals((queryMerchantNameByLicense_args)that);
      return false;
    }

    public boolean equals(queryMerchantNameByLicense_args that) {
      if (that == null)
        return false;

      boolean this_present_clientId = true && this.isSetClientId();
      boolean that_present_clientId = true && that.isSetClientId();
      if (this_present_clientId || that_present_clientId) {
        if (!(this_present_clientId && that_present_clientId))
          return false;
        if (!this.clientId.equals(that.clientId))
          return false;
      }

      boolean this_present_license = true && this.isSetLicense();
      boolean that_present_license = true && that.isSetLicense();
      if (this_present_license || that_present_license) {
        if (!(this_present_license && that_present_license))
          return false;
        if (!this.license.equals(that.license))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_clientId = true && (isSetClientId());
      list.add(present_clientId);
      if (present_clientId)
        list.add(clientId);

      boolean present_license = true && (isSetLicense());
      list.add(present_license);
      if (present_license)
        list.add(license);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryMerchantNameByLicense_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLicense()).compareTo(other.isSetLicense());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLicense()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.license, other.license);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryMerchantNameByLicense_args(");
      boolean first = true;

      sb.append("clientId:");
      if (this.clientId == null) {
        sb.append("null");
      } else {
        sb.append(this.clientId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("license:");
      if (this.license == null) {
        sb.append("null");
      } else {
        sb.append(this.license);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryMerchantNameByLicense_argsStandardSchemeFactory implements SchemeFactory {
      public queryMerchantNameByLicense_argsStandardScheme getScheme() {
        return new queryMerchantNameByLicense_argsStandardScheme();
      }
    }

    private static class queryMerchantNameByLicense_argsStandardScheme extends StandardScheme<queryMerchantNameByLicense_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryMerchantNameByLicense_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CLIENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clientId = iprot.readString();
                struct.setClientIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LICENSE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.license = iprot.readString();
                struct.setLicenseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryMerchantNameByLicense_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.clientId != null) {
          oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
          oprot.writeString(struct.clientId);
          oprot.writeFieldEnd();
        }
        if (struct.license != null) {
          oprot.writeFieldBegin(LICENSE_FIELD_DESC);
          oprot.writeString(struct.license);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryMerchantNameByLicense_argsTupleSchemeFactory implements SchemeFactory {
      public queryMerchantNameByLicense_argsTupleScheme getScheme() {
        return new queryMerchantNameByLicense_argsTupleScheme();
      }
    }

    private static class queryMerchantNameByLicense_argsTupleScheme extends TupleScheme<queryMerchantNameByLicense_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryMerchantNameByLicense_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetClientId()) {
          optionals.set(0);
        }
        if (struct.isSetLicense()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetClientId()) {
          oprot.writeString(struct.clientId);
        }
        if (struct.isSetLicense()) {
          oprot.writeString(struct.license);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryMerchantNameByLicense_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.clientId = iprot.readString();
          struct.setClientIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.license = iprot.readString();
          struct.setLicenseIsSet(true);
        }
      }
    }

  }

  public static class queryMerchantNameByLicense_result implements org.apache.thrift.TBase<queryMerchantNameByLicense_result, queryMerchantNameByLicense_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryMerchantNameByLicense_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryMerchantNameByLicense_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryMerchantNameByLicense_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryMerchantNameByLicense_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.recommendactivitytag.MerchantNameResVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.recommendactivitytag.MerchantNameResVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryMerchantNameByLicense_result.class, metaDataMap);
    }

    public queryMerchantNameByLicense_result() {
    }

    public queryMerchantNameByLicense_result(
      com.froad.thrift.vo.recommendactivitytag.MerchantNameResVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryMerchantNameByLicense_result(queryMerchantNameByLicense_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.recommendactivitytag.MerchantNameResVo(other.success);
      }
    }

    public queryMerchantNameByLicense_result deepCopy() {
      return new queryMerchantNameByLicense_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.recommendactivitytag.MerchantNameResVo getSuccess() {
      return this.success;
    }

    public queryMerchantNameByLicense_result setSuccess(com.froad.thrift.vo.recommendactivitytag.MerchantNameResVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.recommendactivitytag.MerchantNameResVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryMerchantNameByLicense_result)
        return this.equals((queryMerchantNameByLicense_result)that);
      return false;
    }

    public boolean equals(queryMerchantNameByLicense_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryMerchantNameByLicense_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryMerchantNameByLicense_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryMerchantNameByLicense_resultStandardSchemeFactory implements SchemeFactory {
      public queryMerchantNameByLicense_resultStandardScheme getScheme() {
        return new queryMerchantNameByLicense_resultStandardScheme();
      }
    }

    private static class queryMerchantNameByLicense_resultStandardScheme extends StandardScheme<queryMerchantNameByLicense_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryMerchantNameByLicense_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.recommendactivitytag.MerchantNameResVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryMerchantNameByLicense_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryMerchantNameByLicense_resultTupleSchemeFactory implements SchemeFactory {
      public queryMerchantNameByLicense_resultTupleScheme getScheme() {
        return new queryMerchantNameByLicense_resultTupleScheme();
      }
    }

    private static class queryMerchantNameByLicense_resultTupleScheme extends TupleScheme<queryMerchantNameByLicense_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryMerchantNameByLicense_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryMerchantNameByLicense_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.recommendactivitytag.MerchantNameResVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class exportMerchantRelateActivityTag_args implements org.apache.thrift.TBase<exportMerchantRelateActivityTag_args, exportMerchantRelateActivityTag_args._Fields>, java.io.Serializable, Cloneable, Comparable<exportMerchantRelateActivityTag_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("exportMerchantRelateActivityTag_args");

    private static final org.apache.thrift.protocol.TField REQ_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("reqVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new exportMerchantRelateActivityTag_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new exportMerchantRelateActivityTag_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.recommendactivitytag.ExportRelateActivityTagReqVo reqVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQ_VO((short)1, "reqVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQ_VO
            return REQ_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQ_VO, new org.apache.thrift.meta_data.FieldMetaData("reqVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.recommendactivitytag.ExportRelateActivityTagReqVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(exportMerchantRelateActivityTag_args.class, metaDataMap);
    }

    public exportMerchantRelateActivityTag_args() {
    }

    public exportMerchantRelateActivityTag_args(
      com.froad.thrift.vo.recommendactivitytag.ExportRelateActivityTagReqVo reqVo)
    {
      this();
      this.reqVo = reqVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public exportMerchantRelateActivityTag_args(exportMerchantRelateActivityTag_args other) {
      if (other.isSetReqVo()) {
        this.reqVo = new com.froad.thrift.vo.recommendactivitytag.ExportRelateActivityTagReqVo(other.reqVo);
      }
    }

    public exportMerchantRelateActivityTag_args deepCopy() {
      return new exportMerchantRelateActivityTag_args(this);
    }

    @Override
    public void clear() {
      this.reqVo = null;
    }

    public com.froad.thrift.vo.recommendactivitytag.ExportRelateActivityTagReqVo getReqVo() {
      return this.reqVo;
    }

    public exportMerchantRelateActivityTag_args setReqVo(com.froad.thrift.vo.recommendactivitytag.ExportRelateActivityTagReqVo reqVo) {
      this.reqVo = reqVo;
      return this;
    }

    public void unsetReqVo() {
      this.reqVo = null;
    }

    /** Returns true if field reqVo is set (has been assigned a value) and false otherwise */
    public boolean isSetReqVo() {
      return this.reqVo != null;
    }

    public void setReqVoIsSet(boolean value) {
      if (!value) {
        this.reqVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQ_VO:
        if (value == null) {
          unsetReqVo();
        } else {
          setReqVo((com.froad.thrift.vo.recommendactivitytag.ExportRelateActivityTagReqVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQ_VO:
        return getReqVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQ_VO:
        return isSetReqVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof exportMerchantRelateActivityTag_args)
        return this.equals((exportMerchantRelateActivityTag_args)that);
      return false;
    }

    public boolean equals(exportMerchantRelateActivityTag_args that) {
      if (that == null)
        return false;

      boolean this_present_reqVo = true && this.isSetReqVo();
      boolean that_present_reqVo = true && that.isSetReqVo();
      if (this_present_reqVo || that_present_reqVo) {
        if (!(this_present_reqVo && that_present_reqVo))
          return false;
        if (!this.reqVo.equals(that.reqVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_reqVo = true && (isSetReqVo());
      list.add(present_reqVo);
      if (present_reqVo)
        list.add(reqVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(exportMerchantRelateActivityTag_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetReqVo()).compareTo(other.isSetReqVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReqVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reqVo, other.reqVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("exportMerchantRelateActivityTag_args(");
      boolean first = true;

      sb.append("reqVo:");
      if (this.reqVo == null) {
        sb.append("null");
      } else {
        sb.append(this.reqVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (reqVo != null) {
        reqVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class exportMerchantRelateActivityTag_argsStandardSchemeFactory implements SchemeFactory {
      public exportMerchantRelateActivityTag_argsStandardScheme getScheme() {
        return new exportMerchantRelateActivityTag_argsStandardScheme();
      }
    }

    private static class exportMerchantRelateActivityTag_argsStandardScheme extends StandardScheme<exportMerchantRelateActivityTag_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, exportMerchantRelateActivityTag_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQ_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.reqVo = new com.froad.thrift.vo.recommendactivitytag.ExportRelateActivityTagReqVo();
                struct.reqVo.read(iprot);
                struct.setReqVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, exportMerchantRelateActivityTag_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.reqVo != null) {
          oprot.writeFieldBegin(REQ_VO_FIELD_DESC);
          struct.reqVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class exportMerchantRelateActivityTag_argsTupleSchemeFactory implements SchemeFactory {
      public exportMerchantRelateActivityTag_argsTupleScheme getScheme() {
        return new exportMerchantRelateActivityTag_argsTupleScheme();
      }
    }

    private static class exportMerchantRelateActivityTag_argsTupleScheme extends TupleScheme<exportMerchantRelateActivityTag_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, exportMerchantRelateActivityTag_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetReqVo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetReqVo()) {
          struct.reqVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, exportMerchantRelateActivityTag_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.reqVo = new com.froad.thrift.vo.recommendactivitytag.ExportRelateActivityTagReqVo();
          struct.reqVo.read(iprot);
          struct.setReqVoIsSet(true);
        }
      }
    }

  }

  public static class exportMerchantRelateActivityTag_result implements org.apache.thrift.TBase<exportMerchantRelateActivityTag_result, exportMerchantRelateActivityTag_result._Fields>, java.io.Serializable, Cloneable, Comparable<exportMerchantRelateActivityTag_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("exportMerchantRelateActivityTag_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new exportMerchantRelateActivityTag_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new exportMerchantRelateActivityTag_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ExportResultRes success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ExportResultRes.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(exportMerchantRelateActivityTag_result.class, metaDataMap);
    }

    public exportMerchantRelateActivityTag_result() {
    }

    public exportMerchantRelateActivityTag_result(
      com.froad.thrift.vo.ExportResultRes success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public exportMerchantRelateActivityTag_result(exportMerchantRelateActivityTag_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ExportResultRes(other.success);
      }
    }

    public exportMerchantRelateActivityTag_result deepCopy() {
      return new exportMerchantRelateActivityTag_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ExportResultRes getSuccess() {
      return this.success;
    }

    public exportMerchantRelateActivityTag_result setSuccess(com.froad.thrift.vo.ExportResultRes success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ExportResultRes)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof exportMerchantRelateActivityTag_result)
        return this.equals((exportMerchantRelateActivityTag_result)that);
      return false;
    }

    public boolean equals(exportMerchantRelateActivityTag_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(exportMerchantRelateActivityTag_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("exportMerchantRelateActivityTag_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class exportMerchantRelateActivityTag_resultStandardSchemeFactory implements SchemeFactory {
      public exportMerchantRelateActivityTag_resultStandardScheme getScheme() {
        return new exportMerchantRelateActivityTag_resultStandardScheme();
      }
    }

    private static class exportMerchantRelateActivityTag_resultStandardScheme extends StandardScheme<exportMerchantRelateActivityTag_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, exportMerchantRelateActivityTag_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ExportResultRes();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, exportMerchantRelateActivityTag_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class exportMerchantRelateActivityTag_resultTupleSchemeFactory implements SchemeFactory {
      public exportMerchantRelateActivityTag_resultTupleScheme getScheme() {
        return new exportMerchantRelateActivityTag_resultTupleScheme();
      }
    }

    private static class exportMerchantRelateActivityTag_resultTupleScheme extends TupleScheme<exportMerchantRelateActivityTag_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, exportMerchantRelateActivityTag_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, exportMerchantRelateActivityTag_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ExportResultRes();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
