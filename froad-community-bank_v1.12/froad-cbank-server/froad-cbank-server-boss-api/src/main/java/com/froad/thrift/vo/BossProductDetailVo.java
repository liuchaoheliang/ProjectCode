/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.vo;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * Boss商品管理平台查看商品详情Vo
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-7-31")
public class BossProductDetailVo implements org.apache.thrift.TBase<BossProductDetailVo, BossProductDetailVo._Fields>, java.io.Serializable, Cloneable, Comparable<BossProductDetailVo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BossProductDetailVo");

  private static final org.apache.thrift.protocol.TField PRODUCT_FIELD_DESC = new org.apache.thrift.protocol.TField("product", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField IMAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("image", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField ORG_CODES_FIELD_DESC = new org.apache.thrift.protocol.TField("orgCodes", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField OUTLETS_FIELD_DESC = new org.apache.thrift.protocol.TField("outlets", org.apache.thrift.protocol.TType.LIST, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new BossProductDetailVoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new BossProductDetailVoTupleSchemeFactory());
  }

  /**
   * 商品基础信息
   */
  public BossProductVo product; // required
  /**
   * 商品图片列表
   */
  public List<ProductImageVo> image; // required
  /**
   * 商品提货网点所属法人行社的机构代码列表
   */
  public List<String> orgCodes; // optional
  /**
   * 商品提货网点的门店信息
   */
  public List<ProductOutletVo> outlets; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 商品基础信息
     */
    PRODUCT((short)1, "product"),
    /**
     * 商品图片列表
     */
    IMAGE((short)2, "image"),
    /**
     * 商品提货网点所属法人行社的机构代码列表
     */
    ORG_CODES((short)3, "orgCodes"),
    /**
     * 商品提货网点的门店信息
     */
    OUTLETS((short)4, "outlets");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PRODUCT
          return PRODUCT;
        case 2: // IMAGE
          return IMAGE;
        case 3: // ORG_CODES
          return ORG_CODES;
        case 4: // OUTLETS
          return OUTLETS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.ORG_CODES,_Fields.OUTLETS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PRODUCT, new org.apache.thrift.meta_data.FieldMetaData("product", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BossProductVo.class)));
    tmpMap.put(_Fields.IMAGE, new org.apache.thrift.meta_data.FieldMetaData("image", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ProductImageVo.class))));
    tmpMap.put(_Fields.ORG_CODES, new org.apache.thrift.meta_data.FieldMetaData("orgCodes", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.OUTLETS, new org.apache.thrift.meta_data.FieldMetaData("outlets", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "ProductOutletVo"))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BossProductDetailVo.class, metaDataMap);
  }

  public BossProductDetailVo() {
  }

  public BossProductDetailVo(
    BossProductVo product,
    List<ProductImageVo> image)
  {
    this();
    this.product = product;
    this.image = image;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BossProductDetailVo(BossProductDetailVo other) {
    if (other.isSetProduct()) {
      this.product = new BossProductVo(other.product);
    }
    if (other.isSetImage()) {
      List<ProductImageVo> __this__image = new ArrayList<ProductImageVo>(other.image.size());
      for (ProductImageVo other_element : other.image) {
        __this__image.add(new ProductImageVo(other_element));
      }
      this.image = __this__image;
    }
    if (other.isSetOrgCodes()) {
      List<String> __this__orgCodes = new ArrayList<String>(other.orgCodes);
      this.orgCodes = __this__orgCodes;
    }
    if (other.isSetOutlets()) {
      List<ProductOutletVo> __this__outlets = new ArrayList<ProductOutletVo>(other.outlets.size());
      for (ProductOutletVo other_element : other.outlets) {
        __this__outlets.add(other_element);
      }
      this.outlets = __this__outlets;
    }
  }

  public BossProductDetailVo deepCopy() {
    return new BossProductDetailVo(this);
  }

  @Override
  public void clear() {
    this.product = null;
    this.image = null;
    this.orgCodes = null;
    this.outlets = null;
  }

  /**
   * 商品基础信息
   */
  public BossProductVo getProduct() {
    return this.product;
  }

  /**
   * 商品基础信息
   */
  public BossProductDetailVo setProduct(BossProductVo product) {
    this.product = product;
    return this;
  }

  public void unsetProduct() {
    this.product = null;
  }

  /** Returns true if field product is set (has been assigned a value) and false otherwise */
  public boolean isSetProduct() {
    return this.product != null;
  }

  public void setProductIsSet(boolean value) {
    if (!value) {
      this.product = null;
    }
  }

  public int getImageSize() {
    return (this.image == null) ? 0 : this.image.size();
  }

  public java.util.Iterator<ProductImageVo> getImageIterator() {
    return (this.image == null) ? null : this.image.iterator();
  }

  public void addToImage(ProductImageVo elem) {
    if (this.image == null) {
      this.image = new ArrayList<ProductImageVo>();
    }
    this.image.add(elem);
  }

  /**
   * 商品图片列表
   */
  public List<ProductImageVo> getImage() {
    return this.image;
  }

  /**
   * 商品图片列表
   */
  public BossProductDetailVo setImage(List<ProductImageVo> image) {
    this.image = image;
    return this;
  }

  public void unsetImage() {
    this.image = null;
  }

  /** Returns true if field image is set (has been assigned a value) and false otherwise */
  public boolean isSetImage() {
    return this.image != null;
  }

  public void setImageIsSet(boolean value) {
    if (!value) {
      this.image = null;
    }
  }

  public int getOrgCodesSize() {
    return (this.orgCodes == null) ? 0 : this.orgCodes.size();
  }

  public java.util.Iterator<String> getOrgCodesIterator() {
    return (this.orgCodes == null) ? null : this.orgCodes.iterator();
  }

  public void addToOrgCodes(String elem) {
    if (this.orgCodes == null) {
      this.orgCodes = new ArrayList<String>();
    }
    this.orgCodes.add(elem);
  }

  /**
   * 商品提货网点所属法人行社的机构代码列表
   */
  public List<String> getOrgCodes() {
    return this.orgCodes;
  }

  /**
   * 商品提货网点所属法人行社的机构代码列表
   */
  public BossProductDetailVo setOrgCodes(List<String> orgCodes) {
    this.orgCodes = orgCodes;
    return this;
  }

  public void unsetOrgCodes() {
    this.orgCodes = null;
  }

  /** Returns true if field orgCodes is set (has been assigned a value) and false otherwise */
  public boolean isSetOrgCodes() {
    return this.orgCodes != null;
  }

  public void setOrgCodesIsSet(boolean value) {
    if (!value) {
      this.orgCodes = null;
    }
  }

  public int getOutletsSize() {
    return (this.outlets == null) ? 0 : this.outlets.size();
  }

  public java.util.Iterator<ProductOutletVo> getOutletsIterator() {
    return (this.outlets == null) ? null : this.outlets.iterator();
  }

  public void addToOutlets(ProductOutletVo elem) {
    if (this.outlets == null) {
      this.outlets = new ArrayList<ProductOutletVo>();
    }
    this.outlets.add(elem);
  }

  /**
   * 商品提货网点的门店信息
   */
  public List<ProductOutletVo> getOutlets() {
    return this.outlets;
  }

  /**
   * 商品提货网点的门店信息
   */
  public BossProductDetailVo setOutlets(List<ProductOutletVo> outlets) {
    this.outlets = outlets;
    return this;
  }

  public void unsetOutlets() {
    this.outlets = null;
  }

  /** Returns true if field outlets is set (has been assigned a value) and false otherwise */
  public boolean isSetOutlets() {
    return this.outlets != null;
  }

  public void setOutletsIsSet(boolean value) {
    if (!value) {
      this.outlets = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PRODUCT:
      if (value == null) {
        unsetProduct();
      } else {
        setProduct((BossProductVo)value);
      }
      break;

    case IMAGE:
      if (value == null) {
        unsetImage();
      } else {
        setImage((List<ProductImageVo>)value);
      }
      break;

    case ORG_CODES:
      if (value == null) {
        unsetOrgCodes();
      } else {
        setOrgCodes((List<String>)value);
      }
      break;

    case OUTLETS:
      if (value == null) {
        unsetOutlets();
      } else {
        setOutlets((List<ProductOutletVo>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PRODUCT:
      return getProduct();

    case IMAGE:
      return getImage();

    case ORG_CODES:
      return getOrgCodes();

    case OUTLETS:
      return getOutlets();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PRODUCT:
      return isSetProduct();
    case IMAGE:
      return isSetImage();
    case ORG_CODES:
      return isSetOrgCodes();
    case OUTLETS:
      return isSetOutlets();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BossProductDetailVo)
      return this.equals((BossProductDetailVo)that);
    return false;
  }

  public boolean equals(BossProductDetailVo that) {
    if (that == null)
      return false;

    boolean this_present_product = true && this.isSetProduct();
    boolean that_present_product = true && that.isSetProduct();
    if (this_present_product || that_present_product) {
      if (!(this_present_product && that_present_product))
        return false;
      if (!this.product.equals(that.product))
        return false;
    }

    boolean this_present_image = true && this.isSetImage();
    boolean that_present_image = true && that.isSetImage();
    if (this_present_image || that_present_image) {
      if (!(this_present_image && that_present_image))
        return false;
      if (!this.image.equals(that.image))
        return false;
    }

    boolean this_present_orgCodes = true && this.isSetOrgCodes();
    boolean that_present_orgCodes = true && that.isSetOrgCodes();
    if (this_present_orgCodes || that_present_orgCodes) {
      if (!(this_present_orgCodes && that_present_orgCodes))
        return false;
      if (!this.orgCodes.equals(that.orgCodes))
        return false;
    }

    boolean this_present_outlets = true && this.isSetOutlets();
    boolean that_present_outlets = true && that.isSetOutlets();
    if (this_present_outlets || that_present_outlets) {
      if (!(this_present_outlets && that_present_outlets))
        return false;
      if (!this.outlets.equals(that.outlets))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_product = true && (isSetProduct());
    list.add(present_product);
    if (present_product)
      list.add(product);

    boolean present_image = true && (isSetImage());
    list.add(present_image);
    if (present_image)
      list.add(image);

    boolean present_orgCodes = true && (isSetOrgCodes());
    list.add(present_orgCodes);
    if (present_orgCodes)
      list.add(orgCodes);

    boolean present_outlets = true && (isSetOutlets());
    list.add(present_outlets);
    if (present_outlets)
      list.add(outlets);

    return list.hashCode();
  }

  @Override
  public int compareTo(BossProductDetailVo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetProduct()).compareTo(other.isSetProduct());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProduct()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.product, other.product);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetImage()).compareTo(other.isSetImage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.image, other.image);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrgCodes()).compareTo(other.isSetOrgCodes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrgCodes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orgCodes, other.orgCodes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOutlets()).compareTo(other.isSetOutlets());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOutlets()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outlets, other.outlets);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("BossProductDetailVo(");
    boolean first = true;

    sb.append("product:");
    if (this.product == null) {
      sb.append("null");
    } else {
      sb.append(this.product);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("image:");
    if (this.image == null) {
      sb.append("null");
    } else {
      sb.append(this.image);
    }
    first = false;
    if (isSetOrgCodes()) {
      if (!first) sb.append(", ");
      sb.append("orgCodes:");
      if (this.orgCodes == null) {
        sb.append("null");
      } else {
        sb.append(this.orgCodes);
      }
      first = false;
    }
    if (isSetOutlets()) {
      if (!first) sb.append(", ");
      sb.append("outlets:");
      if (this.outlets == null) {
        sb.append("null");
      } else {
        sb.append(this.outlets);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (product != null) {
      product.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BossProductDetailVoStandardSchemeFactory implements SchemeFactory {
    public BossProductDetailVoStandardScheme getScheme() {
      return new BossProductDetailVoStandardScheme();
    }
  }

  private static class BossProductDetailVoStandardScheme extends StandardScheme<BossProductDetailVo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BossProductDetailVo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PRODUCT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.product = new BossProductVo();
              struct.product.read(iprot);
              struct.setProductIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // IMAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                struct.image = new ArrayList<ProductImageVo>(_list32.size);
                ProductImageVo _elem33;
                for (int _i34 = 0; _i34 < _list32.size; ++_i34)
                {
                  _elem33 = new ProductImageVo();
                  _elem33.read(iprot);
                  struct.image.add(_elem33);
                }
                iprot.readListEnd();
              }
              struct.setImageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ORG_CODES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list35 = iprot.readListBegin();
                struct.orgCodes = new ArrayList<String>(_list35.size);
                String _elem36;
                for (int _i37 = 0; _i37 < _list35.size; ++_i37)
                {
                  _elem36 = iprot.readString();
                  struct.orgCodes.add(_elem36);
                }
                iprot.readListEnd();
              }
              struct.setOrgCodesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // OUTLETS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list38 = iprot.readListBegin();
                struct.outlets = new ArrayList<ProductOutletVo>(_list38.size);
                ProductOutletVo _elem39;
                for (int _i40 = 0; _i40 < _list38.size; ++_i40)
                {
                  _elem39 = new ProductOutletVo();
                  _elem39.read(iprot);
                  struct.outlets.add(_elem39);
                }
                iprot.readListEnd();
              }
              struct.setOutletsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BossProductDetailVo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.product != null) {
        oprot.writeFieldBegin(PRODUCT_FIELD_DESC);
        struct.product.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.image != null) {
        oprot.writeFieldBegin(IMAGE_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.image.size()));
          for (ProductImageVo _iter41 : struct.image)
          {
            _iter41.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.orgCodes != null) {
        if (struct.isSetOrgCodes()) {
          oprot.writeFieldBegin(ORG_CODES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.orgCodes.size()));
            for (String _iter42 : struct.orgCodes)
            {
              oprot.writeString(_iter42);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.outlets != null) {
        if (struct.isSetOutlets()) {
          oprot.writeFieldBegin(OUTLETS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.outlets.size()));
            for (ProductOutletVo _iter43 : struct.outlets)
            {
              _iter43.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BossProductDetailVoTupleSchemeFactory implements SchemeFactory {
    public BossProductDetailVoTupleScheme getScheme() {
      return new BossProductDetailVoTupleScheme();
    }
  }

  private static class BossProductDetailVoTupleScheme extends TupleScheme<BossProductDetailVo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BossProductDetailVo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetProduct()) {
        optionals.set(0);
      }
      if (struct.isSetImage()) {
        optionals.set(1);
      }
      if (struct.isSetOrgCodes()) {
        optionals.set(2);
      }
      if (struct.isSetOutlets()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetProduct()) {
        struct.product.write(oprot);
      }
      if (struct.isSetImage()) {
        {
          oprot.writeI32(struct.image.size());
          for (ProductImageVo _iter44 : struct.image)
          {
            _iter44.write(oprot);
          }
        }
      }
      if (struct.isSetOrgCodes()) {
        {
          oprot.writeI32(struct.orgCodes.size());
          for (String _iter45 : struct.orgCodes)
          {
            oprot.writeString(_iter45);
          }
        }
      }
      if (struct.isSetOutlets()) {
        {
          oprot.writeI32(struct.outlets.size());
          for (ProductOutletVo _iter46 : struct.outlets)
          {
            _iter46.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BossProductDetailVo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.product = new BossProductVo();
        struct.product.read(iprot);
        struct.setProductIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list47 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.image = new ArrayList<ProductImageVo>(_list47.size);
          ProductImageVo _elem48;
          for (int _i49 = 0; _i49 < _list47.size; ++_i49)
          {
            _elem48 = new ProductImageVo();
            _elem48.read(iprot);
            struct.image.add(_elem48);
          }
        }
        struct.setImageIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list50 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.orgCodes = new ArrayList<String>(_list50.size);
          String _elem51;
          for (int _i52 = 0; _i52 < _list50.size; ++_i52)
          {
            _elem51 = iprot.readString();
            struct.orgCodes.add(_elem51);
          }
        }
        struct.setOrgCodesIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list53 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.outlets = new ArrayList<ProductOutletVo>(_list53.size);
          ProductOutletVo _elem54;
          for (int _i55 = 0; _i55 < _list53.size; ++_i55)
          {
            _elem54 = new ProductOutletVo();
            _elem54.read(iprot);
            struct.outlets.add(_elem54);
          }
        }
        struct.setOutletsIsSet(true);
      }
    }
  }

}

