/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.vo.dictionary;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 字典条目vo
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-12-3")
public class DictionaryItemVo implements org.apache.thrift.TBase<DictionaryItemVo, DictionaryItemVo._Fields>, java.io.Serializable, Cloneable, Comparable<DictionaryItemVo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DictionaryItemVo");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField ITEM_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("itemCode", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField ITEM_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("itemName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField ITEM_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("itemValue", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField DEPICTION_FIELD_DESC = new org.apache.thrift.protocol.TField("depiction", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField DIC_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("dicId", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField ORDER_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("orderValue", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField IS_ENABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("isEnable", org.apache.thrift.protocol.TType.BOOL, (short)9);
  private static final org.apache.thrift.protocol.TField DIC_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("dicName", org.apache.thrift.protocol.TType.STRING, (short)10);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new DictionaryItemVoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new DictionaryItemVoTupleSchemeFactory());
  }

  /**
   * 字典条目id(自增主键)
   */
  public long id; // optional
  /**
   * 字典条目编号
   */
  public String itemCode; // optional
  /**
   * 字典条目名称
   */
  public String itemName; // optional
  /**
   * 字典条目值
   */
  public String itemValue; // optional
  /**
   * 字典描述
   */
  public String depiction; // optional
  /**
   * 字典ID
   */
  public long dicId; // optional
  /**
   * 客户端ID
   */
  public String clientId; // optional
  /**
   * 排序值
   */
  public int orderValue; // optional
  /**
   * 是否有效
   */
  public boolean isEnable; // optional
  /**
   * 字典名称
   */
  public String dicName; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 字典条目id(自增主键)
     */
    ID((short)1, "id"),
    /**
     * 字典条目编号
     */
    ITEM_CODE((short)2, "itemCode"),
    /**
     * 字典条目名称
     */
    ITEM_NAME((short)3, "itemName"),
    /**
     * 字典条目值
     */
    ITEM_VALUE((short)4, "itemValue"),
    /**
     * 字典描述
     */
    DEPICTION((short)5, "depiction"),
    /**
     * 字典ID
     */
    DIC_ID((short)6, "dicId"),
    /**
     * 客户端ID
     */
    CLIENT_ID((short)7, "clientId"),
    /**
     * 排序值
     */
    ORDER_VALUE((short)8, "orderValue"),
    /**
     * 是否有效
     */
    IS_ENABLE((short)9, "isEnable"),
    /**
     * 字典名称
     */
    DIC_NAME((short)10, "dicName");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // ITEM_CODE
          return ITEM_CODE;
        case 3: // ITEM_NAME
          return ITEM_NAME;
        case 4: // ITEM_VALUE
          return ITEM_VALUE;
        case 5: // DEPICTION
          return DEPICTION;
        case 6: // DIC_ID
          return DIC_ID;
        case 7: // CLIENT_ID
          return CLIENT_ID;
        case 8: // ORDER_VALUE
          return ORDER_VALUE;
        case 9: // IS_ENABLE
          return IS_ENABLE;
        case 10: // DIC_NAME
          return DIC_NAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __DICID_ISSET_ID = 1;
  private static final int __ORDERVALUE_ISSET_ID = 2;
  private static final int __ISENABLE_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ID,_Fields.ITEM_CODE,_Fields.ITEM_NAME,_Fields.ITEM_VALUE,_Fields.DEPICTION,_Fields.DIC_ID,_Fields.CLIENT_ID,_Fields.ORDER_VALUE,_Fields.IS_ENABLE,_Fields.DIC_NAME};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ITEM_CODE, new org.apache.thrift.meta_data.FieldMetaData("itemCode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ITEM_NAME, new org.apache.thrift.meta_data.FieldMetaData("itemName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ITEM_VALUE, new org.apache.thrift.meta_data.FieldMetaData("itemValue", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DEPICTION, new org.apache.thrift.meta_data.FieldMetaData("depiction", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DIC_ID, new org.apache.thrift.meta_data.FieldMetaData("dicId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORDER_VALUE, new org.apache.thrift.meta_data.FieldMetaData("orderValue", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IS_ENABLE, new org.apache.thrift.meta_data.FieldMetaData("isEnable", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.DIC_NAME, new org.apache.thrift.meta_data.FieldMetaData("dicName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DictionaryItemVo.class, metaDataMap);
  }

  public DictionaryItemVo() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DictionaryItemVo(DictionaryItemVo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetItemCode()) {
      this.itemCode = other.itemCode;
    }
    if (other.isSetItemName()) {
      this.itemName = other.itemName;
    }
    if (other.isSetItemValue()) {
      this.itemValue = other.itemValue;
    }
    if (other.isSetDepiction()) {
      this.depiction = other.depiction;
    }
    this.dicId = other.dicId;
    if (other.isSetClientId()) {
      this.clientId = other.clientId;
    }
    this.orderValue = other.orderValue;
    this.isEnable = other.isEnable;
    if (other.isSetDicName()) {
      this.dicName = other.dicName;
    }
  }

  public DictionaryItemVo deepCopy() {
    return new DictionaryItemVo(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.itemCode = null;
    this.itemName = null;
    this.itemValue = null;
    this.depiction = null;
    setDicIdIsSet(false);
    this.dicId = 0;
    this.clientId = null;
    setOrderValueIsSet(false);
    this.orderValue = 0;
    setIsEnableIsSet(false);
    this.isEnable = false;
    this.dicName = null;
  }

  /**
   * 字典条目id(自增主键)
   */
  public long getId() {
    return this.id;
  }

  /**
   * 字典条目id(自增主键)
   */
  public DictionaryItemVo setId(long id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  /**
   * 字典条目编号
   */
  public String getItemCode() {
    return this.itemCode;
  }

  /**
   * 字典条目编号
   */
  public DictionaryItemVo setItemCode(String itemCode) {
    this.itemCode = itemCode;
    return this;
  }

  public void unsetItemCode() {
    this.itemCode = null;
  }

  /** Returns true if field itemCode is set (has been assigned a value) and false otherwise */
  public boolean isSetItemCode() {
    return this.itemCode != null;
  }

  public void setItemCodeIsSet(boolean value) {
    if (!value) {
      this.itemCode = null;
    }
  }

  /**
   * 字典条目名称
   */
  public String getItemName() {
    return this.itemName;
  }

  /**
   * 字典条目名称
   */
  public DictionaryItemVo setItemName(String itemName) {
    this.itemName = itemName;
    return this;
  }

  public void unsetItemName() {
    this.itemName = null;
  }

  /** Returns true if field itemName is set (has been assigned a value) and false otherwise */
  public boolean isSetItemName() {
    return this.itemName != null;
  }

  public void setItemNameIsSet(boolean value) {
    if (!value) {
      this.itemName = null;
    }
  }

  /**
   * 字典条目值
   */
  public String getItemValue() {
    return this.itemValue;
  }

  /**
   * 字典条目值
   */
  public DictionaryItemVo setItemValue(String itemValue) {
    this.itemValue = itemValue;
    return this;
  }

  public void unsetItemValue() {
    this.itemValue = null;
  }

  /** Returns true if field itemValue is set (has been assigned a value) and false otherwise */
  public boolean isSetItemValue() {
    return this.itemValue != null;
  }

  public void setItemValueIsSet(boolean value) {
    if (!value) {
      this.itemValue = null;
    }
  }

  /**
   * 字典描述
   */
  public String getDepiction() {
    return this.depiction;
  }

  /**
   * 字典描述
   */
  public DictionaryItemVo setDepiction(String depiction) {
    this.depiction = depiction;
    return this;
  }

  public void unsetDepiction() {
    this.depiction = null;
  }

  /** Returns true if field depiction is set (has been assigned a value) and false otherwise */
  public boolean isSetDepiction() {
    return this.depiction != null;
  }

  public void setDepictionIsSet(boolean value) {
    if (!value) {
      this.depiction = null;
    }
  }

  /**
   * 字典ID
   */
  public long getDicId() {
    return this.dicId;
  }

  /**
   * 字典ID
   */
  public DictionaryItemVo setDicId(long dicId) {
    this.dicId = dicId;
    setDicIdIsSet(true);
    return this;
  }

  public void unsetDicId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DICID_ISSET_ID);
  }

  /** Returns true if field dicId is set (has been assigned a value) and false otherwise */
  public boolean isSetDicId() {
    return EncodingUtils.testBit(__isset_bitfield, __DICID_ISSET_ID);
  }

  public void setDicIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DICID_ISSET_ID, value);
  }

  /**
   * 客户端ID
   */
  public String getClientId() {
    return this.clientId;
  }

  /**
   * 客户端ID
   */
  public DictionaryItemVo setClientId(String clientId) {
    this.clientId = clientId;
    return this;
  }

  public void unsetClientId() {
    this.clientId = null;
  }

  /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
  public boolean isSetClientId() {
    return this.clientId != null;
  }

  public void setClientIdIsSet(boolean value) {
    if (!value) {
      this.clientId = null;
    }
  }

  /**
   * 排序值
   */
  public int getOrderValue() {
    return this.orderValue;
  }

  /**
   * 排序值
   */
  public DictionaryItemVo setOrderValue(int orderValue) {
    this.orderValue = orderValue;
    setOrderValueIsSet(true);
    return this;
  }

  public void unsetOrderValue() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ORDERVALUE_ISSET_ID);
  }

  /** Returns true if field orderValue is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderValue() {
    return EncodingUtils.testBit(__isset_bitfield, __ORDERVALUE_ISSET_ID);
  }

  public void setOrderValueIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ORDERVALUE_ISSET_ID, value);
  }

  /**
   * 是否有效
   */
  public boolean isIsEnable() {
    return this.isEnable;
  }

  /**
   * 是否有效
   */
  public DictionaryItemVo setIsEnable(boolean isEnable) {
    this.isEnable = isEnable;
    setIsEnableIsSet(true);
    return this;
  }

  public void unsetIsEnable() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISENABLE_ISSET_ID);
  }

  /** Returns true if field isEnable is set (has been assigned a value) and false otherwise */
  public boolean isSetIsEnable() {
    return EncodingUtils.testBit(__isset_bitfield, __ISENABLE_ISSET_ID);
  }

  public void setIsEnableIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISENABLE_ISSET_ID, value);
  }

  /**
   * 字典名称
   */
  public String getDicName() {
    return this.dicName;
  }

  /**
   * 字典名称
   */
  public DictionaryItemVo setDicName(String dicName) {
    this.dicName = dicName;
    return this;
  }

  public void unsetDicName() {
    this.dicName = null;
  }

  /** Returns true if field dicName is set (has been assigned a value) and false otherwise */
  public boolean isSetDicName() {
    return this.dicName != null;
  }

  public void setDicNameIsSet(boolean value) {
    if (!value) {
      this.dicName = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    case ITEM_CODE:
      if (value == null) {
        unsetItemCode();
      } else {
        setItemCode((String)value);
      }
      break;

    case ITEM_NAME:
      if (value == null) {
        unsetItemName();
      } else {
        setItemName((String)value);
      }
      break;

    case ITEM_VALUE:
      if (value == null) {
        unsetItemValue();
      } else {
        setItemValue((String)value);
      }
      break;

    case DEPICTION:
      if (value == null) {
        unsetDepiction();
      } else {
        setDepiction((String)value);
      }
      break;

    case DIC_ID:
      if (value == null) {
        unsetDicId();
      } else {
        setDicId((Long)value);
      }
      break;

    case CLIENT_ID:
      if (value == null) {
        unsetClientId();
      } else {
        setClientId((String)value);
      }
      break;

    case ORDER_VALUE:
      if (value == null) {
        unsetOrderValue();
      } else {
        setOrderValue((Integer)value);
      }
      break;

    case IS_ENABLE:
      if (value == null) {
        unsetIsEnable();
      } else {
        setIsEnable((Boolean)value);
      }
      break;

    case DIC_NAME:
      if (value == null) {
        unsetDicName();
      } else {
        setDicName((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Long.valueOf(getId());

    case ITEM_CODE:
      return getItemCode();

    case ITEM_NAME:
      return getItemName();

    case ITEM_VALUE:
      return getItemValue();

    case DEPICTION:
      return getDepiction();

    case DIC_ID:
      return Long.valueOf(getDicId());

    case CLIENT_ID:
      return getClientId();

    case ORDER_VALUE:
      return Integer.valueOf(getOrderValue());

    case IS_ENABLE:
      return Boolean.valueOf(isIsEnable());

    case DIC_NAME:
      return getDicName();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case ITEM_CODE:
      return isSetItemCode();
    case ITEM_NAME:
      return isSetItemName();
    case ITEM_VALUE:
      return isSetItemValue();
    case DEPICTION:
      return isSetDepiction();
    case DIC_ID:
      return isSetDicId();
    case CLIENT_ID:
      return isSetClientId();
    case ORDER_VALUE:
      return isSetOrderValue();
    case IS_ENABLE:
      return isSetIsEnable();
    case DIC_NAME:
      return isSetDicName();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof DictionaryItemVo)
      return this.equals((DictionaryItemVo)that);
    return false;
  }

  public boolean equals(DictionaryItemVo that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_itemCode = true && this.isSetItemCode();
    boolean that_present_itemCode = true && that.isSetItemCode();
    if (this_present_itemCode || that_present_itemCode) {
      if (!(this_present_itemCode && that_present_itemCode))
        return false;
      if (!this.itemCode.equals(that.itemCode))
        return false;
    }

    boolean this_present_itemName = true && this.isSetItemName();
    boolean that_present_itemName = true && that.isSetItemName();
    if (this_present_itemName || that_present_itemName) {
      if (!(this_present_itemName && that_present_itemName))
        return false;
      if (!this.itemName.equals(that.itemName))
        return false;
    }

    boolean this_present_itemValue = true && this.isSetItemValue();
    boolean that_present_itemValue = true && that.isSetItemValue();
    if (this_present_itemValue || that_present_itemValue) {
      if (!(this_present_itemValue && that_present_itemValue))
        return false;
      if (!this.itemValue.equals(that.itemValue))
        return false;
    }

    boolean this_present_depiction = true && this.isSetDepiction();
    boolean that_present_depiction = true && that.isSetDepiction();
    if (this_present_depiction || that_present_depiction) {
      if (!(this_present_depiction && that_present_depiction))
        return false;
      if (!this.depiction.equals(that.depiction))
        return false;
    }

    boolean this_present_dicId = true && this.isSetDicId();
    boolean that_present_dicId = true && that.isSetDicId();
    if (this_present_dicId || that_present_dicId) {
      if (!(this_present_dicId && that_present_dicId))
        return false;
      if (this.dicId != that.dicId)
        return false;
    }

    boolean this_present_clientId = true && this.isSetClientId();
    boolean that_present_clientId = true && that.isSetClientId();
    if (this_present_clientId || that_present_clientId) {
      if (!(this_present_clientId && that_present_clientId))
        return false;
      if (!this.clientId.equals(that.clientId))
        return false;
    }

    boolean this_present_orderValue = true && this.isSetOrderValue();
    boolean that_present_orderValue = true && that.isSetOrderValue();
    if (this_present_orderValue || that_present_orderValue) {
      if (!(this_present_orderValue && that_present_orderValue))
        return false;
      if (this.orderValue != that.orderValue)
        return false;
    }

    boolean this_present_isEnable = true && this.isSetIsEnable();
    boolean that_present_isEnable = true && that.isSetIsEnable();
    if (this_present_isEnable || that_present_isEnable) {
      if (!(this_present_isEnable && that_present_isEnable))
        return false;
      if (this.isEnable != that.isEnable)
        return false;
    }

    boolean this_present_dicName = true && this.isSetDicName();
    boolean that_present_dicName = true && that.isSetDicName();
    if (this_present_dicName || that_present_dicName) {
      if (!(this_present_dicName && that_present_dicName))
        return false;
      if (!this.dicName.equals(that.dicName))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true && (isSetId());
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_itemCode = true && (isSetItemCode());
    list.add(present_itemCode);
    if (present_itemCode)
      list.add(itemCode);

    boolean present_itemName = true && (isSetItemName());
    list.add(present_itemName);
    if (present_itemName)
      list.add(itemName);

    boolean present_itemValue = true && (isSetItemValue());
    list.add(present_itemValue);
    if (present_itemValue)
      list.add(itemValue);

    boolean present_depiction = true && (isSetDepiction());
    list.add(present_depiction);
    if (present_depiction)
      list.add(depiction);

    boolean present_dicId = true && (isSetDicId());
    list.add(present_dicId);
    if (present_dicId)
      list.add(dicId);

    boolean present_clientId = true && (isSetClientId());
    list.add(present_clientId);
    if (present_clientId)
      list.add(clientId);

    boolean present_orderValue = true && (isSetOrderValue());
    list.add(present_orderValue);
    if (present_orderValue)
      list.add(orderValue);

    boolean present_isEnable = true && (isSetIsEnable());
    list.add(present_isEnable);
    if (present_isEnable)
      list.add(isEnable);

    boolean present_dicName = true && (isSetDicName());
    list.add(present_dicName);
    if (present_dicName)
      list.add(dicName);

    return list.hashCode();
  }

  @Override
  public int compareTo(DictionaryItemVo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetItemCode()).compareTo(other.isSetItemCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetItemCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.itemCode, other.itemCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetItemName()).compareTo(other.isSetItemName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetItemName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.itemName, other.itemName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetItemValue()).compareTo(other.isSetItemValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetItemValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.itemValue, other.itemValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDepiction()).compareTo(other.isSetDepiction());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDepiction()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.depiction, other.depiction);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDicId()).compareTo(other.isSetDicId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDicId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dicId, other.dicId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClientId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderValue()).compareTo(other.isSetOrderValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderValue, other.orderValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsEnable()).compareTo(other.isSetIsEnable());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsEnable()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isEnable, other.isEnable);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDicName()).compareTo(other.isSetDicName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDicName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dicName, other.dicName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("DictionaryItemVo(");
    boolean first = true;

    if (isSetId()) {
      sb.append("id:");
      sb.append(this.id);
      first = false;
    }
    if (isSetItemCode()) {
      if (!first) sb.append(", ");
      sb.append("itemCode:");
      if (this.itemCode == null) {
        sb.append("null");
      } else {
        sb.append(this.itemCode);
      }
      first = false;
    }
    if (isSetItemName()) {
      if (!first) sb.append(", ");
      sb.append("itemName:");
      if (this.itemName == null) {
        sb.append("null");
      } else {
        sb.append(this.itemName);
      }
      first = false;
    }
    if (isSetItemValue()) {
      if (!first) sb.append(", ");
      sb.append("itemValue:");
      if (this.itemValue == null) {
        sb.append("null");
      } else {
        sb.append(this.itemValue);
      }
      first = false;
    }
    if (isSetDepiction()) {
      if (!first) sb.append(", ");
      sb.append("depiction:");
      if (this.depiction == null) {
        sb.append("null");
      } else {
        sb.append(this.depiction);
      }
      first = false;
    }
    if (isSetDicId()) {
      if (!first) sb.append(", ");
      sb.append("dicId:");
      sb.append(this.dicId);
      first = false;
    }
    if (isSetClientId()) {
      if (!first) sb.append(", ");
      sb.append("clientId:");
      if (this.clientId == null) {
        sb.append("null");
      } else {
        sb.append(this.clientId);
      }
      first = false;
    }
    if (isSetOrderValue()) {
      if (!first) sb.append(", ");
      sb.append("orderValue:");
      sb.append(this.orderValue);
      first = false;
    }
    if (isSetIsEnable()) {
      if (!first) sb.append(", ");
      sb.append("isEnable:");
      sb.append(this.isEnable);
      first = false;
    }
    if (isSetDicName()) {
      if (!first) sb.append(", ");
      sb.append("dicName:");
      if (this.dicName == null) {
        sb.append("null");
      } else {
        sb.append(this.dicName);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DictionaryItemVoStandardSchemeFactory implements SchemeFactory {
    public DictionaryItemVoStandardScheme getScheme() {
      return new DictionaryItemVoStandardScheme();
    }
  }

  private static class DictionaryItemVoStandardScheme extends StandardScheme<DictionaryItemVo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, DictionaryItemVo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ITEM_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.itemCode = iprot.readString();
              struct.setItemCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ITEM_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.itemName = iprot.readString();
              struct.setItemNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ITEM_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.itemValue = iprot.readString();
              struct.setItemValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DEPICTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.depiction = iprot.readString();
              struct.setDepictionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DIC_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.dicId = iprot.readI64();
              struct.setDicIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CLIENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clientId = iprot.readString();
              struct.setClientIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ORDER_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.orderValue = iprot.readI32();
              struct.setOrderValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // IS_ENABLE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isEnable = iprot.readBool();
              struct.setIsEnableIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // DIC_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dicName = iprot.readString();
              struct.setDicNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, DictionaryItemVo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetId()) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI64(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.itemCode != null) {
        if (struct.isSetItemCode()) {
          oprot.writeFieldBegin(ITEM_CODE_FIELD_DESC);
          oprot.writeString(struct.itemCode);
          oprot.writeFieldEnd();
        }
      }
      if (struct.itemName != null) {
        if (struct.isSetItemName()) {
          oprot.writeFieldBegin(ITEM_NAME_FIELD_DESC);
          oprot.writeString(struct.itemName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.itemValue != null) {
        if (struct.isSetItemValue()) {
          oprot.writeFieldBegin(ITEM_VALUE_FIELD_DESC);
          oprot.writeString(struct.itemValue);
          oprot.writeFieldEnd();
        }
      }
      if (struct.depiction != null) {
        if (struct.isSetDepiction()) {
          oprot.writeFieldBegin(DEPICTION_FIELD_DESC);
          oprot.writeString(struct.depiction);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetDicId()) {
        oprot.writeFieldBegin(DIC_ID_FIELD_DESC);
        oprot.writeI64(struct.dicId);
        oprot.writeFieldEnd();
      }
      if (struct.clientId != null) {
        if (struct.isSetClientId()) {
          oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
          oprot.writeString(struct.clientId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetOrderValue()) {
        oprot.writeFieldBegin(ORDER_VALUE_FIELD_DESC);
        oprot.writeI32(struct.orderValue);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIsEnable()) {
        oprot.writeFieldBegin(IS_ENABLE_FIELD_DESC);
        oprot.writeBool(struct.isEnable);
        oprot.writeFieldEnd();
      }
      if (struct.dicName != null) {
        if (struct.isSetDicName()) {
          oprot.writeFieldBegin(DIC_NAME_FIELD_DESC);
          oprot.writeString(struct.dicName);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DictionaryItemVoTupleSchemeFactory implements SchemeFactory {
    public DictionaryItemVoTupleScheme getScheme() {
      return new DictionaryItemVoTupleScheme();
    }
  }

  private static class DictionaryItemVoTupleScheme extends TupleScheme<DictionaryItemVo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, DictionaryItemVo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetItemCode()) {
        optionals.set(1);
      }
      if (struct.isSetItemName()) {
        optionals.set(2);
      }
      if (struct.isSetItemValue()) {
        optionals.set(3);
      }
      if (struct.isSetDepiction()) {
        optionals.set(4);
      }
      if (struct.isSetDicId()) {
        optionals.set(5);
      }
      if (struct.isSetClientId()) {
        optionals.set(6);
      }
      if (struct.isSetOrderValue()) {
        optionals.set(7);
      }
      if (struct.isSetIsEnable()) {
        optionals.set(8);
      }
      if (struct.isSetDicName()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetId()) {
        oprot.writeI64(struct.id);
      }
      if (struct.isSetItemCode()) {
        oprot.writeString(struct.itemCode);
      }
      if (struct.isSetItemName()) {
        oprot.writeString(struct.itemName);
      }
      if (struct.isSetItemValue()) {
        oprot.writeString(struct.itemValue);
      }
      if (struct.isSetDepiction()) {
        oprot.writeString(struct.depiction);
      }
      if (struct.isSetDicId()) {
        oprot.writeI64(struct.dicId);
      }
      if (struct.isSetClientId()) {
        oprot.writeString(struct.clientId);
      }
      if (struct.isSetOrderValue()) {
        oprot.writeI32(struct.orderValue);
      }
      if (struct.isSetIsEnable()) {
        oprot.writeBool(struct.isEnable);
      }
      if (struct.isSetDicName()) {
        oprot.writeString(struct.dicName);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, DictionaryItemVo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.itemCode = iprot.readString();
        struct.setItemCodeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.itemName = iprot.readString();
        struct.setItemNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.itemValue = iprot.readString();
        struct.setItemValueIsSet(true);
      }
      if (incoming.get(4)) {
        struct.depiction = iprot.readString();
        struct.setDepictionIsSet(true);
      }
      if (incoming.get(5)) {
        struct.dicId = iprot.readI64();
        struct.setDicIdIsSet(true);
      }
      if (incoming.get(6)) {
        struct.clientId = iprot.readString();
        struct.setClientIdIsSet(true);
      }
      if (incoming.get(7)) {
        struct.orderValue = iprot.readI32();
        struct.setOrderValueIsSet(true);
      }
      if (incoming.get(8)) {
        struct.isEnable = iprot.readBool();
        struct.setIsEnableIsSet(true);
      }
      if (incoming.get(9)) {
        struct.dicName = iprot.readString();
        struct.setDicNameIsSet(true);
      }
    }
  }

}

