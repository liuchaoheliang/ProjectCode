/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.vo;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * Boss商品管理平台新增商品信息Vo
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-7-27")
public class BossProductInfoVo implements org.apache.thrift.TBase<BossProductInfoVo, BossProductInfoVo._Fields>, java.io.Serializable, Cloneable, Comparable<BossProductInfoVo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BossProductInfoVo");

  private static final org.apache.thrift.protocol.TField PRODUCT_FIELD_DESC = new org.apache.thrift.protocol.TField("product", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField IMAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("image", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField ORG_CODES_FIELD_DESC = new org.apache.thrift.protocol.TField("orgCodes", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField OUTLET_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("outletIds", org.apache.thrift.protocol.TType.LIST, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new BossProductInfoVoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new BossProductInfoVoTupleSchemeFactory());
  }

  /**
   * 商品基础信息
   */
  public BossProductVo product; // required
  /**
   * 商品图片列表
   */
  public List<ProductImageVo> image; // required
  /**
   * 商品提货网点所属法人行社的机构代码列表
   */
  public List<String> orgCodes; // required
  /**
   * 商品提货网点的门店ID，提货方式有自提时候需要传值
   */
  public List<String> outletIds; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 商品基础信息
     */
    PRODUCT((short)1, "product"),
    /**
     * 商品图片列表
     */
    IMAGE((short)2, "image"),
    /**
     * 商品提货网点所属法人行社的机构代码列表
     */
    ORG_CODES((short)3, "orgCodes"),
    /**
     * 商品提货网点的门店ID，提货方式有自提时候需要传值
     */
    OUTLET_IDS((short)4, "outletIds");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PRODUCT
          return PRODUCT;
        case 2: // IMAGE
          return IMAGE;
        case 3: // ORG_CODES
          return ORG_CODES;
        case 4: // OUTLET_IDS
          return OUTLET_IDS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PRODUCT, new org.apache.thrift.meta_data.FieldMetaData("product", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BossProductVo.class)));
    tmpMap.put(_Fields.IMAGE, new org.apache.thrift.meta_data.FieldMetaData("image", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ProductImageVo.class))));
    tmpMap.put(_Fields.ORG_CODES, new org.apache.thrift.meta_data.FieldMetaData("orgCodes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.OUTLET_IDS, new org.apache.thrift.meta_data.FieldMetaData("outletIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BossProductInfoVo.class, metaDataMap);
  }

  public BossProductInfoVo() {
  }

  public BossProductInfoVo(
    BossProductVo product,
    List<ProductImageVo> image,
    List<String> orgCodes,
    List<String> outletIds)
  {
    this();
    this.product = product;
    this.image = image;
    this.orgCodes = orgCodes;
    this.outletIds = outletIds;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BossProductInfoVo(BossProductInfoVo other) {
    if (other.isSetProduct()) {
      this.product = new BossProductVo(other.product);
    }
    if (other.isSetImage()) {
      List<ProductImageVo> __this__image = new ArrayList<ProductImageVo>(other.image.size());
      for (ProductImageVo other_element : other.image) {
        __this__image.add(new ProductImageVo(other_element));
      }
      this.image = __this__image;
    }
    if (other.isSetOrgCodes()) {
      List<String> __this__orgCodes = new ArrayList<String>(other.orgCodes);
      this.orgCodes = __this__orgCodes;
    }
    if (other.isSetOutletIds()) {
      List<String> __this__outletIds = new ArrayList<String>(other.outletIds);
      this.outletIds = __this__outletIds;
    }
  }

  public BossProductInfoVo deepCopy() {
    return new BossProductInfoVo(this);
  }

  @Override
  public void clear() {
    this.product = null;
    this.image = null;
    this.orgCodes = null;
    this.outletIds = null;
  }

  /**
   * 商品基础信息
   */
  public BossProductVo getProduct() {
    return this.product;
  }

  /**
   * 商品基础信息
   */
  public BossProductInfoVo setProduct(BossProductVo product) {
    this.product = product;
    return this;
  }

  public void unsetProduct() {
    this.product = null;
  }

  /** Returns true if field product is set (has been assigned a value) and false otherwise */
  public boolean isSetProduct() {
    return this.product != null;
  }

  public void setProductIsSet(boolean value) {
    if (!value) {
      this.product = null;
    }
  }

  public int getImageSize() {
    return (this.image == null) ? 0 : this.image.size();
  }

  public java.util.Iterator<ProductImageVo> getImageIterator() {
    return (this.image == null) ? null : this.image.iterator();
  }

  public void addToImage(ProductImageVo elem) {
    if (this.image == null) {
      this.image = new ArrayList<ProductImageVo>();
    }
    this.image.add(elem);
  }

  /**
   * 商品图片列表
   */
  public List<ProductImageVo> getImage() {
    return this.image;
  }

  /**
   * 商品图片列表
   */
  public BossProductInfoVo setImage(List<ProductImageVo> image) {
    this.image = image;
    return this;
  }

  public void unsetImage() {
    this.image = null;
  }

  /** Returns true if field image is set (has been assigned a value) and false otherwise */
  public boolean isSetImage() {
    return this.image != null;
  }

  public void setImageIsSet(boolean value) {
    if (!value) {
      this.image = null;
    }
  }

  public int getOrgCodesSize() {
    return (this.orgCodes == null) ? 0 : this.orgCodes.size();
  }

  public java.util.Iterator<String> getOrgCodesIterator() {
    return (this.orgCodes == null) ? null : this.orgCodes.iterator();
  }

  public void addToOrgCodes(String elem) {
    if (this.orgCodes == null) {
      this.orgCodes = new ArrayList<String>();
    }
    this.orgCodes.add(elem);
  }

  /**
   * 商品提货网点所属法人行社的机构代码列表
   */
  public List<String> getOrgCodes() {
    return this.orgCodes;
  }

  /**
   * 商品提货网点所属法人行社的机构代码列表
   */
  public BossProductInfoVo setOrgCodes(List<String> orgCodes) {
    this.orgCodes = orgCodes;
    return this;
  }

  public void unsetOrgCodes() {
    this.orgCodes = null;
  }

  /** Returns true if field orgCodes is set (has been assigned a value) and false otherwise */
  public boolean isSetOrgCodes() {
    return this.orgCodes != null;
  }

  public void setOrgCodesIsSet(boolean value) {
    if (!value) {
      this.orgCodes = null;
    }
  }

  public int getOutletIdsSize() {
    return (this.outletIds == null) ? 0 : this.outletIds.size();
  }

  public java.util.Iterator<String> getOutletIdsIterator() {
    return (this.outletIds == null) ? null : this.outletIds.iterator();
  }

  public void addToOutletIds(String elem) {
    if (this.outletIds == null) {
      this.outletIds = new ArrayList<String>();
    }
    this.outletIds.add(elem);
  }

  /**
   * 商品提货网点的门店ID，提货方式有自提时候需要传值
   */
  public List<String> getOutletIds() {
    return this.outletIds;
  }

  /**
   * 商品提货网点的门店ID，提货方式有自提时候需要传值
   */
  public BossProductInfoVo setOutletIds(List<String> outletIds) {
    this.outletIds = outletIds;
    return this;
  }

  public void unsetOutletIds() {
    this.outletIds = null;
  }

  /** Returns true if field outletIds is set (has been assigned a value) and false otherwise */
  public boolean isSetOutletIds() {
    return this.outletIds != null;
  }

  public void setOutletIdsIsSet(boolean value) {
    if (!value) {
      this.outletIds = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PRODUCT:
      if (value == null) {
        unsetProduct();
      } else {
        setProduct((BossProductVo)value);
      }
      break;

    case IMAGE:
      if (value == null) {
        unsetImage();
      } else {
        setImage((List<ProductImageVo>)value);
      }
      break;

    case ORG_CODES:
      if (value == null) {
        unsetOrgCodes();
      } else {
        setOrgCodes((List<String>)value);
      }
      break;

    case OUTLET_IDS:
      if (value == null) {
        unsetOutletIds();
      } else {
        setOutletIds((List<String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PRODUCT:
      return getProduct();

    case IMAGE:
      return getImage();

    case ORG_CODES:
      return getOrgCodes();

    case OUTLET_IDS:
      return getOutletIds();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PRODUCT:
      return isSetProduct();
    case IMAGE:
      return isSetImage();
    case ORG_CODES:
      return isSetOrgCodes();
    case OUTLET_IDS:
      return isSetOutletIds();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BossProductInfoVo)
      return this.equals((BossProductInfoVo)that);
    return false;
  }

  public boolean equals(BossProductInfoVo that) {
    if (that == null)
      return false;

    boolean this_present_product = true && this.isSetProduct();
    boolean that_present_product = true && that.isSetProduct();
    if (this_present_product || that_present_product) {
      if (!(this_present_product && that_present_product))
        return false;
      if (!this.product.equals(that.product))
        return false;
    }

    boolean this_present_image = true && this.isSetImage();
    boolean that_present_image = true && that.isSetImage();
    if (this_present_image || that_present_image) {
      if (!(this_present_image && that_present_image))
        return false;
      if (!this.image.equals(that.image))
        return false;
    }

    boolean this_present_orgCodes = true && this.isSetOrgCodes();
    boolean that_present_orgCodes = true && that.isSetOrgCodes();
    if (this_present_orgCodes || that_present_orgCodes) {
      if (!(this_present_orgCodes && that_present_orgCodes))
        return false;
      if (!this.orgCodes.equals(that.orgCodes))
        return false;
    }

    boolean this_present_outletIds = true && this.isSetOutletIds();
    boolean that_present_outletIds = true && that.isSetOutletIds();
    if (this_present_outletIds || that_present_outletIds) {
      if (!(this_present_outletIds && that_present_outletIds))
        return false;
      if (!this.outletIds.equals(that.outletIds))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_product = true && (isSetProduct());
    list.add(present_product);
    if (present_product)
      list.add(product);

    boolean present_image = true && (isSetImage());
    list.add(present_image);
    if (present_image)
      list.add(image);

    boolean present_orgCodes = true && (isSetOrgCodes());
    list.add(present_orgCodes);
    if (present_orgCodes)
      list.add(orgCodes);

    boolean present_outletIds = true && (isSetOutletIds());
    list.add(present_outletIds);
    if (present_outletIds)
      list.add(outletIds);

    return list.hashCode();
  }

  @Override
  public int compareTo(BossProductInfoVo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetProduct()).compareTo(other.isSetProduct());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProduct()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.product, other.product);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetImage()).compareTo(other.isSetImage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.image, other.image);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrgCodes()).compareTo(other.isSetOrgCodes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrgCodes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orgCodes, other.orgCodes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOutletIds()).compareTo(other.isSetOutletIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOutletIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outletIds, other.outletIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("BossProductInfoVo(");
    boolean first = true;

    sb.append("product:");
    if (this.product == null) {
      sb.append("null");
    } else {
      sb.append(this.product);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("image:");
    if (this.image == null) {
      sb.append("null");
    } else {
      sb.append(this.image);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("orgCodes:");
    if (this.orgCodes == null) {
      sb.append("null");
    } else {
      sb.append(this.orgCodes);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("outletIds:");
    if (this.outletIds == null) {
      sb.append("null");
    } else {
      sb.append(this.outletIds);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (product != null) {
      product.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BossProductInfoVoStandardSchemeFactory implements SchemeFactory {
    public BossProductInfoVoStandardScheme getScheme() {
      return new BossProductInfoVoStandardScheme();
    }
  }

  private static class BossProductInfoVoStandardScheme extends StandardScheme<BossProductInfoVo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BossProductInfoVo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PRODUCT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.product = new BossProductVo();
              struct.product.read(iprot);
              struct.setProductIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // IMAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                struct.image = new ArrayList<ProductImageVo>(_list8.size);
                ProductImageVo _elem9;
                for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                {
                  _elem9 = new ProductImageVo();
                  _elem9.read(iprot);
                  struct.image.add(_elem9);
                }
                iprot.readListEnd();
              }
              struct.setImageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ORG_CODES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list11 = iprot.readListBegin();
                struct.orgCodes = new ArrayList<String>(_list11.size);
                String _elem12;
                for (int _i13 = 0; _i13 < _list11.size; ++_i13)
                {
                  _elem12 = iprot.readString();
                  struct.orgCodes.add(_elem12);
                }
                iprot.readListEnd();
              }
              struct.setOrgCodesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // OUTLET_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list14 = iprot.readListBegin();
                struct.outletIds = new ArrayList<String>(_list14.size);
                String _elem15;
                for (int _i16 = 0; _i16 < _list14.size; ++_i16)
                {
                  _elem15 = iprot.readString();
                  struct.outletIds.add(_elem15);
                }
                iprot.readListEnd();
              }
              struct.setOutletIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BossProductInfoVo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.product != null) {
        oprot.writeFieldBegin(PRODUCT_FIELD_DESC);
        struct.product.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.image != null) {
        oprot.writeFieldBegin(IMAGE_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.image.size()));
          for (ProductImageVo _iter17 : struct.image)
          {
            _iter17.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.orgCodes != null) {
        oprot.writeFieldBegin(ORG_CODES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.orgCodes.size()));
          for (String _iter18 : struct.orgCodes)
          {
            oprot.writeString(_iter18);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.outletIds != null) {
        oprot.writeFieldBegin(OUTLET_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.outletIds.size()));
          for (String _iter19 : struct.outletIds)
          {
            oprot.writeString(_iter19);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BossProductInfoVoTupleSchemeFactory implements SchemeFactory {
    public BossProductInfoVoTupleScheme getScheme() {
      return new BossProductInfoVoTupleScheme();
    }
  }

  private static class BossProductInfoVoTupleScheme extends TupleScheme<BossProductInfoVo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BossProductInfoVo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetProduct()) {
        optionals.set(0);
      }
      if (struct.isSetImage()) {
        optionals.set(1);
      }
      if (struct.isSetOrgCodes()) {
        optionals.set(2);
      }
      if (struct.isSetOutletIds()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetProduct()) {
        struct.product.write(oprot);
      }
      if (struct.isSetImage()) {
        {
          oprot.writeI32(struct.image.size());
          for (ProductImageVo _iter20 : struct.image)
          {
            _iter20.write(oprot);
          }
        }
      }
      if (struct.isSetOrgCodes()) {
        {
          oprot.writeI32(struct.orgCodes.size());
          for (String _iter21 : struct.orgCodes)
          {
            oprot.writeString(_iter21);
          }
        }
      }
      if (struct.isSetOutletIds()) {
        {
          oprot.writeI32(struct.outletIds.size());
          for (String _iter22 : struct.outletIds)
          {
            oprot.writeString(_iter22);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BossProductInfoVo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.product = new BossProductVo();
        struct.product.read(iprot);
        struct.setProductIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list23 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.image = new ArrayList<ProductImageVo>(_list23.size);
          ProductImageVo _elem24;
          for (int _i25 = 0; _i25 < _list23.size; ++_i25)
          {
            _elem24 = new ProductImageVo();
            _elem24.read(iprot);
            struct.image.add(_elem24);
          }
        }
        struct.setImageIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list26 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.orgCodes = new ArrayList<String>(_list26.size);
          String _elem27;
          for (int _i28 = 0; _i28 < _list26.size; ++_i28)
          {
            _elem27 = iprot.readString();
            struct.orgCodes.add(_elem27);
          }
        }
        struct.setOrgCodesIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.outletIds = new ArrayList<String>(_list29.size);
          String _elem30;
          for (int _i31 = 0; _i31 < _list29.size; ++_i31)
          {
            _elem30 = iprot.readString();
            struct.outletIds.add(_elem30);
          }
        }
        struct.setOutletIdsIsSet(true);
      }
    }
  }

}

