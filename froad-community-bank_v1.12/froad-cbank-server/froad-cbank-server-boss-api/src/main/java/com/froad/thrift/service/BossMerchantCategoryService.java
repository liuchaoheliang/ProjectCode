/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.service;

import java.util.ArrayList;
import java.util.BitSet;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Generated;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.froad.thrift.vo.merchant.BossMerchantCategoryInfoRes;
import com.froad.thrift.vo.merchant.BossMerchantCategoryListRes;
import com.froad.thrift.vo.merchant.BossMerchantCategoryVo;
import com.froad.thrift.vo.merchant.BossParentCategoryListReq;
import com.froad.thrift.vo.merchant.BossParentCategoryListRes;
import com.froad.thrift.vo.merchant.MerchantCategoryVo;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-11-3")
public class BossMerchantCategoryService {

  /**
   * BossMerchantCategoryService
   */
  public interface Iface extends com.froad.thrift.monitor.service.BizMonitorService.Iface {

    /**
     * 查询商户分类列表
     * @param clientId 客户端Id
     * @param iscludeDisable 是否包含非禁用商户分类
     * @param originVo 源对象信息(包含平台,操作ip,操作员id等...)
     * @return BossMerchantCategoryResList
     * 
     * @param clientId
     * @param iscludeDisable
     * @param originVo
     */
    public BossMerchantCategoryListRes findAll(String clientId, boolean iscludeDisable, com.froad.thrift.vo.OriginVo originVo) throws org.apache.thrift.TException;

    /**
     * 查询商户分类信息
     * @param originVo 源对象信息(包含平台,操作ip,操作员id等...)
     * @param id  分类id
     * @param clientId 客户端Id
     * @return BossMerchantCategoryInfoRes
     * 
     * @param originVo
     * @param id
     * @param clientId
     */
    public BossMerchantCategoryInfoRes getBossMerchantCategoryById(com.froad.thrift.vo.OriginVo originVo, long id, String clientId) throws org.apache.thrift.TException;

    /**
     * 增加商户分类
     * @param originVo 源对象信息(包含平台,操作ip,操作员id等...)
     * @param bossMerchantCategoryVo 商户分类信息
     * @return ResultVo
     * 
     * @param originVo
     * @param bossMerchantCategoryVo
     */
    public com.froad.thrift.vo.ResultVo addBossMerchantCategoryVo(com.froad.thrift.vo.OriginVo originVo, BossMerchantCategoryVo bossMerchantCategoryVo) throws org.apache.thrift.TException;

    /**
     * 修改商户分类
     * @param OriginVo 源对象信息(包含平台,操作ip,操作员id等...)
     * @param BossMerchantCategoryVo
     * @return ResultVo
     * 
     * @param originVo
     * @param bossMerchantCategoryVo
     */
    public com.froad.thrift.vo.ResultVo updateBossMerchantCategoryVo(com.froad.thrift.vo.OriginVo originVo, BossMerchantCategoryVo bossMerchantCategoryVo) throws org.apache.thrift.TException;

    /**
     * 商户分类的商户导入
     * @param OriginVo 源对象信息(包含平台,操作ip,操作员id等...)
     * @param list<BossMerchantCategoryInputVo>
     * @return ExportResultRes
     * 
     * @param originVo
     * @param vos
     */
    public com.froad.thrift.vo.ExportResultRes merchantCategoryInput(com.froad.thrift.vo.OriginVo originVo, List<MerchantCategoryVo> vos) throws org.apache.thrift.TException;

    /**
     *    * 商户分类的商户明细导出
     *    * @param OriginVo 源对象信息(包含平台,操作ip,操作员id等...)
     *    * @param clientId
     * * @param categoryId
     *    * @return ExportResultRes
     * 
     * @param originVo
     * @param clientId
     * @param categoryId
     */
    public com.froad.thrift.vo.ExportResultRes merchantCategoryDetailExport(com.froad.thrift.vo.OriginVo originVo, String clientId, long categoryId) throws org.apache.thrift.TException;

    /**
     * 获取当前分类的父分类列表
     * 
     * @param req
     */
    public BossParentCategoryListRes getParentCategoryList(BossParentCategoryListReq req) throws org.apache.thrift.TException;

  }

  public interface AsyncIface extends com.froad.thrift.monitor.service.BizMonitorService .AsyncIface {

    public void findAll(String clientId, boolean iscludeDisable, com.froad.thrift.vo.OriginVo originVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getBossMerchantCategoryById(com.froad.thrift.vo.OriginVo originVo, long id, String clientId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addBossMerchantCategoryVo(com.froad.thrift.vo.OriginVo originVo, BossMerchantCategoryVo bossMerchantCategoryVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateBossMerchantCategoryVo(com.froad.thrift.vo.OriginVo originVo, BossMerchantCategoryVo bossMerchantCategoryVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void merchantCategoryInput(com.froad.thrift.vo.OriginVo originVo, List<MerchantCategoryVo> vos, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void merchantCategoryDetailExport(com.froad.thrift.vo.OriginVo originVo, String clientId, long categoryId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getParentCategoryList(BossParentCategoryListReq req, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends com.froad.thrift.monitor.service.BizMonitorService.Client implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public BossMerchantCategoryListRes findAll(String clientId, boolean iscludeDisable, com.froad.thrift.vo.OriginVo originVo) throws org.apache.thrift.TException
    {
      send_findAll(clientId, iscludeDisable, originVo);
      return recv_findAll();
    }

    public void send_findAll(String clientId, boolean iscludeDisable, com.froad.thrift.vo.OriginVo originVo) throws org.apache.thrift.TException
    {
      findAll_args args = new findAll_args();
      args.setClientId(clientId);
      args.setIscludeDisable(iscludeDisable);
      args.setOriginVo(originVo);
      sendBase("findAll", args);
    }

    public BossMerchantCategoryListRes recv_findAll() throws org.apache.thrift.TException
    {
      findAll_result result = new findAll_result();
      receiveBase(result, "findAll");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findAll failed: unknown result");
    }

    public BossMerchantCategoryInfoRes getBossMerchantCategoryById(com.froad.thrift.vo.OriginVo originVo, long id, String clientId) throws org.apache.thrift.TException
    {
      send_getBossMerchantCategoryById(originVo, id, clientId);
      return recv_getBossMerchantCategoryById();
    }

    public void send_getBossMerchantCategoryById(com.froad.thrift.vo.OriginVo originVo, long id, String clientId) throws org.apache.thrift.TException
    {
      getBossMerchantCategoryById_args args = new getBossMerchantCategoryById_args();
      args.setOriginVo(originVo);
      args.setId(id);
      args.setClientId(clientId);
      sendBase("getBossMerchantCategoryById", args);
    }

    public BossMerchantCategoryInfoRes recv_getBossMerchantCategoryById() throws org.apache.thrift.TException
    {
      getBossMerchantCategoryById_result result = new getBossMerchantCategoryById_result();
      receiveBase(result, "getBossMerchantCategoryById");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getBossMerchantCategoryById failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo addBossMerchantCategoryVo(com.froad.thrift.vo.OriginVo originVo, BossMerchantCategoryVo bossMerchantCategoryVo) throws org.apache.thrift.TException
    {
      send_addBossMerchantCategoryVo(originVo, bossMerchantCategoryVo);
      return recv_addBossMerchantCategoryVo();
    }

    public void send_addBossMerchantCategoryVo(com.froad.thrift.vo.OriginVo originVo, BossMerchantCategoryVo bossMerchantCategoryVo) throws org.apache.thrift.TException
    {
      addBossMerchantCategoryVo_args args = new addBossMerchantCategoryVo_args();
      args.setOriginVo(originVo);
      args.setBossMerchantCategoryVo(bossMerchantCategoryVo);
      sendBase("addBossMerchantCategoryVo", args);
    }

    public com.froad.thrift.vo.ResultVo recv_addBossMerchantCategoryVo() throws org.apache.thrift.TException
    {
      addBossMerchantCategoryVo_result result = new addBossMerchantCategoryVo_result();
      receiveBase(result, "addBossMerchantCategoryVo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addBossMerchantCategoryVo failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo updateBossMerchantCategoryVo(com.froad.thrift.vo.OriginVo originVo, BossMerchantCategoryVo bossMerchantCategoryVo) throws org.apache.thrift.TException
    {
      send_updateBossMerchantCategoryVo(originVo, bossMerchantCategoryVo);
      return recv_updateBossMerchantCategoryVo();
    }

    public void send_updateBossMerchantCategoryVo(com.froad.thrift.vo.OriginVo originVo, BossMerchantCategoryVo bossMerchantCategoryVo) throws org.apache.thrift.TException
    {
      updateBossMerchantCategoryVo_args args = new updateBossMerchantCategoryVo_args();
      args.setOriginVo(originVo);
      args.setBossMerchantCategoryVo(bossMerchantCategoryVo);
      sendBase("updateBossMerchantCategoryVo", args);
    }

    public com.froad.thrift.vo.ResultVo recv_updateBossMerchantCategoryVo() throws org.apache.thrift.TException
    {
      updateBossMerchantCategoryVo_result result = new updateBossMerchantCategoryVo_result();
      receiveBase(result, "updateBossMerchantCategoryVo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateBossMerchantCategoryVo failed: unknown result");
    }

    public com.froad.thrift.vo.ExportResultRes merchantCategoryInput(com.froad.thrift.vo.OriginVo originVo, List<MerchantCategoryVo> vos) throws org.apache.thrift.TException
    {
      send_merchantCategoryInput(originVo, vos);
      return recv_merchantCategoryInput();
    }

    public void send_merchantCategoryInput(com.froad.thrift.vo.OriginVo originVo, List<MerchantCategoryVo> vos) throws org.apache.thrift.TException
    {
      merchantCategoryInput_args args = new merchantCategoryInput_args();
      args.setOriginVo(originVo);
      args.setVos(vos);
      sendBase("merchantCategoryInput", args);
    }

    public com.froad.thrift.vo.ExportResultRes recv_merchantCategoryInput() throws org.apache.thrift.TException
    {
      merchantCategoryInput_result result = new merchantCategoryInput_result();
      receiveBase(result, "merchantCategoryInput");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "merchantCategoryInput failed: unknown result");
    }

    public com.froad.thrift.vo.ExportResultRes merchantCategoryDetailExport(com.froad.thrift.vo.OriginVo originVo, String clientId, long categoryId) throws org.apache.thrift.TException
    {
      send_merchantCategoryDetailExport(originVo, clientId, categoryId);
      return recv_merchantCategoryDetailExport();
    }

    public void send_merchantCategoryDetailExport(com.froad.thrift.vo.OriginVo originVo, String clientId, long categoryId) throws org.apache.thrift.TException
    {
      merchantCategoryDetailExport_args args = new merchantCategoryDetailExport_args();
      args.setOriginVo(originVo);
      args.setClientId(clientId);
      args.setCategoryId(categoryId);
      sendBase("merchantCategoryDetailExport", args);
    }

    public com.froad.thrift.vo.ExportResultRes recv_merchantCategoryDetailExport() throws org.apache.thrift.TException
    {
      merchantCategoryDetailExport_result result = new merchantCategoryDetailExport_result();
      receiveBase(result, "merchantCategoryDetailExport");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "merchantCategoryDetailExport failed: unknown result");
    }

    public BossParentCategoryListRes getParentCategoryList(BossParentCategoryListReq req) throws org.apache.thrift.TException
    {
      send_getParentCategoryList(req);
      return recv_getParentCategoryList();
    }

    public void send_getParentCategoryList(BossParentCategoryListReq req) throws org.apache.thrift.TException
    {
      getParentCategoryList_args args = new getParentCategoryList_args();
      args.setReq(req);
      sendBase("getParentCategoryList", args);
    }

    public BossParentCategoryListRes recv_getParentCategoryList() throws org.apache.thrift.TException
    {
      getParentCategoryList_result result = new getParentCategoryList_result();
      receiveBase(result, "getParentCategoryList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getParentCategoryList failed: unknown result");
    }

  }
  public static class AsyncClient extends com.froad.thrift.monitor.service.BizMonitorService.AsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void findAll(String clientId, boolean iscludeDisable, com.froad.thrift.vo.OriginVo originVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findAll_call method_call = new findAll_call(clientId, iscludeDisable, originVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findAll_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String clientId;
      private boolean iscludeDisable;
      private com.froad.thrift.vo.OriginVo originVo;
      public findAll_call(String clientId, boolean iscludeDisable, com.froad.thrift.vo.OriginVo originVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.clientId = clientId;
        this.iscludeDisable = iscludeDisable;
        this.originVo = originVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findAll", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findAll_args args = new findAll_args();
        args.setClientId(clientId);
        args.setIscludeDisable(iscludeDisable);
        args.setOriginVo(originVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public BossMerchantCategoryListRes getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findAll();
      }
    }

    public void getBossMerchantCategoryById(com.froad.thrift.vo.OriginVo originVo, long id, String clientId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getBossMerchantCategoryById_call method_call = new getBossMerchantCategoryById_call(originVo, id, clientId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getBossMerchantCategoryById_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.OriginVo originVo;
      private long id;
      private String clientId;
      public getBossMerchantCategoryById_call(com.froad.thrift.vo.OriginVo originVo, long id, String clientId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.originVo = originVo;
        this.id = id;
        this.clientId = clientId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getBossMerchantCategoryById", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getBossMerchantCategoryById_args args = new getBossMerchantCategoryById_args();
        args.setOriginVo(originVo);
        args.setId(id);
        args.setClientId(clientId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public BossMerchantCategoryInfoRes getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getBossMerchantCategoryById();
      }
    }

    public void addBossMerchantCategoryVo(com.froad.thrift.vo.OriginVo originVo, BossMerchantCategoryVo bossMerchantCategoryVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addBossMerchantCategoryVo_call method_call = new addBossMerchantCategoryVo_call(originVo, bossMerchantCategoryVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addBossMerchantCategoryVo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.OriginVo originVo;
      private BossMerchantCategoryVo bossMerchantCategoryVo;
      public addBossMerchantCategoryVo_call(com.froad.thrift.vo.OriginVo originVo, BossMerchantCategoryVo bossMerchantCategoryVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.originVo = originVo;
        this.bossMerchantCategoryVo = bossMerchantCategoryVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addBossMerchantCategoryVo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addBossMerchantCategoryVo_args args = new addBossMerchantCategoryVo_args();
        args.setOriginVo(originVo);
        args.setBossMerchantCategoryVo(bossMerchantCategoryVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addBossMerchantCategoryVo();
      }
    }

    public void updateBossMerchantCategoryVo(com.froad.thrift.vo.OriginVo originVo, BossMerchantCategoryVo bossMerchantCategoryVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateBossMerchantCategoryVo_call method_call = new updateBossMerchantCategoryVo_call(originVo, bossMerchantCategoryVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateBossMerchantCategoryVo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.OriginVo originVo;
      private BossMerchantCategoryVo bossMerchantCategoryVo;
      public updateBossMerchantCategoryVo_call(com.froad.thrift.vo.OriginVo originVo, BossMerchantCategoryVo bossMerchantCategoryVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.originVo = originVo;
        this.bossMerchantCategoryVo = bossMerchantCategoryVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateBossMerchantCategoryVo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateBossMerchantCategoryVo_args args = new updateBossMerchantCategoryVo_args();
        args.setOriginVo(originVo);
        args.setBossMerchantCategoryVo(bossMerchantCategoryVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateBossMerchantCategoryVo();
      }
    }

    public void merchantCategoryInput(com.froad.thrift.vo.OriginVo originVo, List<MerchantCategoryVo> vos, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      merchantCategoryInput_call method_call = new merchantCategoryInput_call(originVo, vos, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class merchantCategoryInput_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.OriginVo originVo;
      private List<MerchantCategoryVo> vos;
      public merchantCategoryInput_call(com.froad.thrift.vo.OriginVo originVo, List<MerchantCategoryVo> vos, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.originVo = originVo;
        this.vos = vos;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("merchantCategoryInput", org.apache.thrift.protocol.TMessageType.CALL, 0));
        merchantCategoryInput_args args = new merchantCategoryInput_args();
        args.setOriginVo(originVo);
        args.setVos(vos);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ExportResultRes getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_merchantCategoryInput();
      }
    }

    public void merchantCategoryDetailExport(com.froad.thrift.vo.OriginVo originVo, String clientId, long categoryId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      merchantCategoryDetailExport_call method_call = new merchantCategoryDetailExport_call(originVo, clientId, categoryId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class merchantCategoryDetailExport_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.OriginVo originVo;
      private String clientId;
      private long categoryId;
      public merchantCategoryDetailExport_call(com.froad.thrift.vo.OriginVo originVo, String clientId, long categoryId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.originVo = originVo;
        this.clientId = clientId;
        this.categoryId = categoryId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("merchantCategoryDetailExport", org.apache.thrift.protocol.TMessageType.CALL, 0));
        merchantCategoryDetailExport_args args = new merchantCategoryDetailExport_args();
        args.setOriginVo(originVo);
        args.setClientId(clientId);
        args.setCategoryId(categoryId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ExportResultRes getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_merchantCategoryDetailExport();
      }
    }

    public void getParentCategoryList(BossParentCategoryListReq req, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getParentCategoryList_call method_call = new getParentCategoryList_call(req, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getParentCategoryList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private BossParentCategoryListReq req;
      public getParentCategoryList_call(BossParentCategoryListReq req, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.req = req;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getParentCategoryList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getParentCategoryList_args args = new getParentCategoryList_args();
        args.setReq(req);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public BossParentCategoryListRes getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getParentCategoryList();
      }
    }

  }

  public static class Processor<I extends Iface> extends com.froad.thrift.monitor.service.BizMonitorService.Processor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("findAll", new findAll());
      processMap.put("getBossMerchantCategoryById", new getBossMerchantCategoryById());
      processMap.put("addBossMerchantCategoryVo", new addBossMerchantCategoryVo());
      processMap.put("updateBossMerchantCategoryVo", new updateBossMerchantCategoryVo());
      processMap.put("merchantCategoryInput", new merchantCategoryInput());
      processMap.put("merchantCategoryDetailExport", new merchantCategoryDetailExport());
      processMap.put("getParentCategoryList", new getParentCategoryList());
      return processMap;
    }

    public static class findAll<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findAll_args> {
      public findAll() {
        super("findAll");
      }

      public findAll_args getEmptyArgsInstance() {
        return new findAll_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findAll_result getResult(I iface, findAll_args args) throws org.apache.thrift.TException {
        findAll_result result = new findAll_result();
        result.success = iface.findAll(args.clientId, args.iscludeDisable, args.originVo);
        return result;
      }
    }

    public static class getBossMerchantCategoryById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getBossMerchantCategoryById_args> {
      public getBossMerchantCategoryById() {
        super("getBossMerchantCategoryById");
      }

      public getBossMerchantCategoryById_args getEmptyArgsInstance() {
        return new getBossMerchantCategoryById_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getBossMerchantCategoryById_result getResult(I iface, getBossMerchantCategoryById_args args) throws org.apache.thrift.TException {
        getBossMerchantCategoryById_result result = new getBossMerchantCategoryById_result();
        result.success = iface.getBossMerchantCategoryById(args.originVo, args.id, args.clientId);
        return result;
      }
    }

    public static class addBossMerchantCategoryVo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addBossMerchantCategoryVo_args> {
      public addBossMerchantCategoryVo() {
        super("addBossMerchantCategoryVo");
      }

      public addBossMerchantCategoryVo_args getEmptyArgsInstance() {
        return new addBossMerchantCategoryVo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addBossMerchantCategoryVo_result getResult(I iface, addBossMerchantCategoryVo_args args) throws org.apache.thrift.TException {
        addBossMerchantCategoryVo_result result = new addBossMerchantCategoryVo_result();
        result.success = iface.addBossMerchantCategoryVo(args.originVo, args.bossMerchantCategoryVo);
        return result;
      }
    }

    public static class updateBossMerchantCategoryVo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateBossMerchantCategoryVo_args> {
      public updateBossMerchantCategoryVo() {
        super("updateBossMerchantCategoryVo");
      }

      public updateBossMerchantCategoryVo_args getEmptyArgsInstance() {
        return new updateBossMerchantCategoryVo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateBossMerchantCategoryVo_result getResult(I iface, updateBossMerchantCategoryVo_args args) throws org.apache.thrift.TException {
        updateBossMerchantCategoryVo_result result = new updateBossMerchantCategoryVo_result();
        result.success = iface.updateBossMerchantCategoryVo(args.originVo, args.bossMerchantCategoryVo);
        return result;
      }
    }

    public static class merchantCategoryInput<I extends Iface> extends org.apache.thrift.ProcessFunction<I, merchantCategoryInput_args> {
      public merchantCategoryInput() {
        super("merchantCategoryInput");
      }

      public merchantCategoryInput_args getEmptyArgsInstance() {
        return new merchantCategoryInput_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public merchantCategoryInput_result getResult(I iface, merchantCategoryInput_args args) throws org.apache.thrift.TException {
        merchantCategoryInput_result result = new merchantCategoryInput_result();
        result.success = iface.merchantCategoryInput(args.originVo, args.vos);
        return result;
      }
    }

    public static class merchantCategoryDetailExport<I extends Iface> extends org.apache.thrift.ProcessFunction<I, merchantCategoryDetailExport_args> {
      public merchantCategoryDetailExport() {
        super("merchantCategoryDetailExport");
      }

      public merchantCategoryDetailExport_args getEmptyArgsInstance() {
        return new merchantCategoryDetailExport_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public merchantCategoryDetailExport_result getResult(I iface, merchantCategoryDetailExport_args args) throws org.apache.thrift.TException {
        merchantCategoryDetailExport_result result = new merchantCategoryDetailExport_result();
        result.success = iface.merchantCategoryDetailExport(args.originVo, args.clientId, args.categoryId);
        return result;
      }
    }

    public static class getParentCategoryList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getParentCategoryList_args> {
      public getParentCategoryList() {
        super("getParentCategoryList");
      }

      public getParentCategoryList_args getEmptyArgsInstance() {
        return new getParentCategoryList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getParentCategoryList_result getResult(I iface, getParentCategoryList_args args) throws org.apache.thrift.TException {
        getParentCategoryList_result result = new getParentCategoryList_result();
        result.success = iface.getParentCategoryList(args.req);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends com.froad.thrift.monitor.service.BizMonitorService.AsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("findAll", new findAll());
      processMap.put("getBossMerchantCategoryById", new getBossMerchantCategoryById());
      processMap.put("addBossMerchantCategoryVo", new addBossMerchantCategoryVo());
      processMap.put("updateBossMerchantCategoryVo", new updateBossMerchantCategoryVo());
      processMap.put("merchantCategoryInput", new merchantCategoryInput());
      processMap.put("merchantCategoryDetailExport", new merchantCategoryDetailExport());
      processMap.put("getParentCategoryList", new getParentCategoryList());
      return processMap;
    }

    public static class findAll<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findAll_args, BossMerchantCategoryListRes> {
      public findAll() {
        super("findAll");
      }

      public findAll_args getEmptyArgsInstance() {
        return new findAll_args();
      }

      public AsyncMethodCallback<BossMerchantCategoryListRes> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<BossMerchantCategoryListRes>() { 
          public void onComplete(BossMerchantCategoryListRes o) {
            findAll_result result = new findAll_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            findAll_result result = new findAll_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findAll_args args, org.apache.thrift.async.AsyncMethodCallback<BossMerchantCategoryListRes> resultHandler) throws TException {
        iface.findAll(args.clientId, args.iscludeDisable, args.originVo,resultHandler);
      }
    }

    public static class getBossMerchantCategoryById<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getBossMerchantCategoryById_args, BossMerchantCategoryInfoRes> {
      public getBossMerchantCategoryById() {
        super("getBossMerchantCategoryById");
      }

      public getBossMerchantCategoryById_args getEmptyArgsInstance() {
        return new getBossMerchantCategoryById_args();
      }

      public AsyncMethodCallback<BossMerchantCategoryInfoRes> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<BossMerchantCategoryInfoRes>() { 
          public void onComplete(BossMerchantCategoryInfoRes o) {
            getBossMerchantCategoryById_result result = new getBossMerchantCategoryById_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getBossMerchantCategoryById_result result = new getBossMerchantCategoryById_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getBossMerchantCategoryById_args args, org.apache.thrift.async.AsyncMethodCallback<BossMerchantCategoryInfoRes> resultHandler) throws TException {
        iface.getBossMerchantCategoryById(args.originVo, args.id, args.clientId,resultHandler);
      }
    }

    public static class addBossMerchantCategoryVo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addBossMerchantCategoryVo_args, com.froad.thrift.vo.ResultVo> {
      public addBossMerchantCategoryVo() {
        super("addBossMerchantCategoryVo");
      }

      public addBossMerchantCategoryVo_args getEmptyArgsInstance() {
        return new addBossMerchantCategoryVo_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            addBossMerchantCategoryVo_result result = new addBossMerchantCategoryVo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addBossMerchantCategoryVo_result result = new addBossMerchantCategoryVo_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addBossMerchantCategoryVo_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.addBossMerchantCategoryVo(args.originVo, args.bossMerchantCategoryVo,resultHandler);
      }
    }

    public static class updateBossMerchantCategoryVo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateBossMerchantCategoryVo_args, com.froad.thrift.vo.ResultVo> {
      public updateBossMerchantCategoryVo() {
        super("updateBossMerchantCategoryVo");
      }

      public updateBossMerchantCategoryVo_args getEmptyArgsInstance() {
        return new updateBossMerchantCategoryVo_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            updateBossMerchantCategoryVo_result result = new updateBossMerchantCategoryVo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateBossMerchantCategoryVo_result result = new updateBossMerchantCategoryVo_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateBossMerchantCategoryVo_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.updateBossMerchantCategoryVo(args.originVo, args.bossMerchantCategoryVo,resultHandler);
      }
    }

    public static class merchantCategoryInput<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, merchantCategoryInput_args, com.froad.thrift.vo.ExportResultRes> {
      public merchantCategoryInput() {
        super("merchantCategoryInput");
      }

      public merchantCategoryInput_args getEmptyArgsInstance() {
        return new merchantCategoryInput_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ExportResultRes> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ExportResultRes>() { 
          public void onComplete(com.froad.thrift.vo.ExportResultRes o) {
            merchantCategoryInput_result result = new merchantCategoryInput_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            merchantCategoryInput_result result = new merchantCategoryInput_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, merchantCategoryInput_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ExportResultRes> resultHandler) throws TException {
        iface.merchantCategoryInput(args.originVo, args.vos,resultHandler);
      }
    }

    public static class merchantCategoryDetailExport<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, merchantCategoryDetailExport_args, com.froad.thrift.vo.ExportResultRes> {
      public merchantCategoryDetailExport() {
        super("merchantCategoryDetailExport");
      }

      public merchantCategoryDetailExport_args getEmptyArgsInstance() {
        return new merchantCategoryDetailExport_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ExportResultRes> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ExportResultRes>() { 
          public void onComplete(com.froad.thrift.vo.ExportResultRes o) {
            merchantCategoryDetailExport_result result = new merchantCategoryDetailExport_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            merchantCategoryDetailExport_result result = new merchantCategoryDetailExport_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, merchantCategoryDetailExport_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ExportResultRes> resultHandler) throws TException {
        iface.merchantCategoryDetailExport(args.originVo, args.clientId, args.categoryId,resultHandler);
      }
    }

    public static class getParentCategoryList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getParentCategoryList_args, BossParentCategoryListRes> {
      public getParentCategoryList() {
        super("getParentCategoryList");
      }

      public getParentCategoryList_args getEmptyArgsInstance() {
        return new getParentCategoryList_args();
      }

      public AsyncMethodCallback<BossParentCategoryListRes> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<BossParentCategoryListRes>() { 
          public void onComplete(BossParentCategoryListRes o) {
            getParentCategoryList_result result = new getParentCategoryList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getParentCategoryList_result result = new getParentCategoryList_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getParentCategoryList_args args, org.apache.thrift.async.AsyncMethodCallback<BossParentCategoryListRes> resultHandler) throws TException {
        iface.getParentCategoryList(args.req,resultHandler);
      }
    }

  }

  public static class findAll_args implements org.apache.thrift.TBase<findAll_args, findAll_args._Fields>, java.io.Serializable, Cloneable, Comparable<findAll_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findAll_args");

    private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ISCLUDE_DISABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("iscludeDisable", org.apache.thrift.protocol.TType.BOOL, (short)2);
    private static final org.apache.thrift.protocol.TField ORIGIN_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("originVo", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findAll_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findAll_argsTupleSchemeFactory());
    }

    public String clientId; // required
    public boolean iscludeDisable; // required
    public com.froad.thrift.vo.OriginVo originVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CLIENT_ID((short)1, "clientId"),
      ISCLUDE_DISABLE((short)2, "iscludeDisable"),
      ORIGIN_VO((short)3, "originVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CLIENT_ID
            return CLIENT_ID;
          case 2: // ISCLUDE_DISABLE
            return ISCLUDE_DISABLE;
          case 3: // ORIGIN_VO
            return ORIGIN_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ISCLUDEDISABLE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ISCLUDE_DISABLE, new org.apache.thrift.meta_data.FieldMetaData("iscludeDisable", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.ORIGIN_VO, new org.apache.thrift.meta_data.FieldMetaData("originVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OriginVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findAll_args.class, metaDataMap);
    }

    public findAll_args() {
    }

    public findAll_args(
      String clientId,
      boolean iscludeDisable,
      com.froad.thrift.vo.OriginVo originVo)
    {
      this();
      this.clientId = clientId;
      this.iscludeDisable = iscludeDisable;
      setIscludeDisableIsSet(true);
      this.originVo = originVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findAll_args(findAll_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetClientId()) {
        this.clientId = other.clientId;
      }
      this.iscludeDisable = other.iscludeDisable;
      if (other.isSetOriginVo()) {
        this.originVo = new com.froad.thrift.vo.OriginVo(other.originVo);
      }
    }

    public findAll_args deepCopy() {
      return new findAll_args(this);
    }

    @Override
    public void clear() {
      this.clientId = null;
      setIscludeDisableIsSet(false);
      this.iscludeDisable = false;
      this.originVo = null;
    }

    public String getClientId() {
      return this.clientId;
    }

    public findAll_args setClientId(String clientId) {
      this.clientId = clientId;
      return this;
    }

    public void unsetClientId() {
      this.clientId = null;
    }

    /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
    public boolean isSetClientId() {
      return this.clientId != null;
    }

    public void setClientIdIsSet(boolean value) {
      if (!value) {
        this.clientId = null;
      }
    }

    public boolean isIscludeDisable() {
      return this.iscludeDisable;
    }

    public findAll_args setIscludeDisable(boolean iscludeDisable) {
      this.iscludeDisable = iscludeDisable;
      setIscludeDisableIsSet(true);
      return this;
    }

    public void unsetIscludeDisable() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISCLUDEDISABLE_ISSET_ID);
    }

    /** Returns true if field iscludeDisable is set (has been assigned a value) and false otherwise */
    public boolean isSetIscludeDisable() {
      return EncodingUtils.testBit(__isset_bitfield, __ISCLUDEDISABLE_ISSET_ID);
    }

    public void setIscludeDisableIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISCLUDEDISABLE_ISSET_ID, value);
    }

    public com.froad.thrift.vo.OriginVo getOriginVo() {
      return this.originVo;
    }

    public findAll_args setOriginVo(com.froad.thrift.vo.OriginVo originVo) {
      this.originVo = originVo;
      return this;
    }

    public void unsetOriginVo() {
      this.originVo = null;
    }

    /** Returns true if field originVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginVo() {
      return this.originVo != null;
    }

    public void setOriginVoIsSet(boolean value) {
      if (!value) {
        this.originVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CLIENT_ID:
        if (value == null) {
          unsetClientId();
        } else {
          setClientId((String)value);
        }
        break;

      case ISCLUDE_DISABLE:
        if (value == null) {
          unsetIscludeDisable();
        } else {
          setIscludeDisable((Boolean)value);
        }
        break;

      case ORIGIN_VO:
        if (value == null) {
          unsetOriginVo();
        } else {
          setOriginVo((com.froad.thrift.vo.OriginVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CLIENT_ID:
        return getClientId();

      case ISCLUDE_DISABLE:
        return Boolean.valueOf(isIscludeDisable());

      case ORIGIN_VO:
        return getOriginVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CLIENT_ID:
        return isSetClientId();
      case ISCLUDE_DISABLE:
        return isSetIscludeDisable();
      case ORIGIN_VO:
        return isSetOriginVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findAll_args)
        return this.equals((findAll_args)that);
      return false;
    }

    public boolean equals(findAll_args that) {
      if (that == null)
        return false;

      boolean this_present_clientId = true && this.isSetClientId();
      boolean that_present_clientId = true && that.isSetClientId();
      if (this_present_clientId || that_present_clientId) {
        if (!(this_present_clientId && that_present_clientId))
          return false;
        if (!this.clientId.equals(that.clientId))
          return false;
      }

      boolean this_present_iscludeDisable = true;
      boolean that_present_iscludeDisable = true;
      if (this_present_iscludeDisable || that_present_iscludeDisable) {
        if (!(this_present_iscludeDisable && that_present_iscludeDisable))
          return false;
        if (this.iscludeDisable != that.iscludeDisable)
          return false;
      }

      boolean this_present_originVo = true && this.isSetOriginVo();
      boolean that_present_originVo = true && that.isSetOriginVo();
      if (this_present_originVo || that_present_originVo) {
        if (!(this_present_originVo && that_present_originVo))
          return false;
        if (!this.originVo.equals(that.originVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_clientId = true && (isSetClientId());
      list.add(present_clientId);
      if (present_clientId)
        list.add(clientId);

      boolean present_iscludeDisable = true;
      list.add(present_iscludeDisable);
      if (present_iscludeDisable)
        list.add(iscludeDisable);

      boolean present_originVo = true && (isSetOriginVo());
      list.add(present_originVo);
      if (present_originVo)
        list.add(originVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(findAll_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIscludeDisable()).compareTo(other.isSetIscludeDisable());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIscludeDisable()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.iscludeDisable, other.iscludeDisable);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOriginVo()).compareTo(other.isSetOriginVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originVo, other.originVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findAll_args(");
      boolean first = true;

      sb.append("clientId:");
      if (this.clientId == null) {
        sb.append("null");
      } else {
        sb.append(this.clientId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("iscludeDisable:");
      sb.append(this.iscludeDisable);
      first = false;
      if (!first) sb.append(", ");
      sb.append("originVo:");
      if (this.originVo == null) {
        sb.append("null");
      } else {
        sb.append(this.originVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (originVo != null) {
        originVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findAll_argsStandardSchemeFactory implements SchemeFactory {
      public findAll_argsStandardScheme getScheme() {
        return new findAll_argsStandardScheme();
      }
    }

    private static class findAll_argsStandardScheme extends StandardScheme<findAll_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findAll_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CLIENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clientId = iprot.readString();
                struct.setClientIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ISCLUDE_DISABLE
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.iscludeDisable = iprot.readBool();
                struct.setIscludeDisableIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ORIGIN_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.originVo = new com.froad.thrift.vo.OriginVo();
                struct.originVo.read(iprot);
                struct.setOriginVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findAll_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.clientId != null) {
          oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
          oprot.writeString(struct.clientId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(ISCLUDE_DISABLE_FIELD_DESC);
        oprot.writeBool(struct.iscludeDisable);
        oprot.writeFieldEnd();
        if (struct.originVo != null) {
          oprot.writeFieldBegin(ORIGIN_VO_FIELD_DESC);
          struct.originVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findAll_argsTupleSchemeFactory implements SchemeFactory {
      public findAll_argsTupleScheme getScheme() {
        return new findAll_argsTupleScheme();
      }
    }

    private static class findAll_argsTupleScheme extends TupleScheme<findAll_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findAll_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetClientId()) {
          optionals.set(0);
        }
        if (struct.isSetIscludeDisable()) {
          optionals.set(1);
        }
        if (struct.isSetOriginVo()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetClientId()) {
          oprot.writeString(struct.clientId);
        }
        if (struct.isSetIscludeDisable()) {
          oprot.writeBool(struct.iscludeDisable);
        }
        if (struct.isSetOriginVo()) {
          struct.originVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findAll_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.clientId = iprot.readString();
          struct.setClientIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.iscludeDisable = iprot.readBool();
          struct.setIscludeDisableIsSet(true);
        }
        if (incoming.get(2)) {
          struct.originVo = new com.froad.thrift.vo.OriginVo();
          struct.originVo.read(iprot);
          struct.setOriginVoIsSet(true);
        }
      }
    }

  }

  public static class findAll_result implements org.apache.thrift.TBase<findAll_result, findAll_result._Fields>, java.io.Serializable, Cloneable, Comparable<findAll_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findAll_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findAll_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findAll_resultTupleSchemeFactory());
    }

    public BossMerchantCategoryListRes success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BossMerchantCategoryListRes.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findAll_result.class, metaDataMap);
    }

    public findAll_result() {
    }

    public findAll_result(
      BossMerchantCategoryListRes success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findAll_result(findAll_result other) {
      if (other.isSetSuccess()) {
        this.success = new BossMerchantCategoryListRes(other.success);
      }
    }

    public findAll_result deepCopy() {
      return new findAll_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public BossMerchantCategoryListRes getSuccess() {
      return this.success;
    }

    public findAll_result setSuccess(BossMerchantCategoryListRes success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((BossMerchantCategoryListRes)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findAll_result)
        return this.equals((findAll_result)that);
      return false;
    }

    public boolean equals(findAll_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(findAll_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findAll_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findAll_resultStandardSchemeFactory implements SchemeFactory {
      public findAll_resultStandardScheme getScheme() {
        return new findAll_resultStandardScheme();
      }
    }

    private static class findAll_resultStandardScheme extends StandardScheme<findAll_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findAll_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new BossMerchantCategoryListRes();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findAll_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findAll_resultTupleSchemeFactory implements SchemeFactory {
      public findAll_resultTupleScheme getScheme() {
        return new findAll_resultTupleScheme();
      }
    }

    private static class findAll_resultTupleScheme extends TupleScheme<findAll_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findAll_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findAll_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new BossMerchantCategoryListRes();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getBossMerchantCategoryById_args implements org.apache.thrift.TBase<getBossMerchantCategoryById_args, getBossMerchantCategoryById_args._Fields>, java.io.Serializable, Cloneable, Comparable<getBossMerchantCategoryById_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBossMerchantCategoryById_args");

    private static final org.apache.thrift.protocol.TField ORIGIN_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("originVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getBossMerchantCategoryById_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getBossMerchantCategoryById_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OriginVo originVo; // required
    public long id; // required
    public String clientId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORIGIN_VO((short)1, "originVo"),
      ID((short)2, "id"),
      CLIENT_ID((short)3, "clientId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORIGIN_VO
            return ORIGIN_VO;
          case 2: // ID
            return ID;
          case 3: // CLIENT_ID
            return CLIENT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORIGIN_VO, new org.apache.thrift.meta_data.FieldMetaData("originVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OriginVo.class)));
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBossMerchantCategoryById_args.class, metaDataMap);
    }

    public getBossMerchantCategoryById_args() {
    }

    public getBossMerchantCategoryById_args(
      com.froad.thrift.vo.OriginVo originVo,
      long id,
      String clientId)
    {
      this();
      this.originVo = originVo;
      this.id = id;
      setIdIsSet(true);
      this.clientId = clientId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBossMerchantCategoryById_args(getBossMerchantCategoryById_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetOriginVo()) {
        this.originVo = new com.froad.thrift.vo.OriginVo(other.originVo);
      }
      this.id = other.id;
      if (other.isSetClientId()) {
        this.clientId = other.clientId;
      }
    }

    public getBossMerchantCategoryById_args deepCopy() {
      return new getBossMerchantCategoryById_args(this);
    }

    @Override
    public void clear() {
      this.originVo = null;
      setIdIsSet(false);
      this.id = 0;
      this.clientId = null;
    }

    public com.froad.thrift.vo.OriginVo getOriginVo() {
      return this.originVo;
    }

    public getBossMerchantCategoryById_args setOriginVo(com.froad.thrift.vo.OriginVo originVo) {
      this.originVo = originVo;
      return this;
    }

    public void unsetOriginVo() {
      this.originVo = null;
    }

    /** Returns true if field originVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginVo() {
      return this.originVo != null;
    }

    public void setOriginVoIsSet(boolean value) {
      if (!value) {
        this.originVo = null;
      }
    }

    public long getId() {
      return this.id;
    }

    public getBossMerchantCategoryById_args setId(long id) {
      this.id = id;
      setIdIsSet(true);
      return this;
    }

    public void unsetId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
    }

    public void setIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
    }

    public String getClientId() {
      return this.clientId;
    }

    public getBossMerchantCategoryById_args setClientId(String clientId) {
      this.clientId = clientId;
      return this;
    }

    public void unsetClientId() {
      this.clientId = null;
    }

    /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
    public boolean isSetClientId() {
      return this.clientId != null;
    }

    public void setClientIdIsSet(boolean value) {
      if (!value) {
        this.clientId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORIGIN_VO:
        if (value == null) {
          unsetOriginVo();
        } else {
          setOriginVo((com.froad.thrift.vo.OriginVo)value);
        }
        break;

      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((Long)value);
        }
        break;

      case CLIENT_ID:
        if (value == null) {
          unsetClientId();
        } else {
          setClientId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORIGIN_VO:
        return getOriginVo();

      case ID:
        return Long.valueOf(getId());

      case CLIENT_ID:
        return getClientId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORIGIN_VO:
        return isSetOriginVo();
      case ID:
        return isSetId();
      case CLIENT_ID:
        return isSetClientId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBossMerchantCategoryById_args)
        return this.equals((getBossMerchantCategoryById_args)that);
      return false;
    }

    public boolean equals(getBossMerchantCategoryById_args that) {
      if (that == null)
        return false;

      boolean this_present_originVo = true && this.isSetOriginVo();
      boolean that_present_originVo = true && that.isSetOriginVo();
      if (this_present_originVo || that_present_originVo) {
        if (!(this_present_originVo && that_present_originVo))
          return false;
        if (!this.originVo.equals(that.originVo))
          return false;
      }

      boolean this_present_id = true;
      boolean that_present_id = true;
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (this.id != that.id)
          return false;
      }

      boolean this_present_clientId = true && this.isSetClientId();
      boolean that_present_clientId = true && that.isSetClientId();
      if (this_present_clientId || that_present_clientId) {
        if (!(this_present_clientId && that_present_clientId))
          return false;
        if (!this.clientId.equals(that.clientId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_originVo = true && (isSetOriginVo());
      list.add(present_originVo);
      if (present_originVo)
        list.add(originVo);

      boolean present_id = true;
      list.add(present_id);
      if (present_id)
        list.add(id);

      boolean present_clientId = true && (isSetClientId());
      list.add(present_clientId);
      if (present_clientId)
        list.add(clientId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getBossMerchantCategoryById_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOriginVo()).compareTo(other.isSetOriginVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originVo, other.originVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getBossMerchantCategoryById_args(");
      boolean first = true;

      sb.append("originVo:");
      if (this.originVo == null) {
        sb.append("null");
      } else {
        sb.append(this.originVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("id:");
      sb.append(this.id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("clientId:");
      if (this.clientId == null) {
        sb.append("null");
      } else {
        sb.append(this.clientId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (originVo != null) {
        originVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getBossMerchantCategoryById_argsStandardSchemeFactory implements SchemeFactory {
      public getBossMerchantCategoryById_argsStandardScheme getScheme() {
        return new getBossMerchantCategoryById_argsStandardScheme();
      }
    }

    private static class getBossMerchantCategoryById_argsStandardScheme extends StandardScheme<getBossMerchantCategoryById_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getBossMerchantCategoryById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORIGIN_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.originVo = new com.froad.thrift.vo.OriginVo();
                struct.originVo.read(iprot);
                struct.setOriginVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.id = iprot.readI64();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CLIENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clientId = iprot.readString();
                struct.setClientIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getBossMerchantCategoryById_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.originVo != null) {
          oprot.writeFieldBegin(ORIGIN_VO_FIELD_DESC);
          struct.originVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI64(struct.id);
        oprot.writeFieldEnd();
        if (struct.clientId != null) {
          oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
          oprot.writeString(struct.clientId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getBossMerchantCategoryById_argsTupleSchemeFactory implements SchemeFactory {
      public getBossMerchantCategoryById_argsTupleScheme getScheme() {
        return new getBossMerchantCategoryById_argsTupleScheme();
      }
    }

    private static class getBossMerchantCategoryById_argsTupleScheme extends TupleScheme<getBossMerchantCategoryById_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getBossMerchantCategoryById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOriginVo()) {
          optionals.set(0);
        }
        if (struct.isSetId()) {
          optionals.set(1);
        }
        if (struct.isSetClientId()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetOriginVo()) {
          struct.originVo.write(oprot);
        }
        if (struct.isSetId()) {
          oprot.writeI64(struct.id);
        }
        if (struct.isSetClientId()) {
          oprot.writeString(struct.clientId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getBossMerchantCategoryById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.originVo = new com.froad.thrift.vo.OriginVo();
          struct.originVo.read(iprot);
          struct.setOriginVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.id = iprot.readI64();
          struct.setIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.clientId = iprot.readString();
          struct.setClientIdIsSet(true);
        }
      }
    }

  }

  public static class getBossMerchantCategoryById_result implements org.apache.thrift.TBase<getBossMerchantCategoryById_result, getBossMerchantCategoryById_result._Fields>, java.io.Serializable, Cloneable, Comparable<getBossMerchantCategoryById_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBossMerchantCategoryById_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getBossMerchantCategoryById_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getBossMerchantCategoryById_resultTupleSchemeFactory());
    }

    public BossMerchantCategoryInfoRes success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BossMerchantCategoryInfoRes.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBossMerchantCategoryById_result.class, metaDataMap);
    }

    public getBossMerchantCategoryById_result() {
    }

    public getBossMerchantCategoryById_result(
      BossMerchantCategoryInfoRes success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBossMerchantCategoryById_result(getBossMerchantCategoryById_result other) {
      if (other.isSetSuccess()) {
        this.success = new BossMerchantCategoryInfoRes(other.success);
      }
    }

    public getBossMerchantCategoryById_result deepCopy() {
      return new getBossMerchantCategoryById_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public BossMerchantCategoryInfoRes getSuccess() {
      return this.success;
    }

    public getBossMerchantCategoryById_result setSuccess(BossMerchantCategoryInfoRes success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((BossMerchantCategoryInfoRes)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBossMerchantCategoryById_result)
        return this.equals((getBossMerchantCategoryById_result)that);
      return false;
    }

    public boolean equals(getBossMerchantCategoryById_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getBossMerchantCategoryById_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getBossMerchantCategoryById_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getBossMerchantCategoryById_resultStandardSchemeFactory implements SchemeFactory {
      public getBossMerchantCategoryById_resultStandardScheme getScheme() {
        return new getBossMerchantCategoryById_resultStandardScheme();
      }
    }

    private static class getBossMerchantCategoryById_resultStandardScheme extends StandardScheme<getBossMerchantCategoryById_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getBossMerchantCategoryById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new BossMerchantCategoryInfoRes();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getBossMerchantCategoryById_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getBossMerchantCategoryById_resultTupleSchemeFactory implements SchemeFactory {
      public getBossMerchantCategoryById_resultTupleScheme getScheme() {
        return new getBossMerchantCategoryById_resultTupleScheme();
      }
    }

    private static class getBossMerchantCategoryById_resultTupleScheme extends TupleScheme<getBossMerchantCategoryById_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getBossMerchantCategoryById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getBossMerchantCategoryById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new BossMerchantCategoryInfoRes();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class addBossMerchantCategoryVo_args implements org.apache.thrift.TBase<addBossMerchantCategoryVo_args, addBossMerchantCategoryVo_args._Fields>, java.io.Serializable, Cloneable, Comparable<addBossMerchantCategoryVo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addBossMerchantCategoryVo_args");

    private static final org.apache.thrift.protocol.TField ORIGIN_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("originVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField BOSS_MERCHANT_CATEGORY_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("bossMerchantCategoryVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addBossMerchantCategoryVo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addBossMerchantCategoryVo_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OriginVo originVo; // required
    public BossMerchantCategoryVo bossMerchantCategoryVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORIGIN_VO((short)1, "originVo"),
      BOSS_MERCHANT_CATEGORY_VO((short)2, "bossMerchantCategoryVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORIGIN_VO
            return ORIGIN_VO;
          case 2: // BOSS_MERCHANT_CATEGORY_VO
            return BOSS_MERCHANT_CATEGORY_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORIGIN_VO, new org.apache.thrift.meta_data.FieldMetaData("originVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OriginVo.class)));
      tmpMap.put(_Fields.BOSS_MERCHANT_CATEGORY_VO, new org.apache.thrift.meta_data.FieldMetaData("bossMerchantCategoryVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BossMerchantCategoryVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addBossMerchantCategoryVo_args.class, metaDataMap);
    }

    public addBossMerchantCategoryVo_args() {
    }

    public addBossMerchantCategoryVo_args(
      com.froad.thrift.vo.OriginVo originVo,
      BossMerchantCategoryVo bossMerchantCategoryVo)
    {
      this();
      this.originVo = originVo;
      this.bossMerchantCategoryVo = bossMerchantCategoryVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addBossMerchantCategoryVo_args(addBossMerchantCategoryVo_args other) {
      if (other.isSetOriginVo()) {
        this.originVo = new com.froad.thrift.vo.OriginVo(other.originVo);
      }
      if (other.isSetBossMerchantCategoryVo()) {
        this.bossMerchantCategoryVo = new BossMerchantCategoryVo(other.bossMerchantCategoryVo);
      }
    }

    public addBossMerchantCategoryVo_args deepCopy() {
      return new addBossMerchantCategoryVo_args(this);
    }

    @Override
    public void clear() {
      this.originVo = null;
      this.bossMerchantCategoryVo = null;
    }

    public com.froad.thrift.vo.OriginVo getOriginVo() {
      return this.originVo;
    }

    public addBossMerchantCategoryVo_args setOriginVo(com.froad.thrift.vo.OriginVo originVo) {
      this.originVo = originVo;
      return this;
    }

    public void unsetOriginVo() {
      this.originVo = null;
    }

    /** Returns true if field originVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginVo() {
      return this.originVo != null;
    }

    public void setOriginVoIsSet(boolean value) {
      if (!value) {
        this.originVo = null;
      }
    }

    public BossMerchantCategoryVo getBossMerchantCategoryVo() {
      return this.bossMerchantCategoryVo;
    }

    public addBossMerchantCategoryVo_args setBossMerchantCategoryVo(BossMerchantCategoryVo bossMerchantCategoryVo) {
      this.bossMerchantCategoryVo = bossMerchantCategoryVo;
      return this;
    }

    public void unsetBossMerchantCategoryVo() {
      this.bossMerchantCategoryVo = null;
    }

    /** Returns true if field bossMerchantCategoryVo is set (has been assigned a value) and false otherwise */
    public boolean isSetBossMerchantCategoryVo() {
      return this.bossMerchantCategoryVo != null;
    }

    public void setBossMerchantCategoryVoIsSet(boolean value) {
      if (!value) {
        this.bossMerchantCategoryVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORIGIN_VO:
        if (value == null) {
          unsetOriginVo();
        } else {
          setOriginVo((com.froad.thrift.vo.OriginVo)value);
        }
        break;

      case BOSS_MERCHANT_CATEGORY_VO:
        if (value == null) {
          unsetBossMerchantCategoryVo();
        } else {
          setBossMerchantCategoryVo((BossMerchantCategoryVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORIGIN_VO:
        return getOriginVo();

      case BOSS_MERCHANT_CATEGORY_VO:
        return getBossMerchantCategoryVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORIGIN_VO:
        return isSetOriginVo();
      case BOSS_MERCHANT_CATEGORY_VO:
        return isSetBossMerchantCategoryVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addBossMerchantCategoryVo_args)
        return this.equals((addBossMerchantCategoryVo_args)that);
      return false;
    }

    public boolean equals(addBossMerchantCategoryVo_args that) {
      if (that == null)
        return false;

      boolean this_present_originVo = true && this.isSetOriginVo();
      boolean that_present_originVo = true && that.isSetOriginVo();
      if (this_present_originVo || that_present_originVo) {
        if (!(this_present_originVo && that_present_originVo))
          return false;
        if (!this.originVo.equals(that.originVo))
          return false;
      }

      boolean this_present_bossMerchantCategoryVo = true && this.isSetBossMerchantCategoryVo();
      boolean that_present_bossMerchantCategoryVo = true && that.isSetBossMerchantCategoryVo();
      if (this_present_bossMerchantCategoryVo || that_present_bossMerchantCategoryVo) {
        if (!(this_present_bossMerchantCategoryVo && that_present_bossMerchantCategoryVo))
          return false;
        if (!this.bossMerchantCategoryVo.equals(that.bossMerchantCategoryVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_originVo = true && (isSetOriginVo());
      list.add(present_originVo);
      if (present_originVo)
        list.add(originVo);

      boolean present_bossMerchantCategoryVo = true && (isSetBossMerchantCategoryVo());
      list.add(present_bossMerchantCategoryVo);
      if (present_bossMerchantCategoryVo)
        list.add(bossMerchantCategoryVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(addBossMerchantCategoryVo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOriginVo()).compareTo(other.isSetOriginVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originVo, other.originVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBossMerchantCategoryVo()).compareTo(other.isSetBossMerchantCategoryVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBossMerchantCategoryVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bossMerchantCategoryVo, other.bossMerchantCategoryVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addBossMerchantCategoryVo_args(");
      boolean first = true;

      sb.append("originVo:");
      if (this.originVo == null) {
        sb.append("null");
      } else {
        sb.append(this.originVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("bossMerchantCategoryVo:");
      if (this.bossMerchantCategoryVo == null) {
        sb.append("null");
      } else {
        sb.append(this.bossMerchantCategoryVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (originVo != null) {
        originVo.validate();
      }
      if (bossMerchantCategoryVo != null) {
        bossMerchantCategoryVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addBossMerchantCategoryVo_argsStandardSchemeFactory implements SchemeFactory {
      public addBossMerchantCategoryVo_argsStandardScheme getScheme() {
        return new addBossMerchantCategoryVo_argsStandardScheme();
      }
    }

    private static class addBossMerchantCategoryVo_argsStandardScheme extends StandardScheme<addBossMerchantCategoryVo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addBossMerchantCategoryVo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORIGIN_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.originVo = new com.froad.thrift.vo.OriginVo();
                struct.originVo.read(iprot);
                struct.setOriginVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BOSS_MERCHANT_CATEGORY_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.bossMerchantCategoryVo = new BossMerchantCategoryVo();
                struct.bossMerchantCategoryVo.read(iprot);
                struct.setBossMerchantCategoryVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addBossMerchantCategoryVo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.originVo != null) {
          oprot.writeFieldBegin(ORIGIN_VO_FIELD_DESC);
          struct.originVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.bossMerchantCategoryVo != null) {
          oprot.writeFieldBegin(BOSS_MERCHANT_CATEGORY_VO_FIELD_DESC);
          struct.bossMerchantCategoryVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addBossMerchantCategoryVo_argsTupleSchemeFactory implements SchemeFactory {
      public addBossMerchantCategoryVo_argsTupleScheme getScheme() {
        return new addBossMerchantCategoryVo_argsTupleScheme();
      }
    }

    private static class addBossMerchantCategoryVo_argsTupleScheme extends TupleScheme<addBossMerchantCategoryVo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addBossMerchantCategoryVo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOriginVo()) {
          optionals.set(0);
        }
        if (struct.isSetBossMerchantCategoryVo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOriginVo()) {
          struct.originVo.write(oprot);
        }
        if (struct.isSetBossMerchantCategoryVo()) {
          struct.bossMerchantCategoryVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addBossMerchantCategoryVo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.originVo = new com.froad.thrift.vo.OriginVo();
          struct.originVo.read(iprot);
          struct.setOriginVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.bossMerchantCategoryVo = new BossMerchantCategoryVo();
          struct.bossMerchantCategoryVo.read(iprot);
          struct.setBossMerchantCategoryVoIsSet(true);
        }
      }
    }

  }

  public static class addBossMerchantCategoryVo_result implements org.apache.thrift.TBase<addBossMerchantCategoryVo_result, addBossMerchantCategoryVo_result._Fields>, java.io.Serializable, Cloneable, Comparable<addBossMerchantCategoryVo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addBossMerchantCategoryVo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addBossMerchantCategoryVo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addBossMerchantCategoryVo_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addBossMerchantCategoryVo_result.class, metaDataMap);
    }

    public addBossMerchantCategoryVo_result() {
    }

    public addBossMerchantCategoryVo_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addBossMerchantCategoryVo_result(addBossMerchantCategoryVo_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public addBossMerchantCategoryVo_result deepCopy() {
      return new addBossMerchantCategoryVo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public addBossMerchantCategoryVo_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addBossMerchantCategoryVo_result)
        return this.equals((addBossMerchantCategoryVo_result)that);
      return false;
    }

    public boolean equals(addBossMerchantCategoryVo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(addBossMerchantCategoryVo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addBossMerchantCategoryVo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addBossMerchantCategoryVo_resultStandardSchemeFactory implements SchemeFactory {
      public addBossMerchantCategoryVo_resultStandardScheme getScheme() {
        return new addBossMerchantCategoryVo_resultStandardScheme();
      }
    }

    private static class addBossMerchantCategoryVo_resultStandardScheme extends StandardScheme<addBossMerchantCategoryVo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addBossMerchantCategoryVo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addBossMerchantCategoryVo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addBossMerchantCategoryVo_resultTupleSchemeFactory implements SchemeFactory {
      public addBossMerchantCategoryVo_resultTupleScheme getScheme() {
        return new addBossMerchantCategoryVo_resultTupleScheme();
      }
    }

    private static class addBossMerchantCategoryVo_resultTupleScheme extends TupleScheme<addBossMerchantCategoryVo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addBossMerchantCategoryVo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addBossMerchantCategoryVo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateBossMerchantCategoryVo_args implements org.apache.thrift.TBase<updateBossMerchantCategoryVo_args, updateBossMerchantCategoryVo_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateBossMerchantCategoryVo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateBossMerchantCategoryVo_args");

    private static final org.apache.thrift.protocol.TField ORIGIN_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("originVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField BOSS_MERCHANT_CATEGORY_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("bossMerchantCategoryVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateBossMerchantCategoryVo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateBossMerchantCategoryVo_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OriginVo originVo; // required
    public BossMerchantCategoryVo bossMerchantCategoryVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORIGIN_VO((short)1, "originVo"),
      BOSS_MERCHANT_CATEGORY_VO((short)2, "bossMerchantCategoryVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORIGIN_VO
            return ORIGIN_VO;
          case 2: // BOSS_MERCHANT_CATEGORY_VO
            return BOSS_MERCHANT_CATEGORY_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORIGIN_VO, new org.apache.thrift.meta_data.FieldMetaData("originVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OriginVo.class)));
      tmpMap.put(_Fields.BOSS_MERCHANT_CATEGORY_VO, new org.apache.thrift.meta_data.FieldMetaData("bossMerchantCategoryVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BossMerchantCategoryVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateBossMerchantCategoryVo_args.class, metaDataMap);
    }

    public updateBossMerchantCategoryVo_args() {
    }

    public updateBossMerchantCategoryVo_args(
      com.froad.thrift.vo.OriginVo originVo,
      BossMerchantCategoryVo bossMerchantCategoryVo)
    {
      this();
      this.originVo = originVo;
      this.bossMerchantCategoryVo = bossMerchantCategoryVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateBossMerchantCategoryVo_args(updateBossMerchantCategoryVo_args other) {
      if (other.isSetOriginVo()) {
        this.originVo = new com.froad.thrift.vo.OriginVo(other.originVo);
      }
      if (other.isSetBossMerchantCategoryVo()) {
        this.bossMerchantCategoryVo = new BossMerchantCategoryVo(other.bossMerchantCategoryVo);
      }
    }

    public updateBossMerchantCategoryVo_args deepCopy() {
      return new updateBossMerchantCategoryVo_args(this);
    }

    @Override
    public void clear() {
      this.originVo = null;
      this.bossMerchantCategoryVo = null;
    }

    public com.froad.thrift.vo.OriginVo getOriginVo() {
      return this.originVo;
    }

    public updateBossMerchantCategoryVo_args setOriginVo(com.froad.thrift.vo.OriginVo originVo) {
      this.originVo = originVo;
      return this;
    }

    public void unsetOriginVo() {
      this.originVo = null;
    }

    /** Returns true if field originVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginVo() {
      return this.originVo != null;
    }

    public void setOriginVoIsSet(boolean value) {
      if (!value) {
        this.originVo = null;
      }
    }

    public BossMerchantCategoryVo getBossMerchantCategoryVo() {
      return this.bossMerchantCategoryVo;
    }

    public updateBossMerchantCategoryVo_args setBossMerchantCategoryVo(BossMerchantCategoryVo bossMerchantCategoryVo) {
      this.bossMerchantCategoryVo = bossMerchantCategoryVo;
      return this;
    }

    public void unsetBossMerchantCategoryVo() {
      this.bossMerchantCategoryVo = null;
    }

    /** Returns true if field bossMerchantCategoryVo is set (has been assigned a value) and false otherwise */
    public boolean isSetBossMerchantCategoryVo() {
      return this.bossMerchantCategoryVo != null;
    }

    public void setBossMerchantCategoryVoIsSet(boolean value) {
      if (!value) {
        this.bossMerchantCategoryVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORIGIN_VO:
        if (value == null) {
          unsetOriginVo();
        } else {
          setOriginVo((com.froad.thrift.vo.OriginVo)value);
        }
        break;

      case BOSS_MERCHANT_CATEGORY_VO:
        if (value == null) {
          unsetBossMerchantCategoryVo();
        } else {
          setBossMerchantCategoryVo((BossMerchantCategoryVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORIGIN_VO:
        return getOriginVo();

      case BOSS_MERCHANT_CATEGORY_VO:
        return getBossMerchantCategoryVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORIGIN_VO:
        return isSetOriginVo();
      case BOSS_MERCHANT_CATEGORY_VO:
        return isSetBossMerchantCategoryVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateBossMerchantCategoryVo_args)
        return this.equals((updateBossMerchantCategoryVo_args)that);
      return false;
    }

    public boolean equals(updateBossMerchantCategoryVo_args that) {
      if (that == null)
        return false;

      boolean this_present_originVo = true && this.isSetOriginVo();
      boolean that_present_originVo = true && that.isSetOriginVo();
      if (this_present_originVo || that_present_originVo) {
        if (!(this_present_originVo && that_present_originVo))
          return false;
        if (!this.originVo.equals(that.originVo))
          return false;
      }

      boolean this_present_bossMerchantCategoryVo = true && this.isSetBossMerchantCategoryVo();
      boolean that_present_bossMerchantCategoryVo = true && that.isSetBossMerchantCategoryVo();
      if (this_present_bossMerchantCategoryVo || that_present_bossMerchantCategoryVo) {
        if (!(this_present_bossMerchantCategoryVo && that_present_bossMerchantCategoryVo))
          return false;
        if (!this.bossMerchantCategoryVo.equals(that.bossMerchantCategoryVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_originVo = true && (isSetOriginVo());
      list.add(present_originVo);
      if (present_originVo)
        list.add(originVo);

      boolean present_bossMerchantCategoryVo = true && (isSetBossMerchantCategoryVo());
      list.add(present_bossMerchantCategoryVo);
      if (present_bossMerchantCategoryVo)
        list.add(bossMerchantCategoryVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateBossMerchantCategoryVo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOriginVo()).compareTo(other.isSetOriginVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originVo, other.originVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBossMerchantCategoryVo()).compareTo(other.isSetBossMerchantCategoryVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBossMerchantCategoryVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bossMerchantCategoryVo, other.bossMerchantCategoryVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateBossMerchantCategoryVo_args(");
      boolean first = true;

      sb.append("originVo:");
      if (this.originVo == null) {
        sb.append("null");
      } else {
        sb.append(this.originVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("bossMerchantCategoryVo:");
      if (this.bossMerchantCategoryVo == null) {
        sb.append("null");
      } else {
        sb.append(this.bossMerchantCategoryVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (originVo != null) {
        originVo.validate();
      }
      if (bossMerchantCategoryVo != null) {
        bossMerchantCategoryVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateBossMerchantCategoryVo_argsStandardSchemeFactory implements SchemeFactory {
      public updateBossMerchantCategoryVo_argsStandardScheme getScheme() {
        return new updateBossMerchantCategoryVo_argsStandardScheme();
      }
    }

    private static class updateBossMerchantCategoryVo_argsStandardScheme extends StandardScheme<updateBossMerchantCategoryVo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateBossMerchantCategoryVo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORIGIN_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.originVo = new com.froad.thrift.vo.OriginVo();
                struct.originVo.read(iprot);
                struct.setOriginVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BOSS_MERCHANT_CATEGORY_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.bossMerchantCategoryVo = new BossMerchantCategoryVo();
                struct.bossMerchantCategoryVo.read(iprot);
                struct.setBossMerchantCategoryVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateBossMerchantCategoryVo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.originVo != null) {
          oprot.writeFieldBegin(ORIGIN_VO_FIELD_DESC);
          struct.originVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.bossMerchantCategoryVo != null) {
          oprot.writeFieldBegin(BOSS_MERCHANT_CATEGORY_VO_FIELD_DESC);
          struct.bossMerchantCategoryVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateBossMerchantCategoryVo_argsTupleSchemeFactory implements SchemeFactory {
      public updateBossMerchantCategoryVo_argsTupleScheme getScheme() {
        return new updateBossMerchantCategoryVo_argsTupleScheme();
      }
    }

    private static class updateBossMerchantCategoryVo_argsTupleScheme extends TupleScheme<updateBossMerchantCategoryVo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateBossMerchantCategoryVo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOriginVo()) {
          optionals.set(0);
        }
        if (struct.isSetBossMerchantCategoryVo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOriginVo()) {
          struct.originVo.write(oprot);
        }
        if (struct.isSetBossMerchantCategoryVo()) {
          struct.bossMerchantCategoryVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateBossMerchantCategoryVo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.originVo = new com.froad.thrift.vo.OriginVo();
          struct.originVo.read(iprot);
          struct.setOriginVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.bossMerchantCategoryVo = new BossMerchantCategoryVo();
          struct.bossMerchantCategoryVo.read(iprot);
          struct.setBossMerchantCategoryVoIsSet(true);
        }
      }
    }

  }

  public static class updateBossMerchantCategoryVo_result implements org.apache.thrift.TBase<updateBossMerchantCategoryVo_result, updateBossMerchantCategoryVo_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateBossMerchantCategoryVo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateBossMerchantCategoryVo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateBossMerchantCategoryVo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateBossMerchantCategoryVo_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateBossMerchantCategoryVo_result.class, metaDataMap);
    }

    public updateBossMerchantCategoryVo_result() {
    }

    public updateBossMerchantCategoryVo_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateBossMerchantCategoryVo_result(updateBossMerchantCategoryVo_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public updateBossMerchantCategoryVo_result deepCopy() {
      return new updateBossMerchantCategoryVo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public updateBossMerchantCategoryVo_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateBossMerchantCategoryVo_result)
        return this.equals((updateBossMerchantCategoryVo_result)that);
      return false;
    }

    public boolean equals(updateBossMerchantCategoryVo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateBossMerchantCategoryVo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateBossMerchantCategoryVo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateBossMerchantCategoryVo_resultStandardSchemeFactory implements SchemeFactory {
      public updateBossMerchantCategoryVo_resultStandardScheme getScheme() {
        return new updateBossMerchantCategoryVo_resultStandardScheme();
      }
    }

    private static class updateBossMerchantCategoryVo_resultStandardScheme extends StandardScheme<updateBossMerchantCategoryVo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateBossMerchantCategoryVo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateBossMerchantCategoryVo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateBossMerchantCategoryVo_resultTupleSchemeFactory implements SchemeFactory {
      public updateBossMerchantCategoryVo_resultTupleScheme getScheme() {
        return new updateBossMerchantCategoryVo_resultTupleScheme();
      }
    }

    private static class updateBossMerchantCategoryVo_resultTupleScheme extends TupleScheme<updateBossMerchantCategoryVo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateBossMerchantCategoryVo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateBossMerchantCategoryVo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class merchantCategoryInput_args implements org.apache.thrift.TBase<merchantCategoryInput_args, merchantCategoryInput_args._Fields>, java.io.Serializable, Cloneable, Comparable<merchantCategoryInput_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("merchantCategoryInput_args");

    private static final org.apache.thrift.protocol.TField ORIGIN_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("originVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField VOS_FIELD_DESC = new org.apache.thrift.protocol.TField("vos", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new merchantCategoryInput_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new merchantCategoryInput_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OriginVo originVo; // required
    public List<MerchantCategoryVo> vos; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORIGIN_VO((short)1, "originVo"),
      VOS((short)2, "vos");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORIGIN_VO
            return ORIGIN_VO;
          case 2: // VOS
            return VOS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORIGIN_VO, new org.apache.thrift.meta_data.FieldMetaData("originVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OriginVo.class)));
      tmpMap.put(_Fields.VOS, new org.apache.thrift.meta_data.FieldMetaData("vos", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MerchantCategoryVo.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(merchantCategoryInput_args.class, metaDataMap);
    }

    public merchantCategoryInput_args() {
    }

    public merchantCategoryInput_args(
      com.froad.thrift.vo.OriginVo originVo,
      List<MerchantCategoryVo> vos)
    {
      this();
      this.originVo = originVo;
      this.vos = vos;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public merchantCategoryInput_args(merchantCategoryInput_args other) {
      if (other.isSetOriginVo()) {
        this.originVo = new com.froad.thrift.vo.OriginVo(other.originVo);
      }
      if (other.isSetVos()) {
        List<MerchantCategoryVo> __this__vos = new ArrayList<MerchantCategoryVo>(other.vos.size());
        for (MerchantCategoryVo other_element : other.vos) {
          __this__vos.add(new MerchantCategoryVo(other_element));
        }
        this.vos = __this__vos;
      }
    }

    public merchantCategoryInput_args deepCopy() {
      return new merchantCategoryInput_args(this);
    }

    @Override
    public void clear() {
      this.originVo = null;
      this.vos = null;
    }

    public com.froad.thrift.vo.OriginVo getOriginVo() {
      return this.originVo;
    }

    public merchantCategoryInput_args setOriginVo(com.froad.thrift.vo.OriginVo originVo) {
      this.originVo = originVo;
      return this;
    }

    public void unsetOriginVo() {
      this.originVo = null;
    }

    /** Returns true if field originVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginVo() {
      return this.originVo != null;
    }

    public void setOriginVoIsSet(boolean value) {
      if (!value) {
        this.originVo = null;
      }
    }

    public int getVosSize() {
      return (this.vos == null) ? 0 : this.vos.size();
    }

    public java.util.Iterator<MerchantCategoryVo> getVosIterator() {
      return (this.vos == null) ? null : this.vos.iterator();
    }

    public void addToVos(MerchantCategoryVo elem) {
      if (this.vos == null) {
        this.vos = new ArrayList<MerchantCategoryVo>();
      }
      this.vos.add(elem);
    }

    public List<MerchantCategoryVo> getVos() {
      return this.vos;
    }

    public merchantCategoryInput_args setVos(List<MerchantCategoryVo> vos) {
      this.vos = vos;
      return this;
    }

    public void unsetVos() {
      this.vos = null;
    }

    /** Returns true if field vos is set (has been assigned a value) and false otherwise */
    public boolean isSetVos() {
      return this.vos != null;
    }

    public void setVosIsSet(boolean value) {
      if (!value) {
        this.vos = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORIGIN_VO:
        if (value == null) {
          unsetOriginVo();
        } else {
          setOriginVo((com.froad.thrift.vo.OriginVo)value);
        }
        break;

      case VOS:
        if (value == null) {
          unsetVos();
        } else {
          setVos((List<MerchantCategoryVo>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORIGIN_VO:
        return getOriginVo();

      case VOS:
        return getVos();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORIGIN_VO:
        return isSetOriginVo();
      case VOS:
        return isSetVos();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof merchantCategoryInput_args)
        return this.equals((merchantCategoryInput_args)that);
      return false;
    }

    public boolean equals(merchantCategoryInput_args that) {
      if (that == null)
        return false;

      boolean this_present_originVo = true && this.isSetOriginVo();
      boolean that_present_originVo = true && that.isSetOriginVo();
      if (this_present_originVo || that_present_originVo) {
        if (!(this_present_originVo && that_present_originVo))
          return false;
        if (!this.originVo.equals(that.originVo))
          return false;
      }

      boolean this_present_vos = true && this.isSetVos();
      boolean that_present_vos = true && that.isSetVos();
      if (this_present_vos || that_present_vos) {
        if (!(this_present_vos && that_present_vos))
          return false;
        if (!this.vos.equals(that.vos))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_originVo = true && (isSetOriginVo());
      list.add(present_originVo);
      if (present_originVo)
        list.add(originVo);

      boolean present_vos = true && (isSetVos());
      list.add(present_vos);
      if (present_vos)
        list.add(vos);

      return list.hashCode();
    }

    @Override
    public int compareTo(merchantCategoryInput_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOriginVo()).compareTo(other.isSetOriginVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originVo, other.originVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVos()).compareTo(other.isSetVos());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVos()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vos, other.vos);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("merchantCategoryInput_args(");
      boolean first = true;

      sb.append("originVo:");
      if (this.originVo == null) {
        sb.append("null");
      } else {
        sb.append(this.originVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("vos:");
      if (this.vos == null) {
        sb.append("null");
      } else {
        sb.append(this.vos);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (originVo != null) {
        originVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class merchantCategoryInput_argsStandardSchemeFactory implements SchemeFactory {
      public merchantCategoryInput_argsStandardScheme getScheme() {
        return new merchantCategoryInput_argsStandardScheme();
      }
    }

    private static class merchantCategoryInput_argsStandardScheme extends StandardScheme<merchantCategoryInput_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, merchantCategoryInput_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORIGIN_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.originVo = new com.froad.thrift.vo.OriginVo();
                struct.originVo.read(iprot);
                struct.setOriginVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // VOS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                  struct.vos = new ArrayList<MerchantCategoryVo>(_list16.size);
                  MerchantCategoryVo _elem17;
                  for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                  {
                    _elem17 = new MerchantCategoryVo();
                    _elem17.read(iprot);
                    struct.vos.add(_elem17);
                  }
                  iprot.readListEnd();
                }
                struct.setVosIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, merchantCategoryInput_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.originVo != null) {
          oprot.writeFieldBegin(ORIGIN_VO_FIELD_DESC);
          struct.originVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.vos != null) {
          oprot.writeFieldBegin(VOS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.vos.size()));
            for (MerchantCategoryVo _iter19 : struct.vos)
            {
              _iter19.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class merchantCategoryInput_argsTupleSchemeFactory implements SchemeFactory {
      public merchantCategoryInput_argsTupleScheme getScheme() {
        return new merchantCategoryInput_argsTupleScheme();
      }
    }

    private static class merchantCategoryInput_argsTupleScheme extends TupleScheme<merchantCategoryInput_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, merchantCategoryInput_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOriginVo()) {
          optionals.set(0);
        }
        if (struct.isSetVos()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOriginVo()) {
          struct.originVo.write(oprot);
        }
        if (struct.isSetVos()) {
          {
            oprot.writeI32(struct.vos.size());
            for (MerchantCategoryVo _iter20 : struct.vos)
            {
              _iter20.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, merchantCategoryInput_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.originVo = new com.froad.thrift.vo.OriginVo();
          struct.originVo.read(iprot);
          struct.setOriginVoIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.vos = new ArrayList<MerchantCategoryVo>(_list21.size);
            MerchantCategoryVo _elem22;
            for (int _i23 = 0; _i23 < _list21.size; ++_i23)
            {
              _elem22 = new MerchantCategoryVo();
              _elem22.read(iprot);
              struct.vos.add(_elem22);
            }
          }
          struct.setVosIsSet(true);
        }
      }
    }

  }

  public static class merchantCategoryInput_result implements org.apache.thrift.TBase<merchantCategoryInput_result, merchantCategoryInput_result._Fields>, java.io.Serializable, Cloneable, Comparable<merchantCategoryInput_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("merchantCategoryInput_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new merchantCategoryInput_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new merchantCategoryInput_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ExportResultRes success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ExportResultRes.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(merchantCategoryInput_result.class, metaDataMap);
    }

    public merchantCategoryInput_result() {
    }

    public merchantCategoryInput_result(
      com.froad.thrift.vo.ExportResultRes success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public merchantCategoryInput_result(merchantCategoryInput_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ExportResultRes(other.success);
      }
    }

    public merchantCategoryInput_result deepCopy() {
      return new merchantCategoryInput_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ExportResultRes getSuccess() {
      return this.success;
    }

    public merchantCategoryInput_result setSuccess(com.froad.thrift.vo.ExportResultRes success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ExportResultRes)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof merchantCategoryInput_result)
        return this.equals((merchantCategoryInput_result)that);
      return false;
    }

    public boolean equals(merchantCategoryInput_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(merchantCategoryInput_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("merchantCategoryInput_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class merchantCategoryInput_resultStandardSchemeFactory implements SchemeFactory {
      public merchantCategoryInput_resultStandardScheme getScheme() {
        return new merchantCategoryInput_resultStandardScheme();
      }
    }

    private static class merchantCategoryInput_resultStandardScheme extends StandardScheme<merchantCategoryInput_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, merchantCategoryInput_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ExportResultRes();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, merchantCategoryInput_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class merchantCategoryInput_resultTupleSchemeFactory implements SchemeFactory {
      public merchantCategoryInput_resultTupleScheme getScheme() {
        return new merchantCategoryInput_resultTupleScheme();
      }
    }

    private static class merchantCategoryInput_resultTupleScheme extends TupleScheme<merchantCategoryInput_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, merchantCategoryInput_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, merchantCategoryInput_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ExportResultRes();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class merchantCategoryDetailExport_args implements org.apache.thrift.TBase<merchantCategoryDetailExport_args, merchantCategoryDetailExport_args._Fields>, java.io.Serializable, Cloneable, Comparable<merchantCategoryDetailExport_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("merchantCategoryDetailExport_args");

    private static final org.apache.thrift.protocol.TField ORIGIN_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("originVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField CATEGORY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("categoryId", org.apache.thrift.protocol.TType.I64, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new merchantCategoryDetailExport_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new merchantCategoryDetailExport_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OriginVo originVo; // required
    public String clientId; // required
    public long categoryId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORIGIN_VO((short)1, "originVo"),
      CLIENT_ID((short)2, "clientId"),
      CATEGORY_ID((short)3, "categoryId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORIGIN_VO
            return ORIGIN_VO;
          case 2: // CLIENT_ID
            return CLIENT_ID;
          case 3: // CATEGORY_ID
            return CATEGORY_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CATEGORYID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORIGIN_VO, new org.apache.thrift.meta_data.FieldMetaData("originVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OriginVo.class)));
      tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CATEGORY_ID, new org.apache.thrift.meta_data.FieldMetaData("categoryId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(merchantCategoryDetailExport_args.class, metaDataMap);
    }

    public merchantCategoryDetailExport_args() {
    }

    public merchantCategoryDetailExport_args(
      com.froad.thrift.vo.OriginVo originVo,
      String clientId,
      long categoryId)
    {
      this();
      this.originVo = originVo;
      this.clientId = clientId;
      this.categoryId = categoryId;
      setCategoryIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public merchantCategoryDetailExport_args(merchantCategoryDetailExport_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetOriginVo()) {
        this.originVo = new com.froad.thrift.vo.OriginVo(other.originVo);
      }
      if (other.isSetClientId()) {
        this.clientId = other.clientId;
      }
      this.categoryId = other.categoryId;
    }

    public merchantCategoryDetailExport_args deepCopy() {
      return new merchantCategoryDetailExport_args(this);
    }

    @Override
    public void clear() {
      this.originVo = null;
      this.clientId = null;
      setCategoryIdIsSet(false);
      this.categoryId = 0;
    }

    public com.froad.thrift.vo.OriginVo getOriginVo() {
      return this.originVo;
    }

    public merchantCategoryDetailExport_args setOriginVo(com.froad.thrift.vo.OriginVo originVo) {
      this.originVo = originVo;
      return this;
    }

    public void unsetOriginVo() {
      this.originVo = null;
    }

    /** Returns true if field originVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginVo() {
      return this.originVo != null;
    }

    public void setOriginVoIsSet(boolean value) {
      if (!value) {
        this.originVo = null;
      }
    }

    public String getClientId() {
      return this.clientId;
    }

    public merchantCategoryDetailExport_args setClientId(String clientId) {
      this.clientId = clientId;
      return this;
    }

    public void unsetClientId() {
      this.clientId = null;
    }

    /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
    public boolean isSetClientId() {
      return this.clientId != null;
    }

    public void setClientIdIsSet(boolean value) {
      if (!value) {
        this.clientId = null;
      }
    }

    public long getCategoryId() {
      return this.categoryId;
    }

    public merchantCategoryDetailExport_args setCategoryId(long categoryId) {
      this.categoryId = categoryId;
      setCategoryIdIsSet(true);
      return this;
    }

    public void unsetCategoryId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CATEGORYID_ISSET_ID);
    }

    /** Returns true if field categoryId is set (has been assigned a value) and false otherwise */
    public boolean isSetCategoryId() {
      return EncodingUtils.testBit(__isset_bitfield, __CATEGORYID_ISSET_ID);
    }

    public void setCategoryIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CATEGORYID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORIGIN_VO:
        if (value == null) {
          unsetOriginVo();
        } else {
          setOriginVo((com.froad.thrift.vo.OriginVo)value);
        }
        break;

      case CLIENT_ID:
        if (value == null) {
          unsetClientId();
        } else {
          setClientId((String)value);
        }
        break;

      case CATEGORY_ID:
        if (value == null) {
          unsetCategoryId();
        } else {
          setCategoryId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORIGIN_VO:
        return getOriginVo();

      case CLIENT_ID:
        return getClientId();

      case CATEGORY_ID:
        return Long.valueOf(getCategoryId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORIGIN_VO:
        return isSetOriginVo();
      case CLIENT_ID:
        return isSetClientId();
      case CATEGORY_ID:
        return isSetCategoryId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof merchantCategoryDetailExport_args)
        return this.equals((merchantCategoryDetailExport_args)that);
      return false;
    }

    public boolean equals(merchantCategoryDetailExport_args that) {
      if (that == null)
        return false;

      boolean this_present_originVo = true && this.isSetOriginVo();
      boolean that_present_originVo = true && that.isSetOriginVo();
      if (this_present_originVo || that_present_originVo) {
        if (!(this_present_originVo && that_present_originVo))
          return false;
        if (!this.originVo.equals(that.originVo))
          return false;
      }

      boolean this_present_clientId = true && this.isSetClientId();
      boolean that_present_clientId = true && that.isSetClientId();
      if (this_present_clientId || that_present_clientId) {
        if (!(this_present_clientId && that_present_clientId))
          return false;
        if (!this.clientId.equals(that.clientId))
          return false;
      }

      boolean this_present_categoryId = true;
      boolean that_present_categoryId = true;
      if (this_present_categoryId || that_present_categoryId) {
        if (!(this_present_categoryId && that_present_categoryId))
          return false;
        if (this.categoryId != that.categoryId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_originVo = true && (isSetOriginVo());
      list.add(present_originVo);
      if (present_originVo)
        list.add(originVo);

      boolean present_clientId = true && (isSetClientId());
      list.add(present_clientId);
      if (present_clientId)
        list.add(clientId);

      boolean present_categoryId = true;
      list.add(present_categoryId);
      if (present_categoryId)
        list.add(categoryId);

      return list.hashCode();
    }

    @Override
    public int compareTo(merchantCategoryDetailExport_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOriginVo()).compareTo(other.isSetOriginVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originVo, other.originVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCategoryId()).compareTo(other.isSetCategoryId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCategoryId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.categoryId, other.categoryId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("merchantCategoryDetailExport_args(");
      boolean first = true;

      sb.append("originVo:");
      if (this.originVo == null) {
        sb.append("null");
      } else {
        sb.append(this.originVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("clientId:");
      if (this.clientId == null) {
        sb.append("null");
      } else {
        sb.append(this.clientId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("categoryId:");
      sb.append(this.categoryId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (originVo != null) {
        originVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class merchantCategoryDetailExport_argsStandardSchemeFactory implements SchemeFactory {
      public merchantCategoryDetailExport_argsStandardScheme getScheme() {
        return new merchantCategoryDetailExport_argsStandardScheme();
      }
    }

    private static class merchantCategoryDetailExport_argsStandardScheme extends StandardScheme<merchantCategoryDetailExport_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, merchantCategoryDetailExport_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORIGIN_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.originVo = new com.froad.thrift.vo.OriginVo();
                struct.originVo.read(iprot);
                struct.setOriginVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CLIENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clientId = iprot.readString();
                struct.setClientIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CATEGORY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.categoryId = iprot.readI64();
                struct.setCategoryIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, merchantCategoryDetailExport_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.originVo != null) {
          oprot.writeFieldBegin(ORIGIN_VO_FIELD_DESC);
          struct.originVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.clientId != null) {
          oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
          oprot.writeString(struct.clientId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(CATEGORY_ID_FIELD_DESC);
        oprot.writeI64(struct.categoryId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class merchantCategoryDetailExport_argsTupleSchemeFactory implements SchemeFactory {
      public merchantCategoryDetailExport_argsTupleScheme getScheme() {
        return new merchantCategoryDetailExport_argsTupleScheme();
      }
    }

    private static class merchantCategoryDetailExport_argsTupleScheme extends TupleScheme<merchantCategoryDetailExport_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, merchantCategoryDetailExport_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOriginVo()) {
          optionals.set(0);
        }
        if (struct.isSetClientId()) {
          optionals.set(1);
        }
        if (struct.isSetCategoryId()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetOriginVo()) {
          struct.originVo.write(oprot);
        }
        if (struct.isSetClientId()) {
          oprot.writeString(struct.clientId);
        }
        if (struct.isSetCategoryId()) {
          oprot.writeI64(struct.categoryId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, merchantCategoryDetailExport_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.originVo = new com.froad.thrift.vo.OriginVo();
          struct.originVo.read(iprot);
          struct.setOriginVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.clientId = iprot.readString();
          struct.setClientIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.categoryId = iprot.readI64();
          struct.setCategoryIdIsSet(true);
        }
      }
    }

  }

  public static class merchantCategoryDetailExport_result implements org.apache.thrift.TBase<merchantCategoryDetailExport_result, merchantCategoryDetailExport_result._Fields>, java.io.Serializable, Cloneable, Comparable<merchantCategoryDetailExport_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("merchantCategoryDetailExport_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new merchantCategoryDetailExport_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new merchantCategoryDetailExport_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ExportResultRes success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ExportResultRes.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(merchantCategoryDetailExport_result.class, metaDataMap);
    }

    public merchantCategoryDetailExport_result() {
    }

    public merchantCategoryDetailExport_result(
      com.froad.thrift.vo.ExportResultRes success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public merchantCategoryDetailExport_result(merchantCategoryDetailExport_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ExportResultRes(other.success);
      }
    }

    public merchantCategoryDetailExport_result deepCopy() {
      return new merchantCategoryDetailExport_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ExportResultRes getSuccess() {
      return this.success;
    }

    public merchantCategoryDetailExport_result setSuccess(com.froad.thrift.vo.ExportResultRes success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ExportResultRes)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof merchantCategoryDetailExport_result)
        return this.equals((merchantCategoryDetailExport_result)that);
      return false;
    }

    public boolean equals(merchantCategoryDetailExport_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(merchantCategoryDetailExport_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("merchantCategoryDetailExport_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class merchantCategoryDetailExport_resultStandardSchemeFactory implements SchemeFactory {
      public merchantCategoryDetailExport_resultStandardScheme getScheme() {
        return new merchantCategoryDetailExport_resultStandardScheme();
      }
    }

    private static class merchantCategoryDetailExport_resultStandardScheme extends StandardScheme<merchantCategoryDetailExport_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, merchantCategoryDetailExport_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ExportResultRes();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, merchantCategoryDetailExport_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class merchantCategoryDetailExport_resultTupleSchemeFactory implements SchemeFactory {
      public merchantCategoryDetailExport_resultTupleScheme getScheme() {
        return new merchantCategoryDetailExport_resultTupleScheme();
      }
    }

    private static class merchantCategoryDetailExport_resultTupleScheme extends TupleScheme<merchantCategoryDetailExport_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, merchantCategoryDetailExport_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, merchantCategoryDetailExport_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ExportResultRes();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getParentCategoryList_args implements org.apache.thrift.TBase<getParentCategoryList_args, getParentCategoryList_args._Fields>, java.io.Serializable, Cloneable, Comparable<getParentCategoryList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getParentCategoryList_args");

    private static final org.apache.thrift.protocol.TField REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("req", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getParentCategoryList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getParentCategoryList_argsTupleSchemeFactory());
    }

    public BossParentCategoryListReq req; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQ((short)1, "req");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQ
            return REQ;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQ, new org.apache.thrift.meta_data.FieldMetaData("req", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BossParentCategoryListReq.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getParentCategoryList_args.class, metaDataMap);
    }

    public getParentCategoryList_args() {
    }

    public getParentCategoryList_args(
      BossParentCategoryListReq req)
    {
      this();
      this.req = req;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getParentCategoryList_args(getParentCategoryList_args other) {
      if (other.isSetReq()) {
        this.req = new BossParentCategoryListReq(other.req);
      }
    }

    public getParentCategoryList_args deepCopy() {
      return new getParentCategoryList_args(this);
    }

    @Override
    public void clear() {
      this.req = null;
    }

    public BossParentCategoryListReq getReq() {
      return this.req;
    }

    public getParentCategoryList_args setReq(BossParentCategoryListReq req) {
      this.req = req;
      return this;
    }

    public void unsetReq() {
      this.req = null;
    }

    /** Returns true if field req is set (has been assigned a value) and false otherwise */
    public boolean isSetReq() {
      return this.req != null;
    }

    public void setReqIsSet(boolean value) {
      if (!value) {
        this.req = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQ:
        if (value == null) {
          unsetReq();
        } else {
          setReq((BossParentCategoryListReq)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQ:
        return getReq();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQ:
        return isSetReq();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getParentCategoryList_args)
        return this.equals((getParentCategoryList_args)that);
      return false;
    }

    public boolean equals(getParentCategoryList_args that) {
      if (that == null)
        return false;

      boolean this_present_req = true && this.isSetReq();
      boolean that_present_req = true && that.isSetReq();
      if (this_present_req || that_present_req) {
        if (!(this_present_req && that_present_req))
          return false;
        if (!this.req.equals(that.req))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_req = true && (isSetReq());
      list.add(present_req);
      if (present_req)
        list.add(req);

      return list.hashCode();
    }

    @Override
    public int compareTo(getParentCategoryList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetReq()).compareTo(other.isSetReq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReq()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.req, other.req);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getParentCategoryList_args(");
      boolean first = true;

      sb.append("req:");
      if (this.req == null) {
        sb.append("null");
      } else {
        sb.append(this.req);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (req != null) {
        req.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getParentCategoryList_argsStandardSchemeFactory implements SchemeFactory {
      public getParentCategoryList_argsStandardScheme getScheme() {
        return new getParentCategoryList_argsStandardScheme();
      }
    }

    private static class getParentCategoryList_argsStandardScheme extends StandardScheme<getParentCategoryList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getParentCategoryList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQ
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.req = new BossParentCategoryListReq();
                struct.req.read(iprot);
                struct.setReqIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getParentCategoryList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.req != null) {
          oprot.writeFieldBegin(REQ_FIELD_DESC);
          struct.req.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getParentCategoryList_argsTupleSchemeFactory implements SchemeFactory {
      public getParentCategoryList_argsTupleScheme getScheme() {
        return new getParentCategoryList_argsTupleScheme();
      }
    }

    private static class getParentCategoryList_argsTupleScheme extends TupleScheme<getParentCategoryList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getParentCategoryList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetReq()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetReq()) {
          struct.req.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getParentCategoryList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.req = new BossParentCategoryListReq();
          struct.req.read(iprot);
          struct.setReqIsSet(true);
        }
      }
    }

  }

  public static class getParentCategoryList_result implements org.apache.thrift.TBase<getParentCategoryList_result, getParentCategoryList_result._Fields>, java.io.Serializable, Cloneable, Comparable<getParentCategoryList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getParentCategoryList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getParentCategoryList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getParentCategoryList_resultTupleSchemeFactory());
    }

    public BossParentCategoryListRes success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BossParentCategoryListRes.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getParentCategoryList_result.class, metaDataMap);
    }

    public getParentCategoryList_result() {
    }

    public getParentCategoryList_result(
      BossParentCategoryListRes success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getParentCategoryList_result(getParentCategoryList_result other) {
      if (other.isSetSuccess()) {
        this.success = new BossParentCategoryListRes(other.success);
      }
    }

    public getParentCategoryList_result deepCopy() {
      return new getParentCategoryList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public BossParentCategoryListRes getSuccess() {
      return this.success;
    }

    public getParentCategoryList_result setSuccess(BossParentCategoryListRes success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((BossParentCategoryListRes)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getParentCategoryList_result)
        return this.equals((getParentCategoryList_result)that);
      return false;
    }

    public boolean equals(getParentCategoryList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getParentCategoryList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getParentCategoryList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getParentCategoryList_resultStandardSchemeFactory implements SchemeFactory {
      public getParentCategoryList_resultStandardScheme getScheme() {
        return new getParentCategoryList_resultStandardScheme();
      }
    }

    private static class getParentCategoryList_resultStandardScheme extends StandardScheme<getParentCategoryList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getParentCategoryList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new BossParentCategoryListRes();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getParentCategoryList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getParentCategoryList_resultTupleSchemeFactory implements SchemeFactory {
      public getParentCategoryList_resultTupleScheme getScheme() {
        return new getParentCategoryList_resultTupleScheme();
      }
    }

    private static class getParentCategoryList_resultTupleScheme extends TupleScheme<getParentCategoryList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getParentCategoryList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getParentCategoryList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new BossParentCategoryListRes();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
