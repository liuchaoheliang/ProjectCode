/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.vo.order;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 面对面惠付订单详情
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-12-30")
public class BossPrefPayOrderDetailInfoVo implements org.apache.thrift.TBase<BossPrefPayOrderDetailInfoVo, BossPrefPayOrderDetailInfoVo._Fields>, java.io.Serializable, Cloneable, Comparable<BossPrefPayOrderDetailInfoVo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BossPrefPayOrderDetailInfoVo");

  private static final org.apache.thrift.protocol.TField ORDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("orderId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField MEMBER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("memberName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("userName", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField CLIENT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("clientName", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField CREATE_SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("createSource", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField ORDER_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("orderType", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField PAYMENT_METHOD_FIELD_DESC = new org.apache.thrift.protocol.TField("paymentMethod", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField TOTAL_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("totalPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)9);
  private static final org.apache.thrift.protocol.TField CASH_FIELD_DESC = new org.apache.thrift.protocol.TField("cash", org.apache.thrift.protocol.TType.DOUBLE, (short)10);
  private static final org.apache.thrift.protocol.TField FFT_POINTS_FIELD_DESC = new org.apache.thrift.protocol.TField("fftPoints", org.apache.thrift.protocol.TType.DOUBLE, (short)11);
  private static final org.apache.thrift.protocol.TField BANK_POINTS_FIELD_DESC = new org.apache.thrift.protocol.TField("bankPoints", org.apache.thrift.protocol.TType.DOUBLE, (short)12);
  private static final org.apache.thrift.protocol.TField POINT_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("pointRate", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField DISCOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("discount", org.apache.thrift.protocol.TType.DOUBLE, (short)14);
  private static final org.apache.thrift.protocol.TField RED_PACKET_DISCOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("redPacketDiscount", org.apache.thrift.protocol.TType.DOUBLE, (short)15);
  private static final org.apache.thrift.protocol.TField ORDER_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("orderStatus", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField PAYMENT_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("paymentTime", org.apache.thrift.protocol.TType.I64, (short)17);
  private static final org.apache.thrift.protocol.TField BILL_NOS_FIELD_DESC = new org.apache.thrift.protocol.TField("billNos", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField MERCHANT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("merchantName", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField OUTLET_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("outletName", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField SETTLE_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("settleStatus", org.apache.thrift.protocol.TType.STRING, (short)21);
  private static final org.apache.thrift.protocol.TField SETTLE_BILL_NOS_FIELD_DESC = new org.apache.thrift.protocol.TField("settleBillNos", org.apache.thrift.protocol.TType.STRING, (short)22);
  private static final org.apache.thrift.protocol.TField SETTLE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("settleTime", org.apache.thrift.protocol.TType.I64, (short)23);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new BossPrefPayOrderDetailInfoVoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new BossPrefPayOrderDetailInfoVoTupleSchemeFactory());
  }

  /**
   * 订单编号
   */
  public String orderId; // optional
  /**
   * 订单创建时间
   */
  public long createTime; // optional
  /**
   * 用户会员名
   */
  public String memberName; // optional
  /**
   * 用户真实姓名
   */
  public String userName; // optional
  /**
   * 客户端名称
   */
  public String clientName; // optional
  /**
   * 订单创建来源
   */
  public String createSource; // optional
  /**
   * 支付类型
   */
  public String orderType; // optional
  /**
   * 支付方式
   */
  public String paymentMethod; // optional
  /**
   * 订单总金额
   */
  public double totalPrice; // optional
  /**
   * 订单现金
   */
  public double cash; // optional
  /**
   * 联盟积分
   */
  public double fftPoints; // optional
  /**
   * 银行积分
   */
  public double bankPoints; // optional
  /**
   * 银行积分兑换比例
   */
  public String pointRate; // optional
  /**
   * 优惠金额
   */
  public double discount; // optional
  /**
   * 红包折扣
   */
  public double redPacketDiscount; // optional
  /**
   * 订单状态
   */
  public String orderStatus; // optional
  /**
   * 订单支付时间
   */
  public long paymentTime; // optional
  /**
   * 支付账单号
   */
  public String billNos; // optional
  /**
   * 结算所属商户全称
   */
  public String merchantName; // optional
  /**
   * 交易所属门店全称
   */
  public String outletName; // optional
  /**
   * 结算状态
   */
  public String settleStatus; // optional
  /**
   * 结算账单号
   */
  public String settleBillNos; // optional
  /**
   * 结算时间
   */
  public long settleTime; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 订单编号
     */
    ORDER_ID((short)1, "orderId"),
    /**
     * 订单创建时间
     */
    CREATE_TIME((short)2, "createTime"),
    /**
     * 用户会员名
     */
    MEMBER_NAME((short)3, "memberName"),
    /**
     * 用户真实姓名
     */
    USER_NAME((short)4, "userName"),
    /**
     * 客户端名称
     */
    CLIENT_NAME((short)5, "clientName"),
    /**
     * 订单创建来源
     */
    CREATE_SOURCE((short)6, "createSource"),
    /**
     * 支付类型
     */
    ORDER_TYPE((short)7, "orderType"),
    /**
     * 支付方式
     */
    PAYMENT_METHOD((short)8, "paymentMethod"),
    /**
     * 订单总金额
     */
    TOTAL_PRICE((short)9, "totalPrice"),
    /**
     * 订单现金
     */
    CASH((short)10, "cash"),
    /**
     * 联盟积分
     */
    FFT_POINTS((short)11, "fftPoints"),
    /**
     * 银行积分
     */
    BANK_POINTS((short)12, "bankPoints"),
    /**
     * 银行积分兑换比例
     */
    POINT_RATE((short)13, "pointRate"),
    /**
     * 优惠金额
     */
    DISCOUNT((short)14, "discount"),
    /**
     * 红包折扣
     */
    RED_PACKET_DISCOUNT((short)15, "redPacketDiscount"),
    /**
     * 订单状态
     */
    ORDER_STATUS((short)16, "orderStatus"),
    /**
     * 订单支付时间
     */
    PAYMENT_TIME((short)17, "paymentTime"),
    /**
     * 支付账单号
     */
    BILL_NOS((short)18, "billNos"),
    /**
     * 结算所属商户全称
     */
    MERCHANT_NAME((short)19, "merchantName"),
    /**
     * 交易所属门店全称
     */
    OUTLET_NAME((short)20, "outletName"),
    /**
     * 结算状态
     */
    SETTLE_STATUS((short)21, "settleStatus"),
    /**
     * 结算账单号
     */
    SETTLE_BILL_NOS((short)22, "settleBillNos"),
    /**
     * 结算时间
     */
    SETTLE_TIME((short)23, "settleTime");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ORDER_ID
          return ORDER_ID;
        case 2: // CREATE_TIME
          return CREATE_TIME;
        case 3: // MEMBER_NAME
          return MEMBER_NAME;
        case 4: // USER_NAME
          return USER_NAME;
        case 5: // CLIENT_NAME
          return CLIENT_NAME;
        case 6: // CREATE_SOURCE
          return CREATE_SOURCE;
        case 7: // ORDER_TYPE
          return ORDER_TYPE;
        case 8: // PAYMENT_METHOD
          return PAYMENT_METHOD;
        case 9: // TOTAL_PRICE
          return TOTAL_PRICE;
        case 10: // CASH
          return CASH;
        case 11: // FFT_POINTS
          return FFT_POINTS;
        case 12: // BANK_POINTS
          return BANK_POINTS;
        case 13: // POINT_RATE
          return POINT_RATE;
        case 14: // DISCOUNT
          return DISCOUNT;
        case 15: // RED_PACKET_DISCOUNT
          return RED_PACKET_DISCOUNT;
        case 16: // ORDER_STATUS
          return ORDER_STATUS;
        case 17: // PAYMENT_TIME
          return PAYMENT_TIME;
        case 18: // BILL_NOS
          return BILL_NOS;
        case 19: // MERCHANT_NAME
          return MERCHANT_NAME;
        case 20: // OUTLET_NAME
          return OUTLET_NAME;
        case 21: // SETTLE_STATUS
          return SETTLE_STATUS;
        case 22: // SETTLE_BILL_NOS
          return SETTLE_BILL_NOS;
        case 23: // SETTLE_TIME
          return SETTLE_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CREATETIME_ISSET_ID = 0;
  private static final int __TOTALPRICE_ISSET_ID = 1;
  private static final int __CASH_ISSET_ID = 2;
  private static final int __FFTPOINTS_ISSET_ID = 3;
  private static final int __BANKPOINTS_ISSET_ID = 4;
  private static final int __DISCOUNT_ISSET_ID = 5;
  private static final int __REDPACKETDISCOUNT_ISSET_ID = 6;
  private static final int __PAYMENTTIME_ISSET_ID = 7;
  private static final int __SETTLETIME_ISSET_ID = 8;
  private short __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ORDER_ID,_Fields.CREATE_TIME,_Fields.MEMBER_NAME,_Fields.USER_NAME,_Fields.CLIENT_NAME,_Fields.CREATE_SOURCE,_Fields.ORDER_TYPE,_Fields.PAYMENT_METHOD,_Fields.TOTAL_PRICE,_Fields.CASH,_Fields.FFT_POINTS,_Fields.BANK_POINTS,_Fields.POINT_RATE,_Fields.DISCOUNT,_Fields.RED_PACKET_DISCOUNT,_Fields.ORDER_STATUS,_Fields.PAYMENT_TIME,_Fields.BILL_NOS,_Fields.MERCHANT_NAME,_Fields.OUTLET_NAME,_Fields.SETTLE_STATUS,_Fields.SETTLE_BILL_NOS,_Fields.SETTLE_TIME};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ORDER_ID, new org.apache.thrift.meta_data.FieldMetaData("orderId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MEMBER_NAME, new org.apache.thrift.meta_data.FieldMetaData("memberName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("userName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CLIENT_NAME, new org.apache.thrift.meta_data.FieldMetaData("clientName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_SOURCE, new org.apache.thrift.meta_data.FieldMetaData("createSource", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORDER_TYPE, new org.apache.thrift.meta_data.FieldMetaData("orderType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAYMENT_METHOD, new org.apache.thrift.meta_data.FieldMetaData("paymentMethod", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TOTAL_PRICE, new org.apache.thrift.meta_data.FieldMetaData("totalPrice", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CASH, new org.apache.thrift.meta_data.FieldMetaData("cash", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.FFT_POINTS, new org.apache.thrift.meta_data.FieldMetaData("fftPoints", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.BANK_POINTS, new org.apache.thrift.meta_data.FieldMetaData("bankPoints", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.POINT_RATE, new org.apache.thrift.meta_data.FieldMetaData("pointRate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DISCOUNT, new org.apache.thrift.meta_data.FieldMetaData("discount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.RED_PACKET_DISCOUNT, new org.apache.thrift.meta_data.FieldMetaData("redPacketDiscount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ORDER_STATUS, new org.apache.thrift.meta_data.FieldMetaData("orderStatus", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAYMENT_TIME, new org.apache.thrift.meta_data.FieldMetaData("paymentTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.BILL_NOS, new org.apache.thrift.meta_data.FieldMetaData("billNos", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MERCHANT_NAME, new org.apache.thrift.meta_data.FieldMetaData("merchantName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OUTLET_NAME, new org.apache.thrift.meta_data.FieldMetaData("outletName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SETTLE_STATUS, new org.apache.thrift.meta_data.FieldMetaData("settleStatus", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SETTLE_BILL_NOS, new org.apache.thrift.meta_data.FieldMetaData("settleBillNos", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SETTLE_TIME, new org.apache.thrift.meta_data.FieldMetaData("settleTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BossPrefPayOrderDetailInfoVo.class, metaDataMap);
  }

  public BossPrefPayOrderDetailInfoVo() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BossPrefPayOrderDetailInfoVo(BossPrefPayOrderDetailInfoVo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetOrderId()) {
      this.orderId = other.orderId;
    }
    this.createTime = other.createTime;
    if (other.isSetMemberName()) {
      this.memberName = other.memberName;
    }
    if (other.isSetUserName()) {
      this.userName = other.userName;
    }
    if (other.isSetClientName()) {
      this.clientName = other.clientName;
    }
    if (other.isSetCreateSource()) {
      this.createSource = other.createSource;
    }
    if (other.isSetOrderType()) {
      this.orderType = other.orderType;
    }
    if (other.isSetPaymentMethod()) {
      this.paymentMethod = other.paymentMethod;
    }
    this.totalPrice = other.totalPrice;
    this.cash = other.cash;
    this.fftPoints = other.fftPoints;
    this.bankPoints = other.bankPoints;
    if (other.isSetPointRate()) {
      this.pointRate = other.pointRate;
    }
    this.discount = other.discount;
    this.redPacketDiscount = other.redPacketDiscount;
    if (other.isSetOrderStatus()) {
      this.orderStatus = other.orderStatus;
    }
    this.paymentTime = other.paymentTime;
    if (other.isSetBillNos()) {
      this.billNos = other.billNos;
    }
    if (other.isSetMerchantName()) {
      this.merchantName = other.merchantName;
    }
    if (other.isSetOutletName()) {
      this.outletName = other.outletName;
    }
    if (other.isSetSettleStatus()) {
      this.settleStatus = other.settleStatus;
    }
    if (other.isSetSettleBillNos()) {
      this.settleBillNos = other.settleBillNos;
    }
    this.settleTime = other.settleTime;
  }

  public BossPrefPayOrderDetailInfoVo deepCopy() {
    return new BossPrefPayOrderDetailInfoVo(this);
  }

  @Override
  public void clear() {
    this.orderId = null;
    setCreateTimeIsSet(false);
    this.createTime = 0;
    this.memberName = null;
    this.userName = null;
    this.clientName = null;
    this.createSource = null;
    this.orderType = null;
    this.paymentMethod = null;
    setTotalPriceIsSet(false);
    this.totalPrice = 0.0;
    setCashIsSet(false);
    this.cash = 0.0;
    setFftPointsIsSet(false);
    this.fftPoints = 0.0;
    setBankPointsIsSet(false);
    this.bankPoints = 0.0;
    this.pointRate = null;
    setDiscountIsSet(false);
    this.discount = 0.0;
    setRedPacketDiscountIsSet(false);
    this.redPacketDiscount = 0.0;
    this.orderStatus = null;
    setPaymentTimeIsSet(false);
    this.paymentTime = 0;
    this.billNos = null;
    this.merchantName = null;
    this.outletName = null;
    this.settleStatus = null;
    this.settleBillNos = null;
    setSettleTimeIsSet(false);
    this.settleTime = 0;
  }

  /**
   * 订单编号
   */
  public String getOrderId() {
    return this.orderId;
  }

  /**
   * 订单编号
   */
  public BossPrefPayOrderDetailInfoVo setOrderId(String orderId) {
    this.orderId = orderId;
    return this;
  }

  public void unsetOrderId() {
    this.orderId = null;
  }

  /** Returns true if field orderId is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderId() {
    return this.orderId != null;
  }

  public void setOrderIdIsSet(boolean value) {
    if (!value) {
      this.orderId = null;
    }
  }

  /**
   * 订单创建时间
   */
  public long getCreateTime() {
    return this.createTime;
  }

  /**
   * 订单创建时间
   */
  public BossPrefPayOrderDetailInfoVo setCreateTime(long createTime) {
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    return this;
  }

  public void unsetCreateTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  public void setCreateTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATETIME_ISSET_ID, value);
  }

  /**
   * 用户会员名
   */
  public String getMemberName() {
    return this.memberName;
  }

  /**
   * 用户会员名
   */
  public BossPrefPayOrderDetailInfoVo setMemberName(String memberName) {
    this.memberName = memberName;
    return this;
  }

  public void unsetMemberName() {
    this.memberName = null;
  }

  /** Returns true if field memberName is set (has been assigned a value) and false otherwise */
  public boolean isSetMemberName() {
    return this.memberName != null;
  }

  public void setMemberNameIsSet(boolean value) {
    if (!value) {
      this.memberName = null;
    }
  }

  /**
   * 用户真实姓名
   */
  public String getUserName() {
    return this.userName;
  }

  /**
   * 用户真实姓名
   */
  public BossPrefPayOrderDetailInfoVo setUserName(String userName) {
    this.userName = userName;
    return this;
  }

  public void unsetUserName() {
    this.userName = null;
  }

  /** Returns true if field userName is set (has been assigned a value) and false otherwise */
  public boolean isSetUserName() {
    return this.userName != null;
  }

  public void setUserNameIsSet(boolean value) {
    if (!value) {
      this.userName = null;
    }
  }

  /**
   * 客户端名称
   */
  public String getClientName() {
    return this.clientName;
  }

  /**
   * 客户端名称
   */
  public BossPrefPayOrderDetailInfoVo setClientName(String clientName) {
    this.clientName = clientName;
    return this;
  }

  public void unsetClientName() {
    this.clientName = null;
  }

  /** Returns true if field clientName is set (has been assigned a value) and false otherwise */
  public boolean isSetClientName() {
    return this.clientName != null;
  }

  public void setClientNameIsSet(boolean value) {
    if (!value) {
      this.clientName = null;
    }
  }

  /**
   * 订单创建来源
   */
  public String getCreateSource() {
    return this.createSource;
  }

  /**
   * 订单创建来源
   */
  public BossPrefPayOrderDetailInfoVo setCreateSource(String createSource) {
    this.createSource = createSource;
    return this;
  }

  public void unsetCreateSource() {
    this.createSource = null;
  }

  /** Returns true if field createSource is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateSource() {
    return this.createSource != null;
  }

  public void setCreateSourceIsSet(boolean value) {
    if (!value) {
      this.createSource = null;
    }
  }

  /**
   * 支付类型
   */
  public String getOrderType() {
    return this.orderType;
  }

  /**
   * 支付类型
   */
  public BossPrefPayOrderDetailInfoVo setOrderType(String orderType) {
    this.orderType = orderType;
    return this;
  }

  public void unsetOrderType() {
    this.orderType = null;
  }

  /** Returns true if field orderType is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderType() {
    return this.orderType != null;
  }

  public void setOrderTypeIsSet(boolean value) {
    if (!value) {
      this.orderType = null;
    }
  }

  /**
   * 支付方式
   */
  public String getPaymentMethod() {
    return this.paymentMethod;
  }

  /**
   * 支付方式
   */
  public BossPrefPayOrderDetailInfoVo setPaymentMethod(String paymentMethod) {
    this.paymentMethod = paymentMethod;
    return this;
  }

  public void unsetPaymentMethod() {
    this.paymentMethod = null;
  }

  /** Returns true if field paymentMethod is set (has been assigned a value) and false otherwise */
  public boolean isSetPaymentMethod() {
    return this.paymentMethod != null;
  }

  public void setPaymentMethodIsSet(boolean value) {
    if (!value) {
      this.paymentMethod = null;
    }
  }

  /**
   * 订单总金额
   */
  public double getTotalPrice() {
    return this.totalPrice;
  }

  /**
   * 订单总金额
   */
  public BossPrefPayOrderDetailInfoVo setTotalPrice(double totalPrice) {
    this.totalPrice = totalPrice;
    setTotalPriceIsSet(true);
    return this;
  }

  public void unsetTotalPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALPRICE_ISSET_ID);
  }

  /** Returns true if field totalPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALPRICE_ISSET_ID);
  }

  public void setTotalPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALPRICE_ISSET_ID, value);
  }

  /**
   * 订单现金
   */
  public double getCash() {
    return this.cash;
  }

  /**
   * 订单现金
   */
  public BossPrefPayOrderDetailInfoVo setCash(double cash) {
    this.cash = cash;
    setCashIsSet(true);
    return this;
  }

  public void unsetCash() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CASH_ISSET_ID);
  }

  /** Returns true if field cash is set (has been assigned a value) and false otherwise */
  public boolean isSetCash() {
    return EncodingUtils.testBit(__isset_bitfield, __CASH_ISSET_ID);
  }

  public void setCashIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CASH_ISSET_ID, value);
  }

  /**
   * 联盟积分
   */
  public double getFftPoints() {
    return this.fftPoints;
  }

  /**
   * 联盟积分
   */
  public BossPrefPayOrderDetailInfoVo setFftPoints(double fftPoints) {
    this.fftPoints = fftPoints;
    setFftPointsIsSet(true);
    return this;
  }

  public void unsetFftPoints() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FFTPOINTS_ISSET_ID);
  }

  /** Returns true if field fftPoints is set (has been assigned a value) and false otherwise */
  public boolean isSetFftPoints() {
    return EncodingUtils.testBit(__isset_bitfield, __FFTPOINTS_ISSET_ID);
  }

  public void setFftPointsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FFTPOINTS_ISSET_ID, value);
  }

  /**
   * 银行积分
   */
  public double getBankPoints() {
    return this.bankPoints;
  }

  /**
   * 银行积分
   */
  public BossPrefPayOrderDetailInfoVo setBankPoints(double bankPoints) {
    this.bankPoints = bankPoints;
    setBankPointsIsSet(true);
    return this;
  }

  public void unsetBankPoints() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BANKPOINTS_ISSET_ID);
  }

  /** Returns true if field bankPoints is set (has been assigned a value) and false otherwise */
  public boolean isSetBankPoints() {
    return EncodingUtils.testBit(__isset_bitfield, __BANKPOINTS_ISSET_ID);
  }

  public void setBankPointsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BANKPOINTS_ISSET_ID, value);
  }

  /**
   * 银行积分兑换比例
   */
  public String getPointRate() {
    return this.pointRate;
  }

  /**
   * 银行积分兑换比例
   */
  public BossPrefPayOrderDetailInfoVo setPointRate(String pointRate) {
    this.pointRate = pointRate;
    return this;
  }

  public void unsetPointRate() {
    this.pointRate = null;
  }

  /** Returns true if field pointRate is set (has been assigned a value) and false otherwise */
  public boolean isSetPointRate() {
    return this.pointRate != null;
  }

  public void setPointRateIsSet(boolean value) {
    if (!value) {
      this.pointRate = null;
    }
  }

  /**
   * 优惠金额
   */
  public double getDiscount() {
    return this.discount;
  }

  /**
   * 优惠金额
   */
  public BossPrefPayOrderDetailInfoVo setDiscount(double discount) {
    this.discount = discount;
    setDiscountIsSet(true);
    return this;
  }

  public void unsetDiscount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DISCOUNT_ISSET_ID);
  }

  /** Returns true if field discount is set (has been assigned a value) and false otherwise */
  public boolean isSetDiscount() {
    return EncodingUtils.testBit(__isset_bitfield, __DISCOUNT_ISSET_ID);
  }

  public void setDiscountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DISCOUNT_ISSET_ID, value);
  }

  /**
   * 红包折扣
   */
  public double getRedPacketDiscount() {
    return this.redPacketDiscount;
  }

  /**
   * 红包折扣
   */
  public BossPrefPayOrderDetailInfoVo setRedPacketDiscount(double redPacketDiscount) {
    this.redPacketDiscount = redPacketDiscount;
    setRedPacketDiscountIsSet(true);
    return this;
  }

  public void unsetRedPacketDiscount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REDPACKETDISCOUNT_ISSET_ID);
  }

  /** Returns true if field redPacketDiscount is set (has been assigned a value) and false otherwise */
  public boolean isSetRedPacketDiscount() {
    return EncodingUtils.testBit(__isset_bitfield, __REDPACKETDISCOUNT_ISSET_ID);
  }

  public void setRedPacketDiscountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REDPACKETDISCOUNT_ISSET_ID, value);
  }

  /**
   * 订单状态
   */
  public String getOrderStatus() {
    return this.orderStatus;
  }

  /**
   * 订单状态
   */
  public BossPrefPayOrderDetailInfoVo setOrderStatus(String orderStatus) {
    this.orderStatus = orderStatus;
    return this;
  }

  public void unsetOrderStatus() {
    this.orderStatus = null;
  }

  /** Returns true if field orderStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderStatus() {
    return this.orderStatus != null;
  }

  public void setOrderStatusIsSet(boolean value) {
    if (!value) {
      this.orderStatus = null;
    }
  }

  /**
   * 订单支付时间
   */
  public long getPaymentTime() {
    return this.paymentTime;
  }

  /**
   * 订单支付时间
   */
  public BossPrefPayOrderDetailInfoVo setPaymentTime(long paymentTime) {
    this.paymentTime = paymentTime;
    setPaymentTimeIsSet(true);
    return this;
  }

  public void unsetPaymentTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAYMENTTIME_ISSET_ID);
  }

  /** Returns true if field paymentTime is set (has been assigned a value) and false otherwise */
  public boolean isSetPaymentTime() {
    return EncodingUtils.testBit(__isset_bitfield, __PAYMENTTIME_ISSET_ID);
  }

  public void setPaymentTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAYMENTTIME_ISSET_ID, value);
  }

  /**
   * 支付账单号
   */
  public String getBillNos() {
    return this.billNos;
  }

  /**
   * 支付账单号
   */
  public BossPrefPayOrderDetailInfoVo setBillNos(String billNos) {
    this.billNos = billNos;
    return this;
  }

  public void unsetBillNos() {
    this.billNos = null;
  }

  /** Returns true if field billNos is set (has been assigned a value) and false otherwise */
  public boolean isSetBillNos() {
    return this.billNos != null;
  }

  public void setBillNosIsSet(boolean value) {
    if (!value) {
      this.billNos = null;
    }
  }

  /**
   * 结算所属商户全称
   */
  public String getMerchantName() {
    return this.merchantName;
  }

  /**
   * 结算所属商户全称
   */
  public BossPrefPayOrderDetailInfoVo setMerchantName(String merchantName) {
    this.merchantName = merchantName;
    return this;
  }

  public void unsetMerchantName() {
    this.merchantName = null;
  }

  /** Returns true if field merchantName is set (has been assigned a value) and false otherwise */
  public boolean isSetMerchantName() {
    return this.merchantName != null;
  }

  public void setMerchantNameIsSet(boolean value) {
    if (!value) {
      this.merchantName = null;
    }
  }

  /**
   * 交易所属门店全称
   */
  public String getOutletName() {
    return this.outletName;
  }

  /**
   * 交易所属门店全称
   */
  public BossPrefPayOrderDetailInfoVo setOutletName(String outletName) {
    this.outletName = outletName;
    return this;
  }

  public void unsetOutletName() {
    this.outletName = null;
  }

  /** Returns true if field outletName is set (has been assigned a value) and false otherwise */
  public boolean isSetOutletName() {
    return this.outletName != null;
  }

  public void setOutletNameIsSet(boolean value) {
    if (!value) {
      this.outletName = null;
    }
  }

  /**
   * 结算状态
   */
  public String getSettleStatus() {
    return this.settleStatus;
  }

  /**
   * 结算状态
   */
  public BossPrefPayOrderDetailInfoVo setSettleStatus(String settleStatus) {
    this.settleStatus = settleStatus;
    return this;
  }

  public void unsetSettleStatus() {
    this.settleStatus = null;
  }

  /** Returns true if field settleStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetSettleStatus() {
    return this.settleStatus != null;
  }

  public void setSettleStatusIsSet(boolean value) {
    if (!value) {
      this.settleStatus = null;
    }
  }

  /**
   * 结算账单号
   */
  public String getSettleBillNos() {
    return this.settleBillNos;
  }

  /**
   * 结算账单号
   */
  public BossPrefPayOrderDetailInfoVo setSettleBillNos(String settleBillNos) {
    this.settleBillNos = settleBillNos;
    return this;
  }

  public void unsetSettleBillNos() {
    this.settleBillNos = null;
  }

  /** Returns true if field settleBillNos is set (has been assigned a value) and false otherwise */
  public boolean isSetSettleBillNos() {
    return this.settleBillNos != null;
  }

  public void setSettleBillNosIsSet(boolean value) {
    if (!value) {
      this.settleBillNos = null;
    }
  }

  /**
   * 结算时间
   */
  public long getSettleTime() {
    return this.settleTime;
  }

  /**
   * 结算时间
   */
  public BossPrefPayOrderDetailInfoVo setSettleTime(long settleTime) {
    this.settleTime = settleTime;
    setSettleTimeIsSet(true);
    return this;
  }

  public void unsetSettleTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SETTLETIME_ISSET_ID);
  }

  /** Returns true if field settleTime is set (has been assigned a value) and false otherwise */
  public boolean isSetSettleTime() {
    return EncodingUtils.testBit(__isset_bitfield, __SETTLETIME_ISSET_ID);
  }

  public void setSettleTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SETTLETIME_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ORDER_ID:
      if (value == null) {
        unsetOrderId();
      } else {
        setOrderId((String)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((Long)value);
      }
      break;

    case MEMBER_NAME:
      if (value == null) {
        unsetMemberName();
      } else {
        setMemberName((String)value);
      }
      break;

    case USER_NAME:
      if (value == null) {
        unsetUserName();
      } else {
        setUserName((String)value);
      }
      break;

    case CLIENT_NAME:
      if (value == null) {
        unsetClientName();
      } else {
        setClientName((String)value);
      }
      break;

    case CREATE_SOURCE:
      if (value == null) {
        unsetCreateSource();
      } else {
        setCreateSource((String)value);
      }
      break;

    case ORDER_TYPE:
      if (value == null) {
        unsetOrderType();
      } else {
        setOrderType((String)value);
      }
      break;

    case PAYMENT_METHOD:
      if (value == null) {
        unsetPaymentMethod();
      } else {
        setPaymentMethod((String)value);
      }
      break;

    case TOTAL_PRICE:
      if (value == null) {
        unsetTotalPrice();
      } else {
        setTotalPrice((Double)value);
      }
      break;

    case CASH:
      if (value == null) {
        unsetCash();
      } else {
        setCash((Double)value);
      }
      break;

    case FFT_POINTS:
      if (value == null) {
        unsetFftPoints();
      } else {
        setFftPoints((Double)value);
      }
      break;

    case BANK_POINTS:
      if (value == null) {
        unsetBankPoints();
      } else {
        setBankPoints((Double)value);
      }
      break;

    case POINT_RATE:
      if (value == null) {
        unsetPointRate();
      } else {
        setPointRate((String)value);
      }
      break;

    case DISCOUNT:
      if (value == null) {
        unsetDiscount();
      } else {
        setDiscount((Double)value);
      }
      break;

    case RED_PACKET_DISCOUNT:
      if (value == null) {
        unsetRedPacketDiscount();
      } else {
        setRedPacketDiscount((Double)value);
      }
      break;

    case ORDER_STATUS:
      if (value == null) {
        unsetOrderStatus();
      } else {
        setOrderStatus((String)value);
      }
      break;

    case PAYMENT_TIME:
      if (value == null) {
        unsetPaymentTime();
      } else {
        setPaymentTime((Long)value);
      }
      break;

    case BILL_NOS:
      if (value == null) {
        unsetBillNos();
      } else {
        setBillNos((String)value);
      }
      break;

    case MERCHANT_NAME:
      if (value == null) {
        unsetMerchantName();
      } else {
        setMerchantName((String)value);
      }
      break;

    case OUTLET_NAME:
      if (value == null) {
        unsetOutletName();
      } else {
        setOutletName((String)value);
      }
      break;

    case SETTLE_STATUS:
      if (value == null) {
        unsetSettleStatus();
      } else {
        setSettleStatus((String)value);
      }
      break;

    case SETTLE_BILL_NOS:
      if (value == null) {
        unsetSettleBillNos();
      } else {
        setSettleBillNos((String)value);
      }
      break;

    case SETTLE_TIME:
      if (value == null) {
        unsetSettleTime();
      } else {
        setSettleTime((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ORDER_ID:
      return getOrderId();

    case CREATE_TIME:
      return Long.valueOf(getCreateTime());

    case MEMBER_NAME:
      return getMemberName();

    case USER_NAME:
      return getUserName();

    case CLIENT_NAME:
      return getClientName();

    case CREATE_SOURCE:
      return getCreateSource();

    case ORDER_TYPE:
      return getOrderType();

    case PAYMENT_METHOD:
      return getPaymentMethod();

    case TOTAL_PRICE:
      return Double.valueOf(getTotalPrice());

    case CASH:
      return Double.valueOf(getCash());

    case FFT_POINTS:
      return Double.valueOf(getFftPoints());

    case BANK_POINTS:
      return Double.valueOf(getBankPoints());

    case POINT_RATE:
      return getPointRate();

    case DISCOUNT:
      return Double.valueOf(getDiscount());

    case RED_PACKET_DISCOUNT:
      return Double.valueOf(getRedPacketDiscount());

    case ORDER_STATUS:
      return getOrderStatus();

    case PAYMENT_TIME:
      return Long.valueOf(getPaymentTime());

    case BILL_NOS:
      return getBillNos();

    case MERCHANT_NAME:
      return getMerchantName();

    case OUTLET_NAME:
      return getOutletName();

    case SETTLE_STATUS:
      return getSettleStatus();

    case SETTLE_BILL_NOS:
      return getSettleBillNos();

    case SETTLE_TIME:
      return Long.valueOf(getSettleTime());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ORDER_ID:
      return isSetOrderId();
    case CREATE_TIME:
      return isSetCreateTime();
    case MEMBER_NAME:
      return isSetMemberName();
    case USER_NAME:
      return isSetUserName();
    case CLIENT_NAME:
      return isSetClientName();
    case CREATE_SOURCE:
      return isSetCreateSource();
    case ORDER_TYPE:
      return isSetOrderType();
    case PAYMENT_METHOD:
      return isSetPaymentMethod();
    case TOTAL_PRICE:
      return isSetTotalPrice();
    case CASH:
      return isSetCash();
    case FFT_POINTS:
      return isSetFftPoints();
    case BANK_POINTS:
      return isSetBankPoints();
    case POINT_RATE:
      return isSetPointRate();
    case DISCOUNT:
      return isSetDiscount();
    case RED_PACKET_DISCOUNT:
      return isSetRedPacketDiscount();
    case ORDER_STATUS:
      return isSetOrderStatus();
    case PAYMENT_TIME:
      return isSetPaymentTime();
    case BILL_NOS:
      return isSetBillNos();
    case MERCHANT_NAME:
      return isSetMerchantName();
    case OUTLET_NAME:
      return isSetOutletName();
    case SETTLE_STATUS:
      return isSetSettleStatus();
    case SETTLE_BILL_NOS:
      return isSetSettleBillNos();
    case SETTLE_TIME:
      return isSetSettleTime();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BossPrefPayOrderDetailInfoVo)
      return this.equals((BossPrefPayOrderDetailInfoVo)that);
    return false;
  }

  public boolean equals(BossPrefPayOrderDetailInfoVo that) {
    if (that == null)
      return false;

    boolean this_present_orderId = true && this.isSetOrderId();
    boolean that_present_orderId = true && that.isSetOrderId();
    if (this_present_orderId || that_present_orderId) {
      if (!(this_present_orderId && that_present_orderId))
        return false;
      if (!this.orderId.equals(that.orderId))
        return false;
    }

    boolean this_present_createTime = true && this.isSetCreateTime();
    boolean that_present_createTime = true && that.isSetCreateTime();
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (this.createTime != that.createTime)
        return false;
    }

    boolean this_present_memberName = true && this.isSetMemberName();
    boolean that_present_memberName = true && that.isSetMemberName();
    if (this_present_memberName || that_present_memberName) {
      if (!(this_present_memberName && that_present_memberName))
        return false;
      if (!this.memberName.equals(that.memberName))
        return false;
    }

    boolean this_present_userName = true && this.isSetUserName();
    boolean that_present_userName = true && that.isSetUserName();
    if (this_present_userName || that_present_userName) {
      if (!(this_present_userName && that_present_userName))
        return false;
      if (!this.userName.equals(that.userName))
        return false;
    }

    boolean this_present_clientName = true && this.isSetClientName();
    boolean that_present_clientName = true && that.isSetClientName();
    if (this_present_clientName || that_present_clientName) {
      if (!(this_present_clientName && that_present_clientName))
        return false;
      if (!this.clientName.equals(that.clientName))
        return false;
    }

    boolean this_present_createSource = true && this.isSetCreateSource();
    boolean that_present_createSource = true && that.isSetCreateSource();
    if (this_present_createSource || that_present_createSource) {
      if (!(this_present_createSource && that_present_createSource))
        return false;
      if (!this.createSource.equals(that.createSource))
        return false;
    }

    boolean this_present_orderType = true && this.isSetOrderType();
    boolean that_present_orderType = true && that.isSetOrderType();
    if (this_present_orderType || that_present_orderType) {
      if (!(this_present_orderType && that_present_orderType))
        return false;
      if (!this.orderType.equals(that.orderType))
        return false;
    }

    boolean this_present_paymentMethod = true && this.isSetPaymentMethod();
    boolean that_present_paymentMethod = true && that.isSetPaymentMethod();
    if (this_present_paymentMethod || that_present_paymentMethod) {
      if (!(this_present_paymentMethod && that_present_paymentMethod))
        return false;
      if (!this.paymentMethod.equals(that.paymentMethod))
        return false;
    }

    boolean this_present_totalPrice = true && this.isSetTotalPrice();
    boolean that_present_totalPrice = true && that.isSetTotalPrice();
    if (this_present_totalPrice || that_present_totalPrice) {
      if (!(this_present_totalPrice && that_present_totalPrice))
        return false;
      if (this.totalPrice != that.totalPrice)
        return false;
    }

    boolean this_present_cash = true && this.isSetCash();
    boolean that_present_cash = true && that.isSetCash();
    if (this_present_cash || that_present_cash) {
      if (!(this_present_cash && that_present_cash))
        return false;
      if (this.cash != that.cash)
        return false;
    }

    boolean this_present_fftPoints = true && this.isSetFftPoints();
    boolean that_present_fftPoints = true && that.isSetFftPoints();
    if (this_present_fftPoints || that_present_fftPoints) {
      if (!(this_present_fftPoints && that_present_fftPoints))
        return false;
      if (this.fftPoints != that.fftPoints)
        return false;
    }

    boolean this_present_bankPoints = true && this.isSetBankPoints();
    boolean that_present_bankPoints = true && that.isSetBankPoints();
    if (this_present_bankPoints || that_present_bankPoints) {
      if (!(this_present_bankPoints && that_present_bankPoints))
        return false;
      if (this.bankPoints != that.bankPoints)
        return false;
    }

    boolean this_present_pointRate = true && this.isSetPointRate();
    boolean that_present_pointRate = true && that.isSetPointRate();
    if (this_present_pointRate || that_present_pointRate) {
      if (!(this_present_pointRate && that_present_pointRate))
        return false;
      if (!this.pointRate.equals(that.pointRate))
        return false;
    }

    boolean this_present_discount = true && this.isSetDiscount();
    boolean that_present_discount = true && that.isSetDiscount();
    if (this_present_discount || that_present_discount) {
      if (!(this_present_discount && that_present_discount))
        return false;
      if (this.discount != that.discount)
        return false;
    }

    boolean this_present_redPacketDiscount = true && this.isSetRedPacketDiscount();
    boolean that_present_redPacketDiscount = true && that.isSetRedPacketDiscount();
    if (this_present_redPacketDiscount || that_present_redPacketDiscount) {
      if (!(this_present_redPacketDiscount && that_present_redPacketDiscount))
        return false;
      if (this.redPacketDiscount != that.redPacketDiscount)
        return false;
    }

    boolean this_present_orderStatus = true && this.isSetOrderStatus();
    boolean that_present_orderStatus = true && that.isSetOrderStatus();
    if (this_present_orderStatus || that_present_orderStatus) {
      if (!(this_present_orderStatus && that_present_orderStatus))
        return false;
      if (!this.orderStatus.equals(that.orderStatus))
        return false;
    }

    boolean this_present_paymentTime = true && this.isSetPaymentTime();
    boolean that_present_paymentTime = true && that.isSetPaymentTime();
    if (this_present_paymentTime || that_present_paymentTime) {
      if (!(this_present_paymentTime && that_present_paymentTime))
        return false;
      if (this.paymentTime != that.paymentTime)
        return false;
    }

    boolean this_present_billNos = true && this.isSetBillNos();
    boolean that_present_billNos = true && that.isSetBillNos();
    if (this_present_billNos || that_present_billNos) {
      if (!(this_present_billNos && that_present_billNos))
        return false;
      if (!this.billNos.equals(that.billNos))
        return false;
    }

    boolean this_present_merchantName = true && this.isSetMerchantName();
    boolean that_present_merchantName = true && that.isSetMerchantName();
    if (this_present_merchantName || that_present_merchantName) {
      if (!(this_present_merchantName && that_present_merchantName))
        return false;
      if (!this.merchantName.equals(that.merchantName))
        return false;
    }

    boolean this_present_outletName = true && this.isSetOutletName();
    boolean that_present_outletName = true && that.isSetOutletName();
    if (this_present_outletName || that_present_outletName) {
      if (!(this_present_outletName && that_present_outletName))
        return false;
      if (!this.outletName.equals(that.outletName))
        return false;
    }

    boolean this_present_settleStatus = true && this.isSetSettleStatus();
    boolean that_present_settleStatus = true && that.isSetSettleStatus();
    if (this_present_settleStatus || that_present_settleStatus) {
      if (!(this_present_settleStatus && that_present_settleStatus))
        return false;
      if (!this.settleStatus.equals(that.settleStatus))
        return false;
    }

    boolean this_present_settleBillNos = true && this.isSetSettleBillNos();
    boolean that_present_settleBillNos = true && that.isSetSettleBillNos();
    if (this_present_settleBillNos || that_present_settleBillNos) {
      if (!(this_present_settleBillNos && that_present_settleBillNos))
        return false;
      if (!this.settleBillNos.equals(that.settleBillNos))
        return false;
    }

    boolean this_present_settleTime = true && this.isSetSettleTime();
    boolean that_present_settleTime = true && that.isSetSettleTime();
    if (this_present_settleTime || that_present_settleTime) {
      if (!(this_present_settleTime && that_present_settleTime))
        return false;
      if (this.settleTime != that.settleTime)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_orderId = true && (isSetOrderId());
    list.add(present_orderId);
    if (present_orderId)
      list.add(orderId);

    boolean present_createTime = true && (isSetCreateTime());
    list.add(present_createTime);
    if (present_createTime)
      list.add(createTime);

    boolean present_memberName = true && (isSetMemberName());
    list.add(present_memberName);
    if (present_memberName)
      list.add(memberName);

    boolean present_userName = true && (isSetUserName());
    list.add(present_userName);
    if (present_userName)
      list.add(userName);

    boolean present_clientName = true && (isSetClientName());
    list.add(present_clientName);
    if (present_clientName)
      list.add(clientName);

    boolean present_createSource = true && (isSetCreateSource());
    list.add(present_createSource);
    if (present_createSource)
      list.add(createSource);

    boolean present_orderType = true && (isSetOrderType());
    list.add(present_orderType);
    if (present_orderType)
      list.add(orderType);

    boolean present_paymentMethod = true && (isSetPaymentMethod());
    list.add(present_paymentMethod);
    if (present_paymentMethod)
      list.add(paymentMethod);

    boolean present_totalPrice = true && (isSetTotalPrice());
    list.add(present_totalPrice);
    if (present_totalPrice)
      list.add(totalPrice);

    boolean present_cash = true && (isSetCash());
    list.add(present_cash);
    if (present_cash)
      list.add(cash);

    boolean present_fftPoints = true && (isSetFftPoints());
    list.add(present_fftPoints);
    if (present_fftPoints)
      list.add(fftPoints);

    boolean present_bankPoints = true && (isSetBankPoints());
    list.add(present_bankPoints);
    if (present_bankPoints)
      list.add(bankPoints);

    boolean present_pointRate = true && (isSetPointRate());
    list.add(present_pointRate);
    if (present_pointRate)
      list.add(pointRate);

    boolean present_discount = true && (isSetDiscount());
    list.add(present_discount);
    if (present_discount)
      list.add(discount);

    boolean present_redPacketDiscount = true && (isSetRedPacketDiscount());
    list.add(present_redPacketDiscount);
    if (present_redPacketDiscount)
      list.add(redPacketDiscount);

    boolean present_orderStatus = true && (isSetOrderStatus());
    list.add(present_orderStatus);
    if (present_orderStatus)
      list.add(orderStatus);

    boolean present_paymentTime = true && (isSetPaymentTime());
    list.add(present_paymentTime);
    if (present_paymentTime)
      list.add(paymentTime);

    boolean present_billNos = true && (isSetBillNos());
    list.add(present_billNos);
    if (present_billNos)
      list.add(billNos);

    boolean present_merchantName = true && (isSetMerchantName());
    list.add(present_merchantName);
    if (present_merchantName)
      list.add(merchantName);

    boolean present_outletName = true && (isSetOutletName());
    list.add(present_outletName);
    if (present_outletName)
      list.add(outletName);

    boolean present_settleStatus = true && (isSetSettleStatus());
    list.add(present_settleStatus);
    if (present_settleStatus)
      list.add(settleStatus);

    boolean present_settleBillNos = true && (isSetSettleBillNos());
    list.add(present_settleBillNos);
    if (present_settleBillNos)
      list.add(settleBillNos);

    boolean present_settleTime = true && (isSetSettleTime());
    list.add(present_settleTime);
    if (present_settleTime)
      list.add(settleTime);

    return list.hashCode();
  }

  @Override
  public int compareTo(BossPrefPayOrderDetailInfoVo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetOrderId()).compareTo(other.isSetOrderId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderId, other.orderId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMemberName()).compareTo(other.isSetMemberName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMemberName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.memberName, other.memberName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserName()).compareTo(other.isSetUserName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userName, other.userName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClientName()).compareTo(other.isSetClientName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClientName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientName, other.clientName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateSource()).compareTo(other.isSetCreateSource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateSource()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createSource, other.createSource);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderType()).compareTo(other.isSetOrderType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderType, other.orderType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPaymentMethod()).compareTo(other.isSetPaymentMethod());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPaymentMethod()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paymentMethod, other.paymentMethod);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalPrice()).compareTo(other.isSetTotalPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalPrice, other.totalPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCash()).compareTo(other.isSetCash());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCash()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cash, other.cash);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFftPoints()).compareTo(other.isSetFftPoints());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFftPoints()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fftPoints, other.fftPoints);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBankPoints()).compareTo(other.isSetBankPoints());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBankPoints()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankPoints, other.bankPoints);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPointRate()).compareTo(other.isSetPointRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPointRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pointRate, other.pointRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDiscount()).compareTo(other.isSetDiscount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDiscount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.discount, other.discount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRedPacketDiscount()).compareTo(other.isSetRedPacketDiscount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRedPacketDiscount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.redPacketDiscount, other.redPacketDiscount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderStatus()).compareTo(other.isSetOrderStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderStatus, other.orderStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPaymentTime()).compareTo(other.isSetPaymentTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPaymentTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paymentTime, other.paymentTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBillNos()).compareTo(other.isSetBillNos());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBillNos()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.billNos, other.billNos);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMerchantName()).compareTo(other.isSetMerchantName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMerchantName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchantName, other.merchantName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOutletName()).compareTo(other.isSetOutletName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOutletName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outletName, other.outletName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSettleStatus()).compareTo(other.isSetSettleStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSettleStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.settleStatus, other.settleStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSettleBillNos()).compareTo(other.isSetSettleBillNos());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSettleBillNos()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.settleBillNos, other.settleBillNos);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSettleTime()).compareTo(other.isSetSettleTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSettleTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.settleTime, other.settleTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("BossPrefPayOrderDetailInfoVo(");
    boolean first = true;

    if (isSetOrderId()) {
      sb.append("orderId:");
      if (this.orderId == null) {
        sb.append("null");
      } else {
        sb.append(this.orderId);
      }
      first = false;
    }
    if (isSetCreateTime()) {
      if (!first) sb.append(", ");
      sb.append("createTime:");
      sb.append(this.createTime);
      first = false;
    }
    if (isSetMemberName()) {
      if (!first) sb.append(", ");
      sb.append("memberName:");
      if (this.memberName == null) {
        sb.append("null");
      } else {
        sb.append(this.memberName);
      }
      first = false;
    }
    if (isSetUserName()) {
      if (!first) sb.append(", ");
      sb.append("userName:");
      if (this.userName == null) {
        sb.append("null");
      } else {
        sb.append(this.userName);
      }
      first = false;
    }
    if (isSetClientName()) {
      if (!first) sb.append(", ");
      sb.append("clientName:");
      if (this.clientName == null) {
        sb.append("null");
      } else {
        sb.append(this.clientName);
      }
      first = false;
    }
    if (isSetCreateSource()) {
      if (!first) sb.append(", ");
      sb.append("createSource:");
      if (this.createSource == null) {
        sb.append("null");
      } else {
        sb.append(this.createSource);
      }
      first = false;
    }
    if (isSetOrderType()) {
      if (!first) sb.append(", ");
      sb.append("orderType:");
      if (this.orderType == null) {
        sb.append("null");
      } else {
        sb.append(this.orderType);
      }
      first = false;
    }
    if (isSetPaymentMethod()) {
      if (!first) sb.append(", ");
      sb.append("paymentMethod:");
      if (this.paymentMethod == null) {
        sb.append("null");
      } else {
        sb.append(this.paymentMethod);
      }
      first = false;
    }
    if (isSetTotalPrice()) {
      if (!first) sb.append(", ");
      sb.append("totalPrice:");
      sb.append(this.totalPrice);
      first = false;
    }
    if (isSetCash()) {
      if (!first) sb.append(", ");
      sb.append("cash:");
      sb.append(this.cash);
      first = false;
    }
    if (isSetFftPoints()) {
      if (!first) sb.append(", ");
      sb.append("fftPoints:");
      sb.append(this.fftPoints);
      first = false;
    }
    if (isSetBankPoints()) {
      if (!first) sb.append(", ");
      sb.append("bankPoints:");
      sb.append(this.bankPoints);
      first = false;
    }
    if (isSetPointRate()) {
      if (!first) sb.append(", ");
      sb.append("pointRate:");
      if (this.pointRate == null) {
        sb.append("null");
      } else {
        sb.append(this.pointRate);
      }
      first = false;
    }
    if (isSetDiscount()) {
      if (!first) sb.append(", ");
      sb.append("discount:");
      sb.append(this.discount);
      first = false;
    }
    if (isSetRedPacketDiscount()) {
      if (!first) sb.append(", ");
      sb.append("redPacketDiscount:");
      sb.append(this.redPacketDiscount);
      first = false;
    }
    if (isSetOrderStatus()) {
      if (!first) sb.append(", ");
      sb.append("orderStatus:");
      if (this.orderStatus == null) {
        sb.append("null");
      } else {
        sb.append(this.orderStatus);
      }
      first = false;
    }
    if (isSetPaymentTime()) {
      if (!first) sb.append(", ");
      sb.append("paymentTime:");
      sb.append(this.paymentTime);
      first = false;
    }
    if (isSetBillNos()) {
      if (!first) sb.append(", ");
      sb.append("billNos:");
      if (this.billNos == null) {
        sb.append("null");
      } else {
        sb.append(this.billNos);
      }
      first = false;
    }
    if (isSetMerchantName()) {
      if (!first) sb.append(", ");
      sb.append("merchantName:");
      if (this.merchantName == null) {
        sb.append("null");
      } else {
        sb.append(this.merchantName);
      }
      first = false;
    }
    if (isSetOutletName()) {
      if (!first) sb.append(", ");
      sb.append("outletName:");
      if (this.outletName == null) {
        sb.append("null");
      } else {
        sb.append(this.outletName);
      }
      first = false;
    }
    if (isSetSettleStatus()) {
      if (!first) sb.append(", ");
      sb.append("settleStatus:");
      if (this.settleStatus == null) {
        sb.append("null");
      } else {
        sb.append(this.settleStatus);
      }
      first = false;
    }
    if (isSetSettleBillNos()) {
      if (!first) sb.append(", ");
      sb.append("settleBillNos:");
      if (this.settleBillNos == null) {
        sb.append("null");
      } else {
        sb.append(this.settleBillNos);
      }
      first = false;
    }
    if (isSetSettleTime()) {
      if (!first) sb.append(", ");
      sb.append("settleTime:");
      sb.append(this.settleTime);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BossPrefPayOrderDetailInfoVoStandardSchemeFactory implements SchemeFactory {
    public BossPrefPayOrderDetailInfoVoStandardScheme getScheme() {
      return new BossPrefPayOrderDetailInfoVoStandardScheme();
    }
  }

  private static class BossPrefPayOrderDetailInfoVoStandardScheme extends StandardScheme<BossPrefPayOrderDetailInfoVo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BossPrefPayOrderDetailInfoVo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ORDER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orderId = iprot.readString();
              struct.setOrderIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createTime = iprot.readI64();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MEMBER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.memberName = iprot.readString();
              struct.setMemberNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // USER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userName = iprot.readString();
              struct.setUserNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CLIENT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clientName = iprot.readString();
              struct.setClientNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CREATE_SOURCE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createSource = iprot.readString();
              struct.setCreateSourceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ORDER_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orderType = iprot.readString();
              struct.setOrderTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PAYMENT_METHOD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.paymentMethod = iprot.readString();
              struct.setPaymentMethodIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // TOTAL_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.totalPrice = iprot.readDouble();
              struct.setTotalPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // CASH
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.cash = iprot.readDouble();
              struct.setCashIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // FFT_POINTS
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.fftPoints = iprot.readDouble();
              struct.setFftPointsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // BANK_POINTS
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.bankPoints = iprot.readDouble();
              struct.setBankPointsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // POINT_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pointRate = iprot.readString();
              struct.setPointRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // DISCOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.discount = iprot.readDouble();
              struct.setDiscountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // RED_PACKET_DISCOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.redPacketDiscount = iprot.readDouble();
              struct.setRedPacketDiscountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // ORDER_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orderStatus = iprot.readString();
              struct.setOrderStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // PAYMENT_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.paymentTime = iprot.readI64();
              struct.setPaymentTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // BILL_NOS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.billNos = iprot.readString();
              struct.setBillNosIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // MERCHANT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.merchantName = iprot.readString();
              struct.setMerchantNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // OUTLET_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.outletName = iprot.readString();
              struct.setOutletNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // SETTLE_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.settleStatus = iprot.readString();
              struct.setSettleStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // SETTLE_BILL_NOS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.settleBillNos = iprot.readString();
              struct.setSettleBillNosIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // SETTLE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.settleTime = iprot.readI64();
              struct.setSettleTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BossPrefPayOrderDetailInfoVo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.orderId != null) {
        if (struct.isSetOrderId()) {
          oprot.writeFieldBegin(ORDER_ID_FIELD_DESC);
          oprot.writeString(struct.orderId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetCreateTime()) {
        oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
        oprot.writeI64(struct.createTime);
        oprot.writeFieldEnd();
      }
      if (struct.memberName != null) {
        if (struct.isSetMemberName()) {
          oprot.writeFieldBegin(MEMBER_NAME_FIELD_DESC);
          oprot.writeString(struct.memberName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.userName != null) {
        if (struct.isSetUserName()) {
          oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
          oprot.writeString(struct.userName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.clientName != null) {
        if (struct.isSetClientName()) {
          oprot.writeFieldBegin(CLIENT_NAME_FIELD_DESC);
          oprot.writeString(struct.clientName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.createSource != null) {
        if (struct.isSetCreateSource()) {
          oprot.writeFieldBegin(CREATE_SOURCE_FIELD_DESC);
          oprot.writeString(struct.createSource);
          oprot.writeFieldEnd();
        }
      }
      if (struct.orderType != null) {
        if (struct.isSetOrderType()) {
          oprot.writeFieldBegin(ORDER_TYPE_FIELD_DESC);
          oprot.writeString(struct.orderType);
          oprot.writeFieldEnd();
        }
      }
      if (struct.paymentMethod != null) {
        if (struct.isSetPaymentMethod()) {
          oprot.writeFieldBegin(PAYMENT_METHOD_FIELD_DESC);
          oprot.writeString(struct.paymentMethod);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetTotalPrice()) {
        oprot.writeFieldBegin(TOTAL_PRICE_FIELD_DESC);
        oprot.writeDouble(struct.totalPrice);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCash()) {
        oprot.writeFieldBegin(CASH_FIELD_DESC);
        oprot.writeDouble(struct.cash);
        oprot.writeFieldEnd();
      }
      if (struct.isSetFftPoints()) {
        oprot.writeFieldBegin(FFT_POINTS_FIELD_DESC);
        oprot.writeDouble(struct.fftPoints);
        oprot.writeFieldEnd();
      }
      if (struct.isSetBankPoints()) {
        oprot.writeFieldBegin(BANK_POINTS_FIELD_DESC);
        oprot.writeDouble(struct.bankPoints);
        oprot.writeFieldEnd();
      }
      if (struct.pointRate != null) {
        if (struct.isSetPointRate()) {
          oprot.writeFieldBegin(POINT_RATE_FIELD_DESC);
          oprot.writeString(struct.pointRate);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetDiscount()) {
        oprot.writeFieldBegin(DISCOUNT_FIELD_DESC);
        oprot.writeDouble(struct.discount);
        oprot.writeFieldEnd();
      }
      if (struct.isSetRedPacketDiscount()) {
        oprot.writeFieldBegin(RED_PACKET_DISCOUNT_FIELD_DESC);
        oprot.writeDouble(struct.redPacketDiscount);
        oprot.writeFieldEnd();
      }
      if (struct.orderStatus != null) {
        if (struct.isSetOrderStatus()) {
          oprot.writeFieldBegin(ORDER_STATUS_FIELD_DESC);
          oprot.writeString(struct.orderStatus);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetPaymentTime()) {
        oprot.writeFieldBegin(PAYMENT_TIME_FIELD_DESC);
        oprot.writeI64(struct.paymentTime);
        oprot.writeFieldEnd();
      }
      if (struct.billNos != null) {
        if (struct.isSetBillNos()) {
          oprot.writeFieldBegin(BILL_NOS_FIELD_DESC);
          oprot.writeString(struct.billNos);
          oprot.writeFieldEnd();
        }
      }
      if (struct.merchantName != null) {
        if (struct.isSetMerchantName()) {
          oprot.writeFieldBegin(MERCHANT_NAME_FIELD_DESC);
          oprot.writeString(struct.merchantName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.outletName != null) {
        if (struct.isSetOutletName()) {
          oprot.writeFieldBegin(OUTLET_NAME_FIELD_DESC);
          oprot.writeString(struct.outletName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.settleStatus != null) {
        if (struct.isSetSettleStatus()) {
          oprot.writeFieldBegin(SETTLE_STATUS_FIELD_DESC);
          oprot.writeString(struct.settleStatus);
          oprot.writeFieldEnd();
        }
      }
      if (struct.settleBillNos != null) {
        if (struct.isSetSettleBillNos()) {
          oprot.writeFieldBegin(SETTLE_BILL_NOS_FIELD_DESC);
          oprot.writeString(struct.settleBillNos);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetSettleTime()) {
        oprot.writeFieldBegin(SETTLE_TIME_FIELD_DESC);
        oprot.writeI64(struct.settleTime);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BossPrefPayOrderDetailInfoVoTupleSchemeFactory implements SchemeFactory {
    public BossPrefPayOrderDetailInfoVoTupleScheme getScheme() {
      return new BossPrefPayOrderDetailInfoVoTupleScheme();
    }
  }

  private static class BossPrefPayOrderDetailInfoVoTupleScheme extends TupleScheme<BossPrefPayOrderDetailInfoVo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BossPrefPayOrderDetailInfoVo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetOrderId()) {
        optionals.set(0);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(1);
      }
      if (struct.isSetMemberName()) {
        optionals.set(2);
      }
      if (struct.isSetUserName()) {
        optionals.set(3);
      }
      if (struct.isSetClientName()) {
        optionals.set(4);
      }
      if (struct.isSetCreateSource()) {
        optionals.set(5);
      }
      if (struct.isSetOrderType()) {
        optionals.set(6);
      }
      if (struct.isSetPaymentMethod()) {
        optionals.set(7);
      }
      if (struct.isSetTotalPrice()) {
        optionals.set(8);
      }
      if (struct.isSetCash()) {
        optionals.set(9);
      }
      if (struct.isSetFftPoints()) {
        optionals.set(10);
      }
      if (struct.isSetBankPoints()) {
        optionals.set(11);
      }
      if (struct.isSetPointRate()) {
        optionals.set(12);
      }
      if (struct.isSetDiscount()) {
        optionals.set(13);
      }
      if (struct.isSetRedPacketDiscount()) {
        optionals.set(14);
      }
      if (struct.isSetOrderStatus()) {
        optionals.set(15);
      }
      if (struct.isSetPaymentTime()) {
        optionals.set(16);
      }
      if (struct.isSetBillNos()) {
        optionals.set(17);
      }
      if (struct.isSetMerchantName()) {
        optionals.set(18);
      }
      if (struct.isSetOutletName()) {
        optionals.set(19);
      }
      if (struct.isSetSettleStatus()) {
        optionals.set(20);
      }
      if (struct.isSetSettleBillNos()) {
        optionals.set(21);
      }
      if (struct.isSetSettleTime()) {
        optionals.set(22);
      }
      oprot.writeBitSet(optionals, 23);
      if (struct.isSetOrderId()) {
        oprot.writeString(struct.orderId);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeI64(struct.createTime);
      }
      if (struct.isSetMemberName()) {
        oprot.writeString(struct.memberName);
      }
      if (struct.isSetUserName()) {
        oprot.writeString(struct.userName);
      }
      if (struct.isSetClientName()) {
        oprot.writeString(struct.clientName);
      }
      if (struct.isSetCreateSource()) {
        oprot.writeString(struct.createSource);
      }
      if (struct.isSetOrderType()) {
        oprot.writeString(struct.orderType);
      }
      if (struct.isSetPaymentMethod()) {
        oprot.writeString(struct.paymentMethod);
      }
      if (struct.isSetTotalPrice()) {
        oprot.writeDouble(struct.totalPrice);
      }
      if (struct.isSetCash()) {
        oprot.writeDouble(struct.cash);
      }
      if (struct.isSetFftPoints()) {
        oprot.writeDouble(struct.fftPoints);
      }
      if (struct.isSetBankPoints()) {
        oprot.writeDouble(struct.bankPoints);
      }
      if (struct.isSetPointRate()) {
        oprot.writeString(struct.pointRate);
      }
      if (struct.isSetDiscount()) {
        oprot.writeDouble(struct.discount);
      }
      if (struct.isSetRedPacketDiscount()) {
        oprot.writeDouble(struct.redPacketDiscount);
      }
      if (struct.isSetOrderStatus()) {
        oprot.writeString(struct.orderStatus);
      }
      if (struct.isSetPaymentTime()) {
        oprot.writeI64(struct.paymentTime);
      }
      if (struct.isSetBillNos()) {
        oprot.writeString(struct.billNos);
      }
      if (struct.isSetMerchantName()) {
        oprot.writeString(struct.merchantName);
      }
      if (struct.isSetOutletName()) {
        oprot.writeString(struct.outletName);
      }
      if (struct.isSetSettleStatus()) {
        oprot.writeString(struct.settleStatus);
      }
      if (struct.isSetSettleBillNos()) {
        oprot.writeString(struct.settleBillNos);
      }
      if (struct.isSetSettleTime()) {
        oprot.writeI64(struct.settleTime);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BossPrefPayOrderDetailInfoVo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(23);
      if (incoming.get(0)) {
        struct.orderId = iprot.readString();
        struct.setOrderIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.createTime = iprot.readI64();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.memberName = iprot.readString();
        struct.setMemberNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.userName = iprot.readString();
        struct.setUserNameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.clientName = iprot.readString();
        struct.setClientNameIsSet(true);
      }
      if (incoming.get(5)) {
        struct.createSource = iprot.readString();
        struct.setCreateSourceIsSet(true);
      }
      if (incoming.get(6)) {
        struct.orderType = iprot.readString();
        struct.setOrderTypeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.paymentMethod = iprot.readString();
        struct.setPaymentMethodIsSet(true);
      }
      if (incoming.get(8)) {
        struct.totalPrice = iprot.readDouble();
        struct.setTotalPriceIsSet(true);
      }
      if (incoming.get(9)) {
        struct.cash = iprot.readDouble();
        struct.setCashIsSet(true);
      }
      if (incoming.get(10)) {
        struct.fftPoints = iprot.readDouble();
        struct.setFftPointsIsSet(true);
      }
      if (incoming.get(11)) {
        struct.bankPoints = iprot.readDouble();
        struct.setBankPointsIsSet(true);
      }
      if (incoming.get(12)) {
        struct.pointRate = iprot.readString();
        struct.setPointRateIsSet(true);
      }
      if (incoming.get(13)) {
        struct.discount = iprot.readDouble();
        struct.setDiscountIsSet(true);
      }
      if (incoming.get(14)) {
        struct.redPacketDiscount = iprot.readDouble();
        struct.setRedPacketDiscountIsSet(true);
      }
      if (incoming.get(15)) {
        struct.orderStatus = iprot.readString();
        struct.setOrderStatusIsSet(true);
      }
      if (incoming.get(16)) {
        struct.paymentTime = iprot.readI64();
        struct.setPaymentTimeIsSet(true);
      }
      if (incoming.get(17)) {
        struct.billNos = iprot.readString();
        struct.setBillNosIsSet(true);
      }
      if (incoming.get(18)) {
        struct.merchantName = iprot.readString();
        struct.setMerchantNameIsSet(true);
      }
      if (incoming.get(19)) {
        struct.outletName = iprot.readString();
        struct.setOutletNameIsSet(true);
      }
      if (incoming.get(20)) {
        struct.settleStatus = iprot.readString();
        struct.setSettleStatusIsSet(true);
      }
      if (incoming.get(21)) {
        struct.settleBillNos = iprot.readString();
        struct.setSettleBillNosIsSet(true);
      }
      if (incoming.get(22)) {
        struct.settleTime = iprot.readI64();
        struct.setSettleTimeIsSet(true);
      }
    }
  }

}

