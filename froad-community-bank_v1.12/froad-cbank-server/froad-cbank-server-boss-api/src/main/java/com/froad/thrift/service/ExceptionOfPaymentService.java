/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.service;

import java.util.ArrayList;
import java.util.BitSet;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Generated;

import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.froad.thrift.vo.payment.BossPaymentDetialVo;
import com.froad.thrift.vo.payment.BossPaymentPage;
import com.froad.thrift.vo.payment.BossQueryConditionVo;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-10-20")
public class ExceptionOfPaymentService {

  public interface Iface extends com.froad.thrift.monitor.service.BizMonitorService.Iface {

    /**
     * 异常订单列表(包含:支付异常,结算异常,退款异常 等查询)
     * 
     * @param condition
     */
    public BossPaymentPage queryExceptionPaymentByPage(BossQueryConditionVo condition) throws org.apache.thrift.TException;

    /**
     * 查询结算详情
     * 
     * @param paymentId
     */
    public BossPaymentDetialVo queryOfSettleDetial(String paymentId) throws org.apache.thrift.TException;

    /**
     * 查询支付详情
     * 
     * @param paymentId
     */
    public BossPaymentDetialVo queryOfPaymentRefundPointDetial(String paymentId) throws org.apache.thrift.TException;

    public BossPaymentDetialVo queryOfPaymentRefundCashDetial(String paymentId) throws org.apache.thrift.TException;

    /**
     * 查询退款详情
     * 
     * @param paymentId
     */
    public BossPaymentDetialVo queryOfRefundDetial(String paymentId) throws org.apache.thrift.TException;

    /**
     * 重新发起结算
     * 
     * @param paymentId
     */
    public com.froad.thrift.vo.ResultVo retryOfSettle(String paymentId) throws org.apache.thrift.TException;

    /**
     * 重新发起退款
     * 
     * @param paymentId
     */
    public com.froad.thrift.vo.ResultVo retryOfReturn(String paymentId) throws org.apache.thrift.TException;

    /**
     * 退还现金
     * 
     * @param paymentId
     */
    public com.froad.thrift.vo.ResultVo returnCash(String paymentId) throws org.apache.thrift.TException;

    /**
     * 退还积分
     * 
     * @param paymentId
     */
    public com.froad.thrift.vo.ResultVo returnPoint(String paymentId) throws org.apache.thrift.TException;

    /**
     * 退还积分&现金
     * 
     * @param paymentId
     */
    public com.froad.thrift.vo.ResultVo returnPointAndCash(String paymentId) throws org.apache.thrift.TException;

  }

  public interface AsyncIface extends com.froad.thrift.monitor.service.BizMonitorService .AsyncIface {

    public void queryExceptionPaymentByPage(BossQueryConditionVo condition, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryOfSettleDetial(String paymentId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryOfPaymentRefundPointDetial(String paymentId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryOfPaymentRefundCashDetial(String paymentId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryOfRefundDetial(String paymentId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void retryOfSettle(String paymentId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void retryOfReturn(String paymentId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void returnCash(String paymentId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void returnPoint(String paymentId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void returnPointAndCash(String paymentId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends com.froad.thrift.monitor.service.BizMonitorService.Client implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public BossPaymentPage queryExceptionPaymentByPage(BossQueryConditionVo condition) throws org.apache.thrift.TException
    {
      send_queryExceptionPaymentByPage(condition);
      return recv_queryExceptionPaymentByPage();
    }

    public void send_queryExceptionPaymentByPage(BossQueryConditionVo condition) throws org.apache.thrift.TException
    {
      queryExceptionPaymentByPage_args args = new queryExceptionPaymentByPage_args();
      args.setCondition(condition);
      sendBase("queryExceptionPaymentByPage", args);
    }

    public BossPaymentPage recv_queryExceptionPaymentByPage() throws org.apache.thrift.TException
    {
      queryExceptionPaymentByPage_result result = new queryExceptionPaymentByPage_result();
      receiveBase(result, "queryExceptionPaymentByPage");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryExceptionPaymentByPage failed: unknown result");
    }

    public BossPaymentDetialVo queryOfSettleDetial(String paymentId) throws org.apache.thrift.TException
    {
      send_queryOfSettleDetial(paymentId);
      return recv_queryOfSettleDetial();
    }

    public void send_queryOfSettleDetial(String paymentId) throws org.apache.thrift.TException
    {
      queryOfSettleDetial_args args = new queryOfSettleDetial_args();
      args.setPaymentId(paymentId);
      sendBase("queryOfSettleDetial", args);
    }

    public BossPaymentDetialVo recv_queryOfSettleDetial() throws org.apache.thrift.TException
    {
      queryOfSettleDetial_result result = new queryOfSettleDetial_result();
      receiveBase(result, "queryOfSettleDetial");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryOfSettleDetial failed: unknown result");
    }

    public BossPaymentDetialVo queryOfPaymentRefundPointDetial(String paymentId) throws org.apache.thrift.TException
    {
      send_queryOfPaymentRefundPointDetial(paymentId);
      return recv_queryOfPaymentRefundPointDetial();
    }

    public void send_queryOfPaymentRefundPointDetial(String paymentId) throws org.apache.thrift.TException
    {
      queryOfPaymentRefundPointDetial_args args = new queryOfPaymentRefundPointDetial_args();
      args.setPaymentId(paymentId);
      sendBase("queryOfPaymentRefundPointDetial", args);
    }

    public BossPaymentDetialVo recv_queryOfPaymentRefundPointDetial() throws org.apache.thrift.TException
    {
      queryOfPaymentRefundPointDetial_result result = new queryOfPaymentRefundPointDetial_result();
      receiveBase(result, "queryOfPaymentRefundPointDetial");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryOfPaymentRefundPointDetial failed: unknown result");
    }

    public BossPaymentDetialVo queryOfPaymentRefundCashDetial(String paymentId) throws org.apache.thrift.TException
    {
      send_queryOfPaymentRefundCashDetial(paymentId);
      return recv_queryOfPaymentRefundCashDetial();
    }

    public void send_queryOfPaymentRefundCashDetial(String paymentId) throws org.apache.thrift.TException
    {
      queryOfPaymentRefundCashDetial_args args = new queryOfPaymentRefundCashDetial_args();
      args.setPaymentId(paymentId);
      sendBase("queryOfPaymentRefundCashDetial", args);
    }

    public BossPaymentDetialVo recv_queryOfPaymentRefundCashDetial() throws org.apache.thrift.TException
    {
      queryOfPaymentRefundCashDetial_result result = new queryOfPaymentRefundCashDetial_result();
      receiveBase(result, "queryOfPaymentRefundCashDetial");
      if (result.isSetSuccess()) {
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryOfPaymentRefundCashDetial failed: unknown result");
    }

    public BossPaymentDetialVo queryOfRefundDetial(String paymentId) throws org.apache.thrift.TException
    {
      send_queryOfRefundDetial(paymentId);
      return recv_queryOfRefundDetial();
    }

    public void send_queryOfRefundDetial(String paymentId) throws org.apache.thrift.TException
    {
      queryOfRefundDetial_args args = new queryOfRefundDetial_args();
      args.setPaymentId(paymentId);
      sendBase("queryOfRefundDetial", args);
    }

    public BossPaymentDetialVo recv_queryOfRefundDetial() throws org.apache.thrift.TException
    {
      queryOfRefundDetial_result result = new queryOfRefundDetial_result();
      receiveBase(result, "queryOfRefundDetial");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryOfRefundDetial failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo retryOfSettle(String paymentId) throws org.apache.thrift.TException
    {
      send_retryOfSettle(paymentId);
      return recv_retryOfSettle();
    }

    public void send_retryOfSettle(String paymentId) throws org.apache.thrift.TException
    {
      retryOfSettle_args args = new retryOfSettle_args();
      args.setPaymentId(paymentId);
      sendBase("retryOfSettle", args);
    }

    public com.froad.thrift.vo.ResultVo recv_retryOfSettle() throws org.apache.thrift.TException
    {
      retryOfSettle_result result = new retryOfSettle_result();
      receiveBase(result, "retryOfSettle");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "retryOfSettle failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo retryOfReturn(String paymentId) throws org.apache.thrift.TException
    {
      send_retryOfReturn(paymentId);
      return recv_retryOfReturn();
    }

    public void send_retryOfReturn(String paymentId) throws org.apache.thrift.TException
    {
      retryOfReturn_args args = new retryOfReturn_args();
      args.setPaymentId(paymentId);
      sendBase("retryOfReturn", args);
    }

    public com.froad.thrift.vo.ResultVo recv_retryOfReturn() throws org.apache.thrift.TException
    {
      retryOfReturn_result result = new retryOfReturn_result();
      receiveBase(result, "retryOfReturn");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "retryOfReturn failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo returnCash(String paymentId) throws org.apache.thrift.TException
    {
      send_returnCash(paymentId);
      return recv_returnCash();
    }

    public void send_returnCash(String paymentId) throws org.apache.thrift.TException
    {
      returnCash_args args = new returnCash_args();
      args.setPaymentId(paymentId);
      sendBase("returnCash", args);
    }

    public com.froad.thrift.vo.ResultVo recv_returnCash() throws org.apache.thrift.TException
    {
      returnCash_result result = new returnCash_result();
      receiveBase(result, "returnCash");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "returnCash failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo returnPoint(String paymentId) throws org.apache.thrift.TException
    {
      send_returnPoint(paymentId);
      return recv_returnPoint();
    }

    public void send_returnPoint(String paymentId) throws org.apache.thrift.TException
    {
      returnPoint_args args = new returnPoint_args();
      args.setPaymentId(paymentId);
      sendBase("returnPoint", args);
    }

    public com.froad.thrift.vo.ResultVo recv_returnPoint() throws org.apache.thrift.TException
    {
      returnPoint_result result = new returnPoint_result();
      receiveBase(result, "returnPoint");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "returnPoint failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo returnPointAndCash(String paymentId) throws org.apache.thrift.TException
    {
      send_returnPointAndCash(paymentId);
      return recv_returnPointAndCash();
    }

    public void send_returnPointAndCash(String paymentId) throws org.apache.thrift.TException
    {
      returnPointAndCash_args args = new returnPointAndCash_args();
      args.setPaymentId(paymentId);
      sendBase("returnPointAndCash", args);
    }

    public com.froad.thrift.vo.ResultVo recv_returnPointAndCash() throws org.apache.thrift.TException
    {
      returnPointAndCash_result result = new returnPointAndCash_result();
      receiveBase(result, "returnPointAndCash");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "returnPointAndCash failed: unknown result");
    }

  }
  public static class AsyncClient extends com.froad.thrift.monitor.service.BizMonitorService.AsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void queryExceptionPaymentByPage(BossQueryConditionVo condition, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryExceptionPaymentByPage_call method_call = new queryExceptionPaymentByPage_call(condition, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryExceptionPaymentByPage_call extends org.apache.thrift.async.TAsyncMethodCall {
      private BossQueryConditionVo condition;
      public queryExceptionPaymentByPage_call(BossQueryConditionVo condition, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.condition = condition;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryExceptionPaymentByPage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryExceptionPaymentByPage_args args = new queryExceptionPaymentByPage_args();
        args.setCondition(condition);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public BossPaymentPage getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryExceptionPaymentByPage();
      }
    }

    public void queryOfSettleDetial(String paymentId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryOfSettleDetial_call method_call = new queryOfSettleDetial_call(paymentId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryOfSettleDetial_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String paymentId;
      public queryOfSettleDetial_call(String paymentId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.paymentId = paymentId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryOfSettleDetial", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryOfSettleDetial_args args = new queryOfSettleDetial_args();
        args.setPaymentId(paymentId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public BossPaymentDetialVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryOfSettleDetial();
      }
    }

    public void queryOfPaymentRefundPointDetial(String paymentId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryOfPaymentRefundPointDetial_call method_call = new queryOfPaymentRefundPointDetial_call(paymentId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryOfPaymentRefundPointDetial_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String paymentId;
      public queryOfPaymentRefundPointDetial_call(String paymentId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.paymentId = paymentId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryOfPaymentRefundPointDetial", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryOfPaymentRefundPointDetial_args args = new queryOfPaymentRefundPointDetial_args();
        args.setPaymentId(paymentId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public BossPaymentDetialVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryOfPaymentRefundPointDetial();
      }
    }

    public void queryOfPaymentRefundCashDetial(String paymentId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryOfPaymentRefundCashDetial_call method_call = new queryOfPaymentRefundCashDetial_call(paymentId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryOfPaymentRefundCashDetial_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String paymentId;
      public queryOfPaymentRefundCashDetial_call(String paymentId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.paymentId = paymentId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryOfPaymentRefundCashDetial", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryOfPaymentRefundCashDetial_args args = new queryOfPaymentRefundCashDetial_args();
        args.setPaymentId(paymentId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public BossPaymentDetialVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryOfPaymentRefundCashDetial();
      }
    }

    public void queryOfRefundDetial(String paymentId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryOfRefundDetial_call method_call = new queryOfRefundDetial_call(paymentId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryOfRefundDetial_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String paymentId;
      public queryOfRefundDetial_call(String paymentId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.paymentId = paymentId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryOfRefundDetial", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryOfRefundDetial_args args = new queryOfRefundDetial_args();
        args.setPaymentId(paymentId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public BossPaymentDetialVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryOfRefundDetial();
      }
    }

    public void retryOfSettle(String paymentId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      retryOfSettle_call method_call = new retryOfSettle_call(paymentId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class retryOfSettle_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String paymentId;
      public retryOfSettle_call(String paymentId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.paymentId = paymentId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("retryOfSettle", org.apache.thrift.protocol.TMessageType.CALL, 0));
        retryOfSettle_args args = new retryOfSettle_args();
        args.setPaymentId(paymentId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_retryOfSettle();
      }
    }

    public void retryOfReturn(String paymentId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      retryOfReturn_call method_call = new retryOfReturn_call(paymentId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class retryOfReturn_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String paymentId;
      public retryOfReturn_call(String paymentId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.paymentId = paymentId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("retryOfReturn", org.apache.thrift.protocol.TMessageType.CALL, 0));
        retryOfReturn_args args = new retryOfReturn_args();
        args.setPaymentId(paymentId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_retryOfReturn();
      }
    }

    public void returnCash(String paymentId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      returnCash_call method_call = new returnCash_call(paymentId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class returnCash_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String paymentId;
      public returnCash_call(String paymentId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.paymentId = paymentId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("returnCash", org.apache.thrift.protocol.TMessageType.CALL, 0));
        returnCash_args args = new returnCash_args();
        args.setPaymentId(paymentId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_returnCash();
      }
    }

    public void returnPoint(String paymentId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      returnPoint_call method_call = new returnPoint_call(paymentId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class returnPoint_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String paymentId;
      public returnPoint_call(String paymentId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.paymentId = paymentId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("returnPoint", org.apache.thrift.protocol.TMessageType.CALL, 0));
        returnPoint_args args = new returnPoint_args();
        args.setPaymentId(paymentId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_returnPoint();
      }
    }

    public void returnPointAndCash(String paymentId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      returnPointAndCash_call method_call = new returnPointAndCash_call(paymentId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class returnPointAndCash_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String paymentId;
      public returnPointAndCash_call(String paymentId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.paymentId = paymentId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("returnPointAndCash", org.apache.thrift.protocol.TMessageType.CALL, 0));
        returnPointAndCash_args args = new returnPointAndCash_args();
        args.setPaymentId(paymentId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_returnPointAndCash();
      }
    }

  }

  public static class Processor<I extends Iface> extends com.froad.thrift.monitor.service.BizMonitorService.Processor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("queryExceptionPaymentByPage", new queryExceptionPaymentByPage());
      processMap.put("queryOfSettleDetial", new queryOfSettleDetial());
      processMap.put("queryOfPaymentRefundPointDetial", new queryOfPaymentRefundPointDetial());
      processMap.put("queryOfPaymentRefundCashDetial", new queryOfPaymentRefundCashDetial());
      processMap.put("queryOfRefundDetial", new queryOfRefundDetial());
      processMap.put("retryOfSettle", new retryOfSettle());
      processMap.put("retryOfReturn", new retryOfReturn());
      processMap.put("returnCash", new returnCash());
      processMap.put("returnPoint", new returnPoint());
      processMap.put("returnPointAndCash", new returnPointAndCash());
      return processMap;
    }

    public static class queryExceptionPaymentByPage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryExceptionPaymentByPage_args> {
      public queryExceptionPaymentByPage() {
        super("queryExceptionPaymentByPage");
      }

      public queryExceptionPaymentByPage_args getEmptyArgsInstance() {
        return new queryExceptionPaymentByPage_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryExceptionPaymentByPage_result getResult(I iface, queryExceptionPaymentByPage_args args) throws org.apache.thrift.TException {
        queryExceptionPaymentByPage_result result = new queryExceptionPaymentByPage_result();
        result.success = iface.queryExceptionPaymentByPage(args.condition);
        return result;
      }
    }

    public static class queryOfSettleDetial<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryOfSettleDetial_args> {
      public queryOfSettleDetial() {
        super("queryOfSettleDetial");
      }

      public queryOfSettleDetial_args getEmptyArgsInstance() {
        return new queryOfSettleDetial_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryOfSettleDetial_result getResult(I iface, queryOfSettleDetial_args args) throws org.apache.thrift.TException {
        queryOfSettleDetial_result result = new queryOfSettleDetial_result();
        result.success = iface.queryOfSettleDetial(args.paymentId);
        return result;
      }
    }

    public static class queryOfPaymentRefundPointDetial<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryOfPaymentRefundPointDetial_args> {
      public queryOfPaymentRefundPointDetial() {
        super("queryOfPaymentRefundPointDetial");
      }

      public queryOfPaymentRefundPointDetial_args getEmptyArgsInstance() {
        return new queryOfPaymentRefundPointDetial_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryOfPaymentRefundPointDetial_result getResult(I iface, queryOfPaymentRefundPointDetial_args args) throws org.apache.thrift.TException {
        queryOfPaymentRefundPointDetial_result result = new queryOfPaymentRefundPointDetial_result();
        result.success = iface.queryOfPaymentRefundPointDetial(args.paymentId);
        return result;
      }
    }

    public static class queryOfPaymentRefundCashDetial<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryOfPaymentRefundCashDetial_args> {
      public queryOfPaymentRefundCashDetial() {
        super("queryOfPaymentRefundCashDetial");
      }

      public queryOfPaymentRefundCashDetial_args getEmptyArgsInstance() {
        return new queryOfPaymentRefundCashDetial_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryOfPaymentRefundCashDetial_result getResult(I iface, queryOfPaymentRefundCashDetial_args args) throws org.apache.thrift.TException {
        queryOfPaymentRefundCashDetial_result result = new queryOfPaymentRefundCashDetial_result();
        result.success = iface.queryOfPaymentRefundCashDetial(args.paymentId);
        return result;
      }
    }

    public static class queryOfRefundDetial<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryOfRefundDetial_args> {
      public queryOfRefundDetial() {
        super("queryOfRefundDetial");
      }

      public queryOfRefundDetial_args getEmptyArgsInstance() {
        return new queryOfRefundDetial_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryOfRefundDetial_result getResult(I iface, queryOfRefundDetial_args args) throws org.apache.thrift.TException {
        queryOfRefundDetial_result result = new queryOfRefundDetial_result();
        result.success = iface.queryOfRefundDetial(args.paymentId);
        return result;
      }
    }

    public static class retryOfSettle<I extends Iface> extends org.apache.thrift.ProcessFunction<I, retryOfSettle_args> {
      public retryOfSettle() {
        super("retryOfSettle");
      }

      public retryOfSettle_args getEmptyArgsInstance() {
        return new retryOfSettle_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public retryOfSettle_result getResult(I iface, retryOfSettle_args args) throws org.apache.thrift.TException {
        retryOfSettle_result result = new retryOfSettle_result();
        result.success = iface.retryOfSettle(args.paymentId);
        return result;
      }
    }

    public static class retryOfReturn<I extends Iface> extends org.apache.thrift.ProcessFunction<I, retryOfReturn_args> {
      public retryOfReturn() {
        super("retryOfReturn");
      }

      public retryOfReturn_args getEmptyArgsInstance() {
        return new retryOfReturn_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public retryOfReturn_result getResult(I iface, retryOfReturn_args args) throws org.apache.thrift.TException {
        retryOfReturn_result result = new retryOfReturn_result();
        result.success = iface.retryOfReturn(args.paymentId);
        return result;
      }
    }

    public static class returnCash<I extends Iface> extends org.apache.thrift.ProcessFunction<I, returnCash_args> {
      public returnCash() {
        super("returnCash");
      }

      public returnCash_args getEmptyArgsInstance() {
        return new returnCash_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public returnCash_result getResult(I iface, returnCash_args args) throws org.apache.thrift.TException {
        returnCash_result result = new returnCash_result();
        result.success = iface.returnCash(args.paymentId);
        return result;
      }
    }

    public static class returnPoint<I extends Iface> extends org.apache.thrift.ProcessFunction<I, returnPoint_args> {
      public returnPoint() {
        super("returnPoint");
      }

      public returnPoint_args getEmptyArgsInstance() {
        return new returnPoint_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public returnPoint_result getResult(I iface, returnPoint_args args) throws org.apache.thrift.TException {
        returnPoint_result result = new returnPoint_result();
        result.success = iface.returnPoint(args.paymentId);
        return result;
      }
    }

    public static class returnPointAndCash<I extends Iface> extends org.apache.thrift.ProcessFunction<I, returnPointAndCash_args> {
      public returnPointAndCash() {
        super("returnPointAndCash");
      }

      public returnPointAndCash_args getEmptyArgsInstance() {
        return new returnPointAndCash_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public returnPointAndCash_result getResult(I iface, returnPointAndCash_args args) throws org.apache.thrift.TException {
        returnPointAndCash_result result = new returnPointAndCash_result();
        result.success = iface.returnPointAndCash(args.paymentId);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends com.froad.thrift.monitor.service.BizMonitorService.AsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("queryExceptionPaymentByPage", new queryExceptionPaymentByPage());
      processMap.put("queryOfSettleDetial", new queryOfSettleDetial());
      processMap.put("queryOfPaymentRefundPointDetial", new queryOfPaymentRefundPointDetial());
      processMap.put("queryOfPaymentRefundCashDetial", new queryOfPaymentRefundCashDetial());
      processMap.put("queryOfRefundDetial", new queryOfRefundDetial());
      processMap.put("retryOfSettle", new retryOfSettle());
      processMap.put("retryOfReturn", new retryOfReturn());
      processMap.put("returnCash", new returnCash());
      processMap.put("returnPoint", new returnPoint());
      processMap.put("returnPointAndCash", new returnPointAndCash());
      return processMap;
    }

    public static class queryExceptionPaymentByPage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryExceptionPaymentByPage_args, BossPaymentPage> {
      public queryExceptionPaymentByPage() {
        super("queryExceptionPaymentByPage");
      }

      public queryExceptionPaymentByPage_args getEmptyArgsInstance() {
        return new queryExceptionPaymentByPage_args();
      }

      public AsyncMethodCallback<BossPaymentPage> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<BossPaymentPage>() { 
          public void onComplete(BossPaymentPage o) {
            queryExceptionPaymentByPage_result result = new queryExceptionPaymentByPage_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryExceptionPaymentByPage_result result = new queryExceptionPaymentByPage_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryExceptionPaymentByPage_args args, org.apache.thrift.async.AsyncMethodCallback<BossPaymentPage> resultHandler) throws TException {
        iface.queryExceptionPaymentByPage(args.condition,resultHandler);
      }
    }

    public static class queryOfSettleDetial<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryOfSettleDetial_args, BossPaymentDetialVo> {
      public queryOfSettleDetial() {
        super("queryOfSettleDetial");
      }

      public queryOfSettleDetial_args getEmptyArgsInstance() {
        return new queryOfSettleDetial_args();
      }

      public AsyncMethodCallback<BossPaymentDetialVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<BossPaymentDetialVo>() { 
          public void onComplete(BossPaymentDetialVo o) {
            queryOfSettleDetial_result result = new queryOfSettleDetial_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryOfSettleDetial_result result = new queryOfSettleDetial_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryOfSettleDetial_args args, org.apache.thrift.async.AsyncMethodCallback<BossPaymentDetialVo> resultHandler) throws TException {
        iface.queryOfSettleDetial(args.paymentId,resultHandler);
      }
    }

    public static class queryOfPaymentRefundPointDetial<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryOfPaymentRefundPointDetial_args, BossPaymentDetialVo> {
      public queryOfPaymentRefundPointDetial() {
        super("queryOfPaymentRefundPointDetial");
      }

      public queryOfPaymentRefundPointDetial_args getEmptyArgsInstance() {
        return new queryOfPaymentRefundPointDetial_args();
      }

      public AsyncMethodCallback<BossPaymentDetialVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<BossPaymentDetialVo>() { 
          public void onComplete(BossPaymentDetialVo o) {
            queryOfPaymentRefundPointDetial_result result = new queryOfPaymentRefundPointDetial_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryOfPaymentRefundPointDetial_result result = new queryOfPaymentRefundPointDetial_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryOfPaymentRefundPointDetial_args args, org.apache.thrift.async.AsyncMethodCallback<BossPaymentDetialVo> resultHandler) throws TException {
        iface.queryOfPaymentRefundPointDetial(args.paymentId,resultHandler);
      }
    }

    public static class queryOfPaymentRefundCashDetial<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryOfPaymentRefundCashDetial_args, BossPaymentDetialVo> {
      public queryOfPaymentRefundCashDetial() {
        super("queryOfPaymentRefundCashDetial");
      }

      public queryOfPaymentRefundCashDetial_args getEmptyArgsInstance() {
        return new queryOfPaymentRefundCashDetial_args();
      }

      public AsyncMethodCallback<BossPaymentDetialVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<BossPaymentDetialVo>() { 
          public void onComplete(BossPaymentDetialVo o) {
            queryOfPaymentRefundCashDetial_result result = new queryOfPaymentRefundCashDetial_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryOfPaymentRefundCashDetial_result result = new queryOfPaymentRefundCashDetial_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryOfPaymentRefundCashDetial_args args, org.apache.thrift.async.AsyncMethodCallback<BossPaymentDetialVo> resultHandler) throws TException {
        iface.queryOfPaymentRefundCashDetial(args.paymentId,resultHandler);
      }
    }

    public static class queryOfRefundDetial<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryOfRefundDetial_args, BossPaymentDetialVo> {
      public queryOfRefundDetial() {
        super("queryOfRefundDetial");
      }

      public queryOfRefundDetial_args getEmptyArgsInstance() {
        return new queryOfRefundDetial_args();
      }

      public AsyncMethodCallback<BossPaymentDetialVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<BossPaymentDetialVo>() { 
          public void onComplete(BossPaymentDetialVo o) {
            queryOfRefundDetial_result result = new queryOfRefundDetial_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryOfRefundDetial_result result = new queryOfRefundDetial_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryOfRefundDetial_args args, org.apache.thrift.async.AsyncMethodCallback<BossPaymentDetialVo> resultHandler) throws TException {
        iface.queryOfRefundDetial(args.paymentId,resultHandler);
      }
    }

    public static class retryOfSettle<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, retryOfSettle_args, com.froad.thrift.vo.ResultVo> {
      public retryOfSettle() {
        super("retryOfSettle");
      }

      public retryOfSettle_args getEmptyArgsInstance() {
        return new retryOfSettle_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            retryOfSettle_result result = new retryOfSettle_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            retryOfSettle_result result = new retryOfSettle_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, retryOfSettle_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.retryOfSettle(args.paymentId,resultHandler);
      }
    }

    public static class retryOfReturn<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, retryOfReturn_args, com.froad.thrift.vo.ResultVo> {
      public retryOfReturn() {
        super("retryOfReturn");
      }

      public retryOfReturn_args getEmptyArgsInstance() {
        return new retryOfReturn_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            retryOfReturn_result result = new retryOfReturn_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            retryOfReturn_result result = new retryOfReturn_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, retryOfReturn_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.retryOfReturn(args.paymentId,resultHandler);
      }
    }

    public static class returnCash<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, returnCash_args, com.froad.thrift.vo.ResultVo> {
      public returnCash() {
        super("returnCash");
      }

      public returnCash_args getEmptyArgsInstance() {
        return new returnCash_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            returnCash_result result = new returnCash_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            returnCash_result result = new returnCash_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, returnCash_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.returnCash(args.paymentId,resultHandler);
      }
    }

    public static class returnPoint<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, returnPoint_args, com.froad.thrift.vo.ResultVo> {
      public returnPoint() {
        super("returnPoint");
      }

      public returnPoint_args getEmptyArgsInstance() {
        return new returnPoint_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            returnPoint_result result = new returnPoint_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            returnPoint_result result = new returnPoint_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, returnPoint_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.returnPoint(args.paymentId,resultHandler);
      }
    }

    public static class returnPointAndCash<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, returnPointAndCash_args, com.froad.thrift.vo.ResultVo> {
      public returnPointAndCash() {
        super("returnPointAndCash");
      }

      public returnPointAndCash_args getEmptyArgsInstance() {
        return new returnPointAndCash_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            returnPointAndCash_result result = new returnPointAndCash_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            returnPointAndCash_result result = new returnPointAndCash_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, returnPointAndCash_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.returnPointAndCash(args.paymentId,resultHandler);
      }
    }

  }

  public static class queryExceptionPaymentByPage_args implements org.apache.thrift.TBase<queryExceptionPaymentByPage_args, queryExceptionPaymentByPage_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryExceptionPaymentByPage_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryExceptionPaymentByPage_args");

    private static final org.apache.thrift.protocol.TField CONDITION_FIELD_DESC = new org.apache.thrift.protocol.TField("condition", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryExceptionPaymentByPage_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryExceptionPaymentByPage_argsTupleSchemeFactory());
    }

    public BossQueryConditionVo condition; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CONDITION((short)1, "condition");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CONDITION
            return CONDITION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CONDITION, new org.apache.thrift.meta_data.FieldMetaData("condition", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BossQueryConditionVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryExceptionPaymentByPage_args.class, metaDataMap);
    }

    public queryExceptionPaymentByPage_args() {
    }

    public queryExceptionPaymentByPage_args(
      BossQueryConditionVo condition)
    {
      this();
      this.condition = condition;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryExceptionPaymentByPage_args(queryExceptionPaymentByPage_args other) {
      if (other.isSetCondition()) {
        this.condition = new BossQueryConditionVo(other.condition);
      }
    }

    public queryExceptionPaymentByPage_args deepCopy() {
      return new queryExceptionPaymentByPage_args(this);
    }

    @Override
    public void clear() {
      this.condition = null;
    }

    public BossQueryConditionVo getCondition() {
      return this.condition;
    }

    public queryExceptionPaymentByPage_args setCondition(BossQueryConditionVo condition) {
      this.condition = condition;
      return this;
    }

    public void unsetCondition() {
      this.condition = null;
    }

    /** Returns true if field condition is set (has been assigned a value) and false otherwise */
    public boolean isSetCondition() {
      return this.condition != null;
    }

    public void setConditionIsSet(boolean value) {
      if (!value) {
        this.condition = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CONDITION:
        if (value == null) {
          unsetCondition();
        } else {
          setCondition((BossQueryConditionVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CONDITION:
        return getCondition();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CONDITION:
        return isSetCondition();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryExceptionPaymentByPage_args)
        return this.equals((queryExceptionPaymentByPage_args)that);
      return false;
    }

    public boolean equals(queryExceptionPaymentByPage_args that) {
      if (that == null)
        return false;

      boolean this_present_condition = true && this.isSetCondition();
      boolean that_present_condition = true && that.isSetCondition();
      if (this_present_condition || that_present_condition) {
        if (!(this_present_condition && that_present_condition))
          return false;
        if (!this.condition.equals(that.condition))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_condition = true && (isSetCondition());
      list.add(present_condition);
      if (present_condition)
        list.add(condition);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryExceptionPaymentByPage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCondition()).compareTo(other.isSetCondition());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCondition()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.condition, other.condition);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryExceptionPaymentByPage_args(");
      boolean first = true;

      sb.append("condition:");
      if (this.condition == null) {
        sb.append("null");
      } else {
        sb.append(this.condition);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (condition != null) {
        condition.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryExceptionPaymentByPage_argsStandardSchemeFactory implements SchemeFactory {
      public queryExceptionPaymentByPage_argsStandardScheme getScheme() {
        return new queryExceptionPaymentByPage_argsStandardScheme();
      }
    }

    private static class queryExceptionPaymentByPage_argsStandardScheme extends StandardScheme<queryExceptionPaymentByPage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryExceptionPaymentByPage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CONDITION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.condition = new BossQueryConditionVo();
                struct.condition.read(iprot);
                struct.setConditionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryExceptionPaymentByPage_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.condition != null) {
          oprot.writeFieldBegin(CONDITION_FIELD_DESC);
          struct.condition.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryExceptionPaymentByPage_argsTupleSchemeFactory implements SchemeFactory {
      public queryExceptionPaymentByPage_argsTupleScheme getScheme() {
        return new queryExceptionPaymentByPage_argsTupleScheme();
      }
    }

    private static class queryExceptionPaymentByPage_argsTupleScheme extends TupleScheme<queryExceptionPaymentByPage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryExceptionPaymentByPage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCondition()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCondition()) {
          struct.condition.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryExceptionPaymentByPage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.condition = new BossQueryConditionVo();
          struct.condition.read(iprot);
          struct.setConditionIsSet(true);
        }
      }
    }

  }

  public static class queryExceptionPaymentByPage_result implements org.apache.thrift.TBase<queryExceptionPaymentByPage_result, queryExceptionPaymentByPage_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryExceptionPaymentByPage_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryExceptionPaymentByPage_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryExceptionPaymentByPage_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryExceptionPaymentByPage_resultTupleSchemeFactory());
    }

    public BossPaymentPage success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BossPaymentPage.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryExceptionPaymentByPage_result.class, metaDataMap);
    }

    public queryExceptionPaymentByPage_result() {
    }

    public queryExceptionPaymentByPage_result(
      BossPaymentPage success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryExceptionPaymentByPage_result(queryExceptionPaymentByPage_result other) {
      if (other.isSetSuccess()) {
        this.success = new BossPaymentPage(other.success);
      }
    }

    public queryExceptionPaymentByPage_result deepCopy() {
      return new queryExceptionPaymentByPage_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public BossPaymentPage getSuccess() {
      return this.success;
    }

    public queryExceptionPaymentByPage_result setSuccess(BossPaymentPage success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((BossPaymentPage)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryExceptionPaymentByPage_result)
        return this.equals((queryExceptionPaymentByPage_result)that);
      return false;
    }

    public boolean equals(queryExceptionPaymentByPage_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryExceptionPaymentByPage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryExceptionPaymentByPage_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryExceptionPaymentByPage_resultStandardSchemeFactory implements SchemeFactory {
      public queryExceptionPaymentByPage_resultStandardScheme getScheme() {
        return new queryExceptionPaymentByPage_resultStandardScheme();
      }
    }

    private static class queryExceptionPaymentByPage_resultStandardScheme extends StandardScheme<queryExceptionPaymentByPage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryExceptionPaymentByPage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new BossPaymentPage();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryExceptionPaymentByPage_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryExceptionPaymentByPage_resultTupleSchemeFactory implements SchemeFactory {
      public queryExceptionPaymentByPage_resultTupleScheme getScheme() {
        return new queryExceptionPaymentByPage_resultTupleScheme();
      }
    }

    private static class queryExceptionPaymentByPage_resultTupleScheme extends TupleScheme<queryExceptionPaymentByPage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryExceptionPaymentByPage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryExceptionPaymentByPage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new BossPaymentPage();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryOfSettleDetial_args implements org.apache.thrift.TBase<queryOfSettleDetial_args, queryOfSettleDetial_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryOfSettleDetial_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryOfSettleDetial_args");

    private static final org.apache.thrift.protocol.TField PAYMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("paymentId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryOfSettleDetial_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryOfSettleDetial_argsTupleSchemeFactory());
    }

    public String paymentId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PAYMENT_ID((short)1, "paymentId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PAYMENT_ID
            return PAYMENT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PAYMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("paymentId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryOfSettleDetial_args.class, metaDataMap);
    }

    public queryOfSettleDetial_args() {
    }

    public queryOfSettleDetial_args(
      String paymentId)
    {
      this();
      this.paymentId = paymentId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryOfSettleDetial_args(queryOfSettleDetial_args other) {
      if (other.isSetPaymentId()) {
        this.paymentId = other.paymentId;
      }
    }

    public queryOfSettleDetial_args deepCopy() {
      return new queryOfSettleDetial_args(this);
    }

    @Override
    public void clear() {
      this.paymentId = null;
    }

    public String getPaymentId() {
      return this.paymentId;
    }

    public queryOfSettleDetial_args setPaymentId(String paymentId) {
      this.paymentId = paymentId;
      return this;
    }

    public void unsetPaymentId() {
      this.paymentId = null;
    }

    /** Returns true if field paymentId is set (has been assigned a value) and false otherwise */
    public boolean isSetPaymentId() {
      return this.paymentId != null;
    }

    public void setPaymentIdIsSet(boolean value) {
      if (!value) {
        this.paymentId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PAYMENT_ID:
        if (value == null) {
          unsetPaymentId();
        } else {
          setPaymentId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PAYMENT_ID:
        return getPaymentId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PAYMENT_ID:
        return isSetPaymentId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryOfSettleDetial_args)
        return this.equals((queryOfSettleDetial_args)that);
      return false;
    }

    public boolean equals(queryOfSettleDetial_args that) {
      if (that == null)
        return false;

      boolean this_present_paymentId = true && this.isSetPaymentId();
      boolean that_present_paymentId = true && that.isSetPaymentId();
      if (this_present_paymentId || that_present_paymentId) {
        if (!(this_present_paymentId && that_present_paymentId))
          return false;
        if (!this.paymentId.equals(that.paymentId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_paymentId = true && (isSetPaymentId());
      list.add(present_paymentId);
      if (present_paymentId)
        list.add(paymentId);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryOfSettleDetial_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPaymentId()).compareTo(other.isSetPaymentId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPaymentId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paymentId, other.paymentId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryOfSettleDetial_args(");
      boolean first = true;

      sb.append("paymentId:");
      if (this.paymentId == null) {
        sb.append("null");
      } else {
        sb.append(this.paymentId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryOfSettleDetial_argsStandardSchemeFactory implements SchemeFactory {
      public queryOfSettleDetial_argsStandardScheme getScheme() {
        return new queryOfSettleDetial_argsStandardScheme();
      }
    }

    private static class queryOfSettleDetial_argsStandardScheme extends StandardScheme<queryOfSettleDetial_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryOfSettleDetial_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PAYMENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.paymentId = iprot.readString();
                struct.setPaymentIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryOfSettleDetial_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.paymentId != null) {
          oprot.writeFieldBegin(PAYMENT_ID_FIELD_DESC);
          oprot.writeString(struct.paymentId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryOfSettleDetial_argsTupleSchemeFactory implements SchemeFactory {
      public queryOfSettleDetial_argsTupleScheme getScheme() {
        return new queryOfSettleDetial_argsTupleScheme();
      }
    }

    private static class queryOfSettleDetial_argsTupleScheme extends TupleScheme<queryOfSettleDetial_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryOfSettleDetial_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPaymentId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPaymentId()) {
          oprot.writeString(struct.paymentId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryOfSettleDetial_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.paymentId = iprot.readString();
          struct.setPaymentIdIsSet(true);
        }
      }
    }

  }

  public static class queryOfSettleDetial_result implements org.apache.thrift.TBase<queryOfSettleDetial_result, queryOfSettleDetial_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryOfSettleDetial_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryOfSettleDetial_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryOfSettleDetial_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryOfSettleDetial_resultTupleSchemeFactory());
    }

    public BossPaymentDetialVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BossPaymentDetialVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryOfSettleDetial_result.class, metaDataMap);
    }

    public queryOfSettleDetial_result() {
    }

    public queryOfSettleDetial_result(
      BossPaymentDetialVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryOfSettleDetial_result(queryOfSettleDetial_result other) {
      if (other.isSetSuccess()) {
        this.success = new BossPaymentDetialVo(other.success);
      }
    }

    public queryOfSettleDetial_result deepCopy() {
      return new queryOfSettleDetial_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public BossPaymentDetialVo getSuccess() {
      return this.success;
    }

    public queryOfSettleDetial_result setSuccess(BossPaymentDetialVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((BossPaymentDetialVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryOfSettleDetial_result)
        return this.equals((queryOfSettleDetial_result)that);
      return false;
    }

    public boolean equals(queryOfSettleDetial_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryOfSettleDetial_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryOfSettleDetial_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryOfSettleDetial_resultStandardSchemeFactory implements SchemeFactory {
      public queryOfSettleDetial_resultStandardScheme getScheme() {
        return new queryOfSettleDetial_resultStandardScheme();
      }
    }

    private static class queryOfSettleDetial_resultStandardScheme extends StandardScheme<queryOfSettleDetial_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryOfSettleDetial_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new BossPaymentDetialVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryOfSettleDetial_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryOfSettleDetial_resultTupleSchemeFactory implements SchemeFactory {
      public queryOfSettleDetial_resultTupleScheme getScheme() {
        return new queryOfSettleDetial_resultTupleScheme();
      }
    }

    private static class queryOfSettleDetial_resultTupleScheme extends TupleScheme<queryOfSettleDetial_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryOfSettleDetial_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryOfSettleDetial_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new BossPaymentDetialVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryOfPaymentRefundPointDetial_args implements org.apache.thrift.TBase<queryOfPaymentRefundPointDetial_args, queryOfPaymentRefundPointDetial_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryOfPaymentRefundPointDetial_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryOfPaymentRefundPointDetial_args");

    private static final org.apache.thrift.protocol.TField PAYMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("paymentId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryOfPaymentRefundPointDetial_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryOfPaymentRefundPointDetial_argsTupleSchemeFactory());
    }

    public String paymentId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PAYMENT_ID((short)1, "paymentId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PAYMENT_ID
            return PAYMENT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PAYMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("paymentId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryOfPaymentRefundPointDetial_args.class, metaDataMap);
    }

    public queryOfPaymentRefundPointDetial_args() {
    }

    public queryOfPaymentRefundPointDetial_args(
      String paymentId)
    {
      this();
      this.paymentId = paymentId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryOfPaymentRefundPointDetial_args(queryOfPaymentRefundPointDetial_args other) {
      if (other.isSetPaymentId()) {
        this.paymentId = other.paymentId;
      }
    }

    public queryOfPaymentRefundPointDetial_args deepCopy() {
      return new queryOfPaymentRefundPointDetial_args(this);
    }

    @Override
    public void clear() {
      this.paymentId = null;
    }

    public String getPaymentId() {
      return this.paymentId;
    }

    public queryOfPaymentRefundPointDetial_args setPaymentId(String paymentId) {
      this.paymentId = paymentId;
      return this;
    }

    public void unsetPaymentId() {
      this.paymentId = null;
    }

    /** Returns true if field paymentId is set (has been assigned a value) and false otherwise */
    public boolean isSetPaymentId() {
      return this.paymentId != null;
    }

    public void setPaymentIdIsSet(boolean value) {
      if (!value) {
        this.paymentId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PAYMENT_ID:
        if (value == null) {
          unsetPaymentId();
        } else {
          setPaymentId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PAYMENT_ID:
        return getPaymentId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PAYMENT_ID:
        return isSetPaymentId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryOfPaymentRefundPointDetial_args)
        return this.equals((queryOfPaymentRefundPointDetial_args)that);
      return false;
    }

    public boolean equals(queryOfPaymentRefundPointDetial_args that) {
      if (that == null)
        return false;

      boolean this_present_paymentId = true && this.isSetPaymentId();
      boolean that_present_paymentId = true && that.isSetPaymentId();
      if (this_present_paymentId || that_present_paymentId) {
        if (!(this_present_paymentId && that_present_paymentId))
          return false;
        if (!this.paymentId.equals(that.paymentId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_paymentId = true && (isSetPaymentId());
      list.add(present_paymentId);
      if (present_paymentId)
        list.add(paymentId);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryOfPaymentRefundPointDetial_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPaymentId()).compareTo(other.isSetPaymentId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPaymentId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paymentId, other.paymentId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryOfPaymentRefundPointDetial_args(");
      boolean first = true;

      sb.append("paymentId:");
      if (this.paymentId == null) {
        sb.append("null");
      } else {
        sb.append(this.paymentId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryOfPaymentRefundPointDetial_argsStandardSchemeFactory implements SchemeFactory {
      public queryOfPaymentRefundPointDetial_argsStandardScheme getScheme() {
        return new queryOfPaymentRefundPointDetial_argsStandardScheme();
      }
    }

    private static class queryOfPaymentRefundPointDetial_argsStandardScheme extends StandardScheme<queryOfPaymentRefundPointDetial_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryOfPaymentRefundPointDetial_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PAYMENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.paymentId = iprot.readString();
                struct.setPaymentIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryOfPaymentRefundPointDetial_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.paymentId != null) {
          oprot.writeFieldBegin(PAYMENT_ID_FIELD_DESC);
          oprot.writeString(struct.paymentId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryOfPaymentRefundPointDetial_argsTupleSchemeFactory implements SchemeFactory {
      public queryOfPaymentRefundPointDetial_argsTupleScheme getScheme() {
        return new queryOfPaymentRefundPointDetial_argsTupleScheme();
      }
    }

    private static class queryOfPaymentRefundPointDetial_argsTupleScheme extends TupleScheme<queryOfPaymentRefundPointDetial_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryOfPaymentRefundPointDetial_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPaymentId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPaymentId()) {
          oprot.writeString(struct.paymentId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryOfPaymentRefundPointDetial_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.paymentId = iprot.readString();
          struct.setPaymentIdIsSet(true);
        }
      }
    }

  }

  public static class queryOfPaymentRefundPointDetial_result implements org.apache.thrift.TBase<queryOfPaymentRefundPointDetial_result, queryOfPaymentRefundPointDetial_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryOfPaymentRefundPointDetial_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryOfPaymentRefundPointDetial_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryOfPaymentRefundPointDetial_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryOfPaymentRefundPointDetial_resultTupleSchemeFactory());
    }

    public BossPaymentDetialVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BossPaymentDetialVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryOfPaymentRefundPointDetial_result.class, metaDataMap);
    }

    public queryOfPaymentRefundPointDetial_result() {
    }

    public queryOfPaymentRefundPointDetial_result(
      BossPaymentDetialVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryOfPaymentRefundPointDetial_result(queryOfPaymentRefundPointDetial_result other) {
      if (other.isSetSuccess()) {
        this.success = new BossPaymentDetialVo(other.success);
      }
    }

    public queryOfPaymentRefundPointDetial_result deepCopy() {
      return new queryOfPaymentRefundPointDetial_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public BossPaymentDetialVo getSuccess() {
      return this.success;
    }

    public queryOfPaymentRefundPointDetial_result setSuccess(BossPaymentDetialVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((BossPaymentDetialVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryOfPaymentRefundPointDetial_result)
        return this.equals((queryOfPaymentRefundPointDetial_result)that);
      return false;
    }

    public boolean equals(queryOfPaymentRefundPointDetial_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryOfPaymentRefundPointDetial_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryOfPaymentRefundPointDetial_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryOfPaymentRefundPointDetial_resultStandardSchemeFactory implements SchemeFactory {
      public queryOfPaymentRefundPointDetial_resultStandardScheme getScheme() {
        return new queryOfPaymentRefundPointDetial_resultStandardScheme();
      }
    }

    private static class queryOfPaymentRefundPointDetial_resultStandardScheme extends StandardScheme<queryOfPaymentRefundPointDetial_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryOfPaymentRefundPointDetial_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new BossPaymentDetialVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryOfPaymentRefundPointDetial_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryOfPaymentRefundPointDetial_resultTupleSchemeFactory implements SchemeFactory {
      public queryOfPaymentRefundPointDetial_resultTupleScheme getScheme() {
        return new queryOfPaymentRefundPointDetial_resultTupleScheme();
      }
    }

    private static class queryOfPaymentRefundPointDetial_resultTupleScheme extends TupleScheme<queryOfPaymentRefundPointDetial_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryOfPaymentRefundPointDetial_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryOfPaymentRefundPointDetial_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new BossPaymentDetialVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryOfPaymentRefundCashDetial_args implements org.apache.thrift.TBase<queryOfPaymentRefundCashDetial_args, queryOfPaymentRefundCashDetial_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryOfPaymentRefundCashDetial_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryOfPaymentRefundCashDetial_args");

    private static final org.apache.thrift.protocol.TField PAYMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("paymentId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryOfPaymentRefundCashDetial_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryOfPaymentRefundCashDetial_argsTupleSchemeFactory());
    }

    public String paymentId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PAYMENT_ID((short)1, "paymentId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PAYMENT_ID
            return PAYMENT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PAYMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("paymentId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryOfPaymentRefundCashDetial_args.class, metaDataMap);
    }

    public queryOfPaymentRefundCashDetial_args() {
    }

    public queryOfPaymentRefundCashDetial_args(
      String paymentId)
    {
      this();
      this.paymentId = paymentId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryOfPaymentRefundCashDetial_args(queryOfPaymentRefundCashDetial_args other) {
      if (other.isSetPaymentId()) {
        this.paymentId = other.paymentId;
      }
    }

    public queryOfPaymentRefundCashDetial_args deepCopy() {
      return new queryOfPaymentRefundCashDetial_args(this);
    }

    @Override
    public void clear() {
      this.paymentId = null;
    }

    public String getPaymentId() {
      return this.paymentId;
    }

    public queryOfPaymentRefundCashDetial_args setPaymentId(String paymentId) {
      this.paymentId = paymentId;
      return this;
    }

    public void unsetPaymentId() {
      this.paymentId = null;
    }

    /** Returns true if field paymentId is set (has been assigned a value) and false otherwise */
    public boolean isSetPaymentId() {
      return this.paymentId != null;
    }

    public void setPaymentIdIsSet(boolean value) {
      if (!value) {
        this.paymentId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PAYMENT_ID:
        if (value == null) {
          unsetPaymentId();
        } else {
          setPaymentId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PAYMENT_ID:
        return getPaymentId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PAYMENT_ID:
        return isSetPaymentId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryOfPaymentRefundCashDetial_args)
        return this.equals((queryOfPaymentRefundCashDetial_args)that);
      return false;
    }

    public boolean equals(queryOfPaymentRefundCashDetial_args that) {
      if (that == null)
        return false;

      boolean this_present_paymentId = true && this.isSetPaymentId();
      boolean that_present_paymentId = true && that.isSetPaymentId();
      if (this_present_paymentId || that_present_paymentId) {
        if (!(this_present_paymentId && that_present_paymentId))
          return false;
        if (!this.paymentId.equals(that.paymentId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_paymentId = true && (isSetPaymentId());
      list.add(present_paymentId);
      if (present_paymentId)
        list.add(paymentId);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryOfPaymentRefundCashDetial_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPaymentId()).compareTo(other.isSetPaymentId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPaymentId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paymentId, other.paymentId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryOfPaymentRefundCashDetial_args(");
      boolean first = true;

      sb.append("paymentId:");
      if (this.paymentId == null) {
        sb.append("null");
      } else {
        sb.append(this.paymentId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryOfPaymentRefundCashDetial_argsStandardSchemeFactory implements SchemeFactory {
      public queryOfPaymentRefundCashDetial_argsStandardScheme getScheme() {
        return new queryOfPaymentRefundCashDetial_argsStandardScheme();
      }
    }

    private static class queryOfPaymentRefundCashDetial_argsStandardScheme extends StandardScheme<queryOfPaymentRefundCashDetial_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryOfPaymentRefundCashDetial_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PAYMENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.paymentId = iprot.readString();
                struct.setPaymentIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryOfPaymentRefundCashDetial_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.paymentId != null) {
          oprot.writeFieldBegin(PAYMENT_ID_FIELD_DESC);
          oprot.writeString(struct.paymentId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryOfPaymentRefundCashDetial_argsTupleSchemeFactory implements SchemeFactory {
      public queryOfPaymentRefundCashDetial_argsTupleScheme getScheme() {
        return new queryOfPaymentRefundCashDetial_argsTupleScheme();
      }
    }

    private static class queryOfPaymentRefundCashDetial_argsTupleScheme extends TupleScheme<queryOfPaymentRefundCashDetial_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryOfPaymentRefundCashDetial_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPaymentId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPaymentId()) {
          oprot.writeString(struct.paymentId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryOfPaymentRefundCashDetial_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.paymentId = iprot.readString();
          struct.setPaymentIdIsSet(true);
        }
      }
    }

  }

  public static class queryOfPaymentRefundCashDetial_result implements org.apache.thrift.TBase<queryOfPaymentRefundCashDetial_result, queryOfPaymentRefundCashDetial_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryOfPaymentRefundCashDetial_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryOfPaymentRefundCashDetial_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryOfPaymentRefundCashDetial_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryOfPaymentRefundCashDetial_resultTupleSchemeFactory());
    }

    public BossPaymentDetialVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BossPaymentDetialVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryOfPaymentRefundCashDetial_result.class, metaDataMap);
    }

    public queryOfPaymentRefundCashDetial_result() {
    }

    public queryOfPaymentRefundCashDetial_result(
      BossPaymentDetialVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryOfPaymentRefundCashDetial_result(queryOfPaymentRefundCashDetial_result other) {
      if (other.isSetSuccess()) {
        this.success = new BossPaymentDetialVo(other.success);
      }
    }

    public queryOfPaymentRefundCashDetial_result deepCopy() {
      return new queryOfPaymentRefundCashDetial_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public BossPaymentDetialVo getSuccess() {
      return this.success;
    }

    public queryOfPaymentRefundCashDetial_result setSuccess(BossPaymentDetialVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((BossPaymentDetialVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryOfPaymentRefundCashDetial_result)
        return this.equals((queryOfPaymentRefundCashDetial_result)that);
      return false;
    }

    public boolean equals(queryOfPaymentRefundCashDetial_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryOfPaymentRefundCashDetial_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryOfPaymentRefundCashDetial_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryOfPaymentRefundCashDetial_resultStandardSchemeFactory implements SchemeFactory {
      public queryOfPaymentRefundCashDetial_resultStandardScheme getScheme() {
        return new queryOfPaymentRefundCashDetial_resultStandardScheme();
      }
    }

    private static class queryOfPaymentRefundCashDetial_resultStandardScheme extends StandardScheme<queryOfPaymentRefundCashDetial_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryOfPaymentRefundCashDetial_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new BossPaymentDetialVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryOfPaymentRefundCashDetial_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryOfPaymentRefundCashDetial_resultTupleSchemeFactory implements SchemeFactory {
      public queryOfPaymentRefundCashDetial_resultTupleScheme getScheme() {
        return new queryOfPaymentRefundCashDetial_resultTupleScheme();
      }
    }

    private static class queryOfPaymentRefundCashDetial_resultTupleScheme extends TupleScheme<queryOfPaymentRefundCashDetial_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryOfPaymentRefundCashDetial_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryOfPaymentRefundCashDetial_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new BossPaymentDetialVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryOfRefundDetial_args implements org.apache.thrift.TBase<queryOfRefundDetial_args, queryOfRefundDetial_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryOfRefundDetial_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryOfRefundDetial_args");

    private static final org.apache.thrift.protocol.TField PAYMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("paymentId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryOfRefundDetial_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryOfRefundDetial_argsTupleSchemeFactory());
    }

    public String paymentId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PAYMENT_ID((short)1, "paymentId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PAYMENT_ID
            return PAYMENT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PAYMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("paymentId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryOfRefundDetial_args.class, metaDataMap);
    }

    public queryOfRefundDetial_args() {
    }

    public queryOfRefundDetial_args(
      String paymentId)
    {
      this();
      this.paymentId = paymentId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryOfRefundDetial_args(queryOfRefundDetial_args other) {
      if (other.isSetPaymentId()) {
        this.paymentId = other.paymentId;
      }
    }

    public queryOfRefundDetial_args deepCopy() {
      return new queryOfRefundDetial_args(this);
    }

    @Override
    public void clear() {
      this.paymentId = null;
    }

    public String getPaymentId() {
      return this.paymentId;
    }

    public queryOfRefundDetial_args setPaymentId(String paymentId) {
      this.paymentId = paymentId;
      return this;
    }

    public void unsetPaymentId() {
      this.paymentId = null;
    }

    /** Returns true if field paymentId is set (has been assigned a value) and false otherwise */
    public boolean isSetPaymentId() {
      return this.paymentId != null;
    }

    public void setPaymentIdIsSet(boolean value) {
      if (!value) {
        this.paymentId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PAYMENT_ID:
        if (value == null) {
          unsetPaymentId();
        } else {
          setPaymentId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PAYMENT_ID:
        return getPaymentId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PAYMENT_ID:
        return isSetPaymentId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryOfRefundDetial_args)
        return this.equals((queryOfRefundDetial_args)that);
      return false;
    }

    public boolean equals(queryOfRefundDetial_args that) {
      if (that == null)
        return false;

      boolean this_present_paymentId = true && this.isSetPaymentId();
      boolean that_present_paymentId = true && that.isSetPaymentId();
      if (this_present_paymentId || that_present_paymentId) {
        if (!(this_present_paymentId && that_present_paymentId))
          return false;
        if (!this.paymentId.equals(that.paymentId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_paymentId = true && (isSetPaymentId());
      list.add(present_paymentId);
      if (present_paymentId)
        list.add(paymentId);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryOfRefundDetial_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPaymentId()).compareTo(other.isSetPaymentId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPaymentId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paymentId, other.paymentId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryOfRefundDetial_args(");
      boolean first = true;

      sb.append("paymentId:");
      if (this.paymentId == null) {
        sb.append("null");
      } else {
        sb.append(this.paymentId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryOfRefundDetial_argsStandardSchemeFactory implements SchemeFactory {
      public queryOfRefundDetial_argsStandardScheme getScheme() {
        return new queryOfRefundDetial_argsStandardScheme();
      }
    }

    private static class queryOfRefundDetial_argsStandardScheme extends StandardScheme<queryOfRefundDetial_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryOfRefundDetial_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PAYMENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.paymentId = iprot.readString();
                struct.setPaymentIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryOfRefundDetial_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.paymentId != null) {
          oprot.writeFieldBegin(PAYMENT_ID_FIELD_DESC);
          oprot.writeString(struct.paymentId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryOfRefundDetial_argsTupleSchemeFactory implements SchemeFactory {
      public queryOfRefundDetial_argsTupleScheme getScheme() {
        return new queryOfRefundDetial_argsTupleScheme();
      }
    }

    private static class queryOfRefundDetial_argsTupleScheme extends TupleScheme<queryOfRefundDetial_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryOfRefundDetial_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPaymentId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPaymentId()) {
          oprot.writeString(struct.paymentId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryOfRefundDetial_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.paymentId = iprot.readString();
          struct.setPaymentIdIsSet(true);
        }
      }
    }

  }

  public static class queryOfRefundDetial_result implements org.apache.thrift.TBase<queryOfRefundDetial_result, queryOfRefundDetial_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryOfRefundDetial_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryOfRefundDetial_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryOfRefundDetial_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryOfRefundDetial_resultTupleSchemeFactory());
    }

    public BossPaymentDetialVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BossPaymentDetialVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryOfRefundDetial_result.class, metaDataMap);
    }

    public queryOfRefundDetial_result() {
    }

    public queryOfRefundDetial_result(
      BossPaymentDetialVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryOfRefundDetial_result(queryOfRefundDetial_result other) {
      if (other.isSetSuccess()) {
        this.success = new BossPaymentDetialVo(other.success);
      }
    }

    public queryOfRefundDetial_result deepCopy() {
      return new queryOfRefundDetial_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public BossPaymentDetialVo getSuccess() {
      return this.success;
    }

    public queryOfRefundDetial_result setSuccess(BossPaymentDetialVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((BossPaymentDetialVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryOfRefundDetial_result)
        return this.equals((queryOfRefundDetial_result)that);
      return false;
    }

    public boolean equals(queryOfRefundDetial_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryOfRefundDetial_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryOfRefundDetial_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryOfRefundDetial_resultStandardSchemeFactory implements SchemeFactory {
      public queryOfRefundDetial_resultStandardScheme getScheme() {
        return new queryOfRefundDetial_resultStandardScheme();
      }
    }

    private static class queryOfRefundDetial_resultStandardScheme extends StandardScheme<queryOfRefundDetial_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryOfRefundDetial_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new BossPaymentDetialVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryOfRefundDetial_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryOfRefundDetial_resultTupleSchemeFactory implements SchemeFactory {
      public queryOfRefundDetial_resultTupleScheme getScheme() {
        return new queryOfRefundDetial_resultTupleScheme();
      }
    }

    private static class queryOfRefundDetial_resultTupleScheme extends TupleScheme<queryOfRefundDetial_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryOfRefundDetial_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryOfRefundDetial_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new BossPaymentDetialVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class retryOfSettle_args implements org.apache.thrift.TBase<retryOfSettle_args, retryOfSettle_args._Fields>, java.io.Serializable, Cloneable, Comparable<retryOfSettle_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("retryOfSettle_args");

    private static final org.apache.thrift.protocol.TField PAYMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("paymentId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new retryOfSettle_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new retryOfSettle_argsTupleSchemeFactory());
    }

    public String paymentId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PAYMENT_ID((short)1, "paymentId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PAYMENT_ID
            return PAYMENT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PAYMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("paymentId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(retryOfSettle_args.class, metaDataMap);
    }

    public retryOfSettle_args() {
    }

    public retryOfSettle_args(
      String paymentId)
    {
      this();
      this.paymentId = paymentId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public retryOfSettle_args(retryOfSettle_args other) {
      if (other.isSetPaymentId()) {
        this.paymentId = other.paymentId;
      }
    }

    public retryOfSettle_args deepCopy() {
      return new retryOfSettle_args(this);
    }

    @Override
    public void clear() {
      this.paymentId = null;
    }

    public String getPaymentId() {
      return this.paymentId;
    }

    public retryOfSettle_args setPaymentId(String paymentId) {
      this.paymentId = paymentId;
      return this;
    }

    public void unsetPaymentId() {
      this.paymentId = null;
    }

    /** Returns true if field paymentId is set (has been assigned a value) and false otherwise */
    public boolean isSetPaymentId() {
      return this.paymentId != null;
    }

    public void setPaymentIdIsSet(boolean value) {
      if (!value) {
        this.paymentId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PAYMENT_ID:
        if (value == null) {
          unsetPaymentId();
        } else {
          setPaymentId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PAYMENT_ID:
        return getPaymentId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PAYMENT_ID:
        return isSetPaymentId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof retryOfSettle_args)
        return this.equals((retryOfSettle_args)that);
      return false;
    }

    public boolean equals(retryOfSettle_args that) {
      if (that == null)
        return false;

      boolean this_present_paymentId = true && this.isSetPaymentId();
      boolean that_present_paymentId = true && that.isSetPaymentId();
      if (this_present_paymentId || that_present_paymentId) {
        if (!(this_present_paymentId && that_present_paymentId))
          return false;
        if (!this.paymentId.equals(that.paymentId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_paymentId = true && (isSetPaymentId());
      list.add(present_paymentId);
      if (present_paymentId)
        list.add(paymentId);

      return list.hashCode();
    }

    @Override
    public int compareTo(retryOfSettle_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPaymentId()).compareTo(other.isSetPaymentId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPaymentId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paymentId, other.paymentId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("retryOfSettle_args(");
      boolean first = true;

      sb.append("paymentId:");
      if (this.paymentId == null) {
        sb.append("null");
      } else {
        sb.append(this.paymentId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class retryOfSettle_argsStandardSchemeFactory implements SchemeFactory {
      public retryOfSettle_argsStandardScheme getScheme() {
        return new retryOfSettle_argsStandardScheme();
      }
    }

    private static class retryOfSettle_argsStandardScheme extends StandardScheme<retryOfSettle_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, retryOfSettle_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PAYMENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.paymentId = iprot.readString();
                struct.setPaymentIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, retryOfSettle_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.paymentId != null) {
          oprot.writeFieldBegin(PAYMENT_ID_FIELD_DESC);
          oprot.writeString(struct.paymentId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class retryOfSettle_argsTupleSchemeFactory implements SchemeFactory {
      public retryOfSettle_argsTupleScheme getScheme() {
        return new retryOfSettle_argsTupleScheme();
      }
    }

    private static class retryOfSettle_argsTupleScheme extends TupleScheme<retryOfSettle_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, retryOfSettle_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPaymentId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPaymentId()) {
          oprot.writeString(struct.paymentId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, retryOfSettle_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.paymentId = iprot.readString();
          struct.setPaymentIdIsSet(true);
        }
      }
    }

  }

  public static class retryOfSettle_result implements org.apache.thrift.TBase<retryOfSettle_result, retryOfSettle_result._Fields>, java.io.Serializable, Cloneable, Comparable<retryOfSettle_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("retryOfSettle_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new retryOfSettle_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new retryOfSettle_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(retryOfSettle_result.class, metaDataMap);
    }

    public retryOfSettle_result() {
    }

    public retryOfSettle_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public retryOfSettle_result(retryOfSettle_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public retryOfSettle_result deepCopy() {
      return new retryOfSettle_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public retryOfSettle_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof retryOfSettle_result)
        return this.equals((retryOfSettle_result)that);
      return false;
    }

    public boolean equals(retryOfSettle_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(retryOfSettle_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("retryOfSettle_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class retryOfSettle_resultStandardSchemeFactory implements SchemeFactory {
      public retryOfSettle_resultStandardScheme getScheme() {
        return new retryOfSettle_resultStandardScheme();
      }
    }

    private static class retryOfSettle_resultStandardScheme extends StandardScheme<retryOfSettle_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, retryOfSettle_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, retryOfSettle_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class retryOfSettle_resultTupleSchemeFactory implements SchemeFactory {
      public retryOfSettle_resultTupleScheme getScheme() {
        return new retryOfSettle_resultTupleScheme();
      }
    }

    private static class retryOfSettle_resultTupleScheme extends TupleScheme<retryOfSettle_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, retryOfSettle_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, retryOfSettle_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class retryOfReturn_args implements org.apache.thrift.TBase<retryOfReturn_args, retryOfReturn_args._Fields>, java.io.Serializable, Cloneable, Comparable<retryOfReturn_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("retryOfReturn_args");

    private static final org.apache.thrift.protocol.TField PAYMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("paymentId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new retryOfReturn_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new retryOfReturn_argsTupleSchemeFactory());
    }

    public String paymentId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PAYMENT_ID((short)1, "paymentId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PAYMENT_ID
            return PAYMENT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PAYMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("paymentId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(retryOfReturn_args.class, metaDataMap);
    }

    public retryOfReturn_args() {
    }

    public retryOfReturn_args(
      String paymentId)
    {
      this();
      this.paymentId = paymentId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public retryOfReturn_args(retryOfReturn_args other) {
      if (other.isSetPaymentId()) {
        this.paymentId = other.paymentId;
      }
    }

    public retryOfReturn_args deepCopy() {
      return new retryOfReturn_args(this);
    }

    @Override
    public void clear() {
      this.paymentId = null;
    }

    public String getPaymentId() {
      return this.paymentId;
    }

    public retryOfReturn_args setPaymentId(String paymentId) {
      this.paymentId = paymentId;
      return this;
    }

    public void unsetPaymentId() {
      this.paymentId = null;
    }

    /** Returns true if field paymentId is set (has been assigned a value) and false otherwise */
    public boolean isSetPaymentId() {
      return this.paymentId != null;
    }

    public void setPaymentIdIsSet(boolean value) {
      if (!value) {
        this.paymentId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PAYMENT_ID:
        if (value == null) {
          unsetPaymentId();
        } else {
          setPaymentId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PAYMENT_ID:
        return getPaymentId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PAYMENT_ID:
        return isSetPaymentId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof retryOfReturn_args)
        return this.equals((retryOfReturn_args)that);
      return false;
    }

    public boolean equals(retryOfReturn_args that) {
      if (that == null)
        return false;

      boolean this_present_paymentId = true && this.isSetPaymentId();
      boolean that_present_paymentId = true && that.isSetPaymentId();
      if (this_present_paymentId || that_present_paymentId) {
        if (!(this_present_paymentId && that_present_paymentId))
          return false;
        if (!this.paymentId.equals(that.paymentId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_paymentId = true && (isSetPaymentId());
      list.add(present_paymentId);
      if (present_paymentId)
        list.add(paymentId);

      return list.hashCode();
    }

    @Override
    public int compareTo(retryOfReturn_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPaymentId()).compareTo(other.isSetPaymentId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPaymentId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paymentId, other.paymentId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("retryOfReturn_args(");
      boolean first = true;

      sb.append("paymentId:");
      if (this.paymentId == null) {
        sb.append("null");
      } else {
        sb.append(this.paymentId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class retryOfReturn_argsStandardSchemeFactory implements SchemeFactory {
      public retryOfReturn_argsStandardScheme getScheme() {
        return new retryOfReturn_argsStandardScheme();
      }
    }

    private static class retryOfReturn_argsStandardScheme extends StandardScheme<retryOfReturn_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, retryOfReturn_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PAYMENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.paymentId = iprot.readString();
                struct.setPaymentIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, retryOfReturn_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.paymentId != null) {
          oprot.writeFieldBegin(PAYMENT_ID_FIELD_DESC);
          oprot.writeString(struct.paymentId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class retryOfReturn_argsTupleSchemeFactory implements SchemeFactory {
      public retryOfReturn_argsTupleScheme getScheme() {
        return new retryOfReturn_argsTupleScheme();
      }
    }

    private static class retryOfReturn_argsTupleScheme extends TupleScheme<retryOfReturn_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, retryOfReturn_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPaymentId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPaymentId()) {
          oprot.writeString(struct.paymentId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, retryOfReturn_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.paymentId = iprot.readString();
          struct.setPaymentIdIsSet(true);
        }
      }
    }

  }

  public static class retryOfReturn_result implements org.apache.thrift.TBase<retryOfReturn_result, retryOfReturn_result._Fields>, java.io.Serializable, Cloneable, Comparable<retryOfReturn_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("retryOfReturn_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new retryOfReturn_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new retryOfReturn_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(retryOfReturn_result.class, metaDataMap);
    }

    public retryOfReturn_result() {
    }

    public retryOfReturn_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public retryOfReturn_result(retryOfReturn_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public retryOfReturn_result deepCopy() {
      return new retryOfReturn_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public retryOfReturn_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof retryOfReturn_result)
        return this.equals((retryOfReturn_result)that);
      return false;
    }

    public boolean equals(retryOfReturn_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(retryOfReturn_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("retryOfReturn_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class retryOfReturn_resultStandardSchemeFactory implements SchemeFactory {
      public retryOfReturn_resultStandardScheme getScheme() {
        return new retryOfReturn_resultStandardScheme();
      }
    }

    private static class retryOfReturn_resultStandardScheme extends StandardScheme<retryOfReturn_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, retryOfReturn_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, retryOfReturn_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class retryOfReturn_resultTupleSchemeFactory implements SchemeFactory {
      public retryOfReturn_resultTupleScheme getScheme() {
        return new retryOfReturn_resultTupleScheme();
      }
    }

    private static class retryOfReturn_resultTupleScheme extends TupleScheme<retryOfReturn_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, retryOfReturn_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, retryOfReturn_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class returnCash_args implements org.apache.thrift.TBase<returnCash_args, returnCash_args._Fields>, java.io.Serializable, Cloneable, Comparable<returnCash_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("returnCash_args");

    private static final org.apache.thrift.protocol.TField PAYMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("paymentId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new returnCash_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new returnCash_argsTupleSchemeFactory());
    }

    public String paymentId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PAYMENT_ID((short)1, "paymentId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PAYMENT_ID
            return PAYMENT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PAYMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("paymentId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(returnCash_args.class, metaDataMap);
    }

    public returnCash_args() {
    }

    public returnCash_args(
      String paymentId)
    {
      this();
      this.paymentId = paymentId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public returnCash_args(returnCash_args other) {
      if (other.isSetPaymentId()) {
        this.paymentId = other.paymentId;
      }
    }

    public returnCash_args deepCopy() {
      return new returnCash_args(this);
    }

    @Override
    public void clear() {
      this.paymentId = null;
    }

    public String getPaymentId() {
      return this.paymentId;
    }

    public returnCash_args setPaymentId(String paymentId) {
      this.paymentId = paymentId;
      return this;
    }

    public void unsetPaymentId() {
      this.paymentId = null;
    }

    /** Returns true if field paymentId is set (has been assigned a value) and false otherwise */
    public boolean isSetPaymentId() {
      return this.paymentId != null;
    }

    public void setPaymentIdIsSet(boolean value) {
      if (!value) {
        this.paymentId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PAYMENT_ID:
        if (value == null) {
          unsetPaymentId();
        } else {
          setPaymentId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PAYMENT_ID:
        return getPaymentId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PAYMENT_ID:
        return isSetPaymentId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof returnCash_args)
        return this.equals((returnCash_args)that);
      return false;
    }

    public boolean equals(returnCash_args that) {
      if (that == null)
        return false;

      boolean this_present_paymentId = true && this.isSetPaymentId();
      boolean that_present_paymentId = true && that.isSetPaymentId();
      if (this_present_paymentId || that_present_paymentId) {
        if (!(this_present_paymentId && that_present_paymentId))
          return false;
        if (!this.paymentId.equals(that.paymentId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_paymentId = true && (isSetPaymentId());
      list.add(present_paymentId);
      if (present_paymentId)
        list.add(paymentId);

      return list.hashCode();
    }

    @Override
    public int compareTo(returnCash_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPaymentId()).compareTo(other.isSetPaymentId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPaymentId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paymentId, other.paymentId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("returnCash_args(");
      boolean first = true;

      sb.append("paymentId:");
      if (this.paymentId == null) {
        sb.append("null");
      } else {
        sb.append(this.paymentId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class returnCash_argsStandardSchemeFactory implements SchemeFactory {
      public returnCash_argsStandardScheme getScheme() {
        return new returnCash_argsStandardScheme();
      }
    }

    private static class returnCash_argsStandardScheme extends StandardScheme<returnCash_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, returnCash_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PAYMENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.paymentId = iprot.readString();
                struct.setPaymentIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, returnCash_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.paymentId != null) {
          oprot.writeFieldBegin(PAYMENT_ID_FIELD_DESC);
          oprot.writeString(struct.paymentId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class returnCash_argsTupleSchemeFactory implements SchemeFactory {
      public returnCash_argsTupleScheme getScheme() {
        return new returnCash_argsTupleScheme();
      }
    }

    private static class returnCash_argsTupleScheme extends TupleScheme<returnCash_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, returnCash_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPaymentId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPaymentId()) {
          oprot.writeString(struct.paymentId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, returnCash_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.paymentId = iprot.readString();
          struct.setPaymentIdIsSet(true);
        }
      }
    }

  }

  public static class returnCash_result implements org.apache.thrift.TBase<returnCash_result, returnCash_result._Fields>, java.io.Serializable, Cloneable, Comparable<returnCash_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("returnCash_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new returnCash_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new returnCash_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(returnCash_result.class, metaDataMap);
    }

    public returnCash_result() {
    }

    public returnCash_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public returnCash_result(returnCash_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public returnCash_result deepCopy() {
      return new returnCash_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public returnCash_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof returnCash_result)
        return this.equals((returnCash_result)that);
      return false;
    }

    public boolean equals(returnCash_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(returnCash_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("returnCash_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class returnCash_resultStandardSchemeFactory implements SchemeFactory {
      public returnCash_resultStandardScheme getScheme() {
        return new returnCash_resultStandardScheme();
      }
    }

    private static class returnCash_resultStandardScheme extends StandardScheme<returnCash_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, returnCash_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, returnCash_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class returnCash_resultTupleSchemeFactory implements SchemeFactory {
      public returnCash_resultTupleScheme getScheme() {
        return new returnCash_resultTupleScheme();
      }
    }

    private static class returnCash_resultTupleScheme extends TupleScheme<returnCash_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, returnCash_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, returnCash_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class returnPoint_args implements org.apache.thrift.TBase<returnPoint_args, returnPoint_args._Fields>, java.io.Serializable, Cloneable, Comparable<returnPoint_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("returnPoint_args");

    private static final org.apache.thrift.protocol.TField PAYMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("paymentId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new returnPoint_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new returnPoint_argsTupleSchemeFactory());
    }

    public String paymentId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PAYMENT_ID((short)1, "paymentId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PAYMENT_ID
            return PAYMENT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PAYMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("paymentId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(returnPoint_args.class, metaDataMap);
    }

    public returnPoint_args() {
    }

    public returnPoint_args(
      String paymentId)
    {
      this();
      this.paymentId = paymentId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public returnPoint_args(returnPoint_args other) {
      if (other.isSetPaymentId()) {
        this.paymentId = other.paymentId;
      }
    }

    public returnPoint_args deepCopy() {
      return new returnPoint_args(this);
    }

    @Override
    public void clear() {
      this.paymentId = null;
    }

    public String getPaymentId() {
      return this.paymentId;
    }

    public returnPoint_args setPaymentId(String paymentId) {
      this.paymentId = paymentId;
      return this;
    }

    public void unsetPaymentId() {
      this.paymentId = null;
    }

    /** Returns true if field paymentId is set (has been assigned a value) and false otherwise */
    public boolean isSetPaymentId() {
      return this.paymentId != null;
    }

    public void setPaymentIdIsSet(boolean value) {
      if (!value) {
        this.paymentId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PAYMENT_ID:
        if (value == null) {
          unsetPaymentId();
        } else {
          setPaymentId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PAYMENT_ID:
        return getPaymentId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PAYMENT_ID:
        return isSetPaymentId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof returnPoint_args)
        return this.equals((returnPoint_args)that);
      return false;
    }

    public boolean equals(returnPoint_args that) {
      if (that == null)
        return false;

      boolean this_present_paymentId = true && this.isSetPaymentId();
      boolean that_present_paymentId = true && that.isSetPaymentId();
      if (this_present_paymentId || that_present_paymentId) {
        if (!(this_present_paymentId && that_present_paymentId))
          return false;
        if (!this.paymentId.equals(that.paymentId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_paymentId = true && (isSetPaymentId());
      list.add(present_paymentId);
      if (present_paymentId)
        list.add(paymentId);

      return list.hashCode();
    }

    @Override
    public int compareTo(returnPoint_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPaymentId()).compareTo(other.isSetPaymentId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPaymentId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paymentId, other.paymentId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("returnPoint_args(");
      boolean first = true;

      sb.append("paymentId:");
      if (this.paymentId == null) {
        sb.append("null");
      } else {
        sb.append(this.paymentId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class returnPoint_argsStandardSchemeFactory implements SchemeFactory {
      public returnPoint_argsStandardScheme getScheme() {
        return new returnPoint_argsStandardScheme();
      }
    }

    private static class returnPoint_argsStandardScheme extends StandardScheme<returnPoint_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, returnPoint_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PAYMENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.paymentId = iprot.readString();
                struct.setPaymentIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, returnPoint_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.paymentId != null) {
          oprot.writeFieldBegin(PAYMENT_ID_FIELD_DESC);
          oprot.writeString(struct.paymentId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class returnPoint_argsTupleSchemeFactory implements SchemeFactory {
      public returnPoint_argsTupleScheme getScheme() {
        return new returnPoint_argsTupleScheme();
      }
    }

    private static class returnPoint_argsTupleScheme extends TupleScheme<returnPoint_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, returnPoint_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPaymentId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPaymentId()) {
          oprot.writeString(struct.paymentId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, returnPoint_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.paymentId = iprot.readString();
          struct.setPaymentIdIsSet(true);
        }
      }
    }

  }

  public static class returnPoint_result implements org.apache.thrift.TBase<returnPoint_result, returnPoint_result._Fields>, java.io.Serializable, Cloneable, Comparable<returnPoint_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("returnPoint_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new returnPoint_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new returnPoint_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(returnPoint_result.class, metaDataMap);
    }

    public returnPoint_result() {
    }

    public returnPoint_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public returnPoint_result(returnPoint_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public returnPoint_result deepCopy() {
      return new returnPoint_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public returnPoint_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof returnPoint_result)
        return this.equals((returnPoint_result)that);
      return false;
    }

    public boolean equals(returnPoint_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(returnPoint_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("returnPoint_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class returnPoint_resultStandardSchemeFactory implements SchemeFactory {
      public returnPoint_resultStandardScheme getScheme() {
        return new returnPoint_resultStandardScheme();
      }
    }

    private static class returnPoint_resultStandardScheme extends StandardScheme<returnPoint_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, returnPoint_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, returnPoint_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class returnPoint_resultTupleSchemeFactory implements SchemeFactory {
      public returnPoint_resultTupleScheme getScheme() {
        return new returnPoint_resultTupleScheme();
      }
    }

    private static class returnPoint_resultTupleScheme extends TupleScheme<returnPoint_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, returnPoint_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, returnPoint_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class returnPointAndCash_args implements org.apache.thrift.TBase<returnPointAndCash_args, returnPointAndCash_args._Fields>, java.io.Serializable, Cloneable, Comparable<returnPointAndCash_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("returnPointAndCash_args");

    private static final org.apache.thrift.protocol.TField PAYMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("paymentId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new returnPointAndCash_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new returnPointAndCash_argsTupleSchemeFactory());
    }

    public String paymentId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PAYMENT_ID((short)1, "paymentId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PAYMENT_ID
            return PAYMENT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PAYMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("paymentId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(returnPointAndCash_args.class, metaDataMap);
    }

    public returnPointAndCash_args() {
    }

    public returnPointAndCash_args(
      String paymentId)
    {
      this();
      this.paymentId = paymentId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public returnPointAndCash_args(returnPointAndCash_args other) {
      if (other.isSetPaymentId()) {
        this.paymentId = other.paymentId;
      }
    }

    public returnPointAndCash_args deepCopy() {
      return new returnPointAndCash_args(this);
    }

    @Override
    public void clear() {
      this.paymentId = null;
    }

    public String getPaymentId() {
      return this.paymentId;
    }

    public returnPointAndCash_args setPaymentId(String paymentId) {
      this.paymentId = paymentId;
      return this;
    }

    public void unsetPaymentId() {
      this.paymentId = null;
    }

    /** Returns true if field paymentId is set (has been assigned a value) and false otherwise */
    public boolean isSetPaymentId() {
      return this.paymentId != null;
    }

    public void setPaymentIdIsSet(boolean value) {
      if (!value) {
        this.paymentId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PAYMENT_ID:
        if (value == null) {
          unsetPaymentId();
        } else {
          setPaymentId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PAYMENT_ID:
        return getPaymentId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PAYMENT_ID:
        return isSetPaymentId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof returnPointAndCash_args)
        return this.equals((returnPointAndCash_args)that);
      return false;
    }

    public boolean equals(returnPointAndCash_args that) {
      if (that == null)
        return false;

      boolean this_present_paymentId = true && this.isSetPaymentId();
      boolean that_present_paymentId = true && that.isSetPaymentId();
      if (this_present_paymentId || that_present_paymentId) {
        if (!(this_present_paymentId && that_present_paymentId))
          return false;
        if (!this.paymentId.equals(that.paymentId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_paymentId = true && (isSetPaymentId());
      list.add(present_paymentId);
      if (present_paymentId)
        list.add(paymentId);

      return list.hashCode();
    }

    @Override
    public int compareTo(returnPointAndCash_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPaymentId()).compareTo(other.isSetPaymentId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPaymentId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paymentId, other.paymentId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("returnPointAndCash_args(");
      boolean first = true;

      sb.append("paymentId:");
      if (this.paymentId == null) {
        sb.append("null");
      } else {
        sb.append(this.paymentId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class returnPointAndCash_argsStandardSchemeFactory implements SchemeFactory {
      public returnPointAndCash_argsStandardScheme getScheme() {
        return new returnPointAndCash_argsStandardScheme();
      }
    }

    private static class returnPointAndCash_argsStandardScheme extends StandardScheme<returnPointAndCash_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, returnPointAndCash_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PAYMENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.paymentId = iprot.readString();
                struct.setPaymentIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, returnPointAndCash_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.paymentId != null) {
          oprot.writeFieldBegin(PAYMENT_ID_FIELD_DESC);
          oprot.writeString(struct.paymentId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class returnPointAndCash_argsTupleSchemeFactory implements SchemeFactory {
      public returnPointAndCash_argsTupleScheme getScheme() {
        return new returnPointAndCash_argsTupleScheme();
      }
    }

    private static class returnPointAndCash_argsTupleScheme extends TupleScheme<returnPointAndCash_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, returnPointAndCash_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPaymentId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPaymentId()) {
          oprot.writeString(struct.paymentId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, returnPointAndCash_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.paymentId = iprot.readString();
          struct.setPaymentIdIsSet(true);
        }
      }
    }

  }

  public static class returnPointAndCash_result implements org.apache.thrift.TBase<returnPointAndCash_result, returnPointAndCash_result._Fields>, java.io.Serializable, Cloneable, Comparable<returnPointAndCash_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("returnPointAndCash_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new returnPointAndCash_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new returnPointAndCash_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(returnPointAndCash_result.class, metaDataMap);
    }

    public returnPointAndCash_result() {
    }

    public returnPointAndCash_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public returnPointAndCash_result(returnPointAndCash_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public returnPointAndCash_result deepCopy() {
      return new returnPointAndCash_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public returnPointAndCash_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof returnPointAndCash_result)
        return this.equals((returnPointAndCash_result)that);
      return false;
    }

    public boolean equals(returnPointAndCash_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(returnPointAndCash_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("returnPointAndCash_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class returnPointAndCash_resultStandardSchemeFactory implements SchemeFactory {
      public returnPointAndCash_resultStandardScheme getScheme() {
        return new returnPointAndCash_resultStandardScheme();
      }
    }

    private static class returnPointAndCash_resultStandardScheme extends StandardScheme<returnPointAndCash_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, returnPointAndCash_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, returnPointAndCash_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class returnPointAndCash_resultTupleSchemeFactory implements SchemeFactory {
      public returnPointAndCash_resultTupleScheme getScheme() {
        return new returnPointAndCash_resultTupleScheme();
      }
    }

    private static class returnPointAndCash_resultTupleScheme extends TupleScheme<returnPointAndCash_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, returnPointAndCash_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, returnPointAndCash_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
