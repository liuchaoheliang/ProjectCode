/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.vo;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * Boss商品管理平台查询商品过滤条件请求参数
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-7-27")
public class BossProductFilterVo implements org.apache.thrift.TBase<BossProductFilterVo, BossProductFilterVo._Fields>, java.io.Serializable, Cloneable, Comparable<BossProductFilterVo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BossProductFilterVo");

  private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CATEGORY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("categoryId", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField MARKETABLE_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("marketableStatus", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField AUDIT_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("auditStatus", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField PLAT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("platType", org.apache.thrift.protocol.TType.STRING, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new BossProductFilterVoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new BossProductFilterVoTupleSchemeFactory());
  }

  /**
   * 客户端id即所属行id
   */
  public String clientId; // required
  /**
   * 商品类型  "1":团购,"2":预售,"3":名优特惠,"4":在线积分兑换,"5":网点礼品;
   */
  public String type; // required
  /**
   * 商品分类id
   */
  public long categoryId; // required
  /**
   * 上下架状态
   */
  public String marketableStatus; // required
  /**
   * 审核状态
   */
  public String auditStatus; // required
  /**
   * 商品名称
   */
  public String name; // required
  /**
   * 录入渠道 "1":boss,"2":银行端,"3":商户pc,"4":商户h5,"5":个人pc,"6":个人h5;
   */
  public String platType; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 客户端id即所属行id
     */
    CLIENT_ID((short)1, "clientId"),
    /**
     * 商品类型  "1":团购,"2":预售,"3":名优特惠,"4":在线积分兑换,"5":网点礼品;
     */
    TYPE((short)2, "type"),
    /**
     * 商品分类id
     */
    CATEGORY_ID((short)3, "categoryId"),
    /**
     * 上下架状态
     */
    MARKETABLE_STATUS((short)4, "marketableStatus"),
    /**
     * 审核状态
     */
    AUDIT_STATUS((short)5, "auditStatus"),
    /**
     * 商品名称
     */
    NAME((short)6, "name"),
    /**
     * 录入渠道 "1":boss,"2":银行端,"3":商户pc,"4":商户h5,"5":个人pc,"6":个人h5;
     */
    PLAT_TYPE((short)7, "platType");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CLIENT_ID
          return CLIENT_ID;
        case 2: // TYPE
          return TYPE;
        case 3: // CATEGORY_ID
          return CATEGORY_ID;
        case 4: // MARKETABLE_STATUS
          return MARKETABLE_STATUS;
        case 5: // AUDIT_STATUS
          return AUDIT_STATUS;
        case 6: // NAME
          return NAME;
        case 7: // PLAT_TYPE
          return PLAT_TYPE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CATEGORYID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CATEGORY_ID, new org.apache.thrift.meta_data.FieldMetaData("categoryId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MARKETABLE_STATUS, new org.apache.thrift.meta_data.FieldMetaData("marketableStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AUDIT_STATUS, new org.apache.thrift.meta_data.FieldMetaData("auditStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PLAT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("platType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BossProductFilterVo.class, metaDataMap);
  }

  public BossProductFilterVo() {
  }

  public BossProductFilterVo(
    String clientId,
    String type,
    long categoryId,
    String marketableStatus,
    String auditStatus,
    String name,
    String platType)
  {
    this();
    this.clientId = clientId;
    this.type = type;
    this.categoryId = categoryId;
    setCategoryIdIsSet(true);
    this.marketableStatus = marketableStatus;
    this.auditStatus = auditStatus;
    this.name = name;
    this.platType = platType;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BossProductFilterVo(BossProductFilterVo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetClientId()) {
      this.clientId = other.clientId;
    }
    if (other.isSetType()) {
      this.type = other.type;
    }
    this.categoryId = other.categoryId;
    if (other.isSetMarketableStatus()) {
      this.marketableStatus = other.marketableStatus;
    }
    if (other.isSetAuditStatus()) {
      this.auditStatus = other.auditStatus;
    }
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetPlatType()) {
      this.platType = other.platType;
    }
  }

  public BossProductFilterVo deepCopy() {
    return new BossProductFilterVo(this);
  }

  @Override
  public void clear() {
    this.clientId = null;
    this.type = null;
    setCategoryIdIsSet(false);
    this.categoryId = 0;
    this.marketableStatus = null;
    this.auditStatus = null;
    this.name = null;
    this.platType = null;
  }

  /**
   * 客户端id即所属行id
   */
  public String getClientId() {
    return this.clientId;
  }

  /**
   * 客户端id即所属行id
   */
  public BossProductFilterVo setClientId(String clientId) {
    this.clientId = clientId;
    return this;
  }

  public void unsetClientId() {
    this.clientId = null;
  }

  /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
  public boolean isSetClientId() {
    return this.clientId != null;
  }

  public void setClientIdIsSet(boolean value) {
    if (!value) {
      this.clientId = null;
    }
  }

  /**
   * 商品类型  "1":团购,"2":预售,"3":名优特惠,"4":在线积分兑换,"5":网点礼品;
   */
  public String getType() {
    return this.type;
  }

  /**
   * 商品类型  "1":团购,"2":预售,"3":名优特惠,"4":在线积分兑换,"5":网点礼品;
   */
  public BossProductFilterVo setType(String type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  /**
   * 商品分类id
   */
  public long getCategoryId() {
    return this.categoryId;
  }

  /**
   * 商品分类id
   */
  public BossProductFilterVo setCategoryId(long categoryId) {
    this.categoryId = categoryId;
    setCategoryIdIsSet(true);
    return this;
  }

  public void unsetCategoryId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CATEGORYID_ISSET_ID);
  }

  /** Returns true if field categoryId is set (has been assigned a value) and false otherwise */
  public boolean isSetCategoryId() {
    return EncodingUtils.testBit(__isset_bitfield, __CATEGORYID_ISSET_ID);
  }

  public void setCategoryIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CATEGORYID_ISSET_ID, value);
  }

  /**
   * 上下架状态
   */
  public String getMarketableStatus() {
    return this.marketableStatus;
  }

  /**
   * 上下架状态
   */
  public BossProductFilterVo setMarketableStatus(String marketableStatus) {
    this.marketableStatus = marketableStatus;
    return this;
  }

  public void unsetMarketableStatus() {
    this.marketableStatus = null;
  }

  /** Returns true if field marketableStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetMarketableStatus() {
    return this.marketableStatus != null;
  }

  public void setMarketableStatusIsSet(boolean value) {
    if (!value) {
      this.marketableStatus = null;
    }
  }

  /**
   * 审核状态
   */
  public String getAuditStatus() {
    return this.auditStatus;
  }

  /**
   * 审核状态
   */
  public BossProductFilterVo setAuditStatus(String auditStatus) {
    this.auditStatus = auditStatus;
    return this;
  }

  public void unsetAuditStatus() {
    this.auditStatus = null;
  }

  /** Returns true if field auditStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetAuditStatus() {
    return this.auditStatus != null;
  }

  public void setAuditStatusIsSet(boolean value) {
    if (!value) {
      this.auditStatus = null;
    }
  }

  /**
   * 商品名称
   */
  public String getName() {
    return this.name;
  }

  /**
   * 商品名称
   */
  public BossProductFilterVo setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  /**
   * 录入渠道 "1":boss,"2":银行端,"3":商户pc,"4":商户h5,"5":个人pc,"6":个人h5;
   */
  public String getPlatType() {
    return this.platType;
  }

  /**
   * 录入渠道 "1":boss,"2":银行端,"3":商户pc,"4":商户h5,"5":个人pc,"6":个人h5;
   */
  public BossProductFilterVo setPlatType(String platType) {
    this.platType = platType;
    return this;
  }

  public void unsetPlatType() {
    this.platType = null;
  }

  /** Returns true if field platType is set (has been assigned a value) and false otherwise */
  public boolean isSetPlatType() {
    return this.platType != null;
  }

  public void setPlatTypeIsSet(boolean value) {
    if (!value) {
      this.platType = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CLIENT_ID:
      if (value == null) {
        unsetClientId();
      } else {
        setClientId((String)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((String)value);
      }
      break;

    case CATEGORY_ID:
      if (value == null) {
        unsetCategoryId();
      } else {
        setCategoryId((Long)value);
      }
      break;

    case MARKETABLE_STATUS:
      if (value == null) {
        unsetMarketableStatus();
      } else {
        setMarketableStatus((String)value);
      }
      break;

    case AUDIT_STATUS:
      if (value == null) {
        unsetAuditStatus();
      } else {
        setAuditStatus((String)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case PLAT_TYPE:
      if (value == null) {
        unsetPlatType();
      } else {
        setPlatType((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CLIENT_ID:
      return getClientId();

    case TYPE:
      return getType();

    case CATEGORY_ID:
      return Long.valueOf(getCategoryId());

    case MARKETABLE_STATUS:
      return getMarketableStatus();

    case AUDIT_STATUS:
      return getAuditStatus();

    case NAME:
      return getName();

    case PLAT_TYPE:
      return getPlatType();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CLIENT_ID:
      return isSetClientId();
    case TYPE:
      return isSetType();
    case CATEGORY_ID:
      return isSetCategoryId();
    case MARKETABLE_STATUS:
      return isSetMarketableStatus();
    case AUDIT_STATUS:
      return isSetAuditStatus();
    case NAME:
      return isSetName();
    case PLAT_TYPE:
      return isSetPlatType();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BossProductFilterVo)
      return this.equals((BossProductFilterVo)that);
    return false;
  }

  public boolean equals(BossProductFilterVo that) {
    if (that == null)
      return false;

    boolean this_present_clientId = true && this.isSetClientId();
    boolean that_present_clientId = true && that.isSetClientId();
    if (this_present_clientId || that_present_clientId) {
      if (!(this_present_clientId && that_present_clientId))
        return false;
      if (!this.clientId.equals(that.clientId))
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_categoryId = true;
    boolean that_present_categoryId = true;
    if (this_present_categoryId || that_present_categoryId) {
      if (!(this_present_categoryId && that_present_categoryId))
        return false;
      if (this.categoryId != that.categoryId)
        return false;
    }

    boolean this_present_marketableStatus = true && this.isSetMarketableStatus();
    boolean that_present_marketableStatus = true && that.isSetMarketableStatus();
    if (this_present_marketableStatus || that_present_marketableStatus) {
      if (!(this_present_marketableStatus && that_present_marketableStatus))
        return false;
      if (!this.marketableStatus.equals(that.marketableStatus))
        return false;
    }

    boolean this_present_auditStatus = true && this.isSetAuditStatus();
    boolean that_present_auditStatus = true && that.isSetAuditStatus();
    if (this_present_auditStatus || that_present_auditStatus) {
      if (!(this_present_auditStatus && that_present_auditStatus))
        return false;
      if (!this.auditStatus.equals(that.auditStatus))
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_platType = true && this.isSetPlatType();
    boolean that_present_platType = true && that.isSetPlatType();
    if (this_present_platType || that_present_platType) {
      if (!(this_present_platType && that_present_platType))
        return false;
      if (!this.platType.equals(that.platType))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_clientId = true && (isSetClientId());
    list.add(present_clientId);
    if (present_clientId)
      list.add(clientId);

    boolean present_type = true && (isSetType());
    list.add(present_type);
    if (present_type)
      list.add(type);

    boolean present_categoryId = true;
    list.add(present_categoryId);
    if (present_categoryId)
      list.add(categoryId);

    boolean present_marketableStatus = true && (isSetMarketableStatus());
    list.add(present_marketableStatus);
    if (present_marketableStatus)
      list.add(marketableStatus);

    boolean present_auditStatus = true && (isSetAuditStatus());
    list.add(present_auditStatus);
    if (present_auditStatus)
      list.add(auditStatus);

    boolean present_name = true && (isSetName());
    list.add(present_name);
    if (present_name)
      list.add(name);

    boolean present_platType = true && (isSetPlatType());
    list.add(present_platType);
    if (present_platType)
      list.add(platType);

    return list.hashCode();
  }

  @Override
  public int compareTo(BossProductFilterVo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClientId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCategoryId()).compareTo(other.isSetCategoryId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCategoryId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.categoryId, other.categoryId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMarketableStatus()).compareTo(other.isSetMarketableStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMarketableStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.marketableStatus, other.marketableStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAuditStatus()).compareTo(other.isSetAuditStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAuditStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auditStatus, other.auditStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlatType()).compareTo(other.isSetPlatType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlatType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platType, other.platType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("BossProductFilterVo(");
    boolean first = true;

    sb.append("clientId:");
    if (this.clientId == null) {
      sb.append("null");
    } else {
      sb.append(this.clientId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("categoryId:");
    sb.append(this.categoryId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("marketableStatus:");
    if (this.marketableStatus == null) {
      sb.append("null");
    } else {
      sb.append(this.marketableStatus);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("auditStatus:");
    if (this.auditStatus == null) {
      sb.append("null");
    } else {
      sb.append(this.auditStatus);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("platType:");
    if (this.platType == null) {
      sb.append("null");
    } else {
      sb.append(this.platType);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BossProductFilterVoStandardSchemeFactory implements SchemeFactory {
    public BossProductFilterVoStandardScheme getScheme() {
      return new BossProductFilterVoStandardScheme();
    }
  }

  private static class BossProductFilterVoStandardScheme extends StandardScheme<BossProductFilterVo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BossProductFilterVo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CLIENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clientId = iprot.readString();
              struct.setClientIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.type = iprot.readString();
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CATEGORY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.categoryId = iprot.readI64();
              struct.setCategoryIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MARKETABLE_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.marketableStatus = iprot.readString();
              struct.setMarketableStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // AUDIT_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.auditStatus = iprot.readString();
              struct.setAuditStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PLAT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.platType = iprot.readString();
              struct.setPlatTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BossProductFilterVo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.clientId != null) {
        oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
        oprot.writeString(struct.clientId);
        oprot.writeFieldEnd();
      }
      if (struct.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeString(struct.type);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CATEGORY_ID_FIELD_DESC);
      oprot.writeI64(struct.categoryId);
      oprot.writeFieldEnd();
      if (struct.marketableStatus != null) {
        oprot.writeFieldBegin(MARKETABLE_STATUS_FIELD_DESC);
        oprot.writeString(struct.marketableStatus);
        oprot.writeFieldEnd();
      }
      if (struct.auditStatus != null) {
        oprot.writeFieldBegin(AUDIT_STATUS_FIELD_DESC);
        oprot.writeString(struct.auditStatus);
        oprot.writeFieldEnd();
      }
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.platType != null) {
        oprot.writeFieldBegin(PLAT_TYPE_FIELD_DESC);
        oprot.writeString(struct.platType);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BossProductFilterVoTupleSchemeFactory implements SchemeFactory {
    public BossProductFilterVoTupleScheme getScheme() {
      return new BossProductFilterVoTupleScheme();
    }
  }

  private static class BossProductFilterVoTupleScheme extends TupleScheme<BossProductFilterVo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BossProductFilterVo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetClientId()) {
        optionals.set(0);
      }
      if (struct.isSetType()) {
        optionals.set(1);
      }
      if (struct.isSetCategoryId()) {
        optionals.set(2);
      }
      if (struct.isSetMarketableStatus()) {
        optionals.set(3);
      }
      if (struct.isSetAuditStatus()) {
        optionals.set(4);
      }
      if (struct.isSetName()) {
        optionals.set(5);
      }
      if (struct.isSetPlatType()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetClientId()) {
        oprot.writeString(struct.clientId);
      }
      if (struct.isSetType()) {
        oprot.writeString(struct.type);
      }
      if (struct.isSetCategoryId()) {
        oprot.writeI64(struct.categoryId);
      }
      if (struct.isSetMarketableStatus()) {
        oprot.writeString(struct.marketableStatus);
      }
      if (struct.isSetAuditStatus()) {
        oprot.writeString(struct.auditStatus);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetPlatType()) {
        oprot.writeString(struct.platType);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BossProductFilterVo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.clientId = iprot.readString();
        struct.setClientIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.type = iprot.readString();
        struct.setTypeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.categoryId = iprot.readI64();
        struct.setCategoryIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.marketableStatus = iprot.readString();
        struct.setMarketableStatusIsSet(true);
      }
      if (incoming.get(4)) {
        struct.auditStatus = iprot.readString();
        struct.setAuditStatusIsSet(true);
      }
      if (incoming.get(5)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(6)) {
        struct.platType = iprot.readString();
        struct.setPlatTypeIsSet(true);
      }
    }
  }

}

