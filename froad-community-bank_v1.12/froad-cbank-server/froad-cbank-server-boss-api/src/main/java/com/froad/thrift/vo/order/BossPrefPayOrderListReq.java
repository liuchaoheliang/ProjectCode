/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.vo.order;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 面对面惠付订单查询请求
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-12-29")
public class BossPrefPayOrderListReq implements org.apache.thrift.TBase<BossPrefPayOrderListReq, BossPrefPayOrderListReq._Fields>, java.io.Serializable, Cloneable, Comparable<BossPrefPayOrderListReq> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BossPrefPayOrderListReq");

  private static final org.apache.thrift.protocol.TField ORDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("orderId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField MEMBER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("memberName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField CREATE_SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("createSource", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField ORDER_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("orderType", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField PAYMENT_METHOD_FIELD_DESC = new org.apache.thrift.protocol.TField("paymentMethod", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField ORDER_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("orderStatus", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField BEG_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("begTime", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endTime", org.apache.thrift.protocol.TType.I64, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new BossPrefPayOrderListReqStandardSchemeFactory());
    schemes.put(TupleScheme.class, new BossPrefPayOrderListReqTupleSchemeFactory());
  }

  /**
   * 订单编号
   */
  public String orderId; // optional
  /**
   * 用户会员名
   */
  public String memberName; // optional
  /**
   * 所属客户端
   */
  public String clientId; // optional
  /**
   * 订单创建来源
   */
  public String createSource; // optional
  /**
   * 支付类型
   */
  public String orderType; // optional
  /**
   * 支付方式
   */
  public String paymentMethod; // optional
  /**
   * 订单状态
   */
  public String orderStatus; // optional
  /**
   * 订单创建开始时间
   */
  public long begTime; // optional
  /**
   * 订单创建结束时间
   */
  public long endTime; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 订单编号
     */
    ORDER_ID((short)1, "orderId"),
    /**
     * 用户会员名
     */
    MEMBER_NAME((short)2, "memberName"),
    /**
     * 所属客户端
     */
    CLIENT_ID((short)3, "clientId"),
    /**
     * 订单创建来源
     */
    CREATE_SOURCE((short)4, "createSource"),
    /**
     * 支付类型
     */
    ORDER_TYPE((short)5, "orderType"),
    /**
     * 支付方式
     */
    PAYMENT_METHOD((short)6, "paymentMethod"),
    /**
     * 订单状态
     */
    ORDER_STATUS((short)7, "orderStatus"),
    /**
     * 订单创建开始时间
     */
    BEG_TIME((short)8, "begTime"),
    /**
     * 订单创建结束时间
     */
    END_TIME((short)9, "endTime");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ORDER_ID
          return ORDER_ID;
        case 2: // MEMBER_NAME
          return MEMBER_NAME;
        case 3: // CLIENT_ID
          return CLIENT_ID;
        case 4: // CREATE_SOURCE
          return CREATE_SOURCE;
        case 5: // ORDER_TYPE
          return ORDER_TYPE;
        case 6: // PAYMENT_METHOD
          return PAYMENT_METHOD;
        case 7: // ORDER_STATUS
          return ORDER_STATUS;
        case 8: // BEG_TIME
          return BEG_TIME;
        case 9: // END_TIME
          return END_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __BEGTIME_ISSET_ID = 0;
  private static final int __ENDTIME_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ORDER_ID,_Fields.MEMBER_NAME,_Fields.CLIENT_ID,_Fields.CREATE_SOURCE,_Fields.ORDER_TYPE,_Fields.PAYMENT_METHOD,_Fields.ORDER_STATUS,_Fields.BEG_TIME,_Fields.END_TIME};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ORDER_ID, new org.apache.thrift.meta_data.FieldMetaData("orderId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MEMBER_NAME, new org.apache.thrift.meta_data.FieldMetaData("memberName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_SOURCE, new org.apache.thrift.meta_data.FieldMetaData("createSource", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORDER_TYPE, new org.apache.thrift.meta_data.FieldMetaData("orderType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAYMENT_METHOD, new org.apache.thrift.meta_data.FieldMetaData("paymentMethod", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORDER_STATUS, new org.apache.thrift.meta_data.FieldMetaData("orderStatus", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BEG_TIME, new org.apache.thrift.meta_data.FieldMetaData("begTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.END_TIME, new org.apache.thrift.meta_data.FieldMetaData("endTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BossPrefPayOrderListReq.class, metaDataMap);
  }

  public BossPrefPayOrderListReq() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BossPrefPayOrderListReq(BossPrefPayOrderListReq other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetOrderId()) {
      this.orderId = other.orderId;
    }
    if (other.isSetMemberName()) {
      this.memberName = other.memberName;
    }
    if (other.isSetClientId()) {
      this.clientId = other.clientId;
    }
    if (other.isSetCreateSource()) {
      this.createSource = other.createSource;
    }
    if (other.isSetOrderType()) {
      this.orderType = other.orderType;
    }
    if (other.isSetPaymentMethod()) {
      this.paymentMethod = other.paymentMethod;
    }
    if (other.isSetOrderStatus()) {
      this.orderStatus = other.orderStatus;
    }
    this.begTime = other.begTime;
    this.endTime = other.endTime;
  }

  public BossPrefPayOrderListReq deepCopy() {
    return new BossPrefPayOrderListReq(this);
  }

  @Override
  public void clear() {
    this.orderId = null;
    this.memberName = null;
    this.clientId = null;
    this.createSource = null;
    this.orderType = null;
    this.paymentMethod = null;
    this.orderStatus = null;
    setBegTimeIsSet(false);
    this.begTime = 0;
    setEndTimeIsSet(false);
    this.endTime = 0;
  }

  /**
   * 订单编号
   */
  public String getOrderId() {
    return this.orderId;
  }

  /**
   * 订单编号
   */
  public BossPrefPayOrderListReq setOrderId(String orderId) {
    this.orderId = orderId;
    return this;
  }

  public void unsetOrderId() {
    this.orderId = null;
  }

  /** Returns true if field orderId is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderId() {
    return this.orderId != null;
  }

  public void setOrderIdIsSet(boolean value) {
    if (!value) {
      this.orderId = null;
    }
  }

  /**
   * 用户会员名
   */
  public String getMemberName() {
    return this.memberName;
  }

  /**
   * 用户会员名
   */
  public BossPrefPayOrderListReq setMemberName(String memberName) {
    this.memberName = memberName;
    return this;
  }

  public void unsetMemberName() {
    this.memberName = null;
  }

  /** Returns true if field memberName is set (has been assigned a value) and false otherwise */
  public boolean isSetMemberName() {
    return this.memberName != null;
  }

  public void setMemberNameIsSet(boolean value) {
    if (!value) {
      this.memberName = null;
    }
  }

  /**
   * 所属客户端
   */
  public String getClientId() {
    return this.clientId;
  }

  /**
   * 所属客户端
   */
  public BossPrefPayOrderListReq setClientId(String clientId) {
    this.clientId = clientId;
    return this;
  }

  public void unsetClientId() {
    this.clientId = null;
  }

  /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
  public boolean isSetClientId() {
    return this.clientId != null;
  }

  public void setClientIdIsSet(boolean value) {
    if (!value) {
      this.clientId = null;
    }
  }

  /**
   * 订单创建来源
   */
  public String getCreateSource() {
    return this.createSource;
  }

  /**
   * 订单创建来源
   */
  public BossPrefPayOrderListReq setCreateSource(String createSource) {
    this.createSource = createSource;
    return this;
  }

  public void unsetCreateSource() {
    this.createSource = null;
  }

  /** Returns true if field createSource is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateSource() {
    return this.createSource != null;
  }

  public void setCreateSourceIsSet(boolean value) {
    if (!value) {
      this.createSource = null;
    }
  }

  /**
   * 支付类型
   */
  public String getOrderType() {
    return this.orderType;
  }

  /**
   * 支付类型
   */
  public BossPrefPayOrderListReq setOrderType(String orderType) {
    this.orderType = orderType;
    return this;
  }

  public void unsetOrderType() {
    this.orderType = null;
  }

  /** Returns true if field orderType is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderType() {
    return this.orderType != null;
  }

  public void setOrderTypeIsSet(boolean value) {
    if (!value) {
      this.orderType = null;
    }
  }

  /**
   * 支付方式
   */
  public String getPaymentMethod() {
    return this.paymentMethod;
  }

  /**
   * 支付方式
   */
  public BossPrefPayOrderListReq setPaymentMethod(String paymentMethod) {
    this.paymentMethod = paymentMethod;
    return this;
  }

  public void unsetPaymentMethod() {
    this.paymentMethod = null;
  }

  /** Returns true if field paymentMethod is set (has been assigned a value) and false otherwise */
  public boolean isSetPaymentMethod() {
    return this.paymentMethod != null;
  }

  public void setPaymentMethodIsSet(boolean value) {
    if (!value) {
      this.paymentMethod = null;
    }
  }

  /**
   * 订单状态
   */
  public String getOrderStatus() {
    return this.orderStatus;
  }

  /**
   * 订单状态
   */
  public BossPrefPayOrderListReq setOrderStatus(String orderStatus) {
    this.orderStatus = orderStatus;
    return this;
  }

  public void unsetOrderStatus() {
    this.orderStatus = null;
  }

  /** Returns true if field orderStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderStatus() {
    return this.orderStatus != null;
  }

  public void setOrderStatusIsSet(boolean value) {
    if (!value) {
      this.orderStatus = null;
    }
  }

  /**
   * 订单创建开始时间
   */
  public long getBegTime() {
    return this.begTime;
  }

  /**
   * 订单创建开始时间
   */
  public BossPrefPayOrderListReq setBegTime(long begTime) {
    this.begTime = begTime;
    setBegTimeIsSet(true);
    return this;
  }

  public void unsetBegTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BEGTIME_ISSET_ID);
  }

  /** Returns true if field begTime is set (has been assigned a value) and false otherwise */
  public boolean isSetBegTime() {
    return EncodingUtils.testBit(__isset_bitfield, __BEGTIME_ISSET_ID);
  }

  public void setBegTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BEGTIME_ISSET_ID, value);
  }

  /**
   * 订单创建结束时间
   */
  public long getEndTime() {
    return this.endTime;
  }

  /**
   * 订单创建结束时间
   */
  public BossPrefPayOrderListReq setEndTime(long endTime) {
    this.endTime = endTime;
    setEndTimeIsSet(true);
    return this;
  }

  public void unsetEndTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENDTIME_ISSET_ID);
  }

  /** Returns true if field endTime is set (has been assigned a value) and false otherwise */
  public boolean isSetEndTime() {
    return EncodingUtils.testBit(__isset_bitfield, __ENDTIME_ISSET_ID);
  }

  public void setEndTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENDTIME_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ORDER_ID:
      if (value == null) {
        unsetOrderId();
      } else {
        setOrderId((String)value);
      }
      break;

    case MEMBER_NAME:
      if (value == null) {
        unsetMemberName();
      } else {
        setMemberName((String)value);
      }
      break;

    case CLIENT_ID:
      if (value == null) {
        unsetClientId();
      } else {
        setClientId((String)value);
      }
      break;

    case CREATE_SOURCE:
      if (value == null) {
        unsetCreateSource();
      } else {
        setCreateSource((String)value);
      }
      break;

    case ORDER_TYPE:
      if (value == null) {
        unsetOrderType();
      } else {
        setOrderType((String)value);
      }
      break;

    case PAYMENT_METHOD:
      if (value == null) {
        unsetPaymentMethod();
      } else {
        setPaymentMethod((String)value);
      }
      break;

    case ORDER_STATUS:
      if (value == null) {
        unsetOrderStatus();
      } else {
        setOrderStatus((String)value);
      }
      break;

    case BEG_TIME:
      if (value == null) {
        unsetBegTime();
      } else {
        setBegTime((Long)value);
      }
      break;

    case END_TIME:
      if (value == null) {
        unsetEndTime();
      } else {
        setEndTime((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ORDER_ID:
      return getOrderId();

    case MEMBER_NAME:
      return getMemberName();

    case CLIENT_ID:
      return getClientId();

    case CREATE_SOURCE:
      return getCreateSource();

    case ORDER_TYPE:
      return getOrderType();

    case PAYMENT_METHOD:
      return getPaymentMethod();

    case ORDER_STATUS:
      return getOrderStatus();

    case BEG_TIME:
      return Long.valueOf(getBegTime());

    case END_TIME:
      return Long.valueOf(getEndTime());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ORDER_ID:
      return isSetOrderId();
    case MEMBER_NAME:
      return isSetMemberName();
    case CLIENT_ID:
      return isSetClientId();
    case CREATE_SOURCE:
      return isSetCreateSource();
    case ORDER_TYPE:
      return isSetOrderType();
    case PAYMENT_METHOD:
      return isSetPaymentMethod();
    case ORDER_STATUS:
      return isSetOrderStatus();
    case BEG_TIME:
      return isSetBegTime();
    case END_TIME:
      return isSetEndTime();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BossPrefPayOrderListReq)
      return this.equals((BossPrefPayOrderListReq)that);
    return false;
  }

  public boolean equals(BossPrefPayOrderListReq that) {
    if (that == null)
      return false;

    boolean this_present_orderId = true && this.isSetOrderId();
    boolean that_present_orderId = true && that.isSetOrderId();
    if (this_present_orderId || that_present_orderId) {
      if (!(this_present_orderId && that_present_orderId))
        return false;
      if (!this.orderId.equals(that.orderId))
        return false;
    }

    boolean this_present_memberName = true && this.isSetMemberName();
    boolean that_present_memberName = true && that.isSetMemberName();
    if (this_present_memberName || that_present_memberName) {
      if (!(this_present_memberName && that_present_memberName))
        return false;
      if (!this.memberName.equals(that.memberName))
        return false;
    }

    boolean this_present_clientId = true && this.isSetClientId();
    boolean that_present_clientId = true && that.isSetClientId();
    if (this_present_clientId || that_present_clientId) {
      if (!(this_present_clientId && that_present_clientId))
        return false;
      if (!this.clientId.equals(that.clientId))
        return false;
    }

    boolean this_present_createSource = true && this.isSetCreateSource();
    boolean that_present_createSource = true && that.isSetCreateSource();
    if (this_present_createSource || that_present_createSource) {
      if (!(this_present_createSource && that_present_createSource))
        return false;
      if (!this.createSource.equals(that.createSource))
        return false;
    }

    boolean this_present_orderType = true && this.isSetOrderType();
    boolean that_present_orderType = true && that.isSetOrderType();
    if (this_present_orderType || that_present_orderType) {
      if (!(this_present_orderType && that_present_orderType))
        return false;
      if (!this.orderType.equals(that.orderType))
        return false;
    }

    boolean this_present_paymentMethod = true && this.isSetPaymentMethod();
    boolean that_present_paymentMethod = true && that.isSetPaymentMethod();
    if (this_present_paymentMethod || that_present_paymentMethod) {
      if (!(this_present_paymentMethod && that_present_paymentMethod))
        return false;
      if (!this.paymentMethod.equals(that.paymentMethod))
        return false;
    }

    boolean this_present_orderStatus = true && this.isSetOrderStatus();
    boolean that_present_orderStatus = true && that.isSetOrderStatus();
    if (this_present_orderStatus || that_present_orderStatus) {
      if (!(this_present_orderStatus && that_present_orderStatus))
        return false;
      if (!this.orderStatus.equals(that.orderStatus))
        return false;
    }

    boolean this_present_begTime = true && this.isSetBegTime();
    boolean that_present_begTime = true && that.isSetBegTime();
    if (this_present_begTime || that_present_begTime) {
      if (!(this_present_begTime && that_present_begTime))
        return false;
      if (this.begTime != that.begTime)
        return false;
    }

    boolean this_present_endTime = true && this.isSetEndTime();
    boolean that_present_endTime = true && that.isSetEndTime();
    if (this_present_endTime || that_present_endTime) {
      if (!(this_present_endTime && that_present_endTime))
        return false;
      if (this.endTime != that.endTime)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_orderId = true && (isSetOrderId());
    list.add(present_orderId);
    if (present_orderId)
      list.add(orderId);

    boolean present_memberName = true && (isSetMemberName());
    list.add(present_memberName);
    if (present_memberName)
      list.add(memberName);

    boolean present_clientId = true && (isSetClientId());
    list.add(present_clientId);
    if (present_clientId)
      list.add(clientId);

    boolean present_createSource = true && (isSetCreateSource());
    list.add(present_createSource);
    if (present_createSource)
      list.add(createSource);

    boolean present_orderType = true && (isSetOrderType());
    list.add(present_orderType);
    if (present_orderType)
      list.add(orderType);

    boolean present_paymentMethod = true && (isSetPaymentMethod());
    list.add(present_paymentMethod);
    if (present_paymentMethod)
      list.add(paymentMethod);

    boolean present_orderStatus = true && (isSetOrderStatus());
    list.add(present_orderStatus);
    if (present_orderStatus)
      list.add(orderStatus);

    boolean present_begTime = true && (isSetBegTime());
    list.add(present_begTime);
    if (present_begTime)
      list.add(begTime);

    boolean present_endTime = true && (isSetEndTime());
    list.add(present_endTime);
    if (present_endTime)
      list.add(endTime);

    return list.hashCode();
  }

  @Override
  public int compareTo(BossPrefPayOrderListReq other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetOrderId()).compareTo(other.isSetOrderId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderId, other.orderId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMemberName()).compareTo(other.isSetMemberName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMemberName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.memberName, other.memberName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClientId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateSource()).compareTo(other.isSetCreateSource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateSource()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createSource, other.createSource);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderType()).compareTo(other.isSetOrderType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderType, other.orderType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPaymentMethod()).compareTo(other.isSetPaymentMethod());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPaymentMethod()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paymentMethod, other.paymentMethod);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderStatus()).compareTo(other.isSetOrderStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderStatus, other.orderStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBegTime()).compareTo(other.isSetBegTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBegTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.begTime, other.begTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndTime()).compareTo(other.isSetEndTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTime, other.endTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("BossPrefPayOrderListReq(");
    boolean first = true;

    if (isSetOrderId()) {
      sb.append("orderId:");
      if (this.orderId == null) {
        sb.append("null");
      } else {
        sb.append(this.orderId);
      }
      first = false;
    }
    if (isSetMemberName()) {
      if (!first) sb.append(", ");
      sb.append("memberName:");
      if (this.memberName == null) {
        sb.append("null");
      } else {
        sb.append(this.memberName);
      }
      first = false;
    }
    if (isSetClientId()) {
      if (!first) sb.append(", ");
      sb.append("clientId:");
      if (this.clientId == null) {
        sb.append("null");
      } else {
        sb.append(this.clientId);
      }
      first = false;
    }
    if (isSetCreateSource()) {
      if (!first) sb.append(", ");
      sb.append("createSource:");
      if (this.createSource == null) {
        sb.append("null");
      } else {
        sb.append(this.createSource);
      }
      first = false;
    }
    if (isSetOrderType()) {
      if (!first) sb.append(", ");
      sb.append("orderType:");
      if (this.orderType == null) {
        sb.append("null");
      } else {
        sb.append(this.orderType);
      }
      first = false;
    }
    if (isSetPaymentMethod()) {
      if (!first) sb.append(", ");
      sb.append("paymentMethod:");
      if (this.paymentMethod == null) {
        sb.append("null");
      } else {
        sb.append(this.paymentMethod);
      }
      first = false;
    }
    if (isSetOrderStatus()) {
      if (!first) sb.append(", ");
      sb.append("orderStatus:");
      if (this.orderStatus == null) {
        sb.append("null");
      } else {
        sb.append(this.orderStatus);
      }
      first = false;
    }
    if (isSetBegTime()) {
      if (!first) sb.append(", ");
      sb.append("begTime:");
      sb.append(this.begTime);
      first = false;
    }
    if (isSetEndTime()) {
      if (!first) sb.append(", ");
      sb.append("endTime:");
      sb.append(this.endTime);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BossPrefPayOrderListReqStandardSchemeFactory implements SchemeFactory {
    public BossPrefPayOrderListReqStandardScheme getScheme() {
      return new BossPrefPayOrderListReqStandardScheme();
    }
  }

  private static class BossPrefPayOrderListReqStandardScheme extends StandardScheme<BossPrefPayOrderListReq> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BossPrefPayOrderListReq struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ORDER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orderId = iprot.readString();
              struct.setOrderIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MEMBER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.memberName = iprot.readString();
              struct.setMemberNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CLIENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clientId = iprot.readString();
              struct.setClientIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CREATE_SOURCE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createSource = iprot.readString();
              struct.setCreateSourceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ORDER_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orderType = iprot.readString();
              struct.setOrderTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PAYMENT_METHOD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.paymentMethod = iprot.readString();
              struct.setPaymentMethodIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ORDER_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orderStatus = iprot.readString();
              struct.setOrderStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // BEG_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.begTime = iprot.readI64();
              struct.setBegTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // END_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.endTime = iprot.readI64();
              struct.setEndTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BossPrefPayOrderListReq struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.orderId != null) {
        if (struct.isSetOrderId()) {
          oprot.writeFieldBegin(ORDER_ID_FIELD_DESC);
          oprot.writeString(struct.orderId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.memberName != null) {
        if (struct.isSetMemberName()) {
          oprot.writeFieldBegin(MEMBER_NAME_FIELD_DESC);
          oprot.writeString(struct.memberName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.clientId != null) {
        if (struct.isSetClientId()) {
          oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
          oprot.writeString(struct.clientId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.createSource != null) {
        if (struct.isSetCreateSource()) {
          oprot.writeFieldBegin(CREATE_SOURCE_FIELD_DESC);
          oprot.writeString(struct.createSource);
          oprot.writeFieldEnd();
        }
      }
      if (struct.orderType != null) {
        if (struct.isSetOrderType()) {
          oprot.writeFieldBegin(ORDER_TYPE_FIELD_DESC);
          oprot.writeString(struct.orderType);
          oprot.writeFieldEnd();
        }
      }
      if (struct.paymentMethod != null) {
        if (struct.isSetPaymentMethod()) {
          oprot.writeFieldBegin(PAYMENT_METHOD_FIELD_DESC);
          oprot.writeString(struct.paymentMethod);
          oprot.writeFieldEnd();
        }
      }
      if (struct.orderStatus != null) {
        if (struct.isSetOrderStatus()) {
          oprot.writeFieldBegin(ORDER_STATUS_FIELD_DESC);
          oprot.writeString(struct.orderStatus);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetBegTime()) {
        oprot.writeFieldBegin(BEG_TIME_FIELD_DESC);
        oprot.writeI64(struct.begTime);
        oprot.writeFieldEnd();
      }
      if (struct.isSetEndTime()) {
        oprot.writeFieldBegin(END_TIME_FIELD_DESC);
        oprot.writeI64(struct.endTime);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BossPrefPayOrderListReqTupleSchemeFactory implements SchemeFactory {
    public BossPrefPayOrderListReqTupleScheme getScheme() {
      return new BossPrefPayOrderListReqTupleScheme();
    }
  }

  private static class BossPrefPayOrderListReqTupleScheme extends TupleScheme<BossPrefPayOrderListReq> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BossPrefPayOrderListReq struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetOrderId()) {
        optionals.set(0);
      }
      if (struct.isSetMemberName()) {
        optionals.set(1);
      }
      if (struct.isSetClientId()) {
        optionals.set(2);
      }
      if (struct.isSetCreateSource()) {
        optionals.set(3);
      }
      if (struct.isSetOrderType()) {
        optionals.set(4);
      }
      if (struct.isSetPaymentMethod()) {
        optionals.set(5);
      }
      if (struct.isSetOrderStatus()) {
        optionals.set(6);
      }
      if (struct.isSetBegTime()) {
        optionals.set(7);
      }
      if (struct.isSetEndTime()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetOrderId()) {
        oprot.writeString(struct.orderId);
      }
      if (struct.isSetMemberName()) {
        oprot.writeString(struct.memberName);
      }
      if (struct.isSetClientId()) {
        oprot.writeString(struct.clientId);
      }
      if (struct.isSetCreateSource()) {
        oprot.writeString(struct.createSource);
      }
      if (struct.isSetOrderType()) {
        oprot.writeString(struct.orderType);
      }
      if (struct.isSetPaymentMethod()) {
        oprot.writeString(struct.paymentMethod);
      }
      if (struct.isSetOrderStatus()) {
        oprot.writeString(struct.orderStatus);
      }
      if (struct.isSetBegTime()) {
        oprot.writeI64(struct.begTime);
      }
      if (struct.isSetEndTime()) {
        oprot.writeI64(struct.endTime);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BossPrefPayOrderListReq struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.orderId = iprot.readString();
        struct.setOrderIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.memberName = iprot.readString();
        struct.setMemberNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.clientId = iprot.readString();
        struct.setClientIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.createSource = iprot.readString();
        struct.setCreateSourceIsSet(true);
      }
      if (incoming.get(4)) {
        struct.orderType = iprot.readString();
        struct.setOrderTypeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.paymentMethod = iprot.readString();
        struct.setPaymentMethodIsSet(true);
      }
      if (incoming.get(6)) {
        struct.orderStatus = iprot.readString();
        struct.setOrderStatusIsSet(true);
      }
      if (incoming.get(7)) {
        struct.begTime = iprot.readI64();
        struct.setBegTimeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.endTime = iprot.readI64();
        struct.setEndTimeIsSet(true);
      }
    }
  }

}

