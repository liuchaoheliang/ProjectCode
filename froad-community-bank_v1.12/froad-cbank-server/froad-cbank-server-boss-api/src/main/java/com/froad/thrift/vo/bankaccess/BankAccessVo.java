/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.vo.bankaccess;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 银行信息vo
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-9-22")
public class BankAccessVo implements org.apache.thrift.TBase<BankAccessVo, BankAccessVo._Fields>, java.io.Serializable, Cloneable, Comparable<BankAccessVo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BankAccessVo");

  private static final org.apache.thrift.protocol.TField CLIENT_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("clientNo", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField CLIENT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("clientName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField FUNCTION_DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("functionDesc", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField PAYMENT_METHOD_DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("paymentMethodDesc", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("updateTime", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new BankAccessVoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new BankAccessVoTupleSchemeFactory());
  }

  /**
   * 客户端号
   */
  public String clientNo; // required
  /**
   * 客户端名称
   */
  public String clientName; // required
  /**
   * 功能模块
   */
  public String functionDesc; // required
  /**
   * 支付方式
   */
  public String paymentMethodDesc; // required
  /**
   * 配置时间
   */
  public long createTime; // required
  /**
   * 更新时间
   */
  public long updateTime; // required
  /**
   * 编号
   */
  public long id; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 客户端号
     */
    CLIENT_NO((short)1, "clientNo"),
    /**
     * 客户端名称
     */
    CLIENT_NAME((short)2, "clientName"),
    /**
     * 功能模块
     */
    FUNCTION_DESC((short)3, "functionDesc"),
    /**
     * 支付方式
     */
    PAYMENT_METHOD_DESC((short)4, "paymentMethodDesc"),
    /**
     * 配置时间
     */
    CREATE_TIME((short)5, "createTime"),
    /**
     * 更新时间
     */
    UPDATE_TIME((short)6, "updateTime"),
    /**
     * 编号
     */
    ID((short)7, "id");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CLIENT_NO
          return CLIENT_NO;
        case 2: // CLIENT_NAME
          return CLIENT_NAME;
        case 3: // FUNCTION_DESC
          return FUNCTION_DESC;
        case 4: // PAYMENT_METHOD_DESC
          return PAYMENT_METHOD_DESC;
        case 5: // CREATE_TIME
          return CREATE_TIME;
        case 6: // UPDATE_TIME
          return UPDATE_TIME;
        case 7: // ID
          return ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CREATETIME_ISSET_ID = 0;
  private static final int __UPDATETIME_ISSET_ID = 1;
  private static final int __ID_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CLIENT_NO, new org.apache.thrift.meta_data.FieldMetaData("clientNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CLIENT_NAME, new org.apache.thrift.meta_data.FieldMetaData("clientName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FUNCTION_DESC, new org.apache.thrift.meta_data.FieldMetaData("functionDesc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAYMENT_METHOD_DESC, new org.apache.thrift.meta_data.FieldMetaData("paymentMethodDesc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("updateTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BankAccessVo.class, metaDataMap);
  }

  public BankAccessVo() {
  }

  public BankAccessVo(
    String clientNo,
    String clientName,
    String functionDesc,
    String paymentMethodDesc,
    long createTime,
    long updateTime,
    long id)
  {
    this();
    this.clientNo = clientNo;
    this.clientName = clientName;
    this.functionDesc = functionDesc;
    this.paymentMethodDesc = paymentMethodDesc;
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    this.updateTime = updateTime;
    setUpdateTimeIsSet(true);
    this.id = id;
    setIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BankAccessVo(BankAccessVo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetClientNo()) {
      this.clientNo = other.clientNo;
    }
    if (other.isSetClientName()) {
      this.clientName = other.clientName;
    }
    if (other.isSetFunctionDesc()) {
      this.functionDesc = other.functionDesc;
    }
    if (other.isSetPaymentMethodDesc()) {
      this.paymentMethodDesc = other.paymentMethodDesc;
    }
    this.createTime = other.createTime;
    this.updateTime = other.updateTime;
    this.id = other.id;
  }

  public BankAccessVo deepCopy() {
    return new BankAccessVo(this);
  }

  @Override
  public void clear() {
    this.clientNo = null;
    this.clientName = null;
    this.functionDesc = null;
    this.paymentMethodDesc = null;
    setCreateTimeIsSet(false);
    this.createTime = 0;
    setUpdateTimeIsSet(false);
    this.updateTime = 0;
    setIdIsSet(false);
    this.id = 0;
  }

  /**
   * 客户端号
   */
  public String getClientNo() {
    return this.clientNo;
  }

  /**
   * 客户端号
   */
  public BankAccessVo setClientNo(String clientNo) {
    this.clientNo = clientNo;
    return this;
  }

  public void unsetClientNo() {
    this.clientNo = null;
  }

  /** Returns true if field clientNo is set (has been assigned a value) and false otherwise */
  public boolean isSetClientNo() {
    return this.clientNo != null;
  }

  public void setClientNoIsSet(boolean value) {
    if (!value) {
      this.clientNo = null;
    }
  }

  /**
   * 客户端名称
   */
  public String getClientName() {
    return this.clientName;
  }

  /**
   * 客户端名称
   */
  public BankAccessVo setClientName(String clientName) {
    this.clientName = clientName;
    return this;
  }

  public void unsetClientName() {
    this.clientName = null;
  }

  /** Returns true if field clientName is set (has been assigned a value) and false otherwise */
  public boolean isSetClientName() {
    return this.clientName != null;
  }

  public void setClientNameIsSet(boolean value) {
    if (!value) {
      this.clientName = null;
    }
  }

  /**
   * 功能模块
   */
  public String getFunctionDesc() {
    return this.functionDesc;
  }

  /**
   * 功能模块
   */
  public BankAccessVo setFunctionDesc(String functionDesc) {
    this.functionDesc = functionDesc;
    return this;
  }

  public void unsetFunctionDesc() {
    this.functionDesc = null;
  }

  /** Returns true if field functionDesc is set (has been assigned a value) and false otherwise */
  public boolean isSetFunctionDesc() {
    return this.functionDesc != null;
  }

  public void setFunctionDescIsSet(boolean value) {
    if (!value) {
      this.functionDesc = null;
    }
  }

  /**
   * 支付方式
   */
  public String getPaymentMethodDesc() {
    return this.paymentMethodDesc;
  }

  /**
   * 支付方式
   */
  public BankAccessVo setPaymentMethodDesc(String paymentMethodDesc) {
    this.paymentMethodDesc = paymentMethodDesc;
    return this;
  }

  public void unsetPaymentMethodDesc() {
    this.paymentMethodDesc = null;
  }

  /** Returns true if field paymentMethodDesc is set (has been assigned a value) and false otherwise */
  public boolean isSetPaymentMethodDesc() {
    return this.paymentMethodDesc != null;
  }

  public void setPaymentMethodDescIsSet(boolean value) {
    if (!value) {
      this.paymentMethodDesc = null;
    }
  }

  /**
   * 配置时间
   */
  public long getCreateTime() {
    return this.createTime;
  }

  /**
   * 配置时间
   */
  public BankAccessVo setCreateTime(long createTime) {
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    return this;
  }

  public void unsetCreateTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  public void setCreateTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATETIME_ISSET_ID, value);
  }

  /**
   * 更新时间
   */
  public long getUpdateTime() {
    return this.updateTime;
  }

  /**
   * 更新时间
   */
  public BankAccessVo setUpdateTime(long updateTime) {
    this.updateTime = updateTime;
    setUpdateTimeIsSet(true);
    return this;
  }

  public void unsetUpdateTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UPDATETIME_ISSET_ID);
  }

  /** Returns true if field updateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateTime() {
    return EncodingUtils.testBit(__isset_bitfield, __UPDATETIME_ISSET_ID);
  }

  public void setUpdateTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UPDATETIME_ISSET_ID, value);
  }

  /**
   * 编号
   */
  public long getId() {
    return this.id;
  }

  /**
   * 编号
   */
  public BankAccessVo setId(long id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CLIENT_NO:
      if (value == null) {
        unsetClientNo();
      } else {
        setClientNo((String)value);
      }
      break;

    case CLIENT_NAME:
      if (value == null) {
        unsetClientName();
      } else {
        setClientName((String)value);
      }
      break;

    case FUNCTION_DESC:
      if (value == null) {
        unsetFunctionDesc();
      } else {
        setFunctionDesc((String)value);
      }
      break;

    case PAYMENT_METHOD_DESC:
      if (value == null) {
        unsetPaymentMethodDesc();
      } else {
        setPaymentMethodDesc((String)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((Long)value);
      }
      break;

    case UPDATE_TIME:
      if (value == null) {
        unsetUpdateTime();
      } else {
        setUpdateTime((Long)value);
      }
      break;

    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CLIENT_NO:
      return getClientNo();

    case CLIENT_NAME:
      return getClientName();

    case FUNCTION_DESC:
      return getFunctionDesc();

    case PAYMENT_METHOD_DESC:
      return getPaymentMethodDesc();

    case CREATE_TIME:
      return Long.valueOf(getCreateTime());

    case UPDATE_TIME:
      return Long.valueOf(getUpdateTime());

    case ID:
      return Long.valueOf(getId());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CLIENT_NO:
      return isSetClientNo();
    case CLIENT_NAME:
      return isSetClientName();
    case FUNCTION_DESC:
      return isSetFunctionDesc();
    case PAYMENT_METHOD_DESC:
      return isSetPaymentMethodDesc();
    case CREATE_TIME:
      return isSetCreateTime();
    case UPDATE_TIME:
      return isSetUpdateTime();
    case ID:
      return isSetId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BankAccessVo)
      return this.equals((BankAccessVo)that);
    return false;
  }

  public boolean equals(BankAccessVo that) {
    if (that == null)
      return false;

    boolean this_present_clientNo = true && this.isSetClientNo();
    boolean that_present_clientNo = true && that.isSetClientNo();
    if (this_present_clientNo || that_present_clientNo) {
      if (!(this_present_clientNo && that_present_clientNo))
        return false;
      if (!this.clientNo.equals(that.clientNo))
        return false;
    }

    boolean this_present_clientName = true && this.isSetClientName();
    boolean that_present_clientName = true && that.isSetClientName();
    if (this_present_clientName || that_present_clientName) {
      if (!(this_present_clientName && that_present_clientName))
        return false;
      if (!this.clientName.equals(that.clientName))
        return false;
    }

    boolean this_present_functionDesc = true && this.isSetFunctionDesc();
    boolean that_present_functionDesc = true && that.isSetFunctionDesc();
    if (this_present_functionDesc || that_present_functionDesc) {
      if (!(this_present_functionDesc && that_present_functionDesc))
        return false;
      if (!this.functionDesc.equals(that.functionDesc))
        return false;
    }

    boolean this_present_paymentMethodDesc = true && this.isSetPaymentMethodDesc();
    boolean that_present_paymentMethodDesc = true && that.isSetPaymentMethodDesc();
    if (this_present_paymentMethodDesc || that_present_paymentMethodDesc) {
      if (!(this_present_paymentMethodDesc && that_present_paymentMethodDesc))
        return false;
      if (!this.paymentMethodDesc.equals(that.paymentMethodDesc))
        return false;
    }

    boolean this_present_createTime = true;
    boolean that_present_createTime = true;
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (this.createTime != that.createTime)
        return false;
    }

    boolean this_present_updateTime = true;
    boolean that_present_updateTime = true;
    if (this_present_updateTime || that_present_updateTime) {
      if (!(this_present_updateTime && that_present_updateTime))
        return false;
      if (this.updateTime != that.updateTime)
        return false;
    }

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_clientNo = true && (isSetClientNo());
    list.add(present_clientNo);
    if (present_clientNo)
      list.add(clientNo);

    boolean present_clientName = true && (isSetClientName());
    list.add(present_clientName);
    if (present_clientName)
      list.add(clientName);

    boolean present_functionDesc = true && (isSetFunctionDesc());
    list.add(present_functionDesc);
    if (present_functionDesc)
      list.add(functionDesc);

    boolean present_paymentMethodDesc = true && (isSetPaymentMethodDesc());
    list.add(present_paymentMethodDesc);
    if (present_paymentMethodDesc)
      list.add(paymentMethodDesc);

    boolean present_createTime = true;
    list.add(present_createTime);
    if (present_createTime)
      list.add(createTime);

    boolean present_updateTime = true;
    list.add(present_updateTime);
    if (present_updateTime)
      list.add(updateTime);

    boolean present_id = true;
    list.add(present_id);
    if (present_id)
      list.add(id);

    return list.hashCode();
  }

  @Override
  public int compareTo(BankAccessVo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetClientNo()).compareTo(other.isSetClientNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClientNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientNo, other.clientNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClientName()).compareTo(other.isSetClientName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClientName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientName, other.clientName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFunctionDesc()).compareTo(other.isSetFunctionDesc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFunctionDesc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.functionDesc, other.functionDesc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPaymentMethodDesc()).compareTo(other.isSetPaymentMethodDesc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPaymentMethodDesc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paymentMethodDesc, other.paymentMethodDesc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateTime()).compareTo(other.isSetUpdateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateTime, other.updateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("BankAccessVo(");
    boolean first = true;

    sb.append("clientNo:");
    if (this.clientNo == null) {
      sb.append("null");
    } else {
      sb.append(this.clientNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("clientName:");
    if (this.clientName == null) {
      sb.append("null");
    } else {
      sb.append(this.clientName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("functionDesc:");
    if (this.functionDesc == null) {
      sb.append("null");
    } else {
      sb.append(this.functionDesc);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("paymentMethodDesc:");
    if (this.paymentMethodDesc == null) {
      sb.append("null");
    } else {
      sb.append(this.paymentMethodDesc);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTime:");
    sb.append(this.createTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("updateTime:");
    sb.append(this.updateTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("id:");
    sb.append(this.id);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BankAccessVoStandardSchemeFactory implements SchemeFactory {
    public BankAccessVoStandardScheme getScheme() {
      return new BankAccessVoStandardScheme();
    }
  }

  private static class BankAccessVoStandardScheme extends StandardScheme<BankAccessVo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BankAccessVo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CLIENT_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clientNo = iprot.readString();
              struct.setClientNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CLIENT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clientName = iprot.readString();
              struct.setClientNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // FUNCTION_DESC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.functionDesc = iprot.readString();
              struct.setFunctionDescIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PAYMENT_METHOD_DESC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.paymentMethodDesc = iprot.readString();
              struct.setPaymentMethodDescIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createTime = iprot.readI64();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // UPDATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.updateTime = iprot.readI64();
              struct.setUpdateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BankAccessVo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.clientNo != null) {
        oprot.writeFieldBegin(CLIENT_NO_FIELD_DESC);
        oprot.writeString(struct.clientNo);
        oprot.writeFieldEnd();
      }
      if (struct.clientName != null) {
        oprot.writeFieldBegin(CLIENT_NAME_FIELD_DESC);
        oprot.writeString(struct.clientName);
        oprot.writeFieldEnd();
      }
      if (struct.functionDesc != null) {
        oprot.writeFieldBegin(FUNCTION_DESC_FIELD_DESC);
        oprot.writeString(struct.functionDesc);
        oprot.writeFieldEnd();
      }
      if (struct.paymentMethodDesc != null) {
        oprot.writeFieldBegin(PAYMENT_METHOD_DESC_FIELD_DESC);
        oprot.writeString(struct.paymentMethodDesc);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
      oprot.writeI64(struct.createTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UPDATE_TIME_FIELD_DESC);
      oprot.writeI64(struct.updateTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI64(struct.id);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BankAccessVoTupleSchemeFactory implements SchemeFactory {
    public BankAccessVoTupleScheme getScheme() {
      return new BankAccessVoTupleScheme();
    }
  }

  private static class BankAccessVoTupleScheme extends TupleScheme<BankAccessVo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BankAccessVo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetClientNo()) {
        optionals.set(0);
      }
      if (struct.isSetClientName()) {
        optionals.set(1);
      }
      if (struct.isSetFunctionDesc()) {
        optionals.set(2);
      }
      if (struct.isSetPaymentMethodDesc()) {
        optionals.set(3);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(4);
      }
      if (struct.isSetUpdateTime()) {
        optionals.set(5);
      }
      if (struct.isSetId()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetClientNo()) {
        oprot.writeString(struct.clientNo);
      }
      if (struct.isSetClientName()) {
        oprot.writeString(struct.clientName);
      }
      if (struct.isSetFunctionDesc()) {
        oprot.writeString(struct.functionDesc);
      }
      if (struct.isSetPaymentMethodDesc()) {
        oprot.writeString(struct.paymentMethodDesc);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeI64(struct.createTime);
      }
      if (struct.isSetUpdateTime()) {
        oprot.writeI64(struct.updateTime);
      }
      if (struct.isSetId()) {
        oprot.writeI64(struct.id);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BankAccessVo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.clientNo = iprot.readString();
        struct.setClientNoIsSet(true);
      }
      if (incoming.get(1)) {
        struct.clientName = iprot.readString();
        struct.setClientNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.functionDesc = iprot.readString();
        struct.setFunctionDescIsSet(true);
      }
      if (incoming.get(3)) {
        struct.paymentMethodDesc = iprot.readString();
        struct.setPaymentMethodDescIsSet(true);
      }
      if (incoming.get(4)) {
        struct.createTime = iprot.readI64();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.updateTime = iprot.readI64();
        struct.setUpdateTimeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.id = iprot.readI64();
        struct.setIdIsSet(true);
      }
    }
  }

}

