/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.vo.merchant;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-11-2")
public class MerchantCategoryVo implements org.apache.thrift.TBase<MerchantCategoryVo, MerchantCategoryVo._Fields>, java.io.Serializable, Cloneable, Comparable<MerchantCategoryVo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MerchantCategoryVo");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField CLIENT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("clientName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField MERCHANT_CATEGORY_FIELD_DESC = new org.apache.thrift.protocol.TField("merchantCategory", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField MERCHANT_CATEGRY_DETAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("merchantCategryDetail", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField MERCHANT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("merchantName", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField MERCHANT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("merchantId", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField LICENSE_FIELD_DESC = new org.apache.thrift.protocol.TField("license", org.apache.thrift.protocol.TType.STRING, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new MerchantCategoryVoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new MerchantCategoryVoTupleSchemeFactory());
  }

  /**
   * 序号
   */
  public long id; // optional
  /**
   * 所属客户端
   */
  public String clientName; // required
  /**
   * 商户分类
   */
  public String merchantCategory; // required
  /**
   * 商户分类详细
   */
  public String merchantCategryDetail; // required
  /**
   * 商户名称
   */
  public String merchantName; // required
  /**
   * 商户ID
   */
  public String merchantId; // required
  /**
   * 营业执照号
   */
  public String license; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 序号
     */
    ID((short)1, "id"),
    /**
     * 所属客户端
     */
    CLIENT_NAME((short)2, "clientName"),
    /**
     * 商户分类
     */
    MERCHANT_CATEGORY((short)3, "merchantCategory"),
    /**
     * 商户分类详细
     */
    MERCHANT_CATEGRY_DETAIL((short)4, "merchantCategryDetail"),
    /**
     * 商户名称
     */
    MERCHANT_NAME((short)5, "merchantName"),
    /**
     * 商户ID
     */
    MERCHANT_ID((short)6, "merchantId"),
    /**
     * 营业执照号
     */
    LICENSE((short)7, "license");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // CLIENT_NAME
          return CLIENT_NAME;
        case 3: // MERCHANT_CATEGORY
          return MERCHANT_CATEGORY;
        case 4: // MERCHANT_CATEGRY_DETAIL
          return MERCHANT_CATEGRY_DETAIL;
        case 5: // MERCHANT_NAME
          return MERCHANT_NAME;
        case 6: // MERCHANT_ID
          return MERCHANT_ID;
        case 7: // LICENSE
          return LICENSE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ID};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CLIENT_NAME, new org.apache.thrift.meta_data.FieldMetaData("clientName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MERCHANT_CATEGORY, new org.apache.thrift.meta_data.FieldMetaData("merchantCategory", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MERCHANT_CATEGRY_DETAIL, new org.apache.thrift.meta_data.FieldMetaData("merchantCategryDetail", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MERCHANT_NAME, new org.apache.thrift.meta_data.FieldMetaData("merchantName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MERCHANT_ID, new org.apache.thrift.meta_data.FieldMetaData("merchantId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LICENSE, new org.apache.thrift.meta_data.FieldMetaData("license", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MerchantCategoryVo.class, metaDataMap);
  }

  public MerchantCategoryVo() {
  }

  public MerchantCategoryVo(
    String clientName,
    String merchantCategory,
    String merchantCategryDetail,
    String merchantName,
    String merchantId,
    String license)
  {
    this();
    this.clientName = clientName;
    this.merchantCategory = merchantCategory;
    this.merchantCategryDetail = merchantCategryDetail;
    this.merchantName = merchantName;
    this.merchantId = merchantId;
    this.license = license;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MerchantCategoryVo(MerchantCategoryVo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetClientName()) {
      this.clientName = other.clientName;
    }
    if (other.isSetMerchantCategory()) {
      this.merchantCategory = other.merchantCategory;
    }
    if (other.isSetMerchantCategryDetail()) {
      this.merchantCategryDetail = other.merchantCategryDetail;
    }
    if (other.isSetMerchantName()) {
      this.merchantName = other.merchantName;
    }
    if (other.isSetMerchantId()) {
      this.merchantId = other.merchantId;
    }
    if (other.isSetLicense()) {
      this.license = other.license;
    }
  }

  public MerchantCategoryVo deepCopy() {
    return new MerchantCategoryVo(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.clientName = null;
    this.merchantCategory = null;
    this.merchantCategryDetail = null;
    this.merchantName = null;
    this.merchantId = null;
    this.license = null;
  }

  /**
   * 序号
   */
  public long getId() {
    return this.id;
  }

  /**
   * 序号
   */
  public MerchantCategoryVo setId(long id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  /**
   * 所属客户端
   */
  public String getClientName() {
    return this.clientName;
  }

  /**
   * 所属客户端
   */
  public MerchantCategoryVo setClientName(String clientName) {
    this.clientName = clientName;
    return this;
  }

  public void unsetClientName() {
    this.clientName = null;
  }

  /** Returns true if field clientName is set (has been assigned a value) and false otherwise */
  public boolean isSetClientName() {
    return this.clientName != null;
  }

  public void setClientNameIsSet(boolean value) {
    if (!value) {
      this.clientName = null;
    }
  }

  /**
   * 商户分类
   */
  public String getMerchantCategory() {
    return this.merchantCategory;
  }

  /**
   * 商户分类
   */
  public MerchantCategoryVo setMerchantCategory(String merchantCategory) {
    this.merchantCategory = merchantCategory;
    return this;
  }

  public void unsetMerchantCategory() {
    this.merchantCategory = null;
  }

  /** Returns true if field merchantCategory is set (has been assigned a value) and false otherwise */
  public boolean isSetMerchantCategory() {
    return this.merchantCategory != null;
  }

  public void setMerchantCategoryIsSet(boolean value) {
    if (!value) {
      this.merchantCategory = null;
    }
  }

  /**
   * 商户分类详细
   */
  public String getMerchantCategryDetail() {
    return this.merchantCategryDetail;
  }

  /**
   * 商户分类详细
   */
  public MerchantCategoryVo setMerchantCategryDetail(String merchantCategryDetail) {
    this.merchantCategryDetail = merchantCategryDetail;
    return this;
  }

  public void unsetMerchantCategryDetail() {
    this.merchantCategryDetail = null;
  }

  /** Returns true if field merchantCategryDetail is set (has been assigned a value) and false otherwise */
  public boolean isSetMerchantCategryDetail() {
    return this.merchantCategryDetail != null;
  }

  public void setMerchantCategryDetailIsSet(boolean value) {
    if (!value) {
      this.merchantCategryDetail = null;
    }
  }

  /**
   * 商户名称
   */
  public String getMerchantName() {
    return this.merchantName;
  }

  /**
   * 商户名称
   */
  public MerchantCategoryVo setMerchantName(String merchantName) {
    this.merchantName = merchantName;
    return this;
  }

  public void unsetMerchantName() {
    this.merchantName = null;
  }

  /** Returns true if field merchantName is set (has been assigned a value) and false otherwise */
  public boolean isSetMerchantName() {
    return this.merchantName != null;
  }

  public void setMerchantNameIsSet(boolean value) {
    if (!value) {
      this.merchantName = null;
    }
  }

  /**
   * 商户ID
   */
  public String getMerchantId() {
    return this.merchantId;
  }

  /**
   * 商户ID
   */
  public MerchantCategoryVo setMerchantId(String merchantId) {
    this.merchantId = merchantId;
    return this;
  }

  public void unsetMerchantId() {
    this.merchantId = null;
  }

  /** Returns true if field merchantId is set (has been assigned a value) and false otherwise */
  public boolean isSetMerchantId() {
    return this.merchantId != null;
  }

  public void setMerchantIdIsSet(boolean value) {
    if (!value) {
      this.merchantId = null;
    }
  }

  /**
   * 营业执照号
   */
  public String getLicense() {
    return this.license;
  }

  /**
   * 营业执照号
   */
  public MerchantCategoryVo setLicense(String license) {
    this.license = license;
    return this;
  }

  public void unsetLicense() {
    this.license = null;
  }

  /** Returns true if field license is set (has been assigned a value) and false otherwise */
  public boolean isSetLicense() {
    return this.license != null;
  }

  public void setLicenseIsSet(boolean value) {
    if (!value) {
      this.license = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    case CLIENT_NAME:
      if (value == null) {
        unsetClientName();
      } else {
        setClientName((String)value);
      }
      break;

    case MERCHANT_CATEGORY:
      if (value == null) {
        unsetMerchantCategory();
      } else {
        setMerchantCategory((String)value);
      }
      break;

    case MERCHANT_CATEGRY_DETAIL:
      if (value == null) {
        unsetMerchantCategryDetail();
      } else {
        setMerchantCategryDetail((String)value);
      }
      break;

    case MERCHANT_NAME:
      if (value == null) {
        unsetMerchantName();
      } else {
        setMerchantName((String)value);
      }
      break;

    case MERCHANT_ID:
      if (value == null) {
        unsetMerchantId();
      } else {
        setMerchantId((String)value);
      }
      break;

    case LICENSE:
      if (value == null) {
        unsetLicense();
      } else {
        setLicense((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Long.valueOf(getId());

    case CLIENT_NAME:
      return getClientName();

    case MERCHANT_CATEGORY:
      return getMerchantCategory();

    case MERCHANT_CATEGRY_DETAIL:
      return getMerchantCategryDetail();

    case MERCHANT_NAME:
      return getMerchantName();

    case MERCHANT_ID:
      return getMerchantId();

    case LICENSE:
      return getLicense();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case CLIENT_NAME:
      return isSetClientName();
    case MERCHANT_CATEGORY:
      return isSetMerchantCategory();
    case MERCHANT_CATEGRY_DETAIL:
      return isSetMerchantCategryDetail();
    case MERCHANT_NAME:
      return isSetMerchantName();
    case MERCHANT_ID:
      return isSetMerchantId();
    case LICENSE:
      return isSetLicense();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof MerchantCategoryVo)
      return this.equals((MerchantCategoryVo)that);
    return false;
  }

  public boolean equals(MerchantCategoryVo that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_clientName = true && this.isSetClientName();
    boolean that_present_clientName = true && that.isSetClientName();
    if (this_present_clientName || that_present_clientName) {
      if (!(this_present_clientName && that_present_clientName))
        return false;
      if (!this.clientName.equals(that.clientName))
        return false;
    }

    boolean this_present_merchantCategory = true && this.isSetMerchantCategory();
    boolean that_present_merchantCategory = true && that.isSetMerchantCategory();
    if (this_present_merchantCategory || that_present_merchantCategory) {
      if (!(this_present_merchantCategory && that_present_merchantCategory))
        return false;
      if (!this.merchantCategory.equals(that.merchantCategory))
        return false;
    }

    boolean this_present_merchantCategryDetail = true && this.isSetMerchantCategryDetail();
    boolean that_present_merchantCategryDetail = true && that.isSetMerchantCategryDetail();
    if (this_present_merchantCategryDetail || that_present_merchantCategryDetail) {
      if (!(this_present_merchantCategryDetail && that_present_merchantCategryDetail))
        return false;
      if (!this.merchantCategryDetail.equals(that.merchantCategryDetail))
        return false;
    }

    boolean this_present_merchantName = true && this.isSetMerchantName();
    boolean that_present_merchantName = true && that.isSetMerchantName();
    if (this_present_merchantName || that_present_merchantName) {
      if (!(this_present_merchantName && that_present_merchantName))
        return false;
      if (!this.merchantName.equals(that.merchantName))
        return false;
    }

    boolean this_present_merchantId = true && this.isSetMerchantId();
    boolean that_present_merchantId = true && that.isSetMerchantId();
    if (this_present_merchantId || that_present_merchantId) {
      if (!(this_present_merchantId && that_present_merchantId))
        return false;
      if (!this.merchantId.equals(that.merchantId))
        return false;
    }

    boolean this_present_license = true && this.isSetLicense();
    boolean that_present_license = true && that.isSetLicense();
    if (this_present_license || that_present_license) {
      if (!(this_present_license && that_present_license))
        return false;
      if (!this.license.equals(that.license))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true && (isSetId());
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_clientName = true && (isSetClientName());
    list.add(present_clientName);
    if (present_clientName)
      list.add(clientName);

    boolean present_merchantCategory = true && (isSetMerchantCategory());
    list.add(present_merchantCategory);
    if (present_merchantCategory)
      list.add(merchantCategory);

    boolean present_merchantCategryDetail = true && (isSetMerchantCategryDetail());
    list.add(present_merchantCategryDetail);
    if (present_merchantCategryDetail)
      list.add(merchantCategryDetail);

    boolean present_merchantName = true && (isSetMerchantName());
    list.add(present_merchantName);
    if (present_merchantName)
      list.add(merchantName);

    boolean present_merchantId = true && (isSetMerchantId());
    list.add(present_merchantId);
    if (present_merchantId)
      list.add(merchantId);

    boolean present_license = true && (isSetLicense());
    list.add(present_license);
    if (present_license)
      list.add(license);

    return list.hashCode();
  }

  @Override
  public int compareTo(MerchantCategoryVo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClientName()).compareTo(other.isSetClientName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClientName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientName, other.clientName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMerchantCategory()).compareTo(other.isSetMerchantCategory());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMerchantCategory()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchantCategory, other.merchantCategory);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMerchantCategryDetail()).compareTo(other.isSetMerchantCategryDetail());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMerchantCategryDetail()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchantCategryDetail, other.merchantCategryDetail);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMerchantName()).compareTo(other.isSetMerchantName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMerchantName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchantName, other.merchantName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMerchantId()).compareTo(other.isSetMerchantId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMerchantId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchantId, other.merchantId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLicense()).compareTo(other.isSetLicense());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLicense()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.license, other.license);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("MerchantCategoryVo(");
    boolean first = true;

    if (isSetId()) {
      sb.append("id:");
      sb.append(this.id);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("clientName:");
    if (this.clientName == null) {
      sb.append("null");
    } else {
      sb.append(this.clientName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("merchantCategory:");
    if (this.merchantCategory == null) {
      sb.append("null");
    } else {
      sb.append(this.merchantCategory);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("merchantCategryDetail:");
    if (this.merchantCategryDetail == null) {
      sb.append("null");
    } else {
      sb.append(this.merchantCategryDetail);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("merchantName:");
    if (this.merchantName == null) {
      sb.append("null");
    } else {
      sb.append(this.merchantName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("merchantId:");
    if (this.merchantId == null) {
      sb.append("null");
    } else {
      sb.append(this.merchantId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("license:");
    if (this.license == null) {
      sb.append("null");
    } else {
      sb.append(this.license);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MerchantCategoryVoStandardSchemeFactory implements SchemeFactory {
    public MerchantCategoryVoStandardScheme getScheme() {
      return new MerchantCategoryVoStandardScheme();
    }
  }

  private static class MerchantCategoryVoStandardScheme extends StandardScheme<MerchantCategoryVo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MerchantCategoryVo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CLIENT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clientName = iprot.readString();
              struct.setClientNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MERCHANT_CATEGORY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.merchantCategory = iprot.readString();
              struct.setMerchantCategoryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MERCHANT_CATEGRY_DETAIL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.merchantCategryDetail = iprot.readString();
              struct.setMerchantCategryDetailIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // MERCHANT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.merchantName = iprot.readString();
              struct.setMerchantNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // MERCHANT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.merchantId = iprot.readString();
              struct.setMerchantIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // LICENSE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.license = iprot.readString();
              struct.setLicenseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MerchantCategoryVo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetId()) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI64(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.clientName != null) {
        oprot.writeFieldBegin(CLIENT_NAME_FIELD_DESC);
        oprot.writeString(struct.clientName);
        oprot.writeFieldEnd();
      }
      if (struct.merchantCategory != null) {
        oprot.writeFieldBegin(MERCHANT_CATEGORY_FIELD_DESC);
        oprot.writeString(struct.merchantCategory);
        oprot.writeFieldEnd();
      }
      if (struct.merchantCategryDetail != null) {
        oprot.writeFieldBegin(MERCHANT_CATEGRY_DETAIL_FIELD_DESC);
        oprot.writeString(struct.merchantCategryDetail);
        oprot.writeFieldEnd();
      }
      if (struct.merchantName != null) {
        oprot.writeFieldBegin(MERCHANT_NAME_FIELD_DESC);
        oprot.writeString(struct.merchantName);
        oprot.writeFieldEnd();
      }
      if (struct.merchantId != null) {
        oprot.writeFieldBegin(MERCHANT_ID_FIELD_DESC);
        oprot.writeString(struct.merchantId);
        oprot.writeFieldEnd();
      }
      if (struct.license != null) {
        oprot.writeFieldBegin(LICENSE_FIELD_DESC);
        oprot.writeString(struct.license);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MerchantCategoryVoTupleSchemeFactory implements SchemeFactory {
    public MerchantCategoryVoTupleScheme getScheme() {
      return new MerchantCategoryVoTupleScheme();
    }
  }

  private static class MerchantCategoryVoTupleScheme extends TupleScheme<MerchantCategoryVo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MerchantCategoryVo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetClientName()) {
        optionals.set(1);
      }
      if (struct.isSetMerchantCategory()) {
        optionals.set(2);
      }
      if (struct.isSetMerchantCategryDetail()) {
        optionals.set(3);
      }
      if (struct.isSetMerchantName()) {
        optionals.set(4);
      }
      if (struct.isSetMerchantId()) {
        optionals.set(5);
      }
      if (struct.isSetLicense()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetId()) {
        oprot.writeI64(struct.id);
      }
      if (struct.isSetClientName()) {
        oprot.writeString(struct.clientName);
      }
      if (struct.isSetMerchantCategory()) {
        oprot.writeString(struct.merchantCategory);
      }
      if (struct.isSetMerchantCategryDetail()) {
        oprot.writeString(struct.merchantCategryDetail);
      }
      if (struct.isSetMerchantName()) {
        oprot.writeString(struct.merchantName);
      }
      if (struct.isSetMerchantId()) {
        oprot.writeString(struct.merchantId);
      }
      if (struct.isSetLicense()) {
        oprot.writeString(struct.license);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MerchantCategoryVo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.clientName = iprot.readString();
        struct.setClientNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.merchantCategory = iprot.readString();
        struct.setMerchantCategoryIsSet(true);
      }
      if (incoming.get(3)) {
        struct.merchantCategryDetail = iprot.readString();
        struct.setMerchantCategryDetailIsSet(true);
      }
      if (incoming.get(4)) {
        struct.merchantName = iprot.readString();
        struct.setMerchantNameIsSet(true);
      }
      if (incoming.get(5)) {
        struct.merchantId = iprot.readString();
        struct.setMerchantIdIsSet(true);
      }
      if (incoming.get(6)) {
        struct.license = iprot.readString();
        struct.setLicenseIsSet(true);
      }
    }
  }

}

