/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.vo.payment;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 交易详情对象
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-10-20")
public class BossPaymentDetialVo implements org.apache.thrift.TBase<BossPaymentDetialVo, BossPaymentDetialVo._Fields>, java.io.Serializable, Cloneable, Comparable<BossPaymentDetialVo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BossPaymentDetialVo");

  private static final org.apache.thrift.protocol.TField ORDER_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("orderVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField EXCEPTION_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("exceptionType", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField EXCEPTION_DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("exceptionDesc", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField PROPOSAL_FIELD_DESC = new org.apache.thrift.protocol.TField("proposal", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField SETTLEMENT_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("settlementVo", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField PAYMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("payment", org.apache.thrift.protocol.TType.STRUCT, (short)6);
  private static final org.apache.thrift.protocol.TField REFUND_FIELD_DESC = new org.apache.thrift.protocol.TField("refund", org.apache.thrift.protocol.TType.STRUCT, (short)7);
  private static final org.apache.thrift.protocol.TField SUB_ORDERS_FIELD_DESC = new org.apache.thrift.protocol.TField("subOrders", org.apache.thrift.protocol.TType.LIST, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new BossPaymentDetialVoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new BossPaymentDetialVoTupleSchemeFactory());
  }

  /**
   * 订单信息
   */
  public BossOrderVo orderVo; // required
  /**
   * 异常类型
   */
  public String exceptionType; // required
  /**
   * 异常描述
   */
  public String exceptionDesc; // required
  /**
   * 处理建议
   */
  public String proposal; // required
  /**
   * 结算记录
   */
  public BossSettlementVo settlementVo; // required
  /**
   * 支付记录
   */
  public BossPaymentVo payment; // required
  /**
   * 退款记录
   */
  public BossRefundVo refund; // required
  public List<BossSubOrder> subOrders; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 订单信息
     */
    ORDER_VO((short)1, "orderVo"),
    /**
     * 异常类型
     */
    EXCEPTION_TYPE((short)2, "exceptionType"),
    /**
     * 异常描述
     */
    EXCEPTION_DESC((short)3, "exceptionDesc"),
    /**
     * 处理建议
     */
    PROPOSAL((short)4, "proposal"),
    /**
     * 结算记录
     */
    SETTLEMENT_VO((short)5, "settlementVo"),
    /**
     * 支付记录
     */
    PAYMENT((short)6, "payment"),
    /**
     * 退款记录
     */
    REFUND((short)7, "refund"),
    SUB_ORDERS((short)8, "subOrders");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ORDER_VO
          return ORDER_VO;
        case 2: // EXCEPTION_TYPE
          return EXCEPTION_TYPE;
        case 3: // EXCEPTION_DESC
          return EXCEPTION_DESC;
        case 4: // PROPOSAL
          return PROPOSAL;
        case 5: // SETTLEMENT_VO
          return SETTLEMENT_VO;
        case 6: // PAYMENT
          return PAYMENT;
        case 7: // REFUND
          return REFUND;
        case 8: // SUB_ORDERS
          return SUB_ORDERS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ORDER_VO, new org.apache.thrift.meta_data.FieldMetaData("orderVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BossOrderVo.class)));
    tmpMap.put(_Fields.EXCEPTION_TYPE, new org.apache.thrift.meta_data.FieldMetaData("exceptionType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXCEPTION_DESC, new org.apache.thrift.meta_data.FieldMetaData("exceptionDesc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROPOSAL, new org.apache.thrift.meta_data.FieldMetaData("proposal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SETTLEMENT_VO, new org.apache.thrift.meta_data.FieldMetaData("settlementVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BossSettlementVo.class)));
    tmpMap.put(_Fields.PAYMENT, new org.apache.thrift.meta_data.FieldMetaData("payment", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BossPaymentVo.class)));
    tmpMap.put(_Fields.REFUND, new org.apache.thrift.meta_data.FieldMetaData("refund", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BossRefundVo.class)));
    tmpMap.put(_Fields.SUB_ORDERS, new org.apache.thrift.meta_data.FieldMetaData("subOrders", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BossSubOrder.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BossPaymentDetialVo.class, metaDataMap);
  }

  public BossPaymentDetialVo() {
  }

  public BossPaymentDetialVo(
    BossOrderVo orderVo,
    String exceptionType,
    String exceptionDesc,
    String proposal,
    BossSettlementVo settlementVo,
    BossPaymentVo payment,
    BossRefundVo refund,
    List<BossSubOrder> subOrders)
  {
    this();
    this.orderVo = orderVo;
    this.exceptionType = exceptionType;
    this.exceptionDesc = exceptionDesc;
    this.proposal = proposal;
    this.settlementVo = settlementVo;
    this.payment = payment;
    this.refund = refund;
    this.subOrders = subOrders;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BossPaymentDetialVo(BossPaymentDetialVo other) {
    if (other.isSetOrderVo()) {
      this.orderVo = new BossOrderVo(other.orderVo);
    }
    if (other.isSetExceptionType()) {
      this.exceptionType = other.exceptionType;
    }
    if (other.isSetExceptionDesc()) {
      this.exceptionDesc = other.exceptionDesc;
    }
    if (other.isSetProposal()) {
      this.proposal = other.proposal;
    }
    if (other.isSetSettlementVo()) {
      this.settlementVo = new BossSettlementVo(other.settlementVo);
    }
    if (other.isSetPayment()) {
      this.payment = new BossPaymentVo(other.payment);
    }
    if (other.isSetRefund()) {
      this.refund = new BossRefundVo(other.refund);
    }
    if (other.isSetSubOrders()) {
      List<BossSubOrder> __this__subOrders = new ArrayList<BossSubOrder>(other.subOrders.size());
      for (BossSubOrder other_element : other.subOrders) {
        __this__subOrders.add(new BossSubOrder(other_element));
      }
      this.subOrders = __this__subOrders;
    }
  }

  public BossPaymentDetialVo deepCopy() {
    return new BossPaymentDetialVo(this);
  }

  @Override
  public void clear() {
    this.orderVo = null;
    this.exceptionType = null;
    this.exceptionDesc = null;
    this.proposal = null;
    this.settlementVo = null;
    this.payment = null;
    this.refund = null;
    this.subOrders = null;
  }

  /**
   * 订单信息
   */
  public BossOrderVo getOrderVo() {
    return this.orderVo;
  }

  /**
   * 订单信息
   */
  public BossPaymentDetialVo setOrderVo(BossOrderVo orderVo) {
    this.orderVo = orderVo;
    return this;
  }

  public void unsetOrderVo() {
    this.orderVo = null;
  }

  /** Returns true if field orderVo is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderVo() {
    return this.orderVo != null;
  }

  public void setOrderVoIsSet(boolean value) {
    if (!value) {
      this.orderVo = null;
    }
  }

  /**
   * 异常类型
   */
  public String getExceptionType() {
    return this.exceptionType;
  }

  /**
   * 异常类型
   */
  public BossPaymentDetialVo setExceptionType(String exceptionType) {
    this.exceptionType = exceptionType;
    return this;
  }

  public void unsetExceptionType() {
    this.exceptionType = null;
  }

  /** Returns true if field exceptionType is set (has been assigned a value) and false otherwise */
  public boolean isSetExceptionType() {
    return this.exceptionType != null;
  }

  public void setExceptionTypeIsSet(boolean value) {
    if (!value) {
      this.exceptionType = null;
    }
  }

  /**
   * 异常描述
   */
  public String getExceptionDesc() {
    return this.exceptionDesc;
  }

  /**
   * 异常描述
   */
  public BossPaymentDetialVo setExceptionDesc(String exceptionDesc) {
    this.exceptionDesc = exceptionDesc;
    return this;
  }

  public void unsetExceptionDesc() {
    this.exceptionDesc = null;
  }

  /** Returns true if field exceptionDesc is set (has been assigned a value) and false otherwise */
  public boolean isSetExceptionDesc() {
    return this.exceptionDesc != null;
  }

  public void setExceptionDescIsSet(boolean value) {
    if (!value) {
      this.exceptionDesc = null;
    }
  }

  /**
   * 处理建议
   */
  public String getProposal() {
    return this.proposal;
  }

  /**
   * 处理建议
   */
  public BossPaymentDetialVo setProposal(String proposal) {
    this.proposal = proposal;
    return this;
  }

  public void unsetProposal() {
    this.proposal = null;
  }

  /** Returns true if field proposal is set (has been assigned a value) and false otherwise */
  public boolean isSetProposal() {
    return this.proposal != null;
  }

  public void setProposalIsSet(boolean value) {
    if (!value) {
      this.proposal = null;
    }
  }

  /**
   * 结算记录
   */
  public BossSettlementVo getSettlementVo() {
    return this.settlementVo;
  }

  /**
   * 结算记录
   */
  public BossPaymentDetialVo setSettlementVo(BossSettlementVo settlementVo) {
    this.settlementVo = settlementVo;
    return this;
  }

  public void unsetSettlementVo() {
    this.settlementVo = null;
  }

  /** Returns true if field settlementVo is set (has been assigned a value) and false otherwise */
  public boolean isSetSettlementVo() {
    return this.settlementVo != null;
  }

  public void setSettlementVoIsSet(boolean value) {
    if (!value) {
      this.settlementVo = null;
    }
  }

  /**
   * 支付记录
   */
  public BossPaymentVo getPayment() {
    return this.payment;
  }

  /**
   * 支付记录
   */
  public BossPaymentDetialVo setPayment(BossPaymentVo payment) {
    this.payment = payment;
    return this;
  }

  public void unsetPayment() {
    this.payment = null;
  }

  /** Returns true if field payment is set (has been assigned a value) and false otherwise */
  public boolean isSetPayment() {
    return this.payment != null;
  }

  public void setPaymentIsSet(boolean value) {
    if (!value) {
      this.payment = null;
    }
  }

  /**
   * 退款记录
   */
  public BossRefundVo getRefund() {
    return this.refund;
  }

  /**
   * 退款记录
   */
  public BossPaymentDetialVo setRefund(BossRefundVo refund) {
    this.refund = refund;
    return this;
  }

  public void unsetRefund() {
    this.refund = null;
  }

  /** Returns true if field refund is set (has been assigned a value) and false otherwise */
  public boolean isSetRefund() {
    return this.refund != null;
  }

  public void setRefundIsSet(boolean value) {
    if (!value) {
      this.refund = null;
    }
  }

  public int getSubOrdersSize() {
    return (this.subOrders == null) ? 0 : this.subOrders.size();
  }

  public java.util.Iterator<BossSubOrder> getSubOrdersIterator() {
    return (this.subOrders == null) ? null : this.subOrders.iterator();
  }

  public void addToSubOrders(BossSubOrder elem) {
    if (this.subOrders == null) {
      this.subOrders = new ArrayList<BossSubOrder>();
    }
    this.subOrders.add(elem);
  }

  public List<BossSubOrder> getSubOrders() {
    return this.subOrders;
  }

  public BossPaymentDetialVo setSubOrders(List<BossSubOrder> subOrders) {
    this.subOrders = subOrders;
    return this;
  }

  public void unsetSubOrders() {
    this.subOrders = null;
  }

  /** Returns true if field subOrders is set (has been assigned a value) and false otherwise */
  public boolean isSetSubOrders() {
    return this.subOrders != null;
  }

  public void setSubOrdersIsSet(boolean value) {
    if (!value) {
      this.subOrders = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ORDER_VO:
      if (value == null) {
        unsetOrderVo();
      } else {
        setOrderVo((BossOrderVo)value);
      }
      break;

    case EXCEPTION_TYPE:
      if (value == null) {
        unsetExceptionType();
      } else {
        setExceptionType((String)value);
      }
      break;

    case EXCEPTION_DESC:
      if (value == null) {
        unsetExceptionDesc();
      } else {
        setExceptionDesc((String)value);
      }
      break;

    case PROPOSAL:
      if (value == null) {
        unsetProposal();
      } else {
        setProposal((String)value);
      }
      break;

    case SETTLEMENT_VO:
      if (value == null) {
        unsetSettlementVo();
      } else {
        setSettlementVo((BossSettlementVo)value);
      }
      break;

    case PAYMENT:
      if (value == null) {
        unsetPayment();
      } else {
        setPayment((BossPaymentVo)value);
      }
      break;

    case REFUND:
      if (value == null) {
        unsetRefund();
      } else {
        setRefund((BossRefundVo)value);
      }
      break;

    case SUB_ORDERS:
      if (value == null) {
        unsetSubOrders();
      } else {
        setSubOrders((List<BossSubOrder>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ORDER_VO:
      return getOrderVo();

    case EXCEPTION_TYPE:
      return getExceptionType();

    case EXCEPTION_DESC:
      return getExceptionDesc();

    case PROPOSAL:
      return getProposal();

    case SETTLEMENT_VO:
      return getSettlementVo();

    case PAYMENT:
      return getPayment();

    case REFUND:
      return getRefund();

    case SUB_ORDERS:
      return getSubOrders();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ORDER_VO:
      return isSetOrderVo();
    case EXCEPTION_TYPE:
      return isSetExceptionType();
    case EXCEPTION_DESC:
      return isSetExceptionDesc();
    case PROPOSAL:
      return isSetProposal();
    case SETTLEMENT_VO:
      return isSetSettlementVo();
    case PAYMENT:
      return isSetPayment();
    case REFUND:
      return isSetRefund();
    case SUB_ORDERS:
      return isSetSubOrders();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BossPaymentDetialVo)
      return this.equals((BossPaymentDetialVo)that);
    return false;
  }

  public boolean equals(BossPaymentDetialVo that) {
    if (that == null)
      return false;

    boolean this_present_orderVo = true && this.isSetOrderVo();
    boolean that_present_orderVo = true && that.isSetOrderVo();
    if (this_present_orderVo || that_present_orderVo) {
      if (!(this_present_orderVo && that_present_orderVo))
        return false;
      if (!this.orderVo.equals(that.orderVo))
        return false;
    }

    boolean this_present_exceptionType = true && this.isSetExceptionType();
    boolean that_present_exceptionType = true && that.isSetExceptionType();
    if (this_present_exceptionType || that_present_exceptionType) {
      if (!(this_present_exceptionType && that_present_exceptionType))
        return false;
      if (!this.exceptionType.equals(that.exceptionType))
        return false;
    }

    boolean this_present_exceptionDesc = true && this.isSetExceptionDesc();
    boolean that_present_exceptionDesc = true && that.isSetExceptionDesc();
    if (this_present_exceptionDesc || that_present_exceptionDesc) {
      if (!(this_present_exceptionDesc && that_present_exceptionDesc))
        return false;
      if (!this.exceptionDesc.equals(that.exceptionDesc))
        return false;
    }

    boolean this_present_proposal = true && this.isSetProposal();
    boolean that_present_proposal = true && that.isSetProposal();
    if (this_present_proposal || that_present_proposal) {
      if (!(this_present_proposal && that_present_proposal))
        return false;
      if (!this.proposal.equals(that.proposal))
        return false;
    }

    boolean this_present_settlementVo = true && this.isSetSettlementVo();
    boolean that_present_settlementVo = true && that.isSetSettlementVo();
    if (this_present_settlementVo || that_present_settlementVo) {
      if (!(this_present_settlementVo && that_present_settlementVo))
        return false;
      if (!this.settlementVo.equals(that.settlementVo))
        return false;
    }

    boolean this_present_payment = true && this.isSetPayment();
    boolean that_present_payment = true && that.isSetPayment();
    if (this_present_payment || that_present_payment) {
      if (!(this_present_payment && that_present_payment))
        return false;
      if (!this.payment.equals(that.payment))
        return false;
    }

    boolean this_present_refund = true && this.isSetRefund();
    boolean that_present_refund = true && that.isSetRefund();
    if (this_present_refund || that_present_refund) {
      if (!(this_present_refund && that_present_refund))
        return false;
      if (!this.refund.equals(that.refund))
        return false;
    }

    boolean this_present_subOrders = true && this.isSetSubOrders();
    boolean that_present_subOrders = true && that.isSetSubOrders();
    if (this_present_subOrders || that_present_subOrders) {
      if (!(this_present_subOrders && that_present_subOrders))
        return false;
      if (!this.subOrders.equals(that.subOrders))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_orderVo = true && (isSetOrderVo());
    list.add(present_orderVo);
    if (present_orderVo)
      list.add(orderVo);

    boolean present_exceptionType = true && (isSetExceptionType());
    list.add(present_exceptionType);
    if (present_exceptionType)
      list.add(exceptionType);

    boolean present_exceptionDesc = true && (isSetExceptionDesc());
    list.add(present_exceptionDesc);
    if (present_exceptionDesc)
      list.add(exceptionDesc);

    boolean present_proposal = true && (isSetProposal());
    list.add(present_proposal);
    if (present_proposal)
      list.add(proposal);

    boolean present_settlementVo = true && (isSetSettlementVo());
    list.add(present_settlementVo);
    if (present_settlementVo)
      list.add(settlementVo);

    boolean present_payment = true && (isSetPayment());
    list.add(present_payment);
    if (present_payment)
      list.add(payment);

    boolean present_refund = true && (isSetRefund());
    list.add(present_refund);
    if (present_refund)
      list.add(refund);

    boolean present_subOrders = true && (isSetSubOrders());
    list.add(present_subOrders);
    if (present_subOrders)
      list.add(subOrders);

    return list.hashCode();
  }

  @Override
  public int compareTo(BossPaymentDetialVo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetOrderVo()).compareTo(other.isSetOrderVo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderVo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderVo, other.orderVo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExceptionType()).compareTo(other.isSetExceptionType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExceptionType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exceptionType, other.exceptionType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExceptionDesc()).compareTo(other.isSetExceptionDesc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExceptionDesc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exceptionDesc, other.exceptionDesc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProposal()).compareTo(other.isSetProposal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProposal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.proposal, other.proposal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSettlementVo()).compareTo(other.isSetSettlementVo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSettlementVo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.settlementVo, other.settlementVo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPayment()).compareTo(other.isSetPayment());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPayment()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.payment, other.payment);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRefund()).compareTo(other.isSetRefund());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRefund()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refund, other.refund);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubOrders()).compareTo(other.isSetSubOrders());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubOrders()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subOrders, other.subOrders);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("BossPaymentDetialVo(");
    boolean first = true;

    sb.append("orderVo:");
    if (this.orderVo == null) {
      sb.append("null");
    } else {
      sb.append(this.orderVo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("exceptionType:");
    if (this.exceptionType == null) {
      sb.append("null");
    } else {
      sb.append(this.exceptionType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("exceptionDesc:");
    if (this.exceptionDesc == null) {
      sb.append("null");
    } else {
      sb.append(this.exceptionDesc);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("proposal:");
    if (this.proposal == null) {
      sb.append("null");
    } else {
      sb.append(this.proposal);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("settlementVo:");
    if (this.settlementVo == null) {
      sb.append("null");
    } else {
      sb.append(this.settlementVo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("payment:");
    if (this.payment == null) {
      sb.append("null");
    } else {
      sb.append(this.payment);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("refund:");
    if (this.refund == null) {
      sb.append("null");
    } else {
      sb.append(this.refund);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("subOrders:");
    if (this.subOrders == null) {
      sb.append("null");
    } else {
      sb.append(this.subOrders);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (orderVo != null) {
      orderVo.validate();
    }
    if (settlementVo != null) {
      settlementVo.validate();
    }
    if (payment != null) {
      payment.validate();
    }
    if (refund != null) {
      refund.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BossPaymentDetialVoStandardSchemeFactory implements SchemeFactory {
    public BossPaymentDetialVoStandardScheme getScheme() {
      return new BossPaymentDetialVoStandardScheme();
    }
  }

  private static class BossPaymentDetialVoStandardScheme extends StandardScheme<BossPaymentDetialVo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BossPaymentDetialVo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ORDER_VO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.orderVo = new BossOrderVo();
              struct.orderVo.read(iprot);
              struct.setOrderVoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // EXCEPTION_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.exceptionType = iprot.readString();
              struct.setExceptionTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // EXCEPTION_DESC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.exceptionDesc = iprot.readString();
              struct.setExceptionDescIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PROPOSAL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.proposal = iprot.readString();
              struct.setProposalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SETTLEMENT_VO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.settlementVo = new BossSettlementVo();
              struct.settlementVo.read(iprot);
              struct.setSettlementVoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PAYMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.payment = new BossPaymentVo();
              struct.payment.read(iprot);
              struct.setPaymentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // REFUND
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.refund = new BossRefundVo();
              struct.refund.read(iprot);
              struct.setRefundIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // SUB_ORDERS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                struct.subOrders = new ArrayList<BossSubOrder>(_list24.size);
                BossSubOrder _elem25;
                for (int _i26 = 0; _i26 < _list24.size; ++_i26)
                {
                  _elem25 = new BossSubOrder();
                  _elem25.read(iprot);
                  struct.subOrders.add(_elem25);
                }
                iprot.readListEnd();
              }
              struct.setSubOrdersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BossPaymentDetialVo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.orderVo != null) {
        oprot.writeFieldBegin(ORDER_VO_FIELD_DESC);
        struct.orderVo.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.exceptionType != null) {
        oprot.writeFieldBegin(EXCEPTION_TYPE_FIELD_DESC);
        oprot.writeString(struct.exceptionType);
        oprot.writeFieldEnd();
      }
      if (struct.exceptionDesc != null) {
        oprot.writeFieldBegin(EXCEPTION_DESC_FIELD_DESC);
        oprot.writeString(struct.exceptionDesc);
        oprot.writeFieldEnd();
      }
      if (struct.proposal != null) {
        oprot.writeFieldBegin(PROPOSAL_FIELD_DESC);
        oprot.writeString(struct.proposal);
        oprot.writeFieldEnd();
      }
      if (struct.settlementVo != null) {
        oprot.writeFieldBegin(SETTLEMENT_VO_FIELD_DESC);
        struct.settlementVo.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.payment != null) {
        oprot.writeFieldBegin(PAYMENT_FIELD_DESC);
        struct.payment.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.refund != null) {
        oprot.writeFieldBegin(REFUND_FIELD_DESC);
        struct.refund.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.subOrders != null) {
        oprot.writeFieldBegin(SUB_ORDERS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.subOrders.size()));
          for (BossSubOrder _iter27 : struct.subOrders)
          {
            _iter27.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BossPaymentDetialVoTupleSchemeFactory implements SchemeFactory {
    public BossPaymentDetialVoTupleScheme getScheme() {
      return new BossPaymentDetialVoTupleScheme();
    }
  }

  private static class BossPaymentDetialVoTupleScheme extends TupleScheme<BossPaymentDetialVo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BossPaymentDetialVo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetOrderVo()) {
        optionals.set(0);
      }
      if (struct.isSetExceptionType()) {
        optionals.set(1);
      }
      if (struct.isSetExceptionDesc()) {
        optionals.set(2);
      }
      if (struct.isSetProposal()) {
        optionals.set(3);
      }
      if (struct.isSetSettlementVo()) {
        optionals.set(4);
      }
      if (struct.isSetPayment()) {
        optionals.set(5);
      }
      if (struct.isSetRefund()) {
        optionals.set(6);
      }
      if (struct.isSetSubOrders()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetOrderVo()) {
        struct.orderVo.write(oprot);
      }
      if (struct.isSetExceptionType()) {
        oprot.writeString(struct.exceptionType);
      }
      if (struct.isSetExceptionDesc()) {
        oprot.writeString(struct.exceptionDesc);
      }
      if (struct.isSetProposal()) {
        oprot.writeString(struct.proposal);
      }
      if (struct.isSetSettlementVo()) {
        struct.settlementVo.write(oprot);
      }
      if (struct.isSetPayment()) {
        struct.payment.write(oprot);
      }
      if (struct.isSetRefund()) {
        struct.refund.write(oprot);
      }
      if (struct.isSetSubOrders()) {
        {
          oprot.writeI32(struct.subOrders.size());
          for (BossSubOrder _iter28 : struct.subOrders)
          {
            _iter28.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BossPaymentDetialVo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.orderVo = new BossOrderVo();
        struct.orderVo.read(iprot);
        struct.setOrderVoIsSet(true);
      }
      if (incoming.get(1)) {
        struct.exceptionType = iprot.readString();
        struct.setExceptionTypeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.exceptionDesc = iprot.readString();
        struct.setExceptionDescIsSet(true);
      }
      if (incoming.get(3)) {
        struct.proposal = iprot.readString();
        struct.setProposalIsSet(true);
      }
      if (incoming.get(4)) {
        struct.settlementVo = new BossSettlementVo();
        struct.settlementVo.read(iprot);
        struct.setSettlementVoIsSet(true);
      }
      if (incoming.get(5)) {
        struct.payment = new BossPaymentVo();
        struct.payment.read(iprot);
        struct.setPaymentIsSet(true);
      }
      if (incoming.get(6)) {
        struct.refund = new BossRefundVo();
        struct.refund.read(iprot);
        struct.setRefundIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.subOrders = new ArrayList<BossSubOrder>(_list29.size);
          BossSubOrder _elem30;
          for (int _i31 = 0; _i31 < _list29.size; ++_i31)
          {
            _elem30 = new BossSubOrder();
            _elem30.read(iprot);
            struct.subOrders.add(_elem30);
          }
        }
        struct.setSubOrdersIsSet(true);
      }
    }
  }

}

