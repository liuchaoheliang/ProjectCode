/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.service;

import java.util.ArrayList;
import java.util.BitSet;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Generated;

import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.froad.thrift.vo.outletActivity.AdjustOutletWeightReqVo;
import com.froad.thrift.vo.outletActivity.DeleteRelateOutletReqVo;
import com.froad.thrift.vo.outletActivity.EnableOutletActivityReqVo;
import com.froad.thrift.vo.outletActivity.ExportRelateActivityTagReqVo;
import com.froad.thrift.vo.outletActivity.InputRelateOutletActivityReqVo;
import com.froad.thrift.vo.outletActivity.OutletActivityTagDetailReqVo;
import com.froad.thrift.vo.outletActivity.OutletActivityTagDetailResVo;
import com.froad.thrift.vo.outletActivity.OutletNameAndMerchantNameResVo;
import com.froad.thrift.vo.outletActivity.OutletWeightActivityTagPageReqVo;
import com.froad.thrift.vo.outletActivity.OutletWeightActivityTagPageVo;
import com.froad.thrift.vo.outletActivity.RecommendActivityTagPageVo;
import com.froad.thrift.vo.outletActivity.RecommendActivityTagVo;
import com.froad.thrift.vo.outletActivity.RelateOutletActivityVo;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-1-12")
public class OutletActivityService {

  public interface Iface extends com.froad.thrift.monitor.service.BizMonitorService.Iface {

    /**
     * 推荐活动分页列表查询
     * 
     * @param vo
     * @param pageVo
     */
    public RecommendActivityTagPageVo findOutletTagByPage(RecommendActivityTagVo vo, com.froad.thrift.vo.PageVo pageVo) throws org.apache.thrift.TException;

    /**
     * 推荐活动列表详情查询(operator:当前操作员用户名)
     * 
     * @param reqVo
     */
    public OutletActivityTagDetailResVo findOutletTagDetail(OutletActivityTagDetailReqVo reqVo) throws org.apache.thrift.TException;

    /**
     * 关联门店信息分页查询
     * 
     * @param pageReqVo
     */
    public OutletWeightActivityTagPageVo findRelateOutletInfoByPage(OutletWeightActivityTagPageReqVo pageReqVo) throws org.apache.thrift.TException;

    /**
     * 启用/禁用门店推荐活动标签
     * 
     * @param reqVo
     */
    public com.froad.thrift.vo.ResultVo enableOutletRecommendActivityTag(EnableOutletActivityReqVo reqVo) throws org.apache.thrift.TException;

    /**
     * 调整关联门店权重
     * 
     * @param reqVo
     */
    public com.froad.thrift.vo.ResultVo adjustOutletWeight(AdjustOutletWeightReqVo reqVo) throws org.apache.thrift.TException;

    /**
     * 删除关联门店
     * 
     * @param reqVo
     */
    public com.froad.thrift.vo.ResultVo deleteRelateOutlet(DeleteRelateOutletReqVo reqVo) throws org.apache.thrift.TException;

    /**
     * 添加门店推荐活动标签信息
     * 
     * @param recommendVo
     */
    public com.froad.thrift.vo.ResultVo addOutletActivityTag(RecommendActivityTagVo recommendVo) throws org.apache.thrift.TException;

    /**
     * 更新门店推荐活动标签信息
     * 
     * @param recommendVo
     */
    public com.froad.thrift.vo.ResultVo updateOutletActivityTag(RecommendActivityTagVo recommendVo) throws org.apache.thrift.TException;

    /**
     * 关联门店
     * 
     * @param vo
     */
    public com.froad.thrift.vo.ResultVo relateOutletInfo(RelateOutletActivityVo vo) throws org.apache.thrift.TException;

    /**
     * 批量导入关联门店
     * 
     * @param reqVo
     */
    public com.froad.thrift.vo.ResultVo inputRelateOutletInfo(InputRelateOutletActivityReqVo reqVo) throws org.apache.thrift.TException;

    /**
     * 根据门店id查询门店名称和商户名称
     * 
     * @param clientId
     * @param outletId
     */
    public OutletNameAndMerchantNameResVo queryOutletNameAndMerchantNameByOutletId(String clientId, String outletId) throws org.apache.thrift.TException;

    /**
     * 导出关联门店标签信息
     * 
     * @param reqVo
     */
    public com.froad.thrift.vo.ExportResultRes exportOutletRelateActivityTag(ExportRelateActivityTagReqVo reqVo) throws org.apache.thrift.TException;

  }

  public interface AsyncIface extends com.froad.thrift.monitor.service.BizMonitorService .AsyncIface {

    public void findOutletTagByPage(RecommendActivityTagVo vo, com.froad.thrift.vo.PageVo pageVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void findOutletTagDetail(OutletActivityTagDetailReqVo reqVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void findRelateOutletInfoByPage(OutletWeightActivityTagPageReqVo pageReqVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void enableOutletRecommendActivityTag(EnableOutletActivityReqVo reqVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void adjustOutletWeight(AdjustOutletWeightReqVo reqVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteRelateOutlet(DeleteRelateOutletReqVo reqVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addOutletActivityTag(RecommendActivityTagVo recommendVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateOutletActivityTag(RecommendActivityTagVo recommendVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void relateOutletInfo(RelateOutletActivityVo vo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void inputRelateOutletInfo(InputRelateOutletActivityReqVo reqVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryOutletNameAndMerchantNameByOutletId(String clientId, String outletId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void exportOutletRelateActivityTag(ExportRelateActivityTagReqVo reqVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends com.froad.thrift.monitor.service.BizMonitorService.Client implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public RecommendActivityTagPageVo findOutletTagByPage(RecommendActivityTagVo vo, com.froad.thrift.vo.PageVo pageVo) throws org.apache.thrift.TException
    {
      send_findOutletTagByPage(vo, pageVo);
      return recv_findOutletTagByPage();
    }

    public void send_findOutletTagByPage(RecommendActivityTagVo vo, com.froad.thrift.vo.PageVo pageVo) throws org.apache.thrift.TException
    {
      findOutletTagByPage_args args = new findOutletTagByPage_args();
      args.setVo(vo);
      args.setPageVo(pageVo);
      sendBase("findOutletTagByPage", args);
    }

    public RecommendActivityTagPageVo recv_findOutletTagByPage() throws org.apache.thrift.TException
    {
      findOutletTagByPage_result result = new findOutletTagByPage_result();
      receiveBase(result, "findOutletTagByPage");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findOutletTagByPage failed: unknown result");
    }

    public OutletActivityTagDetailResVo findOutletTagDetail(OutletActivityTagDetailReqVo reqVo) throws org.apache.thrift.TException
    {
      send_findOutletTagDetail(reqVo);
      return recv_findOutletTagDetail();
    }

    public void send_findOutletTagDetail(OutletActivityTagDetailReqVo reqVo) throws org.apache.thrift.TException
    {
      findOutletTagDetail_args args = new findOutletTagDetail_args();
      args.setReqVo(reqVo);
      sendBase("findOutletTagDetail", args);
    }

    public OutletActivityTagDetailResVo recv_findOutletTagDetail() throws org.apache.thrift.TException
    {
      findOutletTagDetail_result result = new findOutletTagDetail_result();
      receiveBase(result, "findOutletTagDetail");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findOutletTagDetail failed: unknown result");
    }

    public OutletWeightActivityTagPageVo findRelateOutletInfoByPage(OutletWeightActivityTagPageReqVo pageReqVo) throws org.apache.thrift.TException
    {
      send_findRelateOutletInfoByPage(pageReqVo);
      return recv_findRelateOutletInfoByPage();
    }

    public void send_findRelateOutletInfoByPage(OutletWeightActivityTagPageReqVo pageReqVo) throws org.apache.thrift.TException
    {
      findRelateOutletInfoByPage_args args = new findRelateOutletInfoByPage_args();
      args.setPageReqVo(pageReqVo);
      sendBase("findRelateOutletInfoByPage", args);
    }

    public OutletWeightActivityTagPageVo recv_findRelateOutletInfoByPage() throws org.apache.thrift.TException
    {
      findRelateOutletInfoByPage_result result = new findRelateOutletInfoByPage_result();
      receiveBase(result, "findRelateOutletInfoByPage");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findRelateOutletInfoByPage failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo enableOutletRecommendActivityTag(EnableOutletActivityReqVo reqVo) throws org.apache.thrift.TException
    {
      send_enableOutletRecommendActivityTag(reqVo);
      return recv_enableOutletRecommendActivityTag();
    }

    public void send_enableOutletRecommendActivityTag(EnableOutletActivityReqVo reqVo) throws org.apache.thrift.TException
    {
      enableOutletRecommendActivityTag_args args = new enableOutletRecommendActivityTag_args();
      args.setReqVo(reqVo);
      sendBase("enableOutletRecommendActivityTag", args);
    }

    public com.froad.thrift.vo.ResultVo recv_enableOutletRecommendActivityTag() throws org.apache.thrift.TException
    {
      enableOutletRecommendActivityTag_result result = new enableOutletRecommendActivityTag_result();
      receiveBase(result, "enableOutletRecommendActivityTag");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "enableOutletRecommendActivityTag failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo adjustOutletWeight(AdjustOutletWeightReqVo reqVo) throws org.apache.thrift.TException
    {
      send_adjustOutletWeight(reqVo);
      return recv_adjustOutletWeight();
    }

    public void send_adjustOutletWeight(AdjustOutletWeightReqVo reqVo) throws org.apache.thrift.TException
    {
      adjustOutletWeight_args args = new adjustOutletWeight_args();
      args.setReqVo(reqVo);
      sendBase("adjustOutletWeight", args);
    }

    public com.froad.thrift.vo.ResultVo recv_adjustOutletWeight() throws org.apache.thrift.TException
    {
      adjustOutletWeight_result result = new adjustOutletWeight_result();
      receiveBase(result, "adjustOutletWeight");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "adjustOutletWeight failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo deleteRelateOutlet(DeleteRelateOutletReqVo reqVo) throws org.apache.thrift.TException
    {
      send_deleteRelateOutlet(reqVo);
      return recv_deleteRelateOutlet();
    }

    public void send_deleteRelateOutlet(DeleteRelateOutletReqVo reqVo) throws org.apache.thrift.TException
    {
      deleteRelateOutlet_args args = new deleteRelateOutlet_args();
      args.setReqVo(reqVo);
      sendBase("deleteRelateOutlet", args);
    }

    public com.froad.thrift.vo.ResultVo recv_deleteRelateOutlet() throws org.apache.thrift.TException
    {
      deleteRelateOutlet_result result = new deleteRelateOutlet_result();
      receiveBase(result, "deleteRelateOutlet");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteRelateOutlet failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo addOutletActivityTag(RecommendActivityTagVo recommendVo) throws org.apache.thrift.TException
    {
      send_addOutletActivityTag(recommendVo);
      return recv_addOutletActivityTag();
    }

    public void send_addOutletActivityTag(RecommendActivityTagVo recommendVo) throws org.apache.thrift.TException
    {
      addOutletActivityTag_args args = new addOutletActivityTag_args();
      args.setRecommendVo(recommendVo);
      sendBase("addOutletActivityTag", args);
    }

    public com.froad.thrift.vo.ResultVo recv_addOutletActivityTag() throws org.apache.thrift.TException
    {
      addOutletActivityTag_result result = new addOutletActivityTag_result();
      receiveBase(result, "addOutletActivityTag");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addOutletActivityTag failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo updateOutletActivityTag(RecommendActivityTagVo recommendVo) throws org.apache.thrift.TException
    {
      send_updateOutletActivityTag(recommendVo);
      return recv_updateOutletActivityTag();
    }

    public void send_updateOutletActivityTag(RecommendActivityTagVo recommendVo) throws org.apache.thrift.TException
    {
      updateOutletActivityTag_args args = new updateOutletActivityTag_args();
      args.setRecommendVo(recommendVo);
      sendBase("updateOutletActivityTag", args);
    }

    public com.froad.thrift.vo.ResultVo recv_updateOutletActivityTag() throws org.apache.thrift.TException
    {
      updateOutletActivityTag_result result = new updateOutletActivityTag_result();
      receiveBase(result, "updateOutletActivityTag");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateOutletActivityTag failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo relateOutletInfo(RelateOutletActivityVo vo) throws org.apache.thrift.TException
    {
      send_relateOutletInfo(vo);
      return recv_relateOutletInfo();
    }

    public void send_relateOutletInfo(RelateOutletActivityVo vo) throws org.apache.thrift.TException
    {
      relateOutletInfo_args args = new relateOutletInfo_args();
      args.setVo(vo);
      sendBase("relateOutletInfo", args);
    }

    public com.froad.thrift.vo.ResultVo recv_relateOutletInfo() throws org.apache.thrift.TException
    {
      relateOutletInfo_result result = new relateOutletInfo_result();
      receiveBase(result, "relateOutletInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "relateOutletInfo failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo inputRelateOutletInfo(InputRelateOutletActivityReqVo reqVo) throws org.apache.thrift.TException
    {
      send_inputRelateOutletInfo(reqVo);
      return recv_inputRelateOutletInfo();
    }

    public void send_inputRelateOutletInfo(InputRelateOutletActivityReqVo reqVo) throws org.apache.thrift.TException
    {
      inputRelateOutletInfo_args args = new inputRelateOutletInfo_args();
      args.setReqVo(reqVo);
      sendBase("inputRelateOutletInfo", args);
    }

    public com.froad.thrift.vo.ResultVo recv_inputRelateOutletInfo() throws org.apache.thrift.TException
    {
      inputRelateOutletInfo_result result = new inputRelateOutletInfo_result();
      receiveBase(result, "inputRelateOutletInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "inputRelateOutletInfo failed: unknown result");
    }

    public OutletNameAndMerchantNameResVo queryOutletNameAndMerchantNameByOutletId(String clientId, String outletId) throws org.apache.thrift.TException
    {
      send_queryOutletNameAndMerchantNameByOutletId(clientId, outletId);
      return recv_queryOutletNameAndMerchantNameByOutletId();
    }

    public void send_queryOutletNameAndMerchantNameByOutletId(String clientId, String outletId) throws org.apache.thrift.TException
    {
      queryOutletNameAndMerchantNameByOutletId_args args = new queryOutletNameAndMerchantNameByOutletId_args();
      args.setClientId(clientId);
      args.setOutletId(outletId);
      sendBase("queryOutletNameAndMerchantNameByOutletId", args);
    }

    public OutletNameAndMerchantNameResVo recv_queryOutletNameAndMerchantNameByOutletId() throws org.apache.thrift.TException
    {
      queryOutletNameAndMerchantNameByOutletId_result result = new queryOutletNameAndMerchantNameByOutletId_result();
      receiveBase(result, "queryOutletNameAndMerchantNameByOutletId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryOutletNameAndMerchantNameByOutletId failed: unknown result");
    }

    public com.froad.thrift.vo.ExportResultRes exportOutletRelateActivityTag(ExportRelateActivityTagReqVo reqVo) throws org.apache.thrift.TException
    {
      send_exportOutletRelateActivityTag(reqVo);
      return recv_exportOutletRelateActivityTag();
    }

    public void send_exportOutletRelateActivityTag(ExportRelateActivityTagReqVo reqVo) throws org.apache.thrift.TException
    {
      exportOutletRelateActivityTag_args args = new exportOutletRelateActivityTag_args();
      args.setReqVo(reqVo);
      sendBase("exportOutletRelateActivityTag", args);
    }

    public com.froad.thrift.vo.ExportResultRes recv_exportOutletRelateActivityTag() throws org.apache.thrift.TException
    {
      exportOutletRelateActivityTag_result result = new exportOutletRelateActivityTag_result();
      receiveBase(result, "exportOutletRelateActivityTag");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "exportOutletRelateActivityTag failed: unknown result");
    }

  }
  public static class AsyncClient extends com.froad.thrift.monitor.service.BizMonitorService.AsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void findOutletTagByPage(RecommendActivityTagVo vo, com.froad.thrift.vo.PageVo pageVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findOutletTagByPage_call method_call = new findOutletTagByPage_call(vo, pageVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findOutletTagByPage_call extends org.apache.thrift.async.TAsyncMethodCall {
      private RecommendActivityTagVo vo;
      private com.froad.thrift.vo.PageVo pageVo;
      public findOutletTagByPage_call(RecommendActivityTagVo vo, com.froad.thrift.vo.PageVo pageVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.vo = vo;
        this.pageVo = pageVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findOutletTagByPage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findOutletTagByPage_args args = new findOutletTagByPage_args();
        args.setVo(vo);
        args.setPageVo(pageVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public RecommendActivityTagPageVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findOutletTagByPage();
      }
    }

    public void findOutletTagDetail(OutletActivityTagDetailReqVo reqVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findOutletTagDetail_call method_call = new findOutletTagDetail_call(reqVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findOutletTagDetail_call extends org.apache.thrift.async.TAsyncMethodCall {
      private OutletActivityTagDetailReqVo reqVo;
      public findOutletTagDetail_call(OutletActivityTagDetailReqVo reqVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.reqVo = reqVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findOutletTagDetail", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findOutletTagDetail_args args = new findOutletTagDetail_args();
        args.setReqVo(reqVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public OutletActivityTagDetailResVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findOutletTagDetail();
      }
    }

    public void findRelateOutletInfoByPage(OutletWeightActivityTagPageReqVo pageReqVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findRelateOutletInfoByPage_call method_call = new findRelateOutletInfoByPage_call(pageReqVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findRelateOutletInfoByPage_call extends org.apache.thrift.async.TAsyncMethodCall {
      private OutletWeightActivityTagPageReqVo pageReqVo;
      public findRelateOutletInfoByPage_call(OutletWeightActivityTagPageReqVo pageReqVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pageReqVo = pageReqVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findRelateOutletInfoByPage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findRelateOutletInfoByPage_args args = new findRelateOutletInfoByPage_args();
        args.setPageReqVo(pageReqVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public OutletWeightActivityTagPageVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findRelateOutletInfoByPage();
      }
    }

    public void enableOutletRecommendActivityTag(EnableOutletActivityReqVo reqVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      enableOutletRecommendActivityTag_call method_call = new enableOutletRecommendActivityTag_call(reqVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class enableOutletRecommendActivityTag_call extends org.apache.thrift.async.TAsyncMethodCall {
      private EnableOutletActivityReqVo reqVo;
      public enableOutletRecommendActivityTag_call(EnableOutletActivityReqVo reqVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.reqVo = reqVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("enableOutletRecommendActivityTag", org.apache.thrift.protocol.TMessageType.CALL, 0));
        enableOutletRecommendActivityTag_args args = new enableOutletRecommendActivityTag_args();
        args.setReqVo(reqVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_enableOutletRecommendActivityTag();
      }
    }

    public void adjustOutletWeight(AdjustOutletWeightReqVo reqVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      adjustOutletWeight_call method_call = new adjustOutletWeight_call(reqVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class adjustOutletWeight_call extends org.apache.thrift.async.TAsyncMethodCall {
      private AdjustOutletWeightReqVo reqVo;
      public adjustOutletWeight_call(AdjustOutletWeightReqVo reqVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.reqVo = reqVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("adjustOutletWeight", org.apache.thrift.protocol.TMessageType.CALL, 0));
        adjustOutletWeight_args args = new adjustOutletWeight_args();
        args.setReqVo(reqVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_adjustOutletWeight();
      }
    }

    public void deleteRelateOutlet(DeleteRelateOutletReqVo reqVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteRelateOutlet_call method_call = new deleteRelateOutlet_call(reqVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteRelateOutlet_call extends org.apache.thrift.async.TAsyncMethodCall {
      private DeleteRelateOutletReqVo reqVo;
      public deleteRelateOutlet_call(DeleteRelateOutletReqVo reqVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.reqVo = reqVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteRelateOutlet", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteRelateOutlet_args args = new deleteRelateOutlet_args();
        args.setReqVo(reqVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteRelateOutlet();
      }
    }

    public void addOutletActivityTag(RecommendActivityTagVo recommendVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addOutletActivityTag_call method_call = new addOutletActivityTag_call(recommendVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addOutletActivityTag_call extends org.apache.thrift.async.TAsyncMethodCall {
      private RecommendActivityTagVo recommendVo;
      public addOutletActivityTag_call(RecommendActivityTagVo recommendVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.recommendVo = recommendVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addOutletActivityTag", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addOutletActivityTag_args args = new addOutletActivityTag_args();
        args.setRecommendVo(recommendVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addOutletActivityTag();
      }
    }

    public void updateOutletActivityTag(RecommendActivityTagVo recommendVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateOutletActivityTag_call method_call = new updateOutletActivityTag_call(recommendVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateOutletActivityTag_call extends org.apache.thrift.async.TAsyncMethodCall {
      private RecommendActivityTagVo recommendVo;
      public updateOutletActivityTag_call(RecommendActivityTagVo recommendVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.recommendVo = recommendVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateOutletActivityTag", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateOutletActivityTag_args args = new updateOutletActivityTag_args();
        args.setRecommendVo(recommendVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateOutletActivityTag();
      }
    }

    public void relateOutletInfo(RelateOutletActivityVo vo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      relateOutletInfo_call method_call = new relateOutletInfo_call(vo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class relateOutletInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private RelateOutletActivityVo vo;
      public relateOutletInfo_call(RelateOutletActivityVo vo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.vo = vo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("relateOutletInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        relateOutletInfo_args args = new relateOutletInfo_args();
        args.setVo(vo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_relateOutletInfo();
      }
    }

    public void inputRelateOutletInfo(InputRelateOutletActivityReqVo reqVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      inputRelateOutletInfo_call method_call = new inputRelateOutletInfo_call(reqVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class inputRelateOutletInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private InputRelateOutletActivityReqVo reqVo;
      public inputRelateOutletInfo_call(InputRelateOutletActivityReqVo reqVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.reqVo = reqVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("inputRelateOutletInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        inputRelateOutletInfo_args args = new inputRelateOutletInfo_args();
        args.setReqVo(reqVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_inputRelateOutletInfo();
      }
    }

    public void queryOutletNameAndMerchantNameByOutletId(String clientId, String outletId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryOutletNameAndMerchantNameByOutletId_call method_call = new queryOutletNameAndMerchantNameByOutletId_call(clientId, outletId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryOutletNameAndMerchantNameByOutletId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String clientId;
      private String outletId;
      public queryOutletNameAndMerchantNameByOutletId_call(String clientId, String outletId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.clientId = clientId;
        this.outletId = outletId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryOutletNameAndMerchantNameByOutletId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryOutletNameAndMerchantNameByOutletId_args args = new queryOutletNameAndMerchantNameByOutletId_args();
        args.setClientId(clientId);
        args.setOutletId(outletId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public OutletNameAndMerchantNameResVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryOutletNameAndMerchantNameByOutletId();
      }
    }

    public void exportOutletRelateActivityTag(ExportRelateActivityTagReqVo reqVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      exportOutletRelateActivityTag_call method_call = new exportOutletRelateActivityTag_call(reqVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class exportOutletRelateActivityTag_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ExportRelateActivityTagReqVo reqVo;
      public exportOutletRelateActivityTag_call(ExportRelateActivityTagReqVo reqVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.reqVo = reqVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("exportOutletRelateActivityTag", org.apache.thrift.protocol.TMessageType.CALL, 0));
        exportOutletRelateActivityTag_args args = new exportOutletRelateActivityTag_args();
        args.setReqVo(reqVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ExportResultRes getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_exportOutletRelateActivityTag();
      }
    }

  }

  public static class Processor<I extends Iface> extends com.froad.thrift.monitor.service.BizMonitorService.Processor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("findOutletTagByPage", new findOutletTagByPage());
      processMap.put("findOutletTagDetail", new findOutletTagDetail());
      processMap.put("findRelateOutletInfoByPage", new findRelateOutletInfoByPage());
      processMap.put("enableOutletRecommendActivityTag", new enableOutletRecommendActivityTag());
      processMap.put("adjustOutletWeight", new adjustOutletWeight());
      processMap.put("deleteRelateOutlet", new deleteRelateOutlet());
      processMap.put("addOutletActivityTag", new addOutletActivityTag());
      processMap.put("updateOutletActivityTag", new updateOutletActivityTag());
      processMap.put("relateOutletInfo", new relateOutletInfo());
      processMap.put("inputRelateOutletInfo", new inputRelateOutletInfo());
      processMap.put("queryOutletNameAndMerchantNameByOutletId", new queryOutletNameAndMerchantNameByOutletId());
      processMap.put("exportOutletRelateActivityTag", new exportOutletRelateActivityTag());
      return processMap;
    }

    public static class findOutletTagByPage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findOutletTagByPage_args> {
      public findOutletTagByPage() {
        super("findOutletTagByPage");
      }

      public findOutletTagByPage_args getEmptyArgsInstance() {
        return new findOutletTagByPage_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findOutletTagByPage_result getResult(I iface, findOutletTagByPage_args args) throws org.apache.thrift.TException {
        findOutletTagByPage_result result = new findOutletTagByPage_result();
        result.success = iface.findOutletTagByPage(args.vo, args.pageVo);
        return result;
      }
    }

    public static class findOutletTagDetail<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findOutletTagDetail_args> {
      public findOutletTagDetail() {
        super("findOutletTagDetail");
      }

      public findOutletTagDetail_args getEmptyArgsInstance() {
        return new findOutletTagDetail_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findOutletTagDetail_result getResult(I iface, findOutletTagDetail_args args) throws org.apache.thrift.TException {
        findOutletTagDetail_result result = new findOutletTagDetail_result();
        result.success = iface.findOutletTagDetail(args.reqVo);
        return result;
      }
    }

    public static class findRelateOutletInfoByPage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findRelateOutletInfoByPage_args> {
      public findRelateOutletInfoByPage() {
        super("findRelateOutletInfoByPage");
      }

      public findRelateOutletInfoByPage_args getEmptyArgsInstance() {
        return new findRelateOutletInfoByPage_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findRelateOutletInfoByPage_result getResult(I iface, findRelateOutletInfoByPage_args args) throws org.apache.thrift.TException {
        findRelateOutletInfoByPage_result result = new findRelateOutletInfoByPage_result();
        result.success = iface.findRelateOutletInfoByPage(args.pageReqVo);
        return result;
      }
    }

    public static class enableOutletRecommendActivityTag<I extends Iface> extends org.apache.thrift.ProcessFunction<I, enableOutletRecommendActivityTag_args> {
      public enableOutletRecommendActivityTag() {
        super("enableOutletRecommendActivityTag");
      }

      public enableOutletRecommendActivityTag_args getEmptyArgsInstance() {
        return new enableOutletRecommendActivityTag_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public enableOutletRecommendActivityTag_result getResult(I iface, enableOutletRecommendActivityTag_args args) throws org.apache.thrift.TException {
        enableOutletRecommendActivityTag_result result = new enableOutletRecommendActivityTag_result();
        result.success = iface.enableOutletRecommendActivityTag(args.reqVo);
        return result;
      }
    }

    public static class adjustOutletWeight<I extends Iface> extends org.apache.thrift.ProcessFunction<I, adjustOutletWeight_args> {
      public adjustOutletWeight() {
        super("adjustOutletWeight");
      }

      public adjustOutletWeight_args getEmptyArgsInstance() {
        return new adjustOutletWeight_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public adjustOutletWeight_result getResult(I iface, adjustOutletWeight_args args) throws org.apache.thrift.TException {
        adjustOutletWeight_result result = new adjustOutletWeight_result();
        result.success = iface.adjustOutletWeight(args.reqVo);
        return result;
      }
    }

    public static class deleteRelateOutlet<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteRelateOutlet_args> {
      public deleteRelateOutlet() {
        super("deleteRelateOutlet");
      }

      public deleteRelateOutlet_args getEmptyArgsInstance() {
        return new deleteRelateOutlet_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteRelateOutlet_result getResult(I iface, deleteRelateOutlet_args args) throws org.apache.thrift.TException {
        deleteRelateOutlet_result result = new deleteRelateOutlet_result();
        result.success = iface.deleteRelateOutlet(args.reqVo);
        return result;
      }
    }

    public static class addOutletActivityTag<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addOutletActivityTag_args> {
      public addOutletActivityTag() {
        super("addOutletActivityTag");
      }

      public addOutletActivityTag_args getEmptyArgsInstance() {
        return new addOutletActivityTag_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addOutletActivityTag_result getResult(I iface, addOutletActivityTag_args args) throws org.apache.thrift.TException {
        addOutletActivityTag_result result = new addOutletActivityTag_result();
        result.success = iface.addOutletActivityTag(args.recommendVo);
        return result;
      }
    }

    public static class updateOutletActivityTag<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateOutletActivityTag_args> {
      public updateOutletActivityTag() {
        super("updateOutletActivityTag");
      }

      public updateOutletActivityTag_args getEmptyArgsInstance() {
        return new updateOutletActivityTag_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateOutletActivityTag_result getResult(I iface, updateOutletActivityTag_args args) throws org.apache.thrift.TException {
        updateOutletActivityTag_result result = new updateOutletActivityTag_result();
        result.success = iface.updateOutletActivityTag(args.recommendVo);
        return result;
      }
    }

    public static class relateOutletInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, relateOutletInfo_args> {
      public relateOutletInfo() {
        super("relateOutletInfo");
      }

      public relateOutletInfo_args getEmptyArgsInstance() {
        return new relateOutletInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public relateOutletInfo_result getResult(I iface, relateOutletInfo_args args) throws org.apache.thrift.TException {
        relateOutletInfo_result result = new relateOutletInfo_result();
        result.success = iface.relateOutletInfo(args.vo);
        return result;
      }
    }

    public static class inputRelateOutletInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, inputRelateOutletInfo_args> {
      public inputRelateOutletInfo() {
        super("inputRelateOutletInfo");
      }

      public inputRelateOutletInfo_args getEmptyArgsInstance() {
        return new inputRelateOutletInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public inputRelateOutletInfo_result getResult(I iface, inputRelateOutletInfo_args args) throws org.apache.thrift.TException {
        inputRelateOutletInfo_result result = new inputRelateOutletInfo_result();
        result.success = iface.inputRelateOutletInfo(args.reqVo);
        return result;
      }
    }

    public static class queryOutletNameAndMerchantNameByOutletId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryOutletNameAndMerchantNameByOutletId_args> {
      public queryOutletNameAndMerchantNameByOutletId() {
        super("queryOutletNameAndMerchantNameByOutletId");
      }

      public queryOutletNameAndMerchantNameByOutletId_args getEmptyArgsInstance() {
        return new queryOutletNameAndMerchantNameByOutletId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryOutletNameAndMerchantNameByOutletId_result getResult(I iface, queryOutletNameAndMerchantNameByOutletId_args args) throws org.apache.thrift.TException {
        queryOutletNameAndMerchantNameByOutletId_result result = new queryOutletNameAndMerchantNameByOutletId_result();
        result.success = iface.queryOutletNameAndMerchantNameByOutletId(args.clientId, args.outletId);
        return result;
      }
    }

    public static class exportOutletRelateActivityTag<I extends Iface> extends org.apache.thrift.ProcessFunction<I, exportOutletRelateActivityTag_args> {
      public exportOutletRelateActivityTag() {
        super("exportOutletRelateActivityTag");
      }

      public exportOutletRelateActivityTag_args getEmptyArgsInstance() {
        return new exportOutletRelateActivityTag_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public exportOutletRelateActivityTag_result getResult(I iface, exportOutletRelateActivityTag_args args) throws org.apache.thrift.TException {
        exportOutletRelateActivityTag_result result = new exportOutletRelateActivityTag_result();
        result.success = iface.exportOutletRelateActivityTag(args.reqVo);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends com.froad.thrift.monitor.service.BizMonitorService.AsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("findOutletTagByPage", new findOutletTagByPage());
      processMap.put("findOutletTagDetail", new findOutletTagDetail());
      processMap.put("findRelateOutletInfoByPage", new findRelateOutletInfoByPage());
      processMap.put("enableOutletRecommendActivityTag", new enableOutletRecommendActivityTag());
      processMap.put("adjustOutletWeight", new adjustOutletWeight());
      processMap.put("deleteRelateOutlet", new deleteRelateOutlet());
      processMap.put("addOutletActivityTag", new addOutletActivityTag());
      processMap.put("updateOutletActivityTag", new updateOutletActivityTag());
      processMap.put("relateOutletInfo", new relateOutletInfo());
      processMap.put("inputRelateOutletInfo", new inputRelateOutletInfo());
      processMap.put("queryOutletNameAndMerchantNameByOutletId", new queryOutletNameAndMerchantNameByOutletId());
      processMap.put("exportOutletRelateActivityTag", new exportOutletRelateActivityTag());
      return processMap;
    }

    public static class findOutletTagByPage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findOutletTagByPage_args, RecommendActivityTagPageVo> {
      public findOutletTagByPage() {
        super("findOutletTagByPage");
      }

      public findOutletTagByPage_args getEmptyArgsInstance() {
        return new findOutletTagByPage_args();
      }

      public AsyncMethodCallback<RecommendActivityTagPageVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<RecommendActivityTagPageVo>() { 
          public void onComplete(RecommendActivityTagPageVo o) {
            findOutletTagByPage_result result = new findOutletTagByPage_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            findOutletTagByPage_result result = new findOutletTagByPage_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findOutletTagByPage_args args, org.apache.thrift.async.AsyncMethodCallback<RecommendActivityTagPageVo> resultHandler) throws TException {
        iface.findOutletTagByPage(args.vo, args.pageVo,resultHandler);
      }
    }

    public static class findOutletTagDetail<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findOutletTagDetail_args, OutletActivityTagDetailResVo> {
      public findOutletTagDetail() {
        super("findOutletTagDetail");
      }

      public findOutletTagDetail_args getEmptyArgsInstance() {
        return new findOutletTagDetail_args();
      }

      public AsyncMethodCallback<OutletActivityTagDetailResVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<OutletActivityTagDetailResVo>() { 
          public void onComplete(OutletActivityTagDetailResVo o) {
            findOutletTagDetail_result result = new findOutletTagDetail_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            findOutletTagDetail_result result = new findOutletTagDetail_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findOutletTagDetail_args args, org.apache.thrift.async.AsyncMethodCallback<OutletActivityTagDetailResVo> resultHandler) throws TException {
        iface.findOutletTagDetail(args.reqVo,resultHandler);
      }
    }

    public static class findRelateOutletInfoByPage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findRelateOutletInfoByPage_args, OutletWeightActivityTagPageVo> {
      public findRelateOutletInfoByPage() {
        super("findRelateOutletInfoByPage");
      }

      public findRelateOutletInfoByPage_args getEmptyArgsInstance() {
        return new findRelateOutletInfoByPage_args();
      }

      public AsyncMethodCallback<OutletWeightActivityTagPageVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<OutletWeightActivityTagPageVo>() { 
          public void onComplete(OutletWeightActivityTagPageVo o) {
            findRelateOutletInfoByPage_result result = new findRelateOutletInfoByPage_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            findRelateOutletInfoByPage_result result = new findRelateOutletInfoByPage_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findRelateOutletInfoByPage_args args, org.apache.thrift.async.AsyncMethodCallback<OutletWeightActivityTagPageVo> resultHandler) throws TException {
        iface.findRelateOutletInfoByPage(args.pageReqVo,resultHandler);
      }
    }

    public static class enableOutletRecommendActivityTag<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, enableOutletRecommendActivityTag_args, com.froad.thrift.vo.ResultVo> {
      public enableOutletRecommendActivityTag() {
        super("enableOutletRecommendActivityTag");
      }

      public enableOutletRecommendActivityTag_args getEmptyArgsInstance() {
        return new enableOutletRecommendActivityTag_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            enableOutletRecommendActivityTag_result result = new enableOutletRecommendActivityTag_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            enableOutletRecommendActivityTag_result result = new enableOutletRecommendActivityTag_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, enableOutletRecommendActivityTag_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.enableOutletRecommendActivityTag(args.reqVo,resultHandler);
      }
    }

    public static class adjustOutletWeight<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, adjustOutletWeight_args, com.froad.thrift.vo.ResultVo> {
      public adjustOutletWeight() {
        super("adjustOutletWeight");
      }

      public adjustOutletWeight_args getEmptyArgsInstance() {
        return new adjustOutletWeight_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            adjustOutletWeight_result result = new adjustOutletWeight_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            adjustOutletWeight_result result = new adjustOutletWeight_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, adjustOutletWeight_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.adjustOutletWeight(args.reqVo,resultHandler);
      }
    }

    public static class deleteRelateOutlet<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteRelateOutlet_args, com.froad.thrift.vo.ResultVo> {
      public deleteRelateOutlet() {
        super("deleteRelateOutlet");
      }

      public deleteRelateOutlet_args getEmptyArgsInstance() {
        return new deleteRelateOutlet_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            deleteRelateOutlet_result result = new deleteRelateOutlet_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteRelateOutlet_result result = new deleteRelateOutlet_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteRelateOutlet_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.deleteRelateOutlet(args.reqVo,resultHandler);
      }
    }

    public static class addOutletActivityTag<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addOutletActivityTag_args, com.froad.thrift.vo.ResultVo> {
      public addOutletActivityTag() {
        super("addOutletActivityTag");
      }

      public addOutletActivityTag_args getEmptyArgsInstance() {
        return new addOutletActivityTag_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            addOutletActivityTag_result result = new addOutletActivityTag_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addOutletActivityTag_result result = new addOutletActivityTag_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addOutletActivityTag_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.addOutletActivityTag(args.recommendVo,resultHandler);
      }
    }

    public static class updateOutletActivityTag<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateOutletActivityTag_args, com.froad.thrift.vo.ResultVo> {
      public updateOutletActivityTag() {
        super("updateOutletActivityTag");
      }

      public updateOutletActivityTag_args getEmptyArgsInstance() {
        return new updateOutletActivityTag_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            updateOutletActivityTag_result result = new updateOutletActivityTag_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateOutletActivityTag_result result = new updateOutletActivityTag_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateOutletActivityTag_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.updateOutletActivityTag(args.recommendVo,resultHandler);
      }
    }

    public static class relateOutletInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, relateOutletInfo_args, com.froad.thrift.vo.ResultVo> {
      public relateOutletInfo() {
        super("relateOutletInfo");
      }

      public relateOutletInfo_args getEmptyArgsInstance() {
        return new relateOutletInfo_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            relateOutletInfo_result result = new relateOutletInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            relateOutletInfo_result result = new relateOutletInfo_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, relateOutletInfo_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.relateOutletInfo(args.vo,resultHandler);
      }
    }

    public static class inputRelateOutletInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, inputRelateOutletInfo_args, com.froad.thrift.vo.ResultVo> {
      public inputRelateOutletInfo() {
        super("inputRelateOutletInfo");
      }

      public inputRelateOutletInfo_args getEmptyArgsInstance() {
        return new inputRelateOutletInfo_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            inputRelateOutletInfo_result result = new inputRelateOutletInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            inputRelateOutletInfo_result result = new inputRelateOutletInfo_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, inputRelateOutletInfo_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.inputRelateOutletInfo(args.reqVo,resultHandler);
      }
    }

    public static class queryOutletNameAndMerchantNameByOutletId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryOutletNameAndMerchantNameByOutletId_args, OutletNameAndMerchantNameResVo> {
      public queryOutletNameAndMerchantNameByOutletId() {
        super("queryOutletNameAndMerchantNameByOutletId");
      }

      public queryOutletNameAndMerchantNameByOutletId_args getEmptyArgsInstance() {
        return new queryOutletNameAndMerchantNameByOutletId_args();
      }

      public AsyncMethodCallback<OutletNameAndMerchantNameResVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<OutletNameAndMerchantNameResVo>() { 
          public void onComplete(OutletNameAndMerchantNameResVo o) {
            queryOutletNameAndMerchantNameByOutletId_result result = new queryOutletNameAndMerchantNameByOutletId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryOutletNameAndMerchantNameByOutletId_result result = new queryOutletNameAndMerchantNameByOutletId_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryOutletNameAndMerchantNameByOutletId_args args, org.apache.thrift.async.AsyncMethodCallback<OutletNameAndMerchantNameResVo> resultHandler) throws TException {
        iface.queryOutletNameAndMerchantNameByOutletId(args.clientId, args.outletId,resultHandler);
      }
    }

    public static class exportOutletRelateActivityTag<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, exportOutletRelateActivityTag_args, com.froad.thrift.vo.ExportResultRes> {
      public exportOutletRelateActivityTag() {
        super("exportOutletRelateActivityTag");
      }

      public exportOutletRelateActivityTag_args getEmptyArgsInstance() {
        return new exportOutletRelateActivityTag_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ExportResultRes> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ExportResultRes>() { 
          public void onComplete(com.froad.thrift.vo.ExportResultRes o) {
            exportOutletRelateActivityTag_result result = new exportOutletRelateActivityTag_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            exportOutletRelateActivityTag_result result = new exportOutletRelateActivityTag_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, exportOutletRelateActivityTag_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ExportResultRes> resultHandler) throws TException {
        iface.exportOutletRelateActivityTag(args.reqVo,resultHandler);
      }
    }

  }

  public static class findOutletTagByPage_args implements org.apache.thrift.TBase<findOutletTagByPage_args, findOutletTagByPage_args._Fields>, java.io.Serializable, Cloneable, Comparable<findOutletTagByPage_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findOutletTagByPage_args");

    private static final org.apache.thrift.protocol.TField VO_FIELD_DESC = new org.apache.thrift.protocol.TField("vo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PAGE_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("pageVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findOutletTagByPage_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findOutletTagByPage_argsTupleSchemeFactory());
    }

    public RecommendActivityTagVo vo; // required
    public com.froad.thrift.vo.PageVo pageVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      VO((short)1, "vo"),
      PAGE_VO((short)2, "pageVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // VO
            return VO;
          case 2: // PAGE_VO
            return PAGE_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.VO, new org.apache.thrift.meta_data.FieldMetaData("vo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RecommendActivityTagVo.class)));
      tmpMap.put(_Fields.PAGE_VO, new org.apache.thrift.meta_data.FieldMetaData("pageVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.PageVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findOutletTagByPage_args.class, metaDataMap);
    }

    public findOutletTagByPage_args() {
    }

    public findOutletTagByPage_args(
      RecommendActivityTagVo vo,
      com.froad.thrift.vo.PageVo pageVo)
    {
      this();
      this.vo = vo;
      this.pageVo = pageVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findOutletTagByPage_args(findOutletTagByPage_args other) {
      if (other.isSetVo()) {
        this.vo = new RecommendActivityTagVo(other.vo);
      }
      if (other.isSetPageVo()) {
        this.pageVo = new com.froad.thrift.vo.PageVo(other.pageVo);
      }
    }

    public findOutletTagByPage_args deepCopy() {
      return new findOutletTagByPage_args(this);
    }

    @Override
    public void clear() {
      this.vo = null;
      this.pageVo = null;
    }

    public RecommendActivityTagVo getVo() {
      return this.vo;
    }

    public findOutletTagByPage_args setVo(RecommendActivityTagVo vo) {
      this.vo = vo;
      return this;
    }

    public void unsetVo() {
      this.vo = null;
    }

    /** Returns true if field vo is set (has been assigned a value) and false otherwise */
    public boolean isSetVo() {
      return this.vo != null;
    }

    public void setVoIsSet(boolean value) {
      if (!value) {
        this.vo = null;
      }
    }

    public com.froad.thrift.vo.PageVo getPageVo() {
      return this.pageVo;
    }

    public findOutletTagByPage_args setPageVo(com.froad.thrift.vo.PageVo pageVo) {
      this.pageVo = pageVo;
      return this;
    }

    public void unsetPageVo() {
      this.pageVo = null;
    }

    /** Returns true if field pageVo is set (has been assigned a value) and false otherwise */
    public boolean isSetPageVo() {
      return this.pageVo != null;
    }

    public void setPageVoIsSet(boolean value) {
      if (!value) {
        this.pageVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case VO:
        if (value == null) {
          unsetVo();
        } else {
          setVo((RecommendActivityTagVo)value);
        }
        break;

      case PAGE_VO:
        if (value == null) {
          unsetPageVo();
        } else {
          setPageVo((com.froad.thrift.vo.PageVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case VO:
        return getVo();

      case PAGE_VO:
        return getPageVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case VO:
        return isSetVo();
      case PAGE_VO:
        return isSetPageVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findOutletTagByPage_args)
        return this.equals((findOutletTagByPage_args)that);
      return false;
    }

    public boolean equals(findOutletTagByPage_args that) {
      if (that == null)
        return false;

      boolean this_present_vo = true && this.isSetVo();
      boolean that_present_vo = true && that.isSetVo();
      if (this_present_vo || that_present_vo) {
        if (!(this_present_vo && that_present_vo))
          return false;
        if (!this.vo.equals(that.vo))
          return false;
      }

      boolean this_present_pageVo = true && this.isSetPageVo();
      boolean that_present_pageVo = true && that.isSetPageVo();
      if (this_present_pageVo || that_present_pageVo) {
        if (!(this_present_pageVo && that_present_pageVo))
          return false;
        if (!this.pageVo.equals(that.pageVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_vo = true && (isSetVo());
      list.add(present_vo);
      if (present_vo)
        list.add(vo);

      boolean present_pageVo = true && (isSetPageVo());
      list.add(present_pageVo);
      if (present_pageVo)
        list.add(pageVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(findOutletTagByPage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetVo()).compareTo(other.isSetVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vo, other.vo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageVo()).compareTo(other.isSetPageVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageVo, other.pageVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findOutletTagByPage_args(");
      boolean first = true;

      sb.append("vo:");
      if (this.vo == null) {
        sb.append("null");
      } else {
        sb.append(this.vo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageVo:");
      if (this.pageVo == null) {
        sb.append("null");
      } else {
        sb.append(this.pageVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (vo != null) {
        vo.validate();
      }
      if (pageVo != null) {
        pageVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findOutletTagByPage_argsStandardSchemeFactory implements SchemeFactory {
      public findOutletTagByPage_argsStandardScheme getScheme() {
        return new findOutletTagByPage_argsStandardScheme();
      }
    }

    private static class findOutletTagByPage_argsStandardScheme extends StandardScheme<findOutletTagByPage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findOutletTagByPage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.vo = new RecommendActivityTagVo();
                struct.vo.read(iprot);
                struct.setVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PAGE_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.pageVo = new com.froad.thrift.vo.PageVo();
                struct.pageVo.read(iprot);
                struct.setPageVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findOutletTagByPage_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.vo != null) {
          oprot.writeFieldBegin(VO_FIELD_DESC);
          struct.vo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.pageVo != null) {
          oprot.writeFieldBegin(PAGE_VO_FIELD_DESC);
          struct.pageVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findOutletTagByPage_argsTupleSchemeFactory implements SchemeFactory {
      public findOutletTagByPage_argsTupleScheme getScheme() {
        return new findOutletTagByPage_argsTupleScheme();
      }
    }

    private static class findOutletTagByPage_argsTupleScheme extends TupleScheme<findOutletTagByPage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findOutletTagByPage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetVo()) {
          optionals.set(0);
        }
        if (struct.isSetPageVo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetVo()) {
          struct.vo.write(oprot);
        }
        if (struct.isSetPageVo()) {
          struct.pageVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findOutletTagByPage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.vo = new RecommendActivityTagVo();
          struct.vo.read(iprot);
          struct.setVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.pageVo = new com.froad.thrift.vo.PageVo();
          struct.pageVo.read(iprot);
          struct.setPageVoIsSet(true);
        }
      }
    }

  }

  public static class findOutletTagByPage_result implements org.apache.thrift.TBase<findOutletTagByPage_result, findOutletTagByPage_result._Fields>, java.io.Serializable, Cloneable, Comparable<findOutletTagByPage_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findOutletTagByPage_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findOutletTagByPage_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findOutletTagByPage_resultTupleSchemeFactory());
    }

    public RecommendActivityTagPageVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RecommendActivityTagPageVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findOutletTagByPage_result.class, metaDataMap);
    }

    public findOutletTagByPage_result() {
    }

    public findOutletTagByPage_result(
      RecommendActivityTagPageVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findOutletTagByPage_result(findOutletTagByPage_result other) {
      if (other.isSetSuccess()) {
        this.success = new RecommendActivityTagPageVo(other.success);
      }
    }

    public findOutletTagByPage_result deepCopy() {
      return new findOutletTagByPage_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public RecommendActivityTagPageVo getSuccess() {
      return this.success;
    }

    public findOutletTagByPage_result setSuccess(RecommendActivityTagPageVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((RecommendActivityTagPageVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findOutletTagByPage_result)
        return this.equals((findOutletTagByPage_result)that);
      return false;
    }

    public boolean equals(findOutletTagByPage_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(findOutletTagByPage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findOutletTagByPage_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findOutletTagByPage_resultStandardSchemeFactory implements SchemeFactory {
      public findOutletTagByPage_resultStandardScheme getScheme() {
        return new findOutletTagByPage_resultStandardScheme();
      }
    }

    private static class findOutletTagByPage_resultStandardScheme extends StandardScheme<findOutletTagByPage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findOutletTagByPage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new RecommendActivityTagPageVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findOutletTagByPage_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findOutletTagByPage_resultTupleSchemeFactory implements SchemeFactory {
      public findOutletTagByPage_resultTupleScheme getScheme() {
        return new findOutletTagByPage_resultTupleScheme();
      }
    }

    private static class findOutletTagByPage_resultTupleScheme extends TupleScheme<findOutletTagByPage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findOutletTagByPage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findOutletTagByPage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new RecommendActivityTagPageVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class findOutletTagDetail_args implements org.apache.thrift.TBase<findOutletTagDetail_args, findOutletTagDetail_args._Fields>, java.io.Serializable, Cloneable, Comparable<findOutletTagDetail_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findOutletTagDetail_args");

    private static final org.apache.thrift.protocol.TField REQ_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("reqVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findOutletTagDetail_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findOutletTagDetail_argsTupleSchemeFactory());
    }

    public OutletActivityTagDetailReqVo reqVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQ_VO((short)1, "reqVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQ_VO
            return REQ_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQ_VO, new org.apache.thrift.meta_data.FieldMetaData("reqVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, OutletActivityTagDetailReqVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findOutletTagDetail_args.class, metaDataMap);
    }

    public findOutletTagDetail_args() {
    }

    public findOutletTagDetail_args(
      OutletActivityTagDetailReqVo reqVo)
    {
      this();
      this.reqVo = reqVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findOutletTagDetail_args(findOutletTagDetail_args other) {
      if (other.isSetReqVo()) {
        this.reqVo = new OutletActivityTagDetailReqVo(other.reqVo);
      }
    }

    public findOutletTagDetail_args deepCopy() {
      return new findOutletTagDetail_args(this);
    }

    @Override
    public void clear() {
      this.reqVo = null;
    }

    public OutletActivityTagDetailReqVo getReqVo() {
      return this.reqVo;
    }

    public findOutletTagDetail_args setReqVo(OutletActivityTagDetailReqVo reqVo) {
      this.reqVo = reqVo;
      return this;
    }

    public void unsetReqVo() {
      this.reqVo = null;
    }

    /** Returns true if field reqVo is set (has been assigned a value) and false otherwise */
    public boolean isSetReqVo() {
      return this.reqVo != null;
    }

    public void setReqVoIsSet(boolean value) {
      if (!value) {
        this.reqVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQ_VO:
        if (value == null) {
          unsetReqVo();
        } else {
          setReqVo((OutletActivityTagDetailReqVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQ_VO:
        return getReqVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQ_VO:
        return isSetReqVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findOutletTagDetail_args)
        return this.equals((findOutletTagDetail_args)that);
      return false;
    }

    public boolean equals(findOutletTagDetail_args that) {
      if (that == null)
        return false;

      boolean this_present_reqVo = true && this.isSetReqVo();
      boolean that_present_reqVo = true && that.isSetReqVo();
      if (this_present_reqVo || that_present_reqVo) {
        if (!(this_present_reqVo && that_present_reqVo))
          return false;
        if (!this.reqVo.equals(that.reqVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_reqVo = true && (isSetReqVo());
      list.add(present_reqVo);
      if (present_reqVo)
        list.add(reqVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(findOutletTagDetail_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetReqVo()).compareTo(other.isSetReqVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReqVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reqVo, other.reqVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findOutletTagDetail_args(");
      boolean first = true;

      sb.append("reqVo:");
      if (this.reqVo == null) {
        sb.append("null");
      } else {
        sb.append(this.reqVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (reqVo != null) {
        reqVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findOutletTagDetail_argsStandardSchemeFactory implements SchemeFactory {
      public findOutletTagDetail_argsStandardScheme getScheme() {
        return new findOutletTagDetail_argsStandardScheme();
      }
    }

    private static class findOutletTagDetail_argsStandardScheme extends StandardScheme<findOutletTagDetail_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findOutletTagDetail_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQ_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.reqVo = new OutletActivityTagDetailReqVo();
                struct.reqVo.read(iprot);
                struct.setReqVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findOutletTagDetail_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.reqVo != null) {
          oprot.writeFieldBegin(REQ_VO_FIELD_DESC);
          struct.reqVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findOutletTagDetail_argsTupleSchemeFactory implements SchemeFactory {
      public findOutletTagDetail_argsTupleScheme getScheme() {
        return new findOutletTagDetail_argsTupleScheme();
      }
    }

    private static class findOutletTagDetail_argsTupleScheme extends TupleScheme<findOutletTagDetail_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findOutletTagDetail_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetReqVo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetReqVo()) {
          struct.reqVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findOutletTagDetail_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.reqVo = new OutletActivityTagDetailReqVo();
          struct.reqVo.read(iprot);
          struct.setReqVoIsSet(true);
        }
      }
    }

  }

  public static class findOutletTagDetail_result implements org.apache.thrift.TBase<findOutletTagDetail_result, findOutletTagDetail_result._Fields>, java.io.Serializable, Cloneable, Comparable<findOutletTagDetail_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findOutletTagDetail_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findOutletTagDetail_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findOutletTagDetail_resultTupleSchemeFactory());
    }

    public OutletActivityTagDetailResVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, OutletActivityTagDetailResVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findOutletTagDetail_result.class, metaDataMap);
    }

    public findOutletTagDetail_result() {
    }

    public findOutletTagDetail_result(
      OutletActivityTagDetailResVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findOutletTagDetail_result(findOutletTagDetail_result other) {
      if (other.isSetSuccess()) {
        this.success = new OutletActivityTagDetailResVo(other.success);
      }
    }

    public findOutletTagDetail_result deepCopy() {
      return new findOutletTagDetail_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public OutletActivityTagDetailResVo getSuccess() {
      return this.success;
    }

    public findOutletTagDetail_result setSuccess(OutletActivityTagDetailResVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((OutletActivityTagDetailResVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findOutletTagDetail_result)
        return this.equals((findOutletTagDetail_result)that);
      return false;
    }

    public boolean equals(findOutletTagDetail_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(findOutletTagDetail_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findOutletTagDetail_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findOutletTagDetail_resultStandardSchemeFactory implements SchemeFactory {
      public findOutletTagDetail_resultStandardScheme getScheme() {
        return new findOutletTagDetail_resultStandardScheme();
      }
    }

    private static class findOutletTagDetail_resultStandardScheme extends StandardScheme<findOutletTagDetail_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findOutletTagDetail_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new OutletActivityTagDetailResVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findOutletTagDetail_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findOutletTagDetail_resultTupleSchemeFactory implements SchemeFactory {
      public findOutletTagDetail_resultTupleScheme getScheme() {
        return new findOutletTagDetail_resultTupleScheme();
      }
    }

    private static class findOutletTagDetail_resultTupleScheme extends TupleScheme<findOutletTagDetail_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findOutletTagDetail_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findOutletTagDetail_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new OutletActivityTagDetailResVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class findRelateOutletInfoByPage_args implements org.apache.thrift.TBase<findRelateOutletInfoByPage_args, findRelateOutletInfoByPage_args._Fields>, java.io.Serializable, Cloneable, Comparable<findRelateOutletInfoByPage_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findRelateOutletInfoByPage_args");

    private static final org.apache.thrift.protocol.TField PAGE_REQ_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("pageReqVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findRelateOutletInfoByPage_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findRelateOutletInfoByPage_argsTupleSchemeFactory());
    }

    public OutletWeightActivityTagPageReqVo pageReqVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PAGE_REQ_VO((short)1, "pageReqVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PAGE_REQ_VO
            return PAGE_REQ_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PAGE_REQ_VO, new org.apache.thrift.meta_data.FieldMetaData("pageReqVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, OutletWeightActivityTagPageReqVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findRelateOutletInfoByPage_args.class, metaDataMap);
    }

    public findRelateOutletInfoByPage_args() {
    }

    public findRelateOutletInfoByPage_args(
      OutletWeightActivityTagPageReqVo pageReqVo)
    {
      this();
      this.pageReqVo = pageReqVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findRelateOutletInfoByPage_args(findRelateOutletInfoByPage_args other) {
      if (other.isSetPageReqVo()) {
        this.pageReqVo = new OutletWeightActivityTagPageReqVo(other.pageReqVo);
      }
    }

    public findRelateOutletInfoByPage_args deepCopy() {
      return new findRelateOutletInfoByPage_args(this);
    }

    @Override
    public void clear() {
      this.pageReqVo = null;
    }

    public OutletWeightActivityTagPageReqVo getPageReqVo() {
      return this.pageReqVo;
    }

    public findRelateOutletInfoByPage_args setPageReqVo(OutletWeightActivityTagPageReqVo pageReqVo) {
      this.pageReqVo = pageReqVo;
      return this;
    }

    public void unsetPageReqVo() {
      this.pageReqVo = null;
    }

    /** Returns true if field pageReqVo is set (has been assigned a value) and false otherwise */
    public boolean isSetPageReqVo() {
      return this.pageReqVo != null;
    }

    public void setPageReqVoIsSet(boolean value) {
      if (!value) {
        this.pageReqVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PAGE_REQ_VO:
        if (value == null) {
          unsetPageReqVo();
        } else {
          setPageReqVo((OutletWeightActivityTagPageReqVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PAGE_REQ_VO:
        return getPageReqVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PAGE_REQ_VO:
        return isSetPageReqVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findRelateOutletInfoByPage_args)
        return this.equals((findRelateOutletInfoByPage_args)that);
      return false;
    }

    public boolean equals(findRelateOutletInfoByPage_args that) {
      if (that == null)
        return false;

      boolean this_present_pageReqVo = true && this.isSetPageReqVo();
      boolean that_present_pageReqVo = true && that.isSetPageReqVo();
      if (this_present_pageReqVo || that_present_pageReqVo) {
        if (!(this_present_pageReqVo && that_present_pageReqVo))
          return false;
        if (!this.pageReqVo.equals(that.pageReqVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_pageReqVo = true && (isSetPageReqVo());
      list.add(present_pageReqVo);
      if (present_pageReqVo)
        list.add(pageReqVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(findRelateOutletInfoByPage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPageReqVo()).compareTo(other.isSetPageReqVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageReqVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageReqVo, other.pageReqVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findRelateOutletInfoByPage_args(");
      boolean first = true;

      sb.append("pageReqVo:");
      if (this.pageReqVo == null) {
        sb.append("null");
      } else {
        sb.append(this.pageReqVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (pageReqVo != null) {
        pageReqVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findRelateOutletInfoByPage_argsStandardSchemeFactory implements SchemeFactory {
      public findRelateOutletInfoByPage_argsStandardScheme getScheme() {
        return new findRelateOutletInfoByPage_argsStandardScheme();
      }
    }

    private static class findRelateOutletInfoByPage_argsStandardScheme extends StandardScheme<findRelateOutletInfoByPage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findRelateOutletInfoByPage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PAGE_REQ_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.pageReqVo = new OutletWeightActivityTagPageReqVo();
                struct.pageReqVo.read(iprot);
                struct.setPageReqVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findRelateOutletInfoByPage_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pageReqVo != null) {
          oprot.writeFieldBegin(PAGE_REQ_VO_FIELD_DESC);
          struct.pageReqVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findRelateOutletInfoByPage_argsTupleSchemeFactory implements SchemeFactory {
      public findRelateOutletInfoByPage_argsTupleScheme getScheme() {
        return new findRelateOutletInfoByPage_argsTupleScheme();
      }
    }

    private static class findRelateOutletInfoByPage_argsTupleScheme extends TupleScheme<findRelateOutletInfoByPage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findRelateOutletInfoByPage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPageReqVo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPageReqVo()) {
          struct.pageReqVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findRelateOutletInfoByPage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.pageReqVo = new OutletWeightActivityTagPageReqVo();
          struct.pageReqVo.read(iprot);
          struct.setPageReqVoIsSet(true);
        }
      }
    }

  }

  public static class findRelateOutletInfoByPage_result implements org.apache.thrift.TBase<findRelateOutletInfoByPage_result, findRelateOutletInfoByPage_result._Fields>, java.io.Serializable, Cloneable, Comparable<findRelateOutletInfoByPage_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findRelateOutletInfoByPage_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findRelateOutletInfoByPage_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findRelateOutletInfoByPage_resultTupleSchemeFactory());
    }

    public OutletWeightActivityTagPageVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, OutletWeightActivityTagPageVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findRelateOutletInfoByPage_result.class, metaDataMap);
    }

    public findRelateOutletInfoByPage_result() {
    }

    public findRelateOutletInfoByPage_result(
      OutletWeightActivityTagPageVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findRelateOutletInfoByPage_result(findRelateOutletInfoByPage_result other) {
      if (other.isSetSuccess()) {
        this.success = new OutletWeightActivityTagPageVo(other.success);
      }
    }

    public findRelateOutletInfoByPage_result deepCopy() {
      return new findRelateOutletInfoByPage_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public OutletWeightActivityTagPageVo getSuccess() {
      return this.success;
    }

    public findRelateOutletInfoByPage_result setSuccess(OutletWeightActivityTagPageVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((OutletWeightActivityTagPageVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findRelateOutletInfoByPage_result)
        return this.equals((findRelateOutletInfoByPage_result)that);
      return false;
    }

    public boolean equals(findRelateOutletInfoByPage_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(findRelateOutletInfoByPage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findRelateOutletInfoByPage_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findRelateOutletInfoByPage_resultStandardSchemeFactory implements SchemeFactory {
      public findRelateOutletInfoByPage_resultStandardScheme getScheme() {
        return new findRelateOutletInfoByPage_resultStandardScheme();
      }
    }

    private static class findRelateOutletInfoByPage_resultStandardScheme extends StandardScheme<findRelateOutletInfoByPage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findRelateOutletInfoByPage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new OutletWeightActivityTagPageVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findRelateOutletInfoByPage_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findRelateOutletInfoByPage_resultTupleSchemeFactory implements SchemeFactory {
      public findRelateOutletInfoByPage_resultTupleScheme getScheme() {
        return new findRelateOutletInfoByPage_resultTupleScheme();
      }
    }

    private static class findRelateOutletInfoByPage_resultTupleScheme extends TupleScheme<findRelateOutletInfoByPage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findRelateOutletInfoByPage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findRelateOutletInfoByPage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new OutletWeightActivityTagPageVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class enableOutletRecommendActivityTag_args implements org.apache.thrift.TBase<enableOutletRecommendActivityTag_args, enableOutletRecommendActivityTag_args._Fields>, java.io.Serializable, Cloneable, Comparable<enableOutletRecommendActivityTag_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("enableOutletRecommendActivityTag_args");

    private static final org.apache.thrift.protocol.TField REQ_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("reqVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new enableOutletRecommendActivityTag_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new enableOutletRecommendActivityTag_argsTupleSchemeFactory());
    }

    public EnableOutletActivityReqVo reqVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQ_VO((short)1, "reqVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQ_VO
            return REQ_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQ_VO, new org.apache.thrift.meta_data.FieldMetaData("reqVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, EnableOutletActivityReqVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(enableOutletRecommendActivityTag_args.class, metaDataMap);
    }

    public enableOutletRecommendActivityTag_args() {
    }

    public enableOutletRecommendActivityTag_args(
      EnableOutletActivityReqVo reqVo)
    {
      this();
      this.reqVo = reqVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public enableOutletRecommendActivityTag_args(enableOutletRecommendActivityTag_args other) {
      if (other.isSetReqVo()) {
        this.reqVo = new EnableOutletActivityReqVo(other.reqVo);
      }
    }

    public enableOutletRecommendActivityTag_args deepCopy() {
      return new enableOutletRecommendActivityTag_args(this);
    }

    @Override
    public void clear() {
      this.reqVo = null;
    }

    public EnableOutletActivityReqVo getReqVo() {
      return this.reqVo;
    }

    public enableOutletRecommendActivityTag_args setReqVo(EnableOutletActivityReqVo reqVo) {
      this.reqVo = reqVo;
      return this;
    }

    public void unsetReqVo() {
      this.reqVo = null;
    }

    /** Returns true if field reqVo is set (has been assigned a value) and false otherwise */
    public boolean isSetReqVo() {
      return this.reqVo != null;
    }

    public void setReqVoIsSet(boolean value) {
      if (!value) {
        this.reqVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQ_VO:
        if (value == null) {
          unsetReqVo();
        } else {
          setReqVo((EnableOutletActivityReqVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQ_VO:
        return getReqVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQ_VO:
        return isSetReqVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof enableOutletRecommendActivityTag_args)
        return this.equals((enableOutletRecommendActivityTag_args)that);
      return false;
    }

    public boolean equals(enableOutletRecommendActivityTag_args that) {
      if (that == null)
        return false;

      boolean this_present_reqVo = true && this.isSetReqVo();
      boolean that_present_reqVo = true && that.isSetReqVo();
      if (this_present_reqVo || that_present_reqVo) {
        if (!(this_present_reqVo && that_present_reqVo))
          return false;
        if (!this.reqVo.equals(that.reqVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_reqVo = true && (isSetReqVo());
      list.add(present_reqVo);
      if (present_reqVo)
        list.add(reqVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(enableOutletRecommendActivityTag_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetReqVo()).compareTo(other.isSetReqVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReqVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reqVo, other.reqVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("enableOutletRecommendActivityTag_args(");
      boolean first = true;

      sb.append("reqVo:");
      if (this.reqVo == null) {
        sb.append("null");
      } else {
        sb.append(this.reqVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (reqVo != null) {
        reqVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class enableOutletRecommendActivityTag_argsStandardSchemeFactory implements SchemeFactory {
      public enableOutletRecommendActivityTag_argsStandardScheme getScheme() {
        return new enableOutletRecommendActivityTag_argsStandardScheme();
      }
    }

    private static class enableOutletRecommendActivityTag_argsStandardScheme extends StandardScheme<enableOutletRecommendActivityTag_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, enableOutletRecommendActivityTag_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQ_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.reqVo = new EnableOutletActivityReqVo();
                struct.reqVo.read(iprot);
                struct.setReqVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, enableOutletRecommendActivityTag_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.reqVo != null) {
          oprot.writeFieldBegin(REQ_VO_FIELD_DESC);
          struct.reqVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class enableOutletRecommendActivityTag_argsTupleSchemeFactory implements SchemeFactory {
      public enableOutletRecommendActivityTag_argsTupleScheme getScheme() {
        return new enableOutletRecommendActivityTag_argsTupleScheme();
      }
    }

    private static class enableOutletRecommendActivityTag_argsTupleScheme extends TupleScheme<enableOutletRecommendActivityTag_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, enableOutletRecommendActivityTag_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetReqVo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetReqVo()) {
          struct.reqVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, enableOutletRecommendActivityTag_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.reqVo = new EnableOutletActivityReqVo();
          struct.reqVo.read(iprot);
          struct.setReqVoIsSet(true);
        }
      }
    }

  }

  public static class enableOutletRecommendActivityTag_result implements org.apache.thrift.TBase<enableOutletRecommendActivityTag_result, enableOutletRecommendActivityTag_result._Fields>, java.io.Serializable, Cloneable, Comparable<enableOutletRecommendActivityTag_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("enableOutletRecommendActivityTag_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new enableOutletRecommendActivityTag_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new enableOutletRecommendActivityTag_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(enableOutletRecommendActivityTag_result.class, metaDataMap);
    }

    public enableOutletRecommendActivityTag_result() {
    }

    public enableOutletRecommendActivityTag_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public enableOutletRecommendActivityTag_result(enableOutletRecommendActivityTag_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public enableOutletRecommendActivityTag_result deepCopy() {
      return new enableOutletRecommendActivityTag_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public enableOutletRecommendActivityTag_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof enableOutletRecommendActivityTag_result)
        return this.equals((enableOutletRecommendActivityTag_result)that);
      return false;
    }

    public boolean equals(enableOutletRecommendActivityTag_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(enableOutletRecommendActivityTag_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("enableOutletRecommendActivityTag_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class enableOutletRecommendActivityTag_resultStandardSchemeFactory implements SchemeFactory {
      public enableOutletRecommendActivityTag_resultStandardScheme getScheme() {
        return new enableOutletRecommendActivityTag_resultStandardScheme();
      }
    }

    private static class enableOutletRecommendActivityTag_resultStandardScheme extends StandardScheme<enableOutletRecommendActivityTag_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, enableOutletRecommendActivityTag_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, enableOutletRecommendActivityTag_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class enableOutletRecommendActivityTag_resultTupleSchemeFactory implements SchemeFactory {
      public enableOutletRecommendActivityTag_resultTupleScheme getScheme() {
        return new enableOutletRecommendActivityTag_resultTupleScheme();
      }
    }

    private static class enableOutletRecommendActivityTag_resultTupleScheme extends TupleScheme<enableOutletRecommendActivityTag_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, enableOutletRecommendActivityTag_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, enableOutletRecommendActivityTag_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class adjustOutletWeight_args implements org.apache.thrift.TBase<adjustOutletWeight_args, adjustOutletWeight_args._Fields>, java.io.Serializable, Cloneable, Comparable<adjustOutletWeight_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("adjustOutletWeight_args");

    private static final org.apache.thrift.protocol.TField REQ_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("reqVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new adjustOutletWeight_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new adjustOutletWeight_argsTupleSchemeFactory());
    }

    public AdjustOutletWeightReqVo reqVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQ_VO((short)1, "reqVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQ_VO
            return REQ_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQ_VO, new org.apache.thrift.meta_data.FieldMetaData("reqVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AdjustOutletWeightReqVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(adjustOutletWeight_args.class, metaDataMap);
    }

    public adjustOutletWeight_args() {
    }

    public adjustOutletWeight_args(
      AdjustOutletWeightReqVo reqVo)
    {
      this();
      this.reqVo = reqVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public adjustOutletWeight_args(adjustOutletWeight_args other) {
      if (other.isSetReqVo()) {
        this.reqVo = new AdjustOutletWeightReqVo(other.reqVo);
      }
    }

    public adjustOutletWeight_args deepCopy() {
      return new adjustOutletWeight_args(this);
    }

    @Override
    public void clear() {
      this.reqVo = null;
    }

    public AdjustOutletWeightReqVo getReqVo() {
      return this.reqVo;
    }

    public adjustOutletWeight_args setReqVo(AdjustOutletWeightReqVo reqVo) {
      this.reqVo = reqVo;
      return this;
    }

    public void unsetReqVo() {
      this.reqVo = null;
    }

    /** Returns true if field reqVo is set (has been assigned a value) and false otherwise */
    public boolean isSetReqVo() {
      return this.reqVo != null;
    }

    public void setReqVoIsSet(boolean value) {
      if (!value) {
        this.reqVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQ_VO:
        if (value == null) {
          unsetReqVo();
        } else {
          setReqVo((AdjustOutletWeightReqVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQ_VO:
        return getReqVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQ_VO:
        return isSetReqVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof adjustOutletWeight_args)
        return this.equals((adjustOutletWeight_args)that);
      return false;
    }

    public boolean equals(adjustOutletWeight_args that) {
      if (that == null)
        return false;

      boolean this_present_reqVo = true && this.isSetReqVo();
      boolean that_present_reqVo = true && that.isSetReqVo();
      if (this_present_reqVo || that_present_reqVo) {
        if (!(this_present_reqVo && that_present_reqVo))
          return false;
        if (!this.reqVo.equals(that.reqVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_reqVo = true && (isSetReqVo());
      list.add(present_reqVo);
      if (present_reqVo)
        list.add(reqVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(adjustOutletWeight_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetReqVo()).compareTo(other.isSetReqVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReqVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reqVo, other.reqVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("adjustOutletWeight_args(");
      boolean first = true;

      sb.append("reqVo:");
      if (this.reqVo == null) {
        sb.append("null");
      } else {
        sb.append(this.reqVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (reqVo != null) {
        reqVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class adjustOutletWeight_argsStandardSchemeFactory implements SchemeFactory {
      public adjustOutletWeight_argsStandardScheme getScheme() {
        return new adjustOutletWeight_argsStandardScheme();
      }
    }

    private static class adjustOutletWeight_argsStandardScheme extends StandardScheme<adjustOutletWeight_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, adjustOutletWeight_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQ_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.reqVo = new AdjustOutletWeightReqVo();
                struct.reqVo.read(iprot);
                struct.setReqVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, adjustOutletWeight_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.reqVo != null) {
          oprot.writeFieldBegin(REQ_VO_FIELD_DESC);
          struct.reqVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class adjustOutletWeight_argsTupleSchemeFactory implements SchemeFactory {
      public adjustOutletWeight_argsTupleScheme getScheme() {
        return new adjustOutletWeight_argsTupleScheme();
      }
    }

    private static class adjustOutletWeight_argsTupleScheme extends TupleScheme<adjustOutletWeight_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, adjustOutletWeight_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetReqVo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetReqVo()) {
          struct.reqVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, adjustOutletWeight_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.reqVo = new AdjustOutletWeightReqVo();
          struct.reqVo.read(iprot);
          struct.setReqVoIsSet(true);
        }
      }
    }

  }

  public static class adjustOutletWeight_result implements org.apache.thrift.TBase<adjustOutletWeight_result, adjustOutletWeight_result._Fields>, java.io.Serializable, Cloneable, Comparable<adjustOutletWeight_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("adjustOutletWeight_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new adjustOutletWeight_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new adjustOutletWeight_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(adjustOutletWeight_result.class, metaDataMap);
    }

    public adjustOutletWeight_result() {
    }

    public adjustOutletWeight_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public adjustOutletWeight_result(adjustOutletWeight_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public adjustOutletWeight_result deepCopy() {
      return new adjustOutletWeight_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public adjustOutletWeight_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof adjustOutletWeight_result)
        return this.equals((adjustOutletWeight_result)that);
      return false;
    }

    public boolean equals(adjustOutletWeight_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(adjustOutletWeight_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("adjustOutletWeight_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class adjustOutletWeight_resultStandardSchemeFactory implements SchemeFactory {
      public adjustOutletWeight_resultStandardScheme getScheme() {
        return new adjustOutletWeight_resultStandardScheme();
      }
    }

    private static class adjustOutletWeight_resultStandardScheme extends StandardScheme<adjustOutletWeight_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, adjustOutletWeight_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, adjustOutletWeight_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class adjustOutletWeight_resultTupleSchemeFactory implements SchemeFactory {
      public adjustOutletWeight_resultTupleScheme getScheme() {
        return new adjustOutletWeight_resultTupleScheme();
      }
    }

    private static class adjustOutletWeight_resultTupleScheme extends TupleScheme<adjustOutletWeight_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, adjustOutletWeight_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, adjustOutletWeight_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class deleteRelateOutlet_args implements org.apache.thrift.TBase<deleteRelateOutlet_args, deleteRelateOutlet_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteRelateOutlet_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteRelateOutlet_args");

    private static final org.apache.thrift.protocol.TField REQ_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("reqVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteRelateOutlet_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteRelateOutlet_argsTupleSchemeFactory());
    }

    public DeleteRelateOutletReqVo reqVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQ_VO((short)1, "reqVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQ_VO
            return REQ_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQ_VO, new org.apache.thrift.meta_data.FieldMetaData("reqVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DeleteRelateOutletReqVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteRelateOutlet_args.class, metaDataMap);
    }

    public deleteRelateOutlet_args() {
    }

    public deleteRelateOutlet_args(
      DeleteRelateOutletReqVo reqVo)
    {
      this();
      this.reqVo = reqVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteRelateOutlet_args(deleteRelateOutlet_args other) {
      if (other.isSetReqVo()) {
        this.reqVo = new DeleteRelateOutletReqVo(other.reqVo);
      }
    }

    public deleteRelateOutlet_args deepCopy() {
      return new deleteRelateOutlet_args(this);
    }

    @Override
    public void clear() {
      this.reqVo = null;
    }

    public DeleteRelateOutletReqVo getReqVo() {
      return this.reqVo;
    }

    public deleteRelateOutlet_args setReqVo(DeleteRelateOutletReqVo reqVo) {
      this.reqVo = reqVo;
      return this;
    }

    public void unsetReqVo() {
      this.reqVo = null;
    }

    /** Returns true if field reqVo is set (has been assigned a value) and false otherwise */
    public boolean isSetReqVo() {
      return this.reqVo != null;
    }

    public void setReqVoIsSet(boolean value) {
      if (!value) {
        this.reqVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQ_VO:
        if (value == null) {
          unsetReqVo();
        } else {
          setReqVo((DeleteRelateOutletReqVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQ_VO:
        return getReqVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQ_VO:
        return isSetReqVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteRelateOutlet_args)
        return this.equals((deleteRelateOutlet_args)that);
      return false;
    }

    public boolean equals(deleteRelateOutlet_args that) {
      if (that == null)
        return false;

      boolean this_present_reqVo = true && this.isSetReqVo();
      boolean that_present_reqVo = true && that.isSetReqVo();
      if (this_present_reqVo || that_present_reqVo) {
        if (!(this_present_reqVo && that_present_reqVo))
          return false;
        if (!this.reqVo.equals(that.reqVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_reqVo = true && (isSetReqVo());
      list.add(present_reqVo);
      if (present_reqVo)
        list.add(reqVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteRelateOutlet_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetReqVo()).compareTo(other.isSetReqVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReqVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reqVo, other.reqVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteRelateOutlet_args(");
      boolean first = true;

      sb.append("reqVo:");
      if (this.reqVo == null) {
        sb.append("null");
      } else {
        sb.append(this.reqVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (reqVo != null) {
        reqVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteRelateOutlet_argsStandardSchemeFactory implements SchemeFactory {
      public deleteRelateOutlet_argsStandardScheme getScheme() {
        return new deleteRelateOutlet_argsStandardScheme();
      }
    }

    private static class deleteRelateOutlet_argsStandardScheme extends StandardScheme<deleteRelateOutlet_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteRelateOutlet_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQ_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.reqVo = new DeleteRelateOutletReqVo();
                struct.reqVo.read(iprot);
                struct.setReqVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteRelateOutlet_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.reqVo != null) {
          oprot.writeFieldBegin(REQ_VO_FIELD_DESC);
          struct.reqVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteRelateOutlet_argsTupleSchemeFactory implements SchemeFactory {
      public deleteRelateOutlet_argsTupleScheme getScheme() {
        return new deleteRelateOutlet_argsTupleScheme();
      }
    }

    private static class deleteRelateOutlet_argsTupleScheme extends TupleScheme<deleteRelateOutlet_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteRelateOutlet_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetReqVo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetReqVo()) {
          struct.reqVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteRelateOutlet_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.reqVo = new DeleteRelateOutletReqVo();
          struct.reqVo.read(iprot);
          struct.setReqVoIsSet(true);
        }
      }
    }

  }

  public static class deleteRelateOutlet_result implements org.apache.thrift.TBase<deleteRelateOutlet_result, deleteRelateOutlet_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteRelateOutlet_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteRelateOutlet_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteRelateOutlet_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteRelateOutlet_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteRelateOutlet_result.class, metaDataMap);
    }

    public deleteRelateOutlet_result() {
    }

    public deleteRelateOutlet_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteRelateOutlet_result(deleteRelateOutlet_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public deleteRelateOutlet_result deepCopy() {
      return new deleteRelateOutlet_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public deleteRelateOutlet_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteRelateOutlet_result)
        return this.equals((deleteRelateOutlet_result)that);
      return false;
    }

    public boolean equals(deleteRelateOutlet_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteRelateOutlet_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteRelateOutlet_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteRelateOutlet_resultStandardSchemeFactory implements SchemeFactory {
      public deleteRelateOutlet_resultStandardScheme getScheme() {
        return new deleteRelateOutlet_resultStandardScheme();
      }
    }

    private static class deleteRelateOutlet_resultStandardScheme extends StandardScheme<deleteRelateOutlet_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteRelateOutlet_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteRelateOutlet_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteRelateOutlet_resultTupleSchemeFactory implements SchemeFactory {
      public deleteRelateOutlet_resultTupleScheme getScheme() {
        return new deleteRelateOutlet_resultTupleScheme();
      }
    }

    private static class deleteRelateOutlet_resultTupleScheme extends TupleScheme<deleteRelateOutlet_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteRelateOutlet_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteRelateOutlet_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class addOutletActivityTag_args implements org.apache.thrift.TBase<addOutletActivityTag_args, addOutletActivityTag_args._Fields>, java.io.Serializable, Cloneable, Comparable<addOutletActivityTag_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addOutletActivityTag_args");

    private static final org.apache.thrift.protocol.TField RECOMMEND_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("recommendVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addOutletActivityTag_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addOutletActivityTag_argsTupleSchemeFactory());
    }

    public RecommendActivityTagVo recommendVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      RECOMMEND_VO((short)1, "recommendVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // RECOMMEND_VO
            return RECOMMEND_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.RECOMMEND_VO, new org.apache.thrift.meta_data.FieldMetaData("recommendVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RecommendActivityTagVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addOutletActivityTag_args.class, metaDataMap);
    }

    public addOutletActivityTag_args() {
    }

    public addOutletActivityTag_args(
      RecommendActivityTagVo recommendVo)
    {
      this();
      this.recommendVo = recommendVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addOutletActivityTag_args(addOutletActivityTag_args other) {
      if (other.isSetRecommendVo()) {
        this.recommendVo = new RecommendActivityTagVo(other.recommendVo);
      }
    }

    public addOutletActivityTag_args deepCopy() {
      return new addOutletActivityTag_args(this);
    }

    @Override
    public void clear() {
      this.recommendVo = null;
    }

    public RecommendActivityTagVo getRecommendVo() {
      return this.recommendVo;
    }

    public addOutletActivityTag_args setRecommendVo(RecommendActivityTagVo recommendVo) {
      this.recommendVo = recommendVo;
      return this;
    }

    public void unsetRecommendVo() {
      this.recommendVo = null;
    }

    /** Returns true if field recommendVo is set (has been assigned a value) and false otherwise */
    public boolean isSetRecommendVo() {
      return this.recommendVo != null;
    }

    public void setRecommendVoIsSet(boolean value) {
      if (!value) {
        this.recommendVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case RECOMMEND_VO:
        if (value == null) {
          unsetRecommendVo();
        } else {
          setRecommendVo((RecommendActivityTagVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case RECOMMEND_VO:
        return getRecommendVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case RECOMMEND_VO:
        return isSetRecommendVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addOutletActivityTag_args)
        return this.equals((addOutletActivityTag_args)that);
      return false;
    }

    public boolean equals(addOutletActivityTag_args that) {
      if (that == null)
        return false;

      boolean this_present_recommendVo = true && this.isSetRecommendVo();
      boolean that_present_recommendVo = true && that.isSetRecommendVo();
      if (this_present_recommendVo || that_present_recommendVo) {
        if (!(this_present_recommendVo && that_present_recommendVo))
          return false;
        if (!this.recommendVo.equals(that.recommendVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_recommendVo = true && (isSetRecommendVo());
      list.add(present_recommendVo);
      if (present_recommendVo)
        list.add(recommendVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(addOutletActivityTag_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRecommendVo()).compareTo(other.isSetRecommendVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRecommendVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recommendVo, other.recommendVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addOutletActivityTag_args(");
      boolean first = true;

      sb.append("recommendVo:");
      if (this.recommendVo == null) {
        sb.append("null");
      } else {
        sb.append(this.recommendVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (recommendVo != null) {
        recommendVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addOutletActivityTag_argsStandardSchemeFactory implements SchemeFactory {
      public addOutletActivityTag_argsStandardScheme getScheme() {
        return new addOutletActivityTag_argsStandardScheme();
      }
    }

    private static class addOutletActivityTag_argsStandardScheme extends StandardScheme<addOutletActivityTag_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addOutletActivityTag_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // RECOMMEND_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.recommendVo = new RecommendActivityTagVo();
                struct.recommendVo.read(iprot);
                struct.setRecommendVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addOutletActivityTag_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.recommendVo != null) {
          oprot.writeFieldBegin(RECOMMEND_VO_FIELD_DESC);
          struct.recommendVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addOutletActivityTag_argsTupleSchemeFactory implements SchemeFactory {
      public addOutletActivityTag_argsTupleScheme getScheme() {
        return new addOutletActivityTag_argsTupleScheme();
      }
    }

    private static class addOutletActivityTag_argsTupleScheme extends TupleScheme<addOutletActivityTag_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addOutletActivityTag_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRecommendVo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRecommendVo()) {
          struct.recommendVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addOutletActivityTag_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.recommendVo = new RecommendActivityTagVo();
          struct.recommendVo.read(iprot);
          struct.setRecommendVoIsSet(true);
        }
      }
    }

  }

  public static class addOutletActivityTag_result implements org.apache.thrift.TBase<addOutletActivityTag_result, addOutletActivityTag_result._Fields>, java.io.Serializable, Cloneable, Comparable<addOutletActivityTag_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addOutletActivityTag_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addOutletActivityTag_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addOutletActivityTag_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addOutletActivityTag_result.class, metaDataMap);
    }

    public addOutletActivityTag_result() {
    }

    public addOutletActivityTag_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addOutletActivityTag_result(addOutletActivityTag_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public addOutletActivityTag_result deepCopy() {
      return new addOutletActivityTag_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public addOutletActivityTag_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addOutletActivityTag_result)
        return this.equals((addOutletActivityTag_result)that);
      return false;
    }

    public boolean equals(addOutletActivityTag_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(addOutletActivityTag_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addOutletActivityTag_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addOutletActivityTag_resultStandardSchemeFactory implements SchemeFactory {
      public addOutletActivityTag_resultStandardScheme getScheme() {
        return new addOutletActivityTag_resultStandardScheme();
      }
    }

    private static class addOutletActivityTag_resultStandardScheme extends StandardScheme<addOutletActivityTag_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addOutletActivityTag_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addOutletActivityTag_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addOutletActivityTag_resultTupleSchemeFactory implements SchemeFactory {
      public addOutletActivityTag_resultTupleScheme getScheme() {
        return new addOutletActivityTag_resultTupleScheme();
      }
    }

    private static class addOutletActivityTag_resultTupleScheme extends TupleScheme<addOutletActivityTag_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addOutletActivityTag_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addOutletActivityTag_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateOutletActivityTag_args implements org.apache.thrift.TBase<updateOutletActivityTag_args, updateOutletActivityTag_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateOutletActivityTag_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateOutletActivityTag_args");

    private static final org.apache.thrift.protocol.TField RECOMMEND_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("recommendVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateOutletActivityTag_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateOutletActivityTag_argsTupleSchemeFactory());
    }

    public RecommendActivityTagVo recommendVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      RECOMMEND_VO((short)1, "recommendVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // RECOMMEND_VO
            return RECOMMEND_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.RECOMMEND_VO, new org.apache.thrift.meta_data.FieldMetaData("recommendVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RecommendActivityTagVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateOutletActivityTag_args.class, metaDataMap);
    }

    public updateOutletActivityTag_args() {
    }

    public updateOutletActivityTag_args(
      RecommendActivityTagVo recommendVo)
    {
      this();
      this.recommendVo = recommendVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateOutletActivityTag_args(updateOutletActivityTag_args other) {
      if (other.isSetRecommendVo()) {
        this.recommendVo = new RecommendActivityTagVo(other.recommendVo);
      }
    }

    public updateOutletActivityTag_args deepCopy() {
      return new updateOutletActivityTag_args(this);
    }

    @Override
    public void clear() {
      this.recommendVo = null;
    }

    public RecommendActivityTagVo getRecommendVo() {
      return this.recommendVo;
    }

    public updateOutletActivityTag_args setRecommendVo(RecommendActivityTagVo recommendVo) {
      this.recommendVo = recommendVo;
      return this;
    }

    public void unsetRecommendVo() {
      this.recommendVo = null;
    }

    /** Returns true if field recommendVo is set (has been assigned a value) and false otherwise */
    public boolean isSetRecommendVo() {
      return this.recommendVo != null;
    }

    public void setRecommendVoIsSet(boolean value) {
      if (!value) {
        this.recommendVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case RECOMMEND_VO:
        if (value == null) {
          unsetRecommendVo();
        } else {
          setRecommendVo((RecommendActivityTagVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case RECOMMEND_VO:
        return getRecommendVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case RECOMMEND_VO:
        return isSetRecommendVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateOutletActivityTag_args)
        return this.equals((updateOutletActivityTag_args)that);
      return false;
    }

    public boolean equals(updateOutletActivityTag_args that) {
      if (that == null)
        return false;

      boolean this_present_recommendVo = true && this.isSetRecommendVo();
      boolean that_present_recommendVo = true && that.isSetRecommendVo();
      if (this_present_recommendVo || that_present_recommendVo) {
        if (!(this_present_recommendVo && that_present_recommendVo))
          return false;
        if (!this.recommendVo.equals(that.recommendVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_recommendVo = true && (isSetRecommendVo());
      list.add(present_recommendVo);
      if (present_recommendVo)
        list.add(recommendVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateOutletActivityTag_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRecommendVo()).compareTo(other.isSetRecommendVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRecommendVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recommendVo, other.recommendVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateOutletActivityTag_args(");
      boolean first = true;

      sb.append("recommendVo:");
      if (this.recommendVo == null) {
        sb.append("null");
      } else {
        sb.append(this.recommendVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (recommendVo != null) {
        recommendVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateOutletActivityTag_argsStandardSchemeFactory implements SchemeFactory {
      public updateOutletActivityTag_argsStandardScheme getScheme() {
        return new updateOutletActivityTag_argsStandardScheme();
      }
    }

    private static class updateOutletActivityTag_argsStandardScheme extends StandardScheme<updateOutletActivityTag_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateOutletActivityTag_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // RECOMMEND_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.recommendVo = new RecommendActivityTagVo();
                struct.recommendVo.read(iprot);
                struct.setRecommendVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateOutletActivityTag_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.recommendVo != null) {
          oprot.writeFieldBegin(RECOMMEND_VO_FIELD_DESC);
          struct.recommendVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateOutletActivityTag_argsTupleSchemeFactory implements SchemeFactory {
      public updateOutletActivityTag_argsTupleScheme getScheme() {
        return new updateOutletActivityTag_argsTupleScheme();
      }
    }

    private static class updateOutletActivityTag_argsTupleScheme extends TupleScheme<updateOutletActivityTag_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateOutletActivityTag_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRecommendVo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRecommendVo()) {
          struct.recommendVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateOutletActivityTag_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.recommendVo = new RecommendActivityTagVo();
          struct.recommendVo.read(iprot);
          struct.setRecommendVoIsSet(true);
        }
      }
    }

  }

  public static class updateOutletActivityTag_result implements org.apache.thrift.TBase<updateOutletActivityTag_result, updateOutletActivityTag_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateOutletActivityTag_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateOutletActivityTag_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateOutletActivityTag_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateOutletActivityTag_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateOutletActivityTag_result.class, metaDataMap);
    }

    public updateOutletActivityTag_result() {
    }

    public updateOutletActivityTag_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateOutletActivityTag_result(updateOutletActivityTag_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public updateOutletActivityTag_result deepCopy() {
      return new updateOutletActivityTag_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public updateOutletActivityTag_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateOutletActivityTag_result)
        return this.equals((updateOutletActivityTag_result)that);
      return false;
    }

    public boolean equals(updateOutletActivityTag_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateOutletActivityTag_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateOutletActivityTag_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateOutletActivityTag_resultStandardSchemeFactory implements SchemeFactory {
      public updateOutletActivityTag_resultStandardScheme getScheme() {
        return new updateOutletActivityTag_resultStandardScheme();
      }
    }

    private static class updateOutletActivityTag_resultStandardScheme extends StandardScheme<updateOutletActivityTag_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateOutletActivityTag_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateOutletActivityTag_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateOutletActivityTag_resultTupleSchemeFactory implements SchemeFactory {
      public updateOutletActivityTag_resultTupleScheme getScheme() {
        return new updateOutletActivityTag_resultTupleScheme();
      }
    }

    private static class updateOutletActivityTag_resultTupleScheme extends TupleScheme<updateOutletActivityTag_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateOutletActivityTag_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateOutletActivityTag_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class relateOutletInfo_args implements org.apache.thrift.TBase<relateOutletInfo_args, relateOutletInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<relateOutletInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("relateOutletInfo_args");

    private static final org.apache.thrift.protocol.TField VO_FIELD_DESC = new org.apache.thrift.protocol.TField("vo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new relateOutletInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new relateOutletInfo_argsTupleSchemeFactory());
    }

    public RelateOutletActivityVo vo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      VO((short)1, "vo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // VO
            return VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.VO, new org.apache.thrift.meta_data.FieldMetaData("vo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RelateOutletActivityVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(relateOutletInfo_args.class, metaDataMap);
    }

    public relateOutletInfo_args() {
    }

    public relateOutletInfo_args(
      RelateOutletActivityVo vo)
    {
      this();
      this.vo = vo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public relateOutletInfo_args(relateOutletInfo_args other) {
      if (other.isSetVo()) {
        this.vo = new RelateOutletActivityVo(other.vo);
      }
    }

    public relateOutletInfo_args deepCopy() {
      return new relateOutletInfo_args(this);
    }

    @Override
    public void clear() {
      this.vo = null;
    }

    public RelateOutletActivityVo getVo() {
      return this.vo;
    }

    public relateOutletInfo_args setVo(RelateOutletActivityVo vo) {
      this.vo = vo;
      return this;
    }

    public void unsetVo() {
      this.vo = null;
    }

    /** Returns true if field vo is set (has been assigned a value) and false otherwise */
    public boolean isSetVo() {
      return this.vo != null;
    }

    public void setVoIsSet(boolean value) {
      if (!value) {
        this.vo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case VO:
        if (value == null) {
          unsetVo();
        } else {
          setVo((RelateOutletActivityVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case VO:
        return getVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case VO:
        return isSetVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof relateOutletInfo_args)
        return this.equals((relateOutletInfo_args)that);
      return false;
    }

    public boolean equals(relateOutletInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_vo = true && this.isSetVo();
      boolean that_present_vo = true && that.isSetVo();
      if (this_present_vo || that_present_vo) {
        if (!(this_present_vo && that_present_vo))
          return false;
        if (!this.vo.equals(that.vo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_vo = true && (isSetVo());
      list.add(present_vo);
      if (present_vo)
        list.add(vo);

      return list.hashCode();
    }

    @Override
    public int compareTo(relateOutletInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetVo()).compareTo(other.isSetVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vo, other.vo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("relateOutletInfo_args(");
      boolean first = true;

      sb.append("vo:");
      if (this.vo == null) {
        sb.append("null");
      } else {
        sb.append(this.vo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (vo != null) {
        vo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class relateOutletInfo_argsStandardSchemeFactory implements SchemeFactory {
      public relateOutletInfo_argsStandardScheme getScheme() {
        return new relateOutletInfo_argsStandardScheme();
      }
    }

    private static class relateOutletInfo_argsStandardScheme extends StandardScheme<relateOutletInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, relateOutletInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.vo = new RelateOutletActivityVo();
                struct.vo.read(iprot);
                struct.setVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, relateOutletInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.vo != null) {
          oprot.writeFieldBegin(VO_FIELD_DESC);
          struct.vo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class relateOutletInfo_argsTupleSchemeFactory implements SchemeFactory {
      public relateOutletInfo_argsTupleScheme getScheme() {
        return new relateOutletInfo_argsTupleScheme();
      }
    }

    private static class relateOutletInfo_argsTupleScheme extends TupleScheme<relateOutletInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, relateOutletInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetVo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetVo()) {
          struct.vo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, relateOutletInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.vo = new RelateOutletActivityVo();
          struct.vo.read(iprot);
          struct.setVoIsSet(true);
        }
      }
    }

  }

  public static class relateOutletInfo_result implements org.apache.thrift.TBase<relateOutletInfo_result, relateOutletInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<relateOutletInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("relateOutletInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new relateOutletInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new relateOutletInfo_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(relateOutletInfo_result.class, metaDataMap);
    }

    public relateOutletInfo_result() {
    }

    public relateOutletInfo_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public relateOutletInfo_result(relateOutletInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public relateOutletInfo_result deepCopy() {
      return new relateOutletInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public relateOutletInfo_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof relateOutletInfo_result)
        return this.equals((relateOutletInfo_result)that);
      return false;
    }

    public boolean equals(relateOutletInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(relateOutletInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("relateOutletInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class relateOutletInfo_resultStandardSchemeFactory implements SchemeFactory {
      public relateOutletInfo_resultStandardScheme getScheme() {
        return new relateOutletInfo_resultStandardScheme();
      }
    }

    private static class relateOutletInfo_resultStandardScheme extends StandardScheme<relateOutletInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, relateOutletInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, relateOutletInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class relateOutletInfo_resultTupleSchemeFactory implements SchemeFactory {
      public relateOutletInfo_resultTupleScheme getScheme() {
        return new relateOutletInfo_resultTupleScheme();
      }
    }

    private static class relateOutletInfo_resultTupleScheme extends TupleScheme<relateOutletInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, relateOutletInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, relateOutletInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class inputRelateOutletInfo_args implements org.apache.thrift.TBase<inputRelateOutletInfo_args, inputRelateOutletInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<inputRelateOutletInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("inputRelateOutletInfo_args");

    private static final org.apache.thrift.protocol.TField REQ_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("reqVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new inputRelateOutletInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new inputRelateOutletInfo_argsTupleSchemeFactory());
    }

    public InputRelateOutletActivityReqVo reqVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQ_VO((short)1, "reqVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQ_VO
            return REQ_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQ_VO, new org.apache.thrift.meta_data.FieldMetaData("reqVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, InputRelateOutletActivityReqVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(inputRelateOutletInfo_args.class, metaDataMap);
    }

    public inputRelateOutletInfo_args() {
    }

    public inputRelateOutletInfo_args(
      InputRelateOutletActivityReqVo reqVo)
    {
      this();
      this.reqVo = reqVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public inputRelateOutletInfo_args(inputRelateOutletInfo_args other) {
      if (other.isSetReqVo()) {
        this.reqVo = new InputRelateOutletActivityReqVo(other.reqVo);
      }
    }

    public inputRelateOutletInfo_args deepCopy() {
      return new inputRelateOutletInfo_args(this);
    }

    @Override
    public void clear() {
      this.reqVo = null;
    }

    public InputRelateOutletActivityReqVo getReqVo() {
      return this.reqVo;
    }

    public inputRelateOutletInfo_args setReqVo(InputRelateOutletActivityReqVo reqVo) {
      this.reqVo = reqVo;
      return this;
    }

    public void unsetReqVo() {
      this.reqVo = null;
    }

    /** Returns true if field reqVo is set (has been assigned a value) and false otherwise */
    public boolean isSetReqVo() {
      return this.reqVo != null;
    }

    public void setReqVoIsSet(boolean value) {
      if (!value) {
        this.reqVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQ_VO:
        if (value == null) {
          unsetReqVo();
        } else {
          setReqVo((InputRelateOutletActivityReqVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQ_VO:
        return getReqVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQ_VO:
        return isSetReqVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof inputRelateOutletInfo_args)
        return this.equals((inputRelateOutletInfo_args)that);
      return false;
    }

    public boolean equals(inputRelateOutletInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_reqVo = true && this.isSetReqVo();
      boolean that_present_reqVo = true && that.isSetReqVo();
      if (this_present_reqVo || that_present_reqVo) {
        if (!(this_present_reqVo && that_present_reqVo))
          return false;
        if (!this.reqVo.equals(that.reqVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_reqVo = true && (isSetReqVo());
      list.add(present_reqVo);
      if (present_reqVo)
        list.add(reqVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(inputRelateOutletInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetReqVo()).compareTo(other.isSetReqVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReqVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reqVo, other.reqVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("inputRelateOutletInfo_args(");
      boolean first = true;

      sb.append("reqVo:");
      if (this.reqVo == null) {
        sb.append("null");
      } else {
        sb.append(this.reqVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (reqVo != null) {
        reqVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class inputRelateOutletInfo_argsStandardSchemeFactory implements SchemeFactory {
      public inputRelateOutletInfo_argsStandardScheme getScheme() {
        return new inputRelateOutletInfo_argsStandardScheme();
      }
    }

    private static class inputRelateOutletInfo_argsStandardScheme extends StandardScheme<inputRelateOutletInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, inputRelateOutletInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQ_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.reqVo = new InputRelateOutletActivityReqVo();
                struct.reqVo.read(iprot);
                struct.setReqVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, inputRelateOutletInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.reqVo != null) {
          oprot.writeFieldBegin(REQ_VO_FIELD_DESC);
          struct.reqVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class inputRelateOutletInfo_argsTupleSchemeFactory implements SchemeFactory {
      public inputRelateOutletInfo_argsTupleScheme getScheme() {
        return new inputRelateOutletInfo_argsTupleScheme();
      }
    }

    private static class inputRelateOutletInfo_argsTupleScheme extends TupleScheme<inputRelateOutletInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, inputRelateOutletInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetReqVo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetReqVo()) {
          struct.reqVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, inputRelateOutletInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.reqVo = new InputRelateOutletActivityReqVo();
          struct.reqVo.read(iprot);
          struct.setReqVoIsSet(true);
        }
      }
    }

  }

  public static class inputRelateOutletInfo_result implements org.apache.thrift.TBase<inputRelateOutletInfo_result, inputRelateOutletInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<inputRelateOutletInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("inputRelateOutletInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new inputRelateOutletInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new inputRelateOutletInfo_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(inputRelateOutletInfo_result.class, metaDataMap);
    }

    public inputRelateOutletInfo_result() {
    }

    public inputRelateOutletInfo_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public inputRelateOutletInfo_result(inputRelateOutletInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public inputRelateOutletInfo_result deepCopy() {
      return new inputRelateOutletInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public inputRelateOutletInfo_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof inputRelateOutletInfo_result)
        return this.equals((inputRelateOutletInfo_result)that);
      return false;
    }

    public boolean equals(inputRelateOutletInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(inputRelateOutletInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("inputRelateOutletInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class inputRelateOutletInfo_resultStandardSchemeFactory implements SchemeFactory {
      public inputRelateOutletInfo_resultStandardScheme getScheme() {
        return new inputRelateOutletInfo_resultStandardScheme();
      }
    }

    private static class inputRelateOutletInfo_resultStandardScheme extends StandardScheme<inputRelateOutletInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, inputRelateOutletInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, inputRelateOutletInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class inputRelateOutletInfo_resultTupleSchemeFactory implements SchemeFactory {
      public inputRelateOutletInfo_resultTupleScheme getScheme() {
        return new inputRelateOutletInfo_resultTupleScheme();
      }
    }

    private static class inputRelateOutletInfo_resultTupleScheme extends TupleScheme<inputRelateOutletInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, inputRelateOutletInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, inputRelateOutletInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryOutletNameAndMerchantNameByOutletId_args implements org.apache.thrift.TBase<queryOutletNameAndMerchantNameByOutletId_args, queryOutletNameAndMerchantNameByOutletId_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryOutletNameAndMerchantNameByOutletId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryOutletNameAndMerchantNameByOutletId_args");

    private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField OUTLET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("outletId", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryOutletNameAndMerchantNameByOutletId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryOutletNameAndMerchantNameByOutletId_argsTupleSchemeFactory());
    }

    public String clientId; // required
    public String outletId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CLIENT_ID((short)1, "clientId"),
      OUTLET_ID((short)2, "outletId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CLIENT_ID
            return CLIENT_ID;
          case 2: // OUTLET_ID
            return OUTLET_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.OUTLET_ID, new org.apache.thrift.meta_data.FieldMetaData("outletId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryOutletNameAndMerchantNameByOutletId_args.class, metaDataMap);
    }

    public queryOutletNameAndMerchantNameByOutletId_args() {
    }

    public queryOutletNameAndMerchantNameByOutletId_args(
      String clientId,
      String outletId)
    {
      this();
      this.clientId = clientId;
      this.outletId = outletId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryOutletNameAndMerchantNameByOutletId_args(queryOutletNameAndMerchantNameByOutletId_args other) {
      if (other.isSetClientId()) {
        this.clientId = other.clientId;
      }
      if (other.isSetOutletId()) {
        this.outletId = other.outletId;
      }
    }

    public queryOutletNameAndMerchantNameByOutletId_args deepCopy() {
      return new queryOutletNameAndMerchantNameByOutletId_args(this);
    }

    @Override
    public void clear() {
      this.clientId = null;
      this.outletId = null;
    }

    public String getClientId() {
      return this.clientId;
    }

    public queryOutletNameAndMerchantNameByOutletId_args setClientId(String clientId) {
      this.clientId = clientId;
      return this;
    }

    public void unsetClientId() {
      this.clientId = null;
    }

    /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
    public boolean isSetClientId() {
      return this.clientId != null;
    }

    public void setClientIdIsSet(boolean value) {
      if (!value) {
        this.clientId = null;
      }
    }

    public String getOutletId() {
      return this.outletId;
    }

    public queryOutletNameAndMerchantNameByOutletId_args setOutletId(String outletId) {
      this.outletId = outletId;
      return this;
    }

    public void unsetOutletId() {
      this.outletId = null;
    }

    /** Returns true if field outletId is set (has been assigned a value) and false otherwise */
    public boolean isSetOutletId() {
      return this.outletId != null;
    }

    public void setOutletIdIsSet(boolean value) {
      if (!value) {
        this.outletId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CLIENT_ID:
        if (value == null) {
          unsetClientId();
        } else {
          setClientId((String)value);
        }
        break;

      case OUTLET_ID:
        if (value == null) {
          unsetOutletId();
        } else {
          setOutletId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CLIENT_ID:
        return getClientId();

      case OUTLET_ID:
        return getOutletId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CLIENT_ID:
        return isSetClientId();
      case OUTLET_ID:
        return isSetOutletId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryOutletNameAndMerchantNameByOutletId_args)
        return this.equals((queryOutletNameAndMerchantNameByOutletId_args)that);
      return false;
    }

    public boolean equals(queryOutletNameAndMerchantNameByOutletId_args that) {
      if (that == null)
        return false;

      boolean this_present_clientId = true && this.isSetClientId();
      boolean that_present_clientId = true && that.isSetClientId();
      if (this_present_clientId || that_present_clientId) {
        if (!(this_present_clientId && that_present_clientId))
          return false;
        if (!this.clientId.equals(that.clientId))
          return false;
      }

      boolean this_present_outletId = true && this.isSetOutletId();
      boolean that_present_outletId = true && that.isSetOutletId();
      if (this_present_outletId || that_present_outletId) {
        if (!(this_present_outletId && that_present_outletId))
          return false;
        if (!this.outletId.equals(that.outletId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_clientId = true && (isSetClientId());
      list.add(present_clientId);
      if (present_clientId)
        list.add(clientId);

      boolean present_outletId = true && (isSetOutletId());
      list.add(present_outletId);
      if (present_outletId)
        list.add(outletId);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryOutletNameAndMerchantNameByOutletId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOutletId()).compareTo(other.isSetOutletId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOutletId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outletId, other.outletId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryOutletNameAndMerchantNameByOutletId_args(");
      boolean first = true;

      sb.append("clientId:");
      if (this.clientId == null) {
        sb.append("null");
      } else {
        sb.append(this.clientId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("outletId:");
      if (this.outletId == null) {
        sb.append("null");
      } else {
        sb.append(this.outletId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryOutletNameAndMerchantNameByOutletId_argsStandardSchemeFactory implements SchemeFactory {
      public queryOutletNameAndMerchantNameByOutletId_argsStandardScheme getScheme() {
        return new queryOutletNameAndMerchantNameByOutletId_argsStandardScheme();
      }
    }

    private static class queryOutletNameAndMerchantNameByOutletId_argsStandardScheme extends StandardScheme<queryOutletNameAndMerchantNameByOutletId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryOutletNameAndMerchantNameByOutletId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CLIENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clientId = iprot.readString();
                struct.setClientIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // OUTLET_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.outletId = iprot.readString();
                struct.setOutletIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryOutletNameAndMerchantNameByOutletId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.clientId != null) {
          oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
          oprot.writeString(struct.clientId);
          oprot.writeFieldEnd();
        }
        if (struct.outletId != null) {
          oprot.writeFieldBegin(OUTLET_ID_FIELD_DESC);
          oprot.writeString(struct.outletId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryOutletNameAndMerchantNameByOutletId_argsTupleSchemeFactory implements SchemeFactory {
      public queryOutletNameAndMerchantNameByOutletId_argsTupleScheme getScheme() {
        return new queryOutletNameAndMerchantNameByOutletId_argsTupleScheme();
      }
    }

    private static class queryOutletNameAndMerchantNameByOutletId_argsTupleScheme extends TupleScheme<queryOutletNameAndMerchantNameByOutletId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryOutletNameAndMerchantNameByOutletId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetClientId()) {
          optionals.set(0);
        }
        if (struct.isSetOutletId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetClientId()) {
          oprot.writeString(struct.clientId);
        }
        if (struct.isSetOutletId()) {
          oprot.writeString(struct.outletId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryOutletNameAndMerchantNameByOutletId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.clientId = iprot.readString();
          struct.setClientIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.outletId = iprot.readString();
          struct.setOutletIdIsSet(true);
        }
      }
    }

  }

  public static class queryOutletNameAndMerchantNameByOutletId_result implements org.apache.thrift.TBase<queryOutletNameAndMerchantNameByOutletId_result, queryOutletNameAndMerchantNameByOutletId_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryOutletNameAndMerchantNameByOutletId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryOutletNameAndMerchantNameByOutletId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryOutletNameAndMerchantNameByOutletId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryOutletNameAndMerchantNameByOutletId_resultTupleSchemeFactory());
    }

    public OutletNameAndMerchantNameResVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, OutletNameAndMerchantNameResVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryOutletNameAndMerchantNameByOutletId_result.class, metaDataMap);
    }

    public queryOutletNameAndMerchantNameByOutletId_result() {
    }

    public queryOutletNameAndMerchantNameByOutletId_result(
      OutletNameAndMerchantNameResVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryOutletNameAndMerchantNameByOutletId_result(queryOutletNameAndMerchantNameByOutletId_result other) {
      if (other.isSetSuccess()) {
        this.success = new OutletNameAndMerchantNameResVo(other.success);
      }
    }

    public queryOutletNameAndMerchantNameByOutletId_result deepCopy() {
      return new queryOutletNameAndMerchantNameByOutletId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public OutletNameAndMerchantNameResVo getSuccess() {
      return this.success;
    }

    public queryOutletNameAndMerchantNameByOutletId_result setSuccess(OutletNameAndMerchantNameResVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((OutletNameAndMerchantNameResVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryOutletNameAndMerchantNameByOutletId_result)
        return this.equals((queryOutletNameAndMerchantNameByOutletId_result)that);
      return false;
    }

    public boolean equals(queryOutletNameAndMerchantNameByOutletId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryOutletNameAndMerchantNameByOutletId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryOutletNameAndMerchantNameByOutletId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryOutletNameAndMerchantNameByOutletId_resultStandardSchemeFactory implements SchemeFactory {
      public queryOutletNameAndMerchantNameByOutletId_resultStandardScheme getScheme() {
        return new queryOutletNameAndMerchantNameByOutletId_resultStandardScheme();
      }
    }

    private static class queryOutletNameAndMerchantNameByOutletId_resultStandardScheme extends StandardScheme<queryOutletNameAndMerchantNameByOutletId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryOutletNameAndMerchantNameByOutletId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new OutletNameAndMerchantNameResVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryOutletNameAndMerchantNameByOutletId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryOutletNameAndMerchantNameByOutletId_resultTupleSchemeFactory implements SchemeFactory {
      public queryOutletNameAndMerchantNameByOutletId_resultTupleScheme getScheme() {
        return new queryOutletNameAndMerchantNameByOutletId_resultTupleScheme();
      }
    }

    private static class queryOutletNameAndMerchantNameByOutletId_resultTupleScheme extends TupleScheme<queryOutletNameAndMerchantNameByOutletId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryOutletNameAndMerchantNameByOutletId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryOutletNameAndMerchantNameByOutletId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new OutletNameAndMerchantNameResVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class exportOutletRelateActivityTag_args implements org.apache.thrift.TBase<exportOutletRelateActivityTag_args, exportOutletRelateActivityTag_args._Fields>, java.io.Serializable, Cloneable, Comparable<exportOutletRelateActivityTag_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("exportOutletRelateActivityTag_args");

    private static final org.apache.thrift.protocol.TField REQ_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("reqVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new exportOutletRelateActivityTag_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new exportOutletRelateActivityTag_argsTupleSchemeFactory());
    }

    public ExportRelateActivityTagReqVo reqVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQ_VO((short)1, "reqVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQ_VO
            return REQ_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQ_VO, new org.apache.thrift.meta_data.FieldMetaData("reqVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ExportRelateActivityTagReqVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(exportOutletRelateActivityTag_args.class, metaDataMap);
    }

    public exportOutletRelateActivityTag_args() {
    }

    public exportOutletRelateActivityTag_args(
      ExportRelateActivityTagReqVo reqVo)
    {
      this();
      this.reqVo = reqVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public exportOutletRelateActivityTag_args(exportOutletRelateActivityTag_args other) {
      if (other.isSetReqVo()) {
        this.reqVo = new ExportRelateActivityTagReqVo(other.reqVo);
      }
    }

    public exportOutletRelateActivityTag_args deepCopy() {
      return new exportOutletRelateActivityTag_args(this);
    }

    @Override
    public void clear() {
      this.reqVo = null;
    }

    public ExportRelateActivityTagReqVo getReqVo() {
      return this.reqVo;
    }

    public exportOutletRelateActivityTag_args setReqVo(ExportRelateActivityTagReqVo reqVo) {
      this.reqVo = reqVo;
      return this;
    }

    public void unsetReqVo() {
      this.reqVo = null;
    }

    /** Returns true if field reqVo is set (has been assigned a value) and false otherwise */
    public boolean isSetReqVo() {
      return this.reqVo != null;
    }

    public void setReqVoIsSet(boolean value) {
      if (!value) {
        this.reqVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQ_VO:
        if (value == null) {
          unsetReqVo();
        } else {
          setReqVo((ExportRelateActivityTagReqVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQ_VO:
        return getReqVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQ_VO:
        return isSetReqVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof exportOutletRelateActivityTag_args)
        return this.equals((exportOutletRelateActivityTag_args)that);
      return false;
    }

    public boolean equals(exportOutletRelateActivityTag_args that) {
      if (that == null)
        return false;

      boolean this_present_reqVo = true && this.isSetReqVo();
      boolean that_present_reqVo = true && that.isSetReqVo();
      if (this_present_reqVo || that_present_reqVo) {
        if (!(this_present_reqVo && that_present_reqVo))
          return false;
        if (!this.reqVo.equals(that.reqVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_reqVo = true && (isSetReqVo());
      list.add(present_reqVo);
      if (present_reqVo)
        list.add(reqVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(exportOutletRelateActivityTag_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetReqVo()).compareTo(other.isSetReqVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReqVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reqVo, other.reqVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("exportOutletRelateActivityTag_args(");
      boolean first = true;

      sb.append("reqVo:");
      if (this.reqVo == null) {
        sb.append("null");
      } else {
        sb.append(this.reqVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (reqVo != null) {
        reqVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class exportOutletRelateActivityTag_argsStandardSchemeFactory implements SchemeFactory {
      public exportOutletRelateActivityTag_argsStandardScheme getScheme() {
        return new exportOutletRelateActivityTag_argsStandardScheme();
      }
    }

    private static class exportOutletRelateActivityTag_argsStandardScheme extends StandardScheme<exportOutletRelateActivityTag_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, exportOutletRelateActivityTag_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQ_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.reqVo = new ExportRelateActivityTagReqVo();
                struct.reqVo.read(iprot);
                struct.setReqVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, exportOutletRelateActivityTag_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.reqVo != null) {
          oprot.writeFieldBegin(REQ_VO_FIELD_DESC);
          struct.reqVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class exportOutletRelateActivityTag_argsTupleSchemeFactory implements SchemeFactory {
      public exportOutletRelateActivityTag_argsTupleScheme getScheme() {
        return new exportOutletRelateActivityTag_argsTupleScheme();
      }
    }

    private static class exportOutletRelateActivityTag_argsTupleScheme extends TupleScheme<exportOutletRelateActivityTag_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, exportOutletRelateActivityTag_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetReqVo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetReqVo()) {
          struct.reqVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, exportOutletRelateActivityTag_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.reqVo = new ExportRelateActivityTagReqVo();
          struct.reqVo.read(iprot);
          struct.setReqVoIsSet(true);
        }
      }
    }

  }

  public static class exportOutletRelateActivityTag_result implements org.apache.thrift.TBase<exportOutletRelateActivityTag_result, exportOutletRelateActivityTag_result._Fields>, java.io.Serializable, Cloneable, Comparable<exportOutletRelateActivityTag_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("exportOutletRelateActivityTag_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new exportOutletRelateActivityTag_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new exportOutletRelateActivityTag_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ExportResultRes success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ExportResultRes.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(exportOutletRelateActivityTag_result.class, metaDataMap);
    }

    public exportOutletRelateActivityTag_result() {
    }

    public exportOutletRelateActivityTag_result(
      com.froad.thrift.vo.ExportResultRes success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public exportOutletRelateActivityTag_result(exportOutletRelateActivityTag_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ExportResultRes(other.success);
      }
    }

    public exportOutletRelateActivityTag_result deepCopy() {
      return new exportOutletRelateActivityTag_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ExportResultRes getSuccess() {
      return this.success;
    }

    public exportOutletRelateActivityTag_result setSuccess(com.froad.thrift.vo.ExportResultRes success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ExportResultRes)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof exportOutletRelateActivityTag_result)
        return this.equals((exportOutletRelateActivityTag_result)that);
      return false;
    }

    public boolean equals(exportOutletRelateActivityTag_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(exportOutletRelateActivityTag_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("exportOutletRelateActivityTag_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class exportOutletRelateActivityTag_resultStandardSchemeFactory implements SchemeFactory {
      public exportOutletRelateActivityTag_resultStandardScheme getScheme() {
        return new exportOutletRelateActivityTag_resultStandardScheme();
      }
    }

    private static class exportOutletRelateActivityTag_resultStandardScheme extends StandardScheme<exportOutletRelateActivityTag_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, exportOutletRelateActivityTag_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ExportResultRes();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, exportOutletRelateActivityTag_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class exportOutletRelateActivityTag_resultTupleSchemeFactory implements SchemeFactory {
      public exportOutletRelateActivityTag_resultTupleScheme getScheme() {
        return new exportOutletRelateActivityTag_resultTupleScheme();
      }
    }

    private static class exportOutletRelateActivityTag_resultTupleScheme extends TupleScheme<exportOutletRelateActivityTag_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, exportOutletRelateActivityTag_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, exportOutletRelateActivityTag_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ExportResultRes();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
