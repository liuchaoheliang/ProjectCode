/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;

import javax.annotation.Generated;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.froad.thrift.vo.Business.BusinessOrderListReq;
import com.froad.thrift.vo.Business.BusinessOrderListRes;
import com.froad.thrift.vo.Business.BusinessOrderPyamentInfoRes;
import com.froad.thrift.vo.Business.BusinessOrderRefundInfoVoRes;
import com.froad.thrift.vo.Business.BusinessOrderShippingInfoVoRes;
import com.froad.thrift.vo.Business.BusinessOrderTradeInfoVoRes;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-12-7")
public class BusinessOrderQueryService {

  /**
   * BusinessOrderQueryService
   */
  public interface Iface extends com.froad.thrift.monitor.service.BizMonitorService.Iface {

    /**
     * 查询运营订单列表
     * @param req 订单查询条件
     * @param originVo 源对象信息(包含平台,操作ip,操作员id等...)
     * @return BusinessOrderListRes
     * 
     * @param req
     */
    public BusinessOrderListRes queryBusinessOrderList(BusinessOrderListReq req) throws org.apache.thrift.TException;

    /**
     * 运营订单导出
     * 
     * @param req 订单查询条件
     * @param originVo 源对象信息(包含平台,操作ip,操作员id等...)
     * @return Common.ExportResultRes
     * 
     * @param req
     */
    public com.froad.thrift.vo.ExportResultRes exportBusinessOrder(BusinessOrderListReq req) throws org.apache.thrift.TException;

    /**
     * 查询运营订单支付信息
     * 
     * @param clientId 所属客户端
     * @param subOrderId 订单编号
     * @param originVo 源对象信息(包含平台,操作ip,操作员id等...)
     * @return BusinessOrderPyamentInfoRes
     * 
     * @param clientId
     * @param subOrderId
     */
    public BusinessOrderPyamentInfoRes queryBusinessOrderPaymentInfo(String clientId, String subOrderId) throws org.apache.thrift.TException;

    /**
     * 查询运营订单交易概要信息
     * 
     * @param clientId 所属客户端
     * @param subOrderId 子订单编号
     * @param originVo 源对象信息(包含平台,操作ip,操作员id等...)
     * @return BusinessOrderTradeInfoVoRes
     * 
     * @param clientId
     * @param subOrderId
     */
    public BusinessOrderTradeInfoVoRes queryBusinessOrderTradeInfo(String clientId, String subOrderId) throws org.apache.thrift.TException;

    /**
     * 查询运营订单物流信息
     * 
     * @param clientId 所属客户端
     * @param subOrderId 子订单编号
     * @param originVo 源对象信息(包含平台,操作ip,操作员id等...)
     * @return BusinessOrderShippingInfoVoRes
     * 
     * @param clientId
     * @param subOrderId
     */
    public BusinessOrderShippingInfoVoRes queryBusinessOrderShippingInfo(String clientId, String subOrderId) throws org.apache.thrift.TException;

    /**
     * 查询运营订单退款信息
     * 
     * @param clientId 所属客户端
     * @param subOrderId 子订单编号
     * @param originVo 源对象信息(包含平台,操作ip,操作员id等...)
     * @return BusinessOrderRefundInfoVoRes
     * 
     * @param clientId
     * @param subOrderId
     */
    public BusinessOrderRefundInfoVoRes queryBusinessOrderRefundInfo(String clientId, String subOrderId) throws org.apache.thrift.TException;

  }

  public interface AsyncIface extends com.froad.thrift.monitor.service.BizMonitorService .AsyncIface {

    public void queryBusinessOrderList(BusinessOrderListReq req, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void exportBusinessOrder(BusinessOrderListReq req, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryBusinessOrderPaymentInfo(String clientId, String subOrderId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryBusinessOrderTradeInfo(String clientId, String subOrderId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryBusinessOrderShippingInfo(String clientId, String subOrderId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryBusinessOrderRefundInfo(String clientId, String subOrderId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends com.froad.thrift.monitor.service.BizMonitorService.Client implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public BusinessOrderListRes queryBusinessOrderList(BusinessOrderListReq req) throws org.apache.thrift.TException
    {
      send_queryBusinessOrderList(req);
      return recv_queryBusinessOrderList();
    }

    public void send_queryBusinessOrderList(BusinessOrderListReq req) throws org.apache.thrift.TException
    {
      queryBusinessOrderList_args args = new queryBusinessOrderList_args();
      args.setReq(req);
      sendBase("queryBusinessOrderList", args);
    }

    public BusinessOrderListRes recv_queryBusinessOrderList() throws org.apache.thrift.TException
    {
      queryBusinessOrderList_result result = new queryBusinessOrderList_result();
      receiveBase(result, "queryBusinessOrderList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryBusinessOrderList failed: unknown result");
    }

    public com.froad.thrift.vo.ExportResultRes exportBusinessOrder(BusinessOrderListReq req) throws org.apache.thrift.TException
    {
      send_exportBusinessOrder(req);
      return recv_exportBusinessOrder();
    }

    public void send_exportBusinessOrder(BusinessOrderListReq req) throws org.apache.thrift.TException
    {
      exportBusinessOrder_args args = new exportBusinessOrder_args();
      args.setReq(req);
      sendBase("exportBusinessOrder", args);
    }

    public com.froad.thrift.vo.ExportResultRes recv_exportBusinessOrder() throws org.apache.thrift.TException
    {
      exportBusinessOrder_result result = new exportBusinessOrder_result();
      receiveBase(result, "exportBusinessOrder");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "exportBusinessOrder failed: unknown result");
    }

    public BusinessOrderPyamentInfoRes queryBusinessOrderPaymentInfo(String clientId, String subOrderId) throws org.apache.thrift.TException
    {
      send_queryBusinessOrderPaymentInfo(clientId, subOrderId);
      return recv_queryBusinessOrderPaymentInfo();
    }

    public void send_queryBusinessOrderPaymentInfo(String clientId, String subOrderId) throws org.apache.thrift.TException
    {
      queryBusinessOrderPaymentInfo_args args = new queryBusinessOrderPaymentInfo_args();
      args.setClientId(clientId);
      args.setSubOrderId(subOrderId);
      sendBase("queryBusinessOrderPaymentInfo", args);
    }

    public BusinessOrderPyamentInfoRes recv_queryBusinessOrderPaymentInfo() throws org.apache.thrift.TException
    {
      queryBusinessOrderPaymentInfo_result result = new queryBusinessOrderPaymentInfo_result();
      receiveBase(result, "queryBusinessOrderPaymentInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryBusinessOrderPaymentInfo failed: unknown result");
    }

    public BusinessOrderTradeInfoVoRes queryBusinessOrderTradeInfo(String clientId, String subOrderId) throws org.apache.thrift.TException
    {
      send_queryBusinessOrderTradeInfo(clientId, subOrderId);
      return recv_queryBusinessOrderTradeInfo();
    }

    public void send_queryBusinessOrderTradeInfo(String clientId, String subOrderId) throws org.apache.thrift.TException
    {
      queryBusinessOrderTradeInfo_args args = new queryBusinessOrderTradeInfo_args();
      args.setClientId(clientId);
      args.setSubOrderId(subOrderId);
      sendBase("queryBusinessOrderTradeInfo", args);
    }

    public BusinessOrderTradeInfoVoRes recv_queryBusinessOrderTradeInfo() throws org.apache.thrift.TException
    {
      queryBusinessOrderTradeInfo_result result = new queryBusinessOrderTradeInfo_result();
      receiveBase(result, "queryBusinessOrderTradeInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryBusinessOrderTradeInfo failed: unknown result");
    }

    public BusinessOrderShippingInfoVoRes queryBusinessOrderShippingInfo(String clientId, String subOrderId) throws org.apache.thrift.TException
    {
      send_queryBusinessOrderShippingInfo(clientId, subOrderId);
      return recv_queryBusinessOrderShippingInfo();
    }

    public void send_queryBusinessOrderShippingInfo(String clientId, String subOrderId) throws org.apache.thrift.TException
    {
      queryBusinessOrderShippingInfo_args args = new queryBusinessOrderShippingInfo_args();
      args.setClientId(clientId);
      args.setSubOrderId(subOrderId);
      sendBase("queryBusinessOrderShippingInfo", args);
    }

    public BusinessOrderShippingInfoVoRes recv_queryBusinessOrderShippingInfo() throws org.apache.thrift.TException
    {
      queryBusinessOrderShippingInfo_result result = new queryBusinessOrderShippingInfo_result();
      receiveBase(result, "queryBusinessOrderShippingInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryBusinessOrderShippingInfo failed: unknown result");
    }

    public BusinessOrderRefundInfoVoRes queryBusinessOrderRefundInfo(String clientId, String subOrderId) throws org.apache.thrift.TException
    {
      send_queryBusinessOrderRefundInfo(clientId, subOrderId);
      return recv_queryBusinessOrderRefundInfo();
    }

    public void send_queryBusinessOrderRefundInfo(String clientId, String subOrderId) throws org.apache.thrift.TException
    {
      queryBusinessOrderRefundInfo_args args = new queryBusinessOrderRefundInfo_args();
      args.setClientId(clientId);
      args.setSubOrderId(subOrderId);
      sendBase("queryBusinessOrderRefundInfo", args);
    }

    public BusinessOrderRefundInfoVoRes recv_queryBusinessOrderRefundInfo() throws org.apache.thrift.TException
    {
      queryBusinessOrderRefundInfo_result result = new queryBusinessOrderRefundInfo_result();
      receiveBase(result, "queryBusinessOrderRefundInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryBusinessOrderRefundInfo failed: unknown result");
    }

  }
  public static class AsyncClient extends com.froad.thrift.monitor.service.BizMonitorService.AsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void queryBusinessOrderList(BusinessOrderListReq req, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryBusinessOrderList_call method_call = new queryBusinessOrderList_call(req, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryBusinessOrderList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private BusinessOrderListReq req;
      public queryBusinessOrderList_call(BusinessOrderListReq req, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.req = req;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryBusinessOrderList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryBusinessOrderList_args args = new queryBusinessOrderList_args();
        args.setReq(req);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public BusinessOrderListRes getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryBusinessOrderList();
      }
    }

    public void exportBusinessOrder(BusinessOrderListReq req, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      exportBusinessOrder_call method_call = new exportBusinessOrder_call(req, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class exportBusinessOrder_call extends org.apache.thrift.async.TAsyncMethodCall {
      private BusinessOrderListReq req;
      public exportBusinessOrder_call(BusinessOrderListReq req, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.req = req;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("exportBusinessOrder", org.apache.thrift.protocol.TMessageType.CALL, 0));
        exportBusinessOrder_args args = new exportBusinessOrder_args();
        args.setReq(req);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ExportResultRes getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_exportBusinessOrder();
      }
    }

    public void queryBusinessOrderPaymentInfo(String clientId, String subOrderId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryBusinessOrderPaymentInfo_call method_call = new queryBusinessOrderPaymentInfo_call(clientId, subOrderId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryBusinessOrderPaymentInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String clientId;
      private String subOrderId;
      public queryBusinessOrderPaymentInfo_call(String clientId, String subOrderId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.clientId = clientId;
        this.subOrderId = subOrderId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryBusinessOrderPaymentInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryBusinessOrderPaymentInfo_args args = new queryBusinessOrderPaymentInfo_args();
        args.setClientId(clientId);
        args.setSubOrderId(subOrderId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public BusinessOrderPyamentInfoRes getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryBusinessOrderPaymentInfo();
      }
    }

    public void queryBusinessOrderTradeInfo(String clientId, String subOrderId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryBusinessOrderTradeInfo_call method_call = new queryBusinessOrderTradeInfo_call(clientId, subOrderId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryBusinessOrderTradeInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String clientId;
      private String subOrderId;
      public queryBusinessOrderTradeInfo_call(String clientId, String subOrderId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.clientId = clientId;
        this.subOrderId = subOrderId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryBusinessOrderTradeInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryBusinessOrderTradeInfo_args args = new queryBusinessOrderTradeInfo_args();
        args.setClientId(clientId);
        args.setSubOrderId(subOrderId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public BusinessOrderTradeInfoVoRes getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryBusinessOrderTradeInfo();
      }
    }

    public void queryBusinessOrderShippingInfo(String clientId, String subOrderId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryBusinessOrderShippingInfo_call method_call = new queryBusinessOrderShippingInfo_call(clientId, subOrderId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryBusinessOrderShippingInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String clientId;
      private String subOrderId;
      public queryBusinessOrderShippingInfo_call(String clientId, String subOrderId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.clientId = clientId;
        this.subOrderId = subOrderId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryBusinessOrderShippingInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryBusinessOrderShippingInfo_args args = new queryBusinessOrderShippingInfo_args();
        args.setClientId(clientId);
        args.setSubOrderId(subOrderId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public BusinessOrderShippingInfoVoRes getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryBusinessOrderShippingInfo();
      }
    }

    public void queryBusinessOrderRefundInfo(String clientId, String subOrderId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryBusinessOrderRefundInfo_call method_call = new queryBusinessOrderRefundInfo_call(clientId, subOrderId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryBusinessOrderRefundInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String clientId;
      private String subOrderId;
      public queryBusinessOrderRefundInfo_call(String clientId, String subOrderId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.clientId = clientId;
        this.subOrderId = subOrderId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryBusinessOrderRefundInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryBusinessOrderRefundInfo_args args = new queryBusinessOrderRefundInfo_args();
        args.setClientId(clientId);
        args.setSubOrderId(subOrderId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public BusinessOrderRefundInfoVoRes getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryBusinessOrderRefundInfo();
      }
    }

  }

  public static class Processor<I extends Iface> extends com.froad.thrift.monitor.service.BizMonitorService.Processor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("queryBusinessOrderList", new queryBusinessOrderList());
      processMap.put("exportBusinessOrder", new exportBusinessOrder());
      processMap.put("queryBusinessOrderPaymentInfo", new queryBusinessOrderPaymentInfo());
      processMap.put("queryBusinessOrderTradeInfo", new queryBusinessOrderTradeInfo());
      processMap.put("queryBusinessOrderShippingInfo", new queryBusinessOrderShippingInfo());
      processMap.put("queryBusinessOrderRefundInfo", new queryBusinessOrderRefundInfo());
      return processMap;
    }

    public static class queryBusinessOrderList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryBusinessOrderList_args> {
      public queryBusinessOrderList() {
        super("queryBusinessOrderList");
      }

      public queryBusinessOrderList_args getEmptyArgsInstance() {
        return new queryBusinessOrderList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryBusinessOrderList_result getResult(I iface, queryBusinessOrderList_args args) throws org.apache.thrift.TException {
        queryBusinessOrderList_result result = new queryBusinessOrderList_result();
        result.success = iface.queryBusinessOrderList(args.req);
        return result;
      }
    }

    public static class exportBusinessOrder<I extends Iface> extends org.apache.thrift.ProcessFunction<I, exportBusinessOrder_args> {
      public exportBusinessOrder() {
        super("exportBusinessOrder");
      }

      public exportBusinessOrder_args getEmptyArgsInstance() {
        return new exportBusinessOrder_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public exportBusinessOrder_result getResult(I iface, exportBusinessOrder_args args) throws org.apache.thrift.TException {
        exportBusinessOrder_result result = new exportBusinessOrder_result();
        result.success = iface.exportBusinessOrder(args.req);
        return result;
      }
    }

    public static class queryBusinessOrderPaymentInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryBusinessOrderPaymentInfo_args> {
      public queryBusinessOrderPaymentInfo() {
        super("queryBusinessOrderPaymentInfo");
      }

      public queryBusinessOrderPaymentInfo_args getEmptyArgsInstance() {
        return new queryBusinessOrderPaymentInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryBusinessOrderPaymentInfo_result getResult(I iface, queryBusinessOrderPaymentInfo_args args) throws org.apache.thrift.TException {
        queryBusinessOrderPaymentInfo_result result = new queryBusinessOrderPaymentInfo_result();
        result.success = iface.queryBusinessOrderPaymentInfo(args.clientId, args.subOrderId);
        return result;
      }
    }

    public static class queryBusinessOrderTradeInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryBusinessOrderTradeInfo_args> {
      public queryBusinessOrderTradeInfo() {
        super("queryBusinessOrderTradeInfo");
      }

      public queryBusinessOrderTradeInfo_args getEmptyArgsInstance() {
        return new queryBusinessOrderTradeInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryBusinessOrderTradeInfo_result getResult(I iface, queryBusinessOrderTradeInfo_args args) throws org.apache.thrift.TException {
        queryBusinessOrderTradeInfo_result result = new queryBusinessOrderTradeInfo_result();
        result.success = iface.queryBusinessOrderTradeInfo(args.clientId, args.subOrderId);
        return result;
      }
    }

    public static class queryBusinessOrderShippingInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryBusinessOrderShippingInfo_args> {
      public queryBusinessOrderShippingInfo() {
        super("queryBusinessOrderShippingInfo");
      }

      public queryBusinessOrderShippingInfo_args getEmptyArgsInstance() {
        return new queryBusinessOrderShippingInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryBusinessOrderShippingInfo_result getResult(I iface, queryBusinessOrderShippingInfo_args args) throws org.apache.thrift.TException {
        queryBusinessOrderShippingInfo_result result = new queryBusinessOrderShippingInfo_result();
        result.success = iface.queryBusinessOrderShippingInfo(args.clientId, args.subOrderId);
        return result;
      }
    }

    public static class queryBusinessOrderRefundInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryBusinessOrderRefundInfo_args> {
      public queryBusinessOrderRefundInfo() {
        super("queryBusinessOrderRefundInfo");
      }

      public queryBusinessOrderRefundInfo_args getEmptyArgsInstance() {
        return new queryBusinessOrderRefundInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryBusinessOrderRefundInfo_result getResult(I iface, queryBusinessOrderRefundInfo_args args) throws org.apache.thrift.TException {
        queryBusinessOrderRefundInfo_result result = new queryBusinessOrderRefundInfo_result();
        result.success = iface.queryBusinessOrderRefundInfo(args.clientId, args.subOrderId);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends com.froad.thrift.monitor.service.BizMonitorService.AsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("queryBusinessOrderList", new queryBusinessOrderList());
      processMap.put("exportBusinessOrder", new exportBusinessOrder());
      processMap.put("queryBusinessOrderPaymentInfo", new queryBusinessOrderPaymentInfo());
      processMap.put("queryBusinessOrderTradeInfo", new queryBusinessOrderTradeInfo());
      processMap.put("queryBusinessOrderShippingInfo", new queryBusinessOrderShippingInfo());
      processMap.put("queryBusinessOrderRefundInfo", new queryBusinessOrderRefundInfo());
      return processMap;
    }

    public static class queryBusinessOrderList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryBusinessOrderList_args, BusinessOrderListRes> {
      public queryBusinessOrderList() {
        super("queryBusinessOrderList");
      }

      public queryBusinessOrderList_args getEmptyArgsInstance() {
        return new queryBusinessOrderList_args();
      }

      public AsyncMethodCallback<BusinessOrderListRes> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<BusinessOrderListRes>() { 
          public void onComplete(BusinessOrderListRes o) {
            queryBusinessOrderList_result result = new queryBusinessOrderList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryBusinessOrderList_result result = new queryBusinessOrderList_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryBusinessOrderList_args args, org.apache.thrift.async.AsyncMethodCallback<BusinessOrderListRes> resultHandler) throws TException {
        iface.queryBusinessOrderList(args.req,resultHandler);
      }
    }

    public static class exportBusinessOrder<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, exportBusinessOrder_args, com.froad.thrift.vo.ExportResultRes> {
      public exportBusinessOrder() {
        super("exportBusinessOrder");
      }

      public exportBusinessOrder_args getEmptyArgsInstance() {
        return new exportBusinessOrder_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ExportResultRes> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ExportResultRes>() { 
          public void onComplete(com.froad.thrift.vo.ExportResultRes o) {
            exportBusinessOrder_result result = new exportBusinessOrder_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            exportBusinessOrder_result result = new exportBusinessOrder_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, exportBusinessOrder_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ExportResultRes> resultHandler) throws TException {
        iface.exportBusinessOrder(args.req,resultHandler);
      }
    }

    public static class queryBusinessOrderPaymentInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryBusinessOrderPaymentInfo_args, BusinessOrderPyamentInfoRes> {
      public queryBusinessOrderPaymentInfo() {
        super("queryBusinessOrderPaymentInfo");
      }

      public queryBusinessOrderPaymentInfo_args getEmptyArgsInstance() {
        return new queryBusinessOrderPaymentInfo_args();
      }

      public AsyncMethodCallback<BusinessOrderPyamentInfoRes> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<BusinessOrderPyamentInfoRes>() { 
          public void onComplete(BusinessOrderPyamentInfoRes o) {
            queryBusinessOrderPaymentInfo_result result = new queryBusinessOrderPaymentInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryBusinessOrderPaymentInfo_result result = new queryBusinessOrderPaymentInfo_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryBusinessOrderPaymentInfo_args args, org.apache.thrift.async.AsyncMethodCallback<BusinessOrderPyamentInfoRes> resultHandler) throws TException {
        iface.queryBusinessOrderPaymentInfo(args.clientId, args.subOrderId,resultHandler);
      }
    }

    public static class queryBusinessOrderTradeInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryBusinessOrderTradeInfo_args, BusinessOrderTradeInfoVoRes> {
      public queryBusinessOrderTradeInfo() {
        super("queryBusinessOrderTradeInfo");
      }

      public queryBusinessOrderTradeInfo_args getEmptyArgsInstance() {
        return new queryBusinessOrderTradeInfo_args();
      }

      public AsyncMethodCallback<BusinessOrderTradeInfoVoRes> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<BusinessOrderTradeInfoVoRes>() { 
          public void onComplete(BusinessOrderTradeInfoVoRes o) {
            queryBusinessOrderTradeInfo_result result = new queryBusinessOrderTradeInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryBusinessOrderTradeInfo_result result = new queryBusinessOrderTradeInfo_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryBusinessOrderTradeInfo_args args, org.apache.thrift.async.AsyncMethodCallback<BusinessOrderTradeInfoVoRes> resultHandler) throws TException {
        iface.queryBusinessOrderTradeInfo(args.clientId, args.subOrderId,resultHandler);
      }
    }

    public static class queryBusinessOrderShippingInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryBusinessOrderShippingInfo_args, BusinessOrderShippingInfoVoRes> {
      public queryBusinessOrderShippingInfo() {
        super("queryBusinessOrderShippingInfo");
      }

      public queryBusinessOrderShippingInfo_args getEmptyArgsInstance() {
        return new queryBusinessOrderShippingInfo_args();
      }

      public AsyncMethodCallback<BusinessOrderShippingInfoVoRes> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<BusinessOrderShippingInfoVoRes>() { 
          public void onComplete(BusinessOrderShippingInfoVoRes o) {
            queryBusinessOrderShippingInfo_result result = new queryBusinessOrderShippingInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryBusinessOrderShippingInfo_result result = new queryBusinessOrderShippingInfo_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryBusinessOrderShippingInfo_args args, org.apache.thrift.async.AsyncMethodCallback<BusinessOrderShippingInfoVoRes> resultHandler) throws TException {
        iface.queryBusinessOrderShippingInfo(args.clientId, args.subOrderId,resultHandler);
      }
    }

    public static class queryBusinessOrderRefundInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryBusinessOrderRefundInfo_args, BusinessOrderRefundInfoVoRes> {
      public queryBusinessOrderRefundInfo() {
        super("queryBusinessOrderRefundInfo");
      }

      public queryBusinessOrderRefundInfo_args getEmptyArgsInstance() {
        return new queryBusinessOrderRefundInfo_args();
      }

      public AsyncMethodCallback<BusinessOrderRefundInfoVoRes> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<BusinessOrderRefundInfoVoRes>() { 
          public void onComplete(BusinessOrderRefundInfoVoRes o) {
            queryBusinessOrderRefundInfo_result result = new queryBusinessOrderRefundInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryBusinessOrderRefundInfo_result result = new queryBusinessOrderRefundInfo_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryBusinessOrderRefundInfo_args args, org.apache.thrift.async.AsyncMethodCallback<BusinessOrderRefundInfoVoRes> resultHandler) throws TException {
        iface.queryBusinessOrderRefundInfo(args.clientId, args.subOrderId,resultHandler);
      }
    }

  }

  public static class queryBusinessOrderList_args implements org.apache.thrift.TBase<queryBusinessOrderList_args, queryBusinessOrderList_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryBusinessOrderList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryBusinessOrderList_args");

    private static final org.apache.thrift.protocol.TField REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("req", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryBusinessOrderList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryBusinessOrderList_argsTupleSchemeFactory());
    }

    public BusinessOrderListReq req; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQ((short)1, "req");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQ
            return REQ;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQ, new org.apache.thrift.meta_data.FieldMetaData("req", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BusinessOrderListReq.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryBusinessOrderList_args.class, metaDataMap);
    }

    public queryBusinessOrderList_args() {
    }

    public queryBusinessOrderList_args(
      BusinessOrderListReq req)
    {
      this();
      this.req = req;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryBusinessOrderList_args(queryBusinessOrderList_args other) {
      if (other.isSetReq()) {
        this.req = new BusinessOrderListReq(other.req);
      }
    }

    public queryBusinessOrderList_args deepCopy() {
      return new queryBusinessOrderList_args(this);
    }

    @Override
    public void clear() {
      this.req = null;
    }

    public BusinessOrderListReq getReq() {
      return this.req;
    }

    public queryBusinessOrderList_args setReq(BusinessOrderListReq req) {
      this.req = req;
      return this;
    }

    public void unsetReq() {
      this.req = null;
    }

    /** Returns true if field req is set (has been assigned a value) and false otherwise */
    public boolean isSetReq() {
      return this.req != null;
    }

    public void setReqIsSet(boolean value) {
      if (!value) {
        this.req = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQ:
        if (value == null) {
          unsetReq();
        } else {
          setReq((BusinessOrderListReq)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQ:
        return getReq();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQ:
        return isSetReq();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryBusinessOrderList_args)
        return this.equals((queryBusinessOrderList_args)that);
      return false;
    }

    public boolean equals(queryBusinessOrderList_args that) {
      if (that == null)
        return false;

      boolean this_present_req = true && this.isSetReq();
      boolean that_present_req = true && that.isSetReq();
      if (this_present_req || that_present_req) {
        if (!(this_present_req && that_present_req))
          return false;
        if (!this.req.equals(that.req))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_req = true && (isSetReq());
      list.add(present_req);
      if (present_req)
        list.add(req);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryBusinessOrderList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetReq()).compareTo(other.isSetReq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReq()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.req, other.req);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryBusinessOrderList_args(");
      boolean first = true;

      sb.append("req:");
      if (this.req == null) {
        sb.append("null");
      } else {
        sb.append(this.req);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (req != null) {
        req.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryBusinessOrderList_argsStandardSchemeFactory implements SchemeFactory {
      public queryBusinessOrderList_argsStandardScheme getScheme() {
        return new queryBusinessOrderList_argsStandardScheme();
      }
    }

    private static class queryBusinessOrderList_argsStandardScheme extends StandardScheme<queryBusinessOrderList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryBusinessOrderList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQ
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.req = new BusinessOrderListReq();
                struct.req.read(iprot);
                struct.setReqIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryBusinessOrderList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.req != null) {
          oprot.writeFieldBegin(REQ_FIELD_DESC);
          struct.req.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryBusinessOrderList_argsTupleSchemeFactory implements SchemeFactory {
      public queryBusinessOrderList_argsTupleScheme getScheme() {
        return new queryBusinessOrderList_argsTupleScheme();
      }
    }

    private static class queryBusinessOrderList_argsTupleScheme extends TupleScheme<queryBusinessOrderList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryBusinessOrderList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetReq()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetReq()) {
          struct.req.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryBusinessOrderList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.req = new BusinessOrderListReq();
          struct.req.read(iprot);
          struct.setReqIsSet(true);
        }
      }
    }

  }

  public static class queryBusinessOrderList_result implements org.apache.thrift.TBase<queryBusinessOrderList_result, queryBusinessOrderList_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryBusinessOrderList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryBusinessOrderList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryBusinessOrderList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryBusinessOrderList_resultTupleSchemeFactory());
    }

    public BusinessOrderListRes success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BusinessOrderListRes.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryBusinessOrderList_result.class, metaDataMap);
    }

    public queryBusinessOrderList_result() {
    }

    public queryBusinessOrderList_result(
      BusinessOrderListRes success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryBusinessOrderList_result(queryBusinessOrderList_result other) {
      if (other.isSetSuccess()) {
        this.success = new BusinessOrderListRes(other.success);
      }
    }

    public queryBusinessOrderList_result deepCopy() {
      return new queryBusinessOrderList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public BusinessOrderListRes getSuccess() {
      return this.success;
    }

    public queryBusinessOrderList_result setSuccess(BusinessOrderListRes success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((BusinessOrderListRes)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryBusinessOrderList_result)
        return this.equals((queryBusinessOrderList_result)that);
      return false;
    }

    public boolean equals(queryBusinessOrderList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryBusinessOrderList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryBusinessOrderList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryBusinessOrderList_resultStandardSchemeFactory implements SchemeFactory {
      public queryBusinessOrderList_resultStandardScheme getScheme() {
        return new queryBusinessOrderList_resultStandardScheme();
      }
    }

    private static class queryBusinessOrderList_resultStandardScheme extends StandardScheme<queryBusinessOrderList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryBusinessOrderList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new BusinessOrderListRes();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryBusinessOrderList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryBusinessOrderList_resultTupleSchemeFactory implements SchemeFactory {
      public queryBusinessOrderList_resultTupleScheme getScheme() {
        return new queryBusinessOrderList_resultTupleScheme();
      }
    }

    private static class queryBusinessOrderList_resultTupleScheme extends TupleScheme<queryBusinessOrderList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryBusinessOrderList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryBusinessOrderList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new BusinessOrderListRes();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class exportBusinessOrder_args implements org.apache.thrift.TBase<exportBusinessOrder_args, exportBusinessOrder_args._Fields>, java.io.Serializable, Cloneable, Comparable<exportBusinessOrder_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("exportBusinessOrder_args");

    private static final org.apache.thrift.protocol.TField REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("req", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new exportBusinessOrder_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new exportBusinessOrder_argsTupleSchemeFactory());
    }

    public BusinessOrderListReq req; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQ((short)1, "req");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQ
            return REQ;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQ, new org.apache.thrift.meta_data.FieldMetaData("req", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BusinessOrderListReq.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(exportBusinessOrder_args.class, metaDataMap);
    }

    public exportBusinessOrder_args() {
    }

    public exportBusinessOrder_args(
      BusinessOrderListReq req)
    {
      this();
      this.req = req;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public exportBusinessOrder_args(exportBusinessOrder_args other) {
      if (other.isSetReq()) {
        this.req = new BusinessOrderListReq(other.req);
      }
    }

    public exportBusinessOrder_args deepCopy() {
      return new exportBusinessOrder_args(this);
    }

    @Override
    public void clear() {
      this.req = null;
    }

    public BusinessOrderListReq getReq() {
      return this.req;
    }

    public exportBusinessOrder_args setReq(BusinessOrderListReq req) {
      this.req = req;
      return this;
    }

    public void unsetReq() {
      this.req = null;
    }

    /** Returns true if field req is set (has been assigned a value) and false otherwise */
    public boolean isSetReq() {
      return this.req != null;
    }

    public void setReqIsSet(boolean value) {
      if (!value) {
        this.req = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQ:
        if (value == null) {
          unsetReq();
        } else {
          setReq((BusinessOrderListReq)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQ:
        return getReq();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQ:
        return isSetReq();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof exportBusinessOrder_args)
        return this.equals((exportBusinessOrder_args)that);
      return false;
    }

    public boolean equals(exportBusinessOrder_args that) {
      if (that == null)
        return false;

      boolean this_present_req = true && this.isSetReq();
      boolean that_present_req = true && that.isSetReq();
      if (this_present_req || that_present_req) {
        if (!(this_present_req && that_present_req))
          return false;
        if (!this.req.equals(that.req))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_req = true && (isSetReq());
      list.add(present_req);
      if (present_req)
        list.add(req);

      return list.hashCode();
    }

    @Override
    public int compareTo(exportBusinessOrder_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetReq()).compareTo(other.isSetReq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReq()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.req, other.req);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("exportBusinessOrder_args(");
      boolean first = true;

      sb.append("req:");
      if (this.req == null) {
        sb.append("null");
      } else {
        sb.append(this.req);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (req != null) {
        req.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class exportBusinessOrder_argsStandardSchemeFactory implements SchemeFactory {
      public exportBusinessOrder_argsStandardScheme getScheme() {
        return new exportBusinessOrder_argsStandardScheme();
      }
    }

    private static class exportBusinessOrder_argsStandardScheme extends StandardScheme<exportBusinessOrder_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, exportBusinessOrder_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQ
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.req = new BusinessOrderListReq();
                struct.req.read(iprot);
                struct.setReqIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, exportBusinessOrder_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.req != null) {
          oprot.writeFieldBegin(REQ_FIELD_DESC);
          struct.req.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class exportBusinessOrder_argsTupleSchemeFactory implements SchemeFactory {
      public exportBusinessOrder_argsTupleScheme getScheme() {
        return new exportBusinessOrder_argsTupleScheme();
      }
    }

    private static class exportBusinessOrder_argsTupleScheme extends TupleScheme<exportBusinessOrder_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, exportBusinessOrder_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetReq()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetReq()) {
          struct.req.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, exportBusinessOrder_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.req = new BusinessOrderListReq();
          struct.req.read(iprot);
          struct.setReqIsSet(true);
        }
      }
    }

  }

  public static class exportBusinessOrder_result implements org.apache.thrift.TBase<exportBusinessOrder_result, exportBusinessOrder_result._Fields>, java.io.Serializable, Cloneable, Comparable<exportBusinessOrder_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("exportBusinessOrder_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new exportBusinessOrder_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new exportBusinessOrder_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ExportResultRes success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ExportResultRes.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(exportBusinessOrder_result.class, metaDataMap);
    }

    public exportBusinessOrder_result() {
    }

    public exportBusinessOrder_result(
      com.froad.thrift.vo.ExportResultRes success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public exportBusinessOrder_result(exportBusinessOrder_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ExportResultRes(other.success);
      }
    }

    public exportBusinessOrder_result deepCopy() {
      return new exportBusinessOrder_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ExportResultRes getSuccess() {
      return this.success;
    }

    public exportBusinessOrder_result setSuccess(com.froad.thrift.vo.ExportResultRes success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ExportResultRes)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof exportBusinessOrder_result)
        return this.equals((exportBusinessOrder_result)that);
      return false;
    }

    public boolean equals(exportBusinessOrder_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(exportBusinessOrder_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("exportBusinessOrder_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class exportBusinessOrder_resultStandardSchemeFactory implements SchemeFactory {
      public exportBusinessOrder_resultStandardScheme getScheme() {
        return new exportBusinessOrder_resultStandardScheme();
      }
    }

    private static class exportBusinessOrder_resultStandardScheme extends StandardScheme<exportBusinessOrder_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, exportBusinessOrder_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ExportResultRes();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, exportBusinessOrder_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class exportBusinessOrder_resultTupleSchemeFactory implements SchemeFactory {
      public exportBusinessOrder_resultTupleScheme getScheme() {
        return new exportBusinessOrder_resultTupleScheme();
      }
    }

    private static class exportBusinessOrder_resultTupleScheme extends TupleScheme<exportBusinessOrder_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, exportBusinessOrder_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, exportBusinessOrder_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ExportResultRes();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryBusinessOrderPaymentInfo_args implements org.apache.thrift.TBase<queryBusinessOrderPaymentInfo_args, queryBusinessOrderPaymentInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryBusinessOrderPaymentInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryBusinessOrderPaymentInfo_args");

    private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SUB_ORDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("subOrderId", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryBusinessOrderPaymentInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryBusinessOrderPaymentInfo_argsTupleSchemeFactory());
    }

    public String clientId; // required
    public String subOrderId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CLIENT_ID((short)1, "clientId"),
      SUB_ORDER_ID((short)2, "subOrderId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CLIENT_ID
            return CLIENT_ID;
          case 2: // SUB_ORDER_ID
            return SUB_ORDER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SUB_ORDER_ID, new org.apache.thrift.meta_data.FieldMetaData("subOrderId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryBusinessOrderPaymentInfo_args.class, metaDataMap);
    }

    public queryBusinessOrderPaymentInfo_args() {
    }

    public queryBusinessOrderPaymentInfo_args(
      String clientId,
      String subOrderId)
    {
      this();
      this.clientId = clientId;
      this.subOrderId = subOrderId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryBusinessOrderPaymentInfo_args(queryBusinessOrderPaymentInfo_args other) {
      if (other.isSetClientId()) {
        this.clientId = other.clientId;
      }
      if (other.isSetSubOrderId()) {
        this.subOrderId = other.subOrderId;
      }
    }

    public queryBusinessOrderPaymentInfo_args deepCopy() {
      return new queryBusinessOrderPaymentInfo_args(this);
    }

    @Override
    public void clear() {
      this.clientId = null;
      this.subOrderId = null;
    }

    public String getClientId() {
      return this.clientId;
    }

    public queryBusinessOrderPaymentInfo_args setClientId(String clientId) {
      this.clientId = clientId;
      return this;
    }

    public void unsetClientId() {
      this.clientId = null;
    }

    /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
    public boolean isSetClientId() {
      return this.clientId != null;
    }

    public void setClientIdIsSet(boolean value) {
      if (!value) {
        this.clientId = null;
      }
    }

    public String getSubOrderId() {
      return this.subOrderId;
    }

    public queryBusinessOrderPaymentInfo_args setSubOrderId(String subOrderId) {
      this.subOrderId = subOrderId;
      return this;
    }

    public void unsetSubOrderId() {
      this.subOrderId = null;
    }

    /** Returns true if field subOrderId is set (has been assigned a value) and false otherwise */
    public boolean isSetSubOrderId() {
      return this.subOrderId != null;
    }

    public void setSubOrderIdIsSet(boolean value) {
      if (!value) {
        this.subOrderId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CLIENT_ID:
        if (value == null) {
          unsetClientId();
        } else {
          setClientId((String)value);
        }
        break;

      case SUB_ORDER_ID:
        if (value == null) {
          unsetSubOrderId();
        } else {
          setSubOrderId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CLIENT_ID:
        return getClientId();

      case SUB_ORDER_ID:
        return getSubOrderId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CLIENT_ID:
        return isSetClientId();
      case SUB_ORDER_ID:
        return isSetSubOrderId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryBusinessOrderPaymentInfo_args)
        return this.equals((queryBusinessOrderPaymentInfo_args)that);
      return false;
    }

    public boolean equals(queryBusinessOrderPaymentInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_clientId = true && this.isSetClientId();
      boolean that_present_clientId = true && that.isSetClientId();
      if (this_present_clientId || that_present_clientId) {
        if (!(this_present_clientId && that_present_clientId))
          return false;
        if (!this.clientId.equals(that.clientId))
          return false;
      }

      boolean this_present_subOrderId = true && this.isSetSubOrderId();
      boolean that_present_subOrderId = true && that.isSetSubOrderId();
      if (this_present_subOrderId || that_present_subOrderId) {
        if (!(this_present_subOrderId && that_present_subOrderId))
          return false;
        if (!this.subOrderId.equals(that.subOrderId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_clientId = true && (isSetClientId());
      list.add(present_clientId);
      if (present_clientId)
        list.add(clientId);

      boolean present_subOrderId = true && (isSetSubOrderId());
      list.add(present_subOrderId);
      if (present_subOrderId)
        list.add(subOrderId);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryBusinessOrderPaymentInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSubOrderId()).compareTo(other.isSetSubOrderId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSubOrderId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subOrderId, other.subOrderId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryBusinessOrderPaymentInfo_args(");
      boolean first = true;

      sb.append("clientId:");
      if (this.clientId == null) {
        sb.append("null");
      } else {
        sb.append(this.clientId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("subOrderId:");
      if (this.subOrderId == null) {
        sb.append("null");
      } else {
        sb.append(this.subOrderId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryBusinessOrderPaymentInfo_argsStandardSchemeFactory implements SchemeFactory {
      public queryBusinessOrderPaymentInfo_argsStandardScheme getScheme() {
        return new queryBusinessOrderPaymentInfo_argsStandardScheme();
      }
    }

    private static class queryBusinessOrderPaymentInfo_argsStandardScheme extends StandardScheme<queryBusinessOrderPaymentInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryBusinessOrderPaymentInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CLIENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clientId = iprot.readString();
                struct.setClientIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SUB_ORDER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.subOrderId = iprot.readString();
                struct.setSubOrderIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryBusinessOrderPaymentInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.clientId != null) {
          oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
          oprot.writeString(struct.clientId);
          oprot.writeFieldEnd();
        }
        if (struct.subOrderId != null) {
          oprot.writeFieldBegin(SUB_ORDER_ID_FIELD_DESC);
          oprot.writeString(struct.subOrderId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryBusinessOrderPaymentInfo_argsTupleSchemeFactory implements SchemeFactory {
      public queryBusinessOrderPaymentInfo_argsTupleScheme getScheme() {
        return new queryBusinessOrderPaymentInfo_argsTupleScheme();
      }
    }

    private static class queryBusinessOrderPaymentInfo_argsTupleScheme extends TupleScheme<queryBusinessOrderPaymentInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryBusinessOrderPaymentInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetClientId()) {
          optionals.set(0);
        }
        if (struct.isSetSubOrderId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetClientId()) {
          oprot.writeString(struct.clientId);
        }
        if (struct.isSetSubOrderId()) {
          oprot.writeString(struct.subOrderId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryBusinessOrderPaymentInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.clientId = iprot.readString();
          struct.setClientIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.subOrderId = iprot.readString();
          struct.setSubOrderIdIsSet(true);
        }
      }
    }

  }

  public static class queryBusinessOrderPaymentInfo_result implements org.apache.thrift.TBase<queryBusinessOrderPaymentInfo_result, queryBusinessOrderPaymentInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryBusinessOrderPaymentInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryBusinessOrderPaymentInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryBusinessOrderPaymentInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryBusinessOrderPaymentInfo_resultTupleSchemeFactory());
    }

    public BusinessOrderPyamentInfoRes success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BusinessOrderPyamentInfoRes.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryBusinessOrderPaymentInfo_result.class, metaDataMap);
    }

    public queryBusinessOrderPaymentInfo_result() {
    }

    public queryBusinessOrderPaymentInfo_result(
      BusinessOrderPyamentInfoRes success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryBusinessOrderPaymentInfo_result(queryBusinessOrderPaymentInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = new BusinessOrderPyamentInfoRes(other.success);
      }
    }

    public queryBusinessOrderPaymentInfo_result deepCopy() {
      return new queryBusinessOrderPaymentInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public BusinessOrderPyamentInfoRes getSuccess() {
      return this.success;
    }

    public queryBusinessOrderPaymentInfo_result setSuccess(BusinessOrderPyamentInfoRes success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((BusinessOrderPyamentInfoRes)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryBusinessOrderPaymentInfo_result)
        return this.equals((queryBusinessOrderPaymentInfo_result)that);
      return false;
    }

    public boolean equals(queryBusinessOrderPaymentInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryBusinessOrderPaymentInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryBusinessOrderPaymentInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryBusinessOrderPaymentInfo_resultStandardSchemeFactory implements SchemeFactory {
      public queryBusinessOrderPaymentInfo_resultStandardScheme getScheme() {
        return new queryBusinessOrderPaymentInfo_resultStandardScheme();
      }
    }

    private static class queryBusinessOrderPaymentInfo_resultStandardScheme extends StandardScheme<queryBusinessOrderPaymentInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryBusinessOrderPaymentInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new BusinessOrderPyamentInfoRes();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryBusinessOrderPaymentInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryBusinessOrderPaymentInfo_resultTupleSchemeFactory implements SchemeFactory {
      public queryBusinessOrderPaymentInfo_resultTupleScheme getScheme() {
        return new queryBusinessOrderPaymentInfo_resultTupleScheme();
      }
    }

    private static class queryBusinessOrderPaymentInfo_resultTupleScheme extends TupleScheme<queryBusinessOrderPaymentInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryBusinessOrderPaymentInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryBusinessOrderPaymentInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new BusinessOrderPyamentInfoRes();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryBusinessOrderTradeInfo_args implements org.apache.thrift.TBase<queryBusinessOrderTradeInfo_args, queryBusinessOrderTradeInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryBusinessOrderTradeInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryBusinessOrderTradeInfo_args");

    private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SUB_ORDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("subOrderId", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryBusinessOrderTradeInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryBusinessOrderTradeInfo_argsTupleSchemeFactory());
    }

    public String clientId; // required
    public String subOrderId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CLIENT_ID((short)1, "clientId"),
      SUB_ORDER_ID((short)2, "subOrderId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CLIENT_ID
            return CLIENT_ID;
          case 2: // SUB_ORDER_ID
            return SUB_ORDER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SUB_ORDER_ID, new org.apache.thrift.meta_data.FieldMetaData("subOrderId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryBusinessOrderTradeInfo_args.class, metaDataMap);
    }

    public queryBusinessOrderTradeInfo_args() {
    }

    public queryBusinessOrderTradeInfo_args(
      String clientId,
      String subOrderId)
    {
      this();
      this.clientId = clientId;
      this.subOrderId = subOrderId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryBusinessOrderTradeInfo_args(queryBusinessOrderTradeInfo_args other) {
      if (other.isSetClientId()) {
        this.clientId = other.clientId;
      }
      if (other.isSetSubOrderId()) {
        this.subOrderId = other.subOrderId;
      }
    }

    public queryBusinessOrderTradeInfo_args deepCopy() {
      return new queryBusinessOrderTradeInfo_args(this);
    }

    @Override
    public void clear() {
      this.clientId = null;
      this.subOrderId = null;
    }

    public String getClientId() {
      return this.clientId;
    }

    public queryBusinessOrderTradeInfo_args setClientId(String clientId) {
      this.clientId = clientId;
      return this;
    }

    public void unsetClientId() {
      this.clientId = null;
    }

    /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
    public boolean isSetClientId() {
      return this.clientId != null;
    }

    public void setClientIdIsSet(boolean value) {
      if (!value) {
        this.clientId = null;
      }
    }

    public String getSubOrderId() {
      return this.subOrderId;
    }

    public queryBusinessOrderTradeInfo_args setSubOrderId(String subOrderId) {
      this.subOrderId = subOrderId;
      return this;
    }

    public void unsetSubOrderId() {
      this.subOrderId = null;
    }

    /** Returns true if field subOrderId is set (has been assigned a value) and false otherwise */
    public boolean isSetSubOrderId() {
      return this.subOrderId != null;
    }

    public void setSubOrderIdIsSet(boolean value) {
      if (!value) {
        this.subOrderId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CLIENT_ID:
        if (value == null) {
          unsetClientId();
        } else {
          setClientId((String)value);
        }
        break;

      case SUB_ORDER_ID:
        if (value == null) {
          unsetSubOrderId();
        } else {
          setSubOrderId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CLIENT_ID:
        return getClientId();

      case SUB_ORDER_ID:
        return getSubOrderId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CLIENT_ID:
        return isSetClientId();
      case SUB_ORDER_ID:
        return isSetSubOrderId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryBusinessOrderTradeInfo_args)
        return this.equals((queryBusinessOrderTradeInfo_args)that);
      return false;
    }

    public boolean equals(queryBusinessOrderTradeInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_clientId = true && this.isSetClientId();
      boolean that_present_clientId = true && that.isSetClientId();
      if (this_present_clientId || that_present_clientId) {
        if (!(this_present_clientId && that_present_clientId))
          return false;
        if (!this.clientId.equals(that.clientId))
          return false;
      }

      boolean this_present_subOrderId = true && this.isSetSubOrderId();
      boolean that_present_subOrderId = true && that.isSetSubOrderId();
      if (this_present_subOrderId || that_present_subOrderId) {
        if (!(this_present_subOrderId && that_present_subOrderId))
          return false;
        if (!this.subOrderId.equals(that.subOrderId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_clientId = true && (isSetClientId());
      list.add(present_clientId);
      if (present_clientId)
        list.add(clientId);

      boolean present_subOrderId = true && (isSetSubOrderId());
      list.add(present_subOrderId);
      if (present_subOrderId)
        list.add(subOrderId);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryBusinessOrderTradeInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSubOrderId()).compareTo(other.isSetSubOrderId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSubOrderId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subOrderId, other.subOrderId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryBusinessOrderTradeInfo_args(");
      boolean first = true;

      sb.append("clientId:");
      if (this.clientId == null) {
        sb.append("null");
      } else {
        sb.append(this.clientId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("subOrderId:");
      if (this.subOrderId == null) {
        sb.append("null");
      } else {
        sb.append(this.subOrderId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryBusinessOrderTradeInfo_argsStandardSchemeFactory implements SchemeFactory {
      public queryBusinessOrderTradeInfo_argsStandardScheme getScheme() {
        return new queryBusinessOrderTradeInfo_argsStandardScheme();
      }
    }

    private static class queryBusinessOrderTradeInfo_argsStandardScheme extends StandardScheme<queryBusinessOrderTradeInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryBusinessOrderTradeInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CLIENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clientId = iprot.readString();
                struct.setClientIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SUB_ORDER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.subOrderId = iprot.readString();
                struct.setSubOrderIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryBusinessOrderTradeInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.clientId != null) {
          oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
          oprot.writeString(struct.clientId);
          oprot.writeFieldEnd();
        }
        if (struct.subOrderId != null) {
          oprot.writeFieldBegin(SUB_ORDER_ID_FIELD_DESC);
          oprot.writeString(struct.subOrderId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryBusinessOrderTradeInfo_argsTupleSchemeFactory implements SchemeFactory {
      public queryBusinessOrderTradeInfo_argsTupleScheme getScheme() {
        return new queryBusinessOrderTradeInfo_argsTupleScheme();
      }
    }

    private static class queryBusinessOrderTradeInfo_argsTupleScheme extends TupleScheme<queryBusinessOrderTradeInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryBusinessOrderTradeInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetClientId()) {
          optionals.set(0);
        }
        if (struct.isSetSubOrderId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetClientId()) {
          oprot.writeString(struct.clientId);
        }
        if (struct.isSetSubOrderId()) {
          oprot.writeString(struct.subOrderId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryBusinessOrderTradeInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.clientId = iprot.readString();
          struct.setClientIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.subOrderId = iprot.readString();
          struct.setSubOrderIdIsSet(true);
        }
      }
    }

  }

  public static class queryBusinessOrderTradeInfo_result implements org.apache.thrift.TBase<queryBusinessOrderTradeInfo_result, queryBusinessOrderTradeInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryBusinessOrderTradeInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryBusinessOrderTradeInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryBusinessOrderTradeInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryBusinessOrderTradeInfo_resultTupleSchemeFactory());
    }

    public BusinessOrderTradeInfoVoRes success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BusinessOrderTradeInfoVoRes.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryBusinessOrderTradeInfo_result.class, metaDataMap);
    }

    public queryBusinessOrderTradeInfo_result() {
    }

    public queryBusinessOrderTradeInfo_result(
      BusinessOrderTradeInfoVoRes success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryBusinessOrderTradeInfo_result(queryBusinessOrderTradeInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = new BusinessOrderTradeInfoVoRes(other.success);
      }
    }

    public queryBusinessOrderTradeInfo_result deepCopy() {
      return new queryBusinessOrderTradeInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public BusinessOrderTradeInfoVoRes getSuccess() {
      return this.success;
    }

    public queryBusinessOrderTradeInfo_result setSuccess(BusinessOrderTradeInfoVoRes success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((BusinessOrderTradeInfoVoRes)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryBusinessOrderTradeInfo_result)
        return this.equals((queryBusinessOrderTradeInfo_result)that);
      return false;
    }

    public boolean equals(queryBusinessOrderTradeInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryBusinessOrderTradeInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryBusinessOrderTradeInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryBusinessOrderTradeInfo_resultStandardSchemeFactory implements SchemeFactory {
      public queryBusinessOrderTradeInfo_resultStandardScheme getScheme() {
        return new queryBusinessOrderTradeInfo_resultStandardScheme();
      }
    }

    private static class queryBusinessOrderTradeInfo_resultStandardScheme extends StandardScheme<queryBusinessOrderTradeInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryBusinessOrderTradeInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new BusinessOrderTradeInfoVoRes();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryBusinessOrderTradeInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryBusinessOrderTradeInfo_resultTupleSchemeFactory implements SchemeFactory {
      public queryBusinessOrderTradeInfo_resultTupleScheme getScheme() {
        return new queryBusinessOrderTradeInfo_resultTupleScheme();
      }
    }

    private static class queryBusinessOrderTradeInfo_resultTupleScheme extends TupleScheme<queryBusinessOrderTradeInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryBusinessOrderTradeInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryBusinessOrderTradeInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new BusinessOrderTradeInfoVoRes();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryBusinessOrderShippingInfo_args implements org.apache.thrift.TBase<queryBusinessOrderShippingInfo_args, queryBusinessOrderShippingInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryBusinessOrderShippingInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryBusinessOrderShippingInfo_args");

    private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SUB_ORDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("subOrderId", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryBusinessOrderShippingInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryBusinessOrderShippingInfo_argsTupleSchemeFactory());
    }

    public String clientId; // required
    public String subOrderId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CLIENT_ID((short)1, "clientId"),
      SUB_ORDER_ID((short)2, "subOrderId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CLIENT_ID
            return CLIENT_ID;
          case 2: // SUB_ORDER_ID
            return SUB_ORDER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SUB_ORDER_ID, new org.apache.thrift.meta_data.FieldMetaData("subOrderId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryBusinessOrderShippingInfo_args.class, metaDataMap);
    }

    public queryBusinessOrderShippingInfo_args() {
    }

    public queryBusinessOrderShippingInfo_args(
      String clientId,
      String subOrderId)
    {
      this();
      this.clientId = clientId;
      this.subOrderId = subOrderId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryBusinessOrderShippingInfo_args(queryBusinessOrderShippingInfo_args other) {
      if (other.isSetClientId()) {
        this.clientId = other.clientId;
      }
      if (other.isSetSubOrderId()) {
        this.subOrderId = other.subOrderId;
      }
    }

    public queryBusinessOrderShippingInfo_args deepCopy() {
      return new queryBusinessOrderShippingInfo_args(this);
    }

    @Override
    public void clear() {
      this.clientId = null;
      this.subOrderId = null;
    }

    public String getClientId() {
      return this.clientId;
    }

    public queryBusinessOrderShippingInfo_args setClientId(String clientId) {
      this.clientId = clientId;
      return this;
    }

    public void unsetClientId() {
      this.clientId = null;
    }

    /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
    public boolean isSetClientId() {
      return this.clientId != null;
    }

    public void setClientIdIsSet(boolean value) {
      if (!value) {
        this.clientId = null;
      }
    }

    public String getSubOrderId() {
      return this.subOrderId;
    }

    public queryBusinessOrderShippingInfo_args setSubOrderId(String subOrderId) {
      this.subOrderId = subOrderId;
      return this;
    }

    public void unsetSubOrderId() {
      this.subOrderId = null;
    }

    /** Returns true if field subOrderId is set (has been assigned a value) and false otherwise */
    public boolean isSetSubOrderId() {
      return this.subOrderId != null;
    }

    public void setSubOrderIdIsSet(boolean value) {
      if (!value) {
        this.subOrderId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CLIENT_ID:
        if (value == null) {
          unsetClientId();
        } else {
          setClientId((String)value);
        }
        break;

      case SUB_ORDER_ID:
        if (value == null) {
          unsetSubOrderId();
        } else {
          setSubOrderId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CLIENT_ID:
        return getClientId();

      case SUB_ORDER_ID:
        return getSubOrderId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CLIENT_ID:
        return isSetClientId();
      case SUB_ORDER_ID:
        return isSetSubOrderId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryBusinessOrderShippingInfo_args)
        return this.equals((queryBusinessOrderShippingInfo_args)that);
      return false;
    }

    public boolean equals(queryBusinessOrderShippingInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_clientId = true && this.isSetClientId();
      boolean that_present_clientId = true && that.isSetClientId();
      if (this_present_clientId || that_present_clientId) {
        if (!(this_present_clientId && that_present_clientId))
          return false;
        if (!this.clientId.equals(that.clientId))
          return false;
      }

      boolean this_present_subOrderId = true && this.isSetSubOrderId();
      boolean that_present_subOrderId = true && that.isSetSubOrderId();
      if (this_present_subOrderId || that_present_subOrderId) {
        if (!(this_present_subOrderId && that_present_subOrderId))
          return false;
        if (!this.subOrderId.equals(that.subOrderId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_clientId = true && (isSetClientId());
      list.add(present_clientId);
      if (present_clientId)
        list.add(clientId);

      boolean present_subOrderId = true && (isSetSubOrderId());
      list.add(present_subOrderId);
      if (present_subOrderId)
        list.add(subOrderId);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryBusinessOrderShippingInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSubOrderId()).compareTo(other.isSetSubOrderId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSubOrderId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subOrderId, other.subOrderId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryBusinessOrderShippingInfo_args(");
      boolean first = true;

      sb.append("clientId:");
      if (this.clientId == null) {
        sb.append("null");
      } else {
        sb.append(this.clientId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("subOrderId:");
      if (this.subOrderId == null) {
        sb.append("null");
      } else {
        sb.append(this.subOrderId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryBusinessOrderShippingInfo_argsStandardSchemeFactory implements SchemeFactory {
      public queryBusinessOrderShippingInfo_argsStandardScheme getScheme() {
        return new queryBusinessOrderShippingInfo_argsStandardScheme();
      }
    }

    private static class queryBusinessOrderShippingInfo_argsStandardScheme extends StandardScheme<queryBusinessOrderShippingInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryBusinessOrderShippingInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CLIENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clientId = iprot.readString();
                struct.setClientIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SUB_ORDER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.subOrderId = iprot.readString();
                struct.setSubOrderIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryBusinessOrderShippingInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.clientId != null) {
          oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
          oprot.writeString(struct.clientId);
          oprot.writeFieldEnd();
        }
        if (struct.subOrderId != null) {
          oprot.writeFieldBegin(SUB_ORDER_ID_FIELD_DESC);
          oprot.writeString(struct.subOrderId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryBusinessOrderShippingInfo_argsTupleSchemeFactory implements SchemeFactory {
      public queryBusinessOrderShippingInfo_argsTupleScheme getScheme() {
        return new queryBusinessOrderShippingInfo_argsTupleScheme();
      }
    }

    private static class queryBusinessOrderShippingInfo_argsTupleScheme extends TupleScheme<queryBusinessOrderShippingInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryBusinessOrderShippingInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetClientId()) {
          optionals.set(0);
        }
        if (struct.isSetSubOrderId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetClientId()) {
          oprot.writeString(struct.clientId);
        }
        if (struct.isSetSubOrderId()) {
          oprot.writeString(struct.subOrderId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryBusinessOrderShippingInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.clientId = iprot.readString();
          struct.setClientIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.subOrderId = iprot.readString();
          struct.setSubOrderIdIsSet(true);
        }
      }
    }

  }

  public static class queryBusinessOrderShippingInfo_result implements org.apache.thrift.TBase<queryBusinessOrderShippingInfo_result, queryBusinessOrderShippingInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryBusinessOrderShippingInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryBusinessOrderShippingInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryBusinessOrderShippingInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryBusinessOrderShippingInfo_resultTupleSchemeFactory());
    }

    public BusinessOrderShippingInfoVoRes success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BusinessOrderShippingInfoVoRes.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryBusinessOrderShippingInfo_result.class, metaDataMap);
    }

    public queryBusinessOrderShippingInfo_result() {
    }

    public queryBusinessOrderShippingInfo_result(
      BusinessOrderShippingInfoVoRes success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryBusinessOrderShippingInfo_result(queryBusinessOrderShippingInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = new BusinessOrderShippingInfoVoRes(other.success);
      }
    }

    public queryBusinessOrderShippingInfo_result deepCopy() {
      return new queryBusinessOrderShippingInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public BusinessOrderShippingInfoVoRes getSuccess() {
      return this.success;
    }

    public queryBusinessOrderShippingInfo_result setSuccess(BusinessOrderShippingInfoVoRes success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((BusinessOrderShippingInfoVoRes)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryBusinessOrderShippingInfo_result)
        return this.equals((queryBusinessOrderShippingInfo_result)that);
      return false;
    }

    public boolean equals(queryBusinessOrderShippingInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryBusinessOrderShippingInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryBusinessOrderShippingInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryBusinessOrderShippingInfo_resultStandardSchemeFactory implements SchemeFactory {
      public queryBusinessOrderShippingInfo_resultStandardScheme getScheme() {
        return new queryBusinessOrderShippingInfo_resultStandardScheme();
      }
    }

    private static class queryBusinessOrderShippingInfo_resultStandardScheme extends StandardScheme<queryBusinessOrderShippingInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryBusinessOrderShippingInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new BusinessOrderShippingInfoVoRes();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryBusinessOrderShippingInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryBusinessOrderShippingInfo_resultTupleSchemeFactory implements SchemeFactory {
      public queryBusinessOrderShippingInfo_resultTupleScheme getScheme() {
        return new queryBusinessOrderShippingInfo_resultTupleScheme();
      }
    }

    private static class queryBusinessOrderShippingInfo_resultTupleScheme extends TupleScheme<queryBusinessOrderShippingInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryBusinessOrderShippingInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryBusinessOrderShippingInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new BusinessOrderShippingInfoVoRes();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryBusinessOrderRefundInfo_args implements org.apache.thrift.TBase<queryBusinessOrderRefundInfo_args, queryBusinessOrderRefundInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryBusinessOrderRefundInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryBusinessOrderRefundInfo_args");

    private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SUB_ORDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("subOrderId", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryBusinessOrderRefundInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryBusinessOrderRefundInfo_argsTupleSchemeFactory());
    }

    public String clientId; // required
    public String subOrderId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CLIENT_ID((short)1, "clientId"),
      SUB_ORDER_ID((short)2, "subOrderId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CLIENT_ID
            return CLIENT_ID;
          case 2: // SUB_ORDER_ID
            return SUB_ORDER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SUB_ORDER_ID, new org.apache.thrift.meta_data.FieldMetaData("subOrderId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryBusinessOrderRefundInfo_args.class, metaDataMap);
    }

    public queryBusinessOrderRefundInfo_args() {
    }

    public queryBusinessOrderRefundInfo_args(
      String clientId,
      String subOrderId)
    {
      this();
      this.clientId = clientId;
      this.subOrderId = subOrderId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryBusinessOrderRefundInfo_args(queryBusinessOrderRefundInfo_args other) {
      if (other.isSetClientId()) {
        this.clientId = other.clientId;
      }
      if (other.isSetSubOrderId()) {
        this.subOrderId = other.subOrderId;
      }
    }

    public queryBusinessOrderRefundInfo_args deepCopy() {
      return new queryBusinessOrderRefundInfo_args(this);
    }

    @Override
    public void clear() {
      this.clientId = null;
      this.subOrderId = null;
    }

    public String getClientId() {
      return this.clientId;
    }

    public queryBusinessOrderRefundInfo_args setClientId(String clientId) {
      this.clientId = clientId;
      return this;
    }

    public void unsetClientId() {
      this.clientId = null;
    }

    /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
    public boolean isSetClientId() {
      return this.clientId != null;
    }

    public void setClientIdIsSet(boolean value) {
      if (!value) {
        this.clientId = null;
      }
    }

    public String getSubOrderId() {
      return this.subOrderId;
    }

    public queryBusinessOrderRefundInfo_args setSubOrderId(String subOrderId) {
      this.subOrderId = subOrderId;
      return this;
    }

    public void unsetSubOrderId() {
      this.subOrderId = null;
    }

    /** Returns true if field subOrderId is set (has been assigned a value) and false otherwise */
    public boolean isSetSubOrderId() {
      return this.subOrderId != null;
    }

    public void setSubOrderIdIsSet(boolean value) {
      if (!value) {
        this.subOrderId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CLIENT_ID:
        if (value == null) {
          unsetClientId();
        } else {
          setClientId((String)value);
        }
        break;

      case SUB_ORDER_ID:
        if (value == null) {
          unsetSubOrderId();
        } else {
          setSubOrderId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CLIENT_ID:
        return getClientId();

      case SUB_ORDER_ID:
        return getSubOrderId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CLIENT_ID:
        return isSetClientId();
      case SUB_ORDER_ID:
        return isSetSubOrderId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryBusinessOrderRefundInfo_args)
        return this.equals((queryBusinessOrderRefundInfo_args)that);
      return false;
    }

    public boolean equals(queryBusinessOrderRefundInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_clientId = true && this.isSetClientId();
      boolean that_present_clientId = true && that.isSetClientId();
      if (this_present_clientId || that_present_clientId) {
        if (!(this_present_clientId && that_present_clientId))
          return false;
        if (!this.clientId.equals(that.clientId))
          return false;
      }

      boolean this_present_subOrderId = true && this.isSetSubOrderId();
      boolean that_present_subOrderId = true && that.isSetSubOrderId();
      if (this_present_subOrderId || that_present_subOrderId) {
        if (!(this_present_subOrderId && that_present_subOrderId))
          return false;
        if (!this.subOrderId.equals(that.subOrderId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_clientId = true && (isSetClientId());
      list.add(present_clientId);
      if (present_clientId)
        list.add(clientId);

      boolean present_subOrderId = true && (isSetSubOrderId());
      list.add(present_subOrderId);
      if (present_subOrderId)
        list.add(subOrderId);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryBusinessOrderRefundInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSubOrderId()).compareTo(other.isSetSubOrderId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSubOrderId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subOrderId, other.subOrderId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryBusinessOrderRefundInfo_args(");
      boolean first = true;

      sb.append("clientId:");
      if (this.clientId == null) {
        sb.append("null");
      } else {
        sb.append(this.clientId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("subOrderId:");
      if (this.subOrderId == null) {
        sb.append("null");
      } else {
        sb.append(this.subOrderId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryBusinessOrderRefundInfo_argsStandardSchemeFactory implements SchemeFactory {
      public queryBusinessOrderRefundInfo_argsStandardScheme getScheme() {
        return new queryBusinessOrderRefundInfo_argsStandardScheme();
      }
    }

    private static class queryBusinessOrderRefundInfo_argsStandardScheme extends StandardScheme<queryBusinessOrderRefundInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryBusinessOrderRefundInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CLIENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clientId = iprot.readString();
                struct.setClientIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SUB_ORDER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.subOrderId = iprot.readString();
                struct.setSubOrderIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryBusinessOrderRefundInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.clientId != null) {
          oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
          oprot.writeString(struct.clientId);
          oprot.writeFieldEnd();
        }
        if (struct.subOrderId != null) {
          oprot.writeFieldBegin(SUB_ORDER_ID_FIELD_DESC);
          oprot.writeString(struct.subOrderId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryBusinessOrderRefundInfo_argsTupleSchemeFactory implements SchemeFactory {
      public queryBusinessOrderRefundInfo_argsTupleScheme getScheme() {
        return new queryBusinessOrderRefundInfo_argsTupleScheme();
      }
    }

    private static class queryBusinessOrderRefundInfo_argsTupleScheme extends TupleScheme<queryBusinessOrderRefundInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryBusinessOrderRefundInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetClientId()) {
          optionals.set(0);
        }
        if (struct.isSetSubOrderId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetClientId()) {
          oprot.writeString(struct.clientId);
        }
        if (struct.isSetSubOrderId()) {
          oprot.writeString(struct.subOrderId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryBusinessOrderRefundInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.clientId = iprot.readString();
          struct.setClientIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.subOrderId = iprot.readString();
          struct.setSubOrderIdIsSet(true);
        }
      }
    }

  }

  public static class queryBusinessOrderRefundInfo_result implements org.apache.thrift.TBase<queryBusinessOrderRefundInfo_result, queryBusinessOrderRefundInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryBusinessOrderRefundInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryBusinessOrderRefundInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryBusinessOrderRefundInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryBusinessOrderRefundInfo_resultTupleSchemeFactory());
    }

    public BusinessOrderRefundInfoVoRes success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BusinessOrderRefundInfoVoRes.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryBusinessOrderRefundInfo_result.class, metaDataMap);
    }

    public queryBusinessOrderRefundInfo_result() {
    }

    public queryBusinessOrderRefundInfo_result(
      BusinessOrderRefundInfoVoRes success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryBusinessOrderRefundInfo_result(queryBusinessOrderRefundInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = new BusinessOrderRefundInfoVoRes(other.success);
      }
    }

    public queryBusinessOrderRefundInfo_result deepCopy() {
      return new queryBusinessOrderRefundInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public BusinessOrderRefundInfoVoRes getSuccess() {
      return this.success;
    }

    public queryBusinessOrderRefundInfo_result setSuccess(BusinessOrderRefundInfoVoRes success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((BusinessOrderRefundInfoVoRes)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryBusinessOrderRefundInfo_result)
        return this.equals((queryBusinessOrderRefundInfo_result)that);
      return false;
    }

    public boolean equals(queryBusinessOrderRefundInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryBusinessOrderRefundInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryBusinessOrderRefundInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryBusinessOrderRefundInfo_resultStandardSchemeFactory implements SchemeFactory {
      public queryBusinessOrderRefundInfo_resultStandardScheme getScheme() {
        return new queryBusinessOrderRefundInfo_resultStandardScheme();
      }
    }

    private static class queryBusinessOrderRefundInfo_resultStandardScheme extends StandardScheme<queryBusinessOrderRefundInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryBusinessOrderRefundInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new BusinessOrderRefundInfoVoRes();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryBusinessOrderRefundInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryBusinessOrderRefundInfo_resultTupleSchemeFactory implements SchemeFactory {
      public queryBusinessOrderRefundInfo_resultTupleScheme getScheme() {
        return new queryBusinessOrderRefundInfo_resultTupleScheme();
      }
    }

    private static class queryBusinessOrderRefundInfo_resultTupleScheme extends TupleScheme<queryBusinessOrderRefundInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryBusinessOrderRefundInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryBusinessOrderRefundInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new BusinessOrderRefundInfoVoRes();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
