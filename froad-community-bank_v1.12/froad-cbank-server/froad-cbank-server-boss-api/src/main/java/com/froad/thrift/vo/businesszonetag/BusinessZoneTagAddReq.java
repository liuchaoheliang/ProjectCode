/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.vo.businesszonetag;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 新增或编辑商圈标签信息req
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-10-24")
public class BusinessZoneTagAddReq implements org.apache.thrift.TBase<BusinessZoneTagAddReq, BusinessZoneTagAddReq._Fields>, java.io.Serializable, Cloneable, Comparable<BusinessZoneTagAddReq> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BusinessZoneTagAddReq");

  private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TAG_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("tagName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField SORT_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("sortValue", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField FAREAD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("fareadId", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField SAREAD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sareadId", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField TAREAD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tareadId", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField OAREAD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("oareadId", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("desc", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("flag", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)11);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new BusinessZoneTagAddReqStandardSchemeFactory());
    schemes.put(TupleScheme.class, new BusinessZoneTagAddReqTupleSchemeFactory());
  }

  /**
   * 客户端Id
   */
  public String clientId; // required
  /**
   * 商圈标签名称
   */
  public String tagName; // required
  /**
   * 是否启用:启用1; 禁用2; 新增审核中3; 编辑审核中4; 禁用审核中5
   */
  public String status; // required
  /**
   * 标签序号
   */
  public String sortValue; // required
  /**
   * 所在区域一级区域Id
   */
  public String fareadId; // required
  /**
   * 所在区域二级区域Id
   */
  public String sareadId; // required
  /**
   * 所在区域三级区域Id
   */
  public String tareadId; // required
  /**
   * 所在区域四级区域Id
   */
  public String oareadId; // required
  /**
   * 描述
   */
  public String desc; // required
  /**
   * 操作标识：1：新增；2：编辑
   */
  public String flag; // required
  /**
   * id
   */
  public String id; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 客户端Id
     */
    CLIENT_ID((short)1, "clientId"),
    /**
     * 商圈标签名称
     */
    TAG_NAME((short)2, "tagName"),
    /**
     * 是否启用:启用1; 禁用2; 新增审核中3; 编辑审核中4; 禁用审核中5
     */
    STATUS((short)3, "status"),
    /**
     * 标签序号
     */
    SORT_VALUE((short)4, "sortValue"),
    /**
     * 所在区域一级区域Id
     */
    FAREAD_ID((short)5, "fareadId"),
    /**
     * 所在区域二级区域Id
     */
    SAREAD_ID((short)6, "sareadId"),
    /**
     * 所在区域三级区域Id
     */
    TAREAD_ID((short)7, "tareadId"),
    /**
     * 所在区域四级区域Id
     */
    OAREAD_ID((short)8, "oareadId"),
    /**
     * 描述
     */
    DESC((short)9, "desc"),
    /**
     * 操作标识：1：新增；2：编辑
     */
    FLAG((short)10, "flag"),
    /**
     * id
     */
    ID((short)11, "id");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CLIENT_ID
          return CLIENT_ID;
        case 2: // TAG_NAME
          return TAG_NAME;
        case 3: // STATUS
          return STATUS;
        case 4: // SORT_VALUE
          return SORT_VALUE;
        case 5: // FAREAD_ID
          return FAREAD_ID;
        case 6: // SAREAD_ID
          return SAREAD_ID;
        case 7: // TAREAD_ID
          return TAREAD_ID;
        case 8: // OAREAD_ID
          return OAREAD_ID;
        case 9: // DESC
          return DESC;
        case 10: // FLAG
          return FLAG;
        case 11: // ID
          return ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TAG_NAME, new org.apache.thrift.meta_data.FieldMetaData("tagName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SORT_VALUE, new org.apache.thrift.meta_data.FieldMetaData("sortValue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FAREAD_ID, new org.apache.thrift.meta_data.FieldMetaData("fareadId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SAREAD_ID, new org.apache.thrift.meta_data.FieldMetaData("sareadId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TAREAD_ID, new org.apache.thrift.meta_data.FieldMetaData("tareadId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OAREAD_ID, new org.apache.thrift.meta_data.FieldMetaData("oareadId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DESC, new org.apache.thrift.meta_data.FieldMetaData("desc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FLAG, new org.apache.thrift.meta_data.FieldMetaData("flag", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BusinessZoneTagAddReq.class, metaDataMap);
  }

  public BusinessZoneTagAddReq() {
  }

  public BusinessZoneTagAddReq(
    String clientId,
    String tagName,
    String status,
    String sortValue,
    String fareadId,
    String sareadId,
    String tareadId,
    String oareadId,
    String desc,
    String flag,
    String id)
  {
    this();
    this.clientId = clientId;
    this.tagName = tagName;
    this.status = status;
    this.sortValue = sortValue;
    this.fareadId = fareadId;
    this.sareadId = sareadId;
    this.tareadId = tareadId;
    this.oareadId = oareadId;
    this.desc = desc;
    this.flag = flag;
    this.id = id;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BusinessZoneTagAddReq(BusinessZoneTagAddReq other) {
    if (other.isSetClientId()) {
      this.clientId = other.clientId;
    }
    if (other.isSetTagName()) {
      this.tagName = other.tagName;
    }
    if (other.isSetStatus()) {
      this.status = other.status;
    }
    if (other.isSetSortValue()) {
      this.sortValue = other.sortValue;
    }
    if (other.isSetFareadId()) {
      this.fareadId = other.fareadId;
    }
    if (other.isSetSareadId()) {
      this.sareadId = other.sareadId;
    }
    if (other.isSetTareadId()) {
      this.tareadId = other.tareadId;
    }
    if (other.isSetOareadId()) {
      this.oareadId = other.oareadId;
    }
    if (other.isSetDesc()) {
      this.desc = other.desc;
    }
    if (other.isSetFlag()) {
      this.flag = other.flag;
    }
    if (other.isSetId()) {
      this.id = other.id;
    }
  }

  public BusinessZoneTagAddReq deepCopy() {
    return new BusinessZoneTagAddReq(this);
  }

  @Override
  public void clear() {
    this.clientId = null;
    this.tagName = null;
    this.status = null;
    this.sortValue = null;
    this.fareadId = null;
    this.sareadId = null;
    this.tareadId = null;
    this.oareadId = null;
    this.desc = null;
    this.flag = null;
    this.id = null;
  }

  /**
   * 客户端Id
   */
  public String getClientId() {
    return this.clientId;
  }

  /**
   * 客户端Id
   */
  public BusinessZoneTagAddReq setClientId(String clientId) {
    this.clientId = clientId;
    return this;
  }

  public void unsetClientId() {
    this.clientId = null;
  }

  /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
  public boolean isSetClientId() {
    return this.clientId != null;
  }

  public void setClientIdIsSet(boolean value) {
    if (!value) {
      this.clientId = null;
    }
  }

  /**
   * 商圈标签名称
   */
  public String getTagName() {
    return this.tagName;
  }

  /**
   * 商圈标签名称
   */
  public BusinessZoneTagAddReq setTagName(String tagName) {
    this.tagName = tagName;
    return this;
  }

  public void unsetTagName() {
    this.tagName = null;
  }

  /** Returns true if field tagName is set (has been assigned a value) and false otherwise */
  public boolean isSetTagName() {
    return this.tagName != null;
  }

  public void setTagNameIsSet(boolean value) {
    if (!value) {
      this.tagName = null;
    }
  }

  /**
   * 是否启用:启用1; 禁用2; 新增审核中3; 编辑审核中4; 禁用审核中5
   */
  public String getStatus() {
    return this.status;
  }

  /**
   * 是否启用:启用1; 禁用2; 新增审核中3; 编辑审核中4; 禁用审核中5
   */
  public BusinessZoneTagAddReq setStatus(String status) {
    this.status = status;
    return this;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  /**
   * 标签序号
   */
  public String getSortValue() {
    return this.sortValue;
  }

  /**
   * 标签序号
   */
  public BusinessZoneTagAddReq setSortValue(String sortValue) {
    this.sortValue = sortValue;
    return this;
  }

  public void unsetSortValue() {
    this.sortValue = null;
  }

  /** Returns true if field sortValue is set (has been assigned a value) and false otherwise */
  public boolean isSetSortValue() {
    return this.sortValue != null;
  }

  public void setSortValueIsSet(boolean value) {
    if (!value) {
      this.sortValue = null;
    }
  }

  /**
   * 所在区域一级区域Id
   */
  public String getFareadId() {
    return this.fareadId;
  }

  /**
   * 所在区域一级区域Id
   */
  public BusinessZoneTagAddReq setFareadId(String fareadId) {
    this.fareadId = fareadId;
    return this;
  }

  public void unsetFareadId() {
    this.fareadId = null;
  }

  /** Returns true if field fareadId is set (has been assigned a value) and false otherwise */
  public boolean isSetFareadId() {
    return this.fareadId != null;
  }

  public void setFareadIdIsSet(boolean value) {
    if (!value) {
      this.fareadId = null;
    }
  }

  /**
   * 所在区域二级区域Id
   */
  public String getSareadId() {
    return this.sareadId;
  }

  /**
   * 所在区域二级区域Id
   */
  public BusinessZoneTagAddReq setSareadId(String sareadId) {
    this.sareadId = sareadId;
    return this;
  }

  public void unsetSareadId() {
    this.sareadId = null;
  }

  /** Returns true if field sareadId is set (has been assigned a value) and false otherwise */
  public boolean isSetSareadId() {
    return this.sareadId != null;
  }

  public void setSareadIdIsSet(boolean value) {
    if (!value) {
      this.sareadId = null;
    }
  }

  /**
   * 所在区域三级区域Id
   */
  public String getTareadId() {
    return this.tareadId;
  }

  /**
   * 所在区域三级区域Id
   */
  public BusinessZoneTagAddReq setTareadId(String tareadId) {
    this.tareadId = tareadId;
    return this;
  }

  public void unsetTareadId() {
    this.tareadId = null;
  }

  /** Returns true if field tareadId is set (has been assigned a value) and false otherwise */
  public boolean isSetTareadId() {
    return this.tareadId != null;
  }

  public void setTareadIdIsSet(boolean value) {
    if (!value) {
      this.tareadId = null;
    }
  }

  /**
   * 所在区域四级区域Id
   */
  public String getOareadId() {
    return this.oareadId;
  }

  /**
   * 所在区域四级区域Id
   */
  public BusinessZoneTagAddReq setOareadId(String oareadId) {
    this.oareadId = oareadId;
    return this;
  }

  public void unsetOareadId() {
    this.oareadId = null;
  }

  /** Returns true if field oareadId is set (has been assigned a value) and false otherwise */
  public boolean isSetOareadId() {
    return this.oareadId != null;
  }

  public void setOareadIdIsSet(boolean value) {
    if (!value) {
      this.oareadId = null;
    }
  }

  /**
   * 描述
   */
  public String getDesc() {
    return this.desc;
  }

  /**
   * 描述
   */
  public BusinessZoneTagAddReq setDesc(String desc) {
    this.desc = desc;
    return this;
  }

  public void unsetDesc() {
    this.desc = null;
  }

  /** Returns true if field desc is set (has been assigned a value) and false otherwise */
  public boolean isSetDesc() {
    return this.desc != null;
  }

  public void setDescIsSet(boolean value) {
    if (!value) {
      this.desc = null;
    }
  }

  /**
   * 操作标识：1：新增；2：编辑
   */
  public String getFlag() {
    return this.flag;
  }

  /**
   * 操作标识：1：新增；2：编辑
   */
  public BusinessZoneTagAddReq setFlag(String flag) {
    this.flag = flag;
    return this;
  }

  public void unsetFlag() {
    this.flag = null;
  }

  /** Returns true if field flag is set (has been assigned a value) and false otherwise */
  public boolean isSetFlag() {
    return this.flag != null;
  }

  public void setFlagIsSet(boolean value) {
    if (!value) {
      this.flag = null;
    }
  }

  /**
   * id
   */
  public String getId() {
    return this.id;
  }

  /**
   * id
   */
  public BusinessZoneTagAddReq setId(String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CLIENT_ID:
      if (value == null) {
        unsetClientId();
      } else {
        setClientId((String)value);
      }
      break;

    case TAG_NAME:
      if (value == null) {
        unsetTagName();
      } else {
        setTagName((String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((String)value);
      }
      break;

    case SORT_VALUE:
      if (value == null) {
        unsetSortValue();
      } else {
        setSortValue((String)value);
      }
      break;

    case FAREAD_ID:
      if (value == null) {
        unsetFareadId();
      } else {
        setFareadId((String)value);
      }
      break;

    case SAREAD_ID:
      if (value == null) {
        unsetSareadId();
      } else {
        setSareadId((String)value);
      }
      break;

    case TAREAD_ID:
      if (value == null) {
        unsetTareadId();
      } else {
        setTareadId((String)value);
      }
      break;

    case OAREAD_ID:
      if (value == null) {
        unsetOareadId();
      } else {
        setOareadId((String)value);
      }
      break;

    case DESC:
      if (value == null) {
        unsetDesc();
      } else {
        setDesc((String)value);
      }
      break;

    case FLAG:
      if (value == null) {
        unsetFlag();
      } else {
        setFlag((String)value);
      }
      break;

    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CLIENT_ID:
      return getClientId();

    case TAG_NAME:
      return getTagName();

    case STATUS:
      return getStatus();

    case SORT_VALUE:
      return getSortValue();

    case FAREAD_ID:
      return getFareadId();

    case SAREAD_ID:
      return getSareadId();

    case TAREAD_ID:
      return getTareadId();

    case OAREAD_ID:
      return getOareadId();

    case DESC:
      return getDesc();

    case FLAG:
      return getFlag();

    case ID:
      return getId();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CLIENT_ID:
      return isSetClientId();
    case TAG_NAME:
      return isSetTagName();
    case STATUS:
      return isSetStatus();
    case SORT_VALUE:
      return isSetSortValue();
    case FAREAD_ID:
      return isSetFareadId();
    case SAREAD_ID:
      return isSetSareadId();
    case TAREAD_ID:
      return isSetTareadId();
    case OAREAD_ID:
      return isSetOareadId();
    case DESC:
      return isSetDesc();
    case FLAG:
      return isSetFlag();
    case ID:
      return isSetId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BusinessZoneTagAddReq)
      return this.equals((BusinessZoneTagAddReq)that);
    return false;
  }

  public boolean equals(BusinessZoneTagAddReq that) {
    if (that == null)
      return false;

    boolean this_present_clientId = true && this.isSetClientId();
    boolean that_present_clientId = true && that.isSetClientId();
    if (this_present_clientId || that_present_clientId) {
      if (!(this_present_clientId && that_present_clientId))
        return false;
      if (!this.clientId.equals(that.clientId))
        return false;
    }

    boolean this_present_tagName = true && this.isSetTagName();
    boolean that_present_tagName = true && that.isSetTagName();
    if (this_present_tagName || that_present_tagName) {
      if (!(this_present_tagName && that_present_tagName))
        return false;
      if (!this.tagName.equals(that.tagName))
        return false;
    }

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    boolean this_present_sortValue = true && this.isSetSortValue();
    boolean that_present_sortValue = true && that.isSetSortValue();
    if (this_present_sortValue || that_present_sortValue) {
      if (!(this_present_sortValue && that_present_sortValue))
        return false;
      if (!this.sortValue.equals(that.sortValue))
        return false;
    }

    boolean this_present_fareadId = true && this.isSetFareadId();
    boolean that_present_fareadId = true && that.isSetFareadId();
    if (this_present_fareadId || that_present_fareadId) {
      if (!(this_present_fareadId && that_present_fareadId))
        return false;
      if (!this.fareadId.equals(that.fareadId))
        return false;
    }

    boolean this_present_sareadId = true && this.isSetSareadId();
    boolean that_present_sareadId = true && that.isSetSareadId();
    if (this_present_sareadId || that_present_sareadId) {
      if (!(this_present_sareadId && that_present_sareadId))
        return false;
      if (!this.sareadId.equals(that.sareadId))
        return false;
    }

    boolean this_present_tareadId = true && this.isSetTareadId();
    boolean that_present_tareadId = true && that.isSetTareadId();
    if (this_present_tareadId || that_present_tareadId) {
      if (!(this_present_tareadId && that_present_tareadId))
        return false;
      if (!this.tareadId.equals(that.tareadId))
        return false;
    }

    boolean this_present_oareadId = true && this.isSetOareadId();
    boolean that_present_oareadId = true && that.isSetOareadId();
    if (this_present_oareadId || that_present_oareadId) {
      if (!(this_present_oareadId && that_present_oareadId))
        return false;
      if (!this.oareadId.equals(that.oareadId))
        return false;
    }

    boolean this_present_desc = true && this.isSetDesc();
    boolean that_present_desc = true && that.isSetDesc();
    if (this_present_desc || that_present_desc) {
      if (!(this_present_desc && that_present_desc))
        return false;
      if (!this.desc.equals(that.desc))
        return false;
    }

    boolean this_present_flag = true && this.isSetFlag();
    boolean that_present_flag = true && that.isSetFlag();
    if (this_present_flag || that_present_flag) {
      if (!(this_present_flag && that_present_flag))
        return false;
      if (!this.flag.equals(that.flag))
        return false;
    }

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_clientId = true && (isSetClientId());
    list.add(present_clientId);
    if (present_clientId)
      list.add(clientId);

    boolean present_tagName = true && (isSetTagName());
    list.add(present_tagName);
    if (present_tagName)
      list.add(tagName);

    boolean present_status = true && (isSetStatus());
    list.add(present_status);
    if (present_status)
      list.add(status);

    boolean present_sortValue = true && (isSetSortValue());
    list.add(present_sortValue);
    if (present_sortValue)
      list.add(sortValue);

    boolean present_fareadId = true && (isSetFareadId());
    list.add(present_fareadId);
    if (present_fareadId)
      list.add(fareadId);

    boolean present_sareadId = true && (isSetSareadId());
    list.add(present_sareadId);
    if (present_sareadId)
      list.add(sareadId);

    boolean present_tareadId = true && (isSetTareadId());
    list.add(present_tareadId);
    if (present_tareadId)
      list.add(tareadId);

    boolean present_oareadId = true && (isSetOareadId());
    list.add(present_oareadId);
    if (present_oareadId)
      list.add(oareadId);

    boolean present_desc = true && (isSetDesc());
    list.add(present_desc);
    if (present_desc)
      list.add(desc);

    boolean present_flag = true && (isSetFlag());
    list.add(present_flag);
    if (present_flag)
      list.add(flag);

    boolean present_id = true && (isSetId());
    list.add(present_id);
    if (present_id)
      list.add(id);

    return list.hashCode();
  }

  @Override
  public int compareTo(BusinessZoneTagAddReq other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClientId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTagName()).compareTo(other.isSetTagName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTagName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tagName, other.tagName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSortValue()).compareTo(other.isSetSortValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSortValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sortValue, other.sortValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFareadId()).compareTo(other.isSetFareadId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFareadId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fareadId, other.fareadId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSareadId()).compareTo(other.isSetSareadId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSareadId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sareadId, other.sareadId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTareadId()).compareTo(other.isSetTareadId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTareadId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tareadId, other.tareadId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOareadId()).compareTo(other.isSetOareadId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOareadId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oareadId, other.oareadId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDesc()).compareTo(other.isSetDesc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDesc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.desc, other.desc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFlag()).compareTo(other.isSetFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFlag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.flag, other.flag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("BusinessZoneTagAddReq(");
    boolean first = true;

    sb.append("clientId:");
    if (this.clientId == null) {
      sb.append("null");
    } else {
      sb.append(this.clientId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tagName:");
    if (this.tagName == null) {
      sb.append("null");
    } else {
      sb.append(this.tagName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    if (this.status == null) {
      sb.append("null");
    } else {
      sb.append(this.status);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sortValue:");
    if (this.sortValue == null) {
      sb.append("null");
    } else {
      sb.append(this.sortValue);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fareadId:");
    if (this.fareadId == null) {
      sb.append("null");
    } else {
      sb.append(this.fareadId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sareadId:");
    if (this.sareadId == null) {
      sb.append("null");
    } else {
      sb.append(this.sareadId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tareadId:");
    if (this.tareadId == null) {
      sb.append("null");
    } else {
      sb.append(this.tareadId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("oareadId:");
    if (this.oareadId == null) {
      sb.append("null");
    } else {
      sb.append(this.oareadId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("desc:");
    if (this.desc == null) {
      sb.append("null");
    } else {
      sb.append(this.desc);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("flag:");
    if (this.flag == null) {
      sb.append("null");
    } else {
      sb.append(this.flag);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BusinessZoneTagAddReqStandardSchemeFactory implements SchemeFactory {
    public BusinessZoneTagAddReqStandardScheme getScheme() {
      return new BusinessZoneTagAddReqStandardScheme();
    }
  }

  private static class BusinessZoneTagAddReqStandardScheme extends StandardScheme<BusinessZoneTagAddReq> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BusinessZoneTagAddReq struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CLIENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clientId = iprot.readString();
              struct.setClientIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TAG_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tagName = iprot.readString();
              struct.setTagNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.status = iprot.readString();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SORT_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sortValue = iprot.readString();
              struct.setSortValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // FAREAD_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fareadId = iprot.readString();
              struct.setFareadIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SAREAD_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sareadId = iprot.readString();
              struct.setSareadIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TAREAD_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tareadId = iprot.readString();
              struct.setTareadIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // OAREAD_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.oareadId = iprot.readString();
              struct.setOareadIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // DESC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.desc = iprot.readString();
              struct.setDescIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.flag = iprot.readString();
              struct.setFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BusinessZoneTagAddReq struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.clientId != null) {
        oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
        oprot.writeString(struct.clientId);
        oprot.writeFieldEnd();
      }
      if (struct.tagName != null) {
        oprot.writeFieldBegin(TAG_NAME_FIELD_DESC);
        oprot.writeString(struct.tagName);
        oprot.writeFieldEnd();
      }
      if (struct.status != null) {
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        oprot.writeString(struct.status);
        oprot.writeFieldEnd();
      }
      if (struct.sortValue != null) {
        oprot.writeFieldBegin(SORT_VALUE_FIELD_DESC);
        oprot.writeString(struct.sortValue);
        oprot.writeFieldEnd();
      }
      if (struct.fareadId != null) {
        oprot.writeFieldBegin(FAREAD_ID_FIELD_DESC);
        oprot.writeString(struct.fareadId);
        oprot.writeFieldEnd();
      }
      if (struct.sareadId != null) {
        oprot.writeFieldBegin(SAREAD_ID_FIELD_DESC);
        oprot.writeString(struct.sareadId);
        oprot.writeFieldEnd();
      }
      if (struct.tareadId != null) {
        oprot.writeFieldBegin(TAREAD_ID_FIELD_DESC);
        oprot.writeString(struct.tareadId);
        oprot.writeFieldEnd();
      }
      if (struct.oareadId != null) {
        oprot.writeFieldBegin(OAREAD_ID_FIELD_DESC);
        oprot.writeString(struct.oareadId);
        oprot.writeFieldEnd();
      }
      if (struct.desc != null) {
        oprot.writeFieldBegin(DESC_FIELD_DESC);
        oprot.writeString(struct.desc);
        oprot.writeFieldEnd();
      }
      if (struct.flag != null) {
        oprot.writeFieldBegin(FLAG_FIELD_DESC);
        oprot.writeString(struct.flag);
        oprot.writeFieldEnd();
      }
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BusinessZoneTagAddReqTupleSchemeFactory implements SchemeFactory {
    public BusinessZoneTagAddReqTupleScheme getScheme() {
      return new BusinessZoneTagAddReqTupleScheme();
    }
  }

  private static class BusinessZoneTagAddReqTupleScheme extends TupleScheme<BusinessZoneTagAddReq> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BusinessZoneTagAddReq struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetClientId()) {
        optionals.set(0);
      }
      if (struct.isSetTagName()) {
        optionals.set(1);
      }
      if (struct.isSetStatus()) {
        optionals.set(2);
      }
      if (struct.isSetSortValue()) {
        optionals.set(3);
      }
      if (struct.isSetFareadId()) {
        optionals.set(4);
      }
      if (struct.isSetSareadId()) {
        optionals.set(5);
      }
      if (struct.isSetTareadId()) {
        optionals.set(6);
      }
      if (struct.isSetOareadId()) {
        optionals.set(7);
      }
      if (struct.isSetDesc()) {
        optionals.set(8);
      }
      if (struct.isSetFlag()) {
        optionals.set(9);
      }
      if (struct.isSetId()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetClientId()) {
        oprot.writeString(struct.clientId);
      }
      if (struct.isSetTagName()) {
        oprot.writeString(struct.tagName);
      }
      if (struct.isSetStatus()) {
        oprot.writeString(struct.status);
      }
      if (struct.isSetSortValue()) {
        oprot.writeString(struct.sortValue);
      }
      if (struct.isSetFareadId()) {
        oprot.writeString(struct.fareadId);
      }
      if (struct.isSetSareadId()) {
        oprot.writeString(struct.sareadId);
      }
      if (struct.isSetTareadId()) {
        oprot.writeString(struct.tareadId);
      }
      if (struct.isSetOareadId()) {
        oprot.writeString(struct.oareadId);
      }
      if (struct.isSetDesc()) {
        oprot.writeString(struct.desc);
      }
      if (struct.isSetFlag()) {
        oprot.writeString(struct.flag);
      }
      if (struct.isSetId()) {
        oprot.writeString(struct.id);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BusinessZoneTagAddReq struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.clientId = iprot.readString();
        struct.setClientIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.tagName = iprot.readString();
        struct.setTagNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.status = iprot.readString();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(3)) {
        struct.sortValue = iprot.readString();
        struct.setSortValueIsSet(true);
      }
      if (incoming.get(4)) {
        struct.fareadId = iprot.readString();
        struct.setFareadIdIsSet(true);
      }
      if (incoming.get(5)) {
        struct.sareadId = iprot.readString();
        struct.setSareadIdIsSet(true);
      }
      if (incoming.get(6)) {
        struct.tareadId = iprot.readString();
        struct.setTareadIdIsSet(true);
      }
      if (incoming.get(7)) {
        struct.oareadId = iprot.readString();
        struct.setOareadIdIsSet(true);
      }
      if (incoming.get(8)) {
        struct.desc = iprot.readString();
        struct.setDescIsSet(true);
      }
      if (incoming.get(9)) {
        struct.flag = iprot.readString();
        struct.setFlagIsSet(true);
      }
      if (incoming.get(10)) {
        struct.id = iprot.readString();
        struct.setIdIsSet(true);
      }
    }
  }

}

