/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.vo.providerorder;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-12-17")
public class UpdateShippingInfoReq implements org.apache.thrift.TBase<UpdateShippingInfoReq, UpdateShippingInfoReq._Fields>, java.io.Serializable, Cloneable, Comparable<UpdateShippingInfoReq> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UpdateShippingInfoReq");

  private static final org.apache.thrift.protocol.TField SUB_ORDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("subOrderId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField SHIPPING_CORP_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("shippingCorpCode", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField SHIPPING_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("shippingId", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField INPUT_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("inputTime", org.apache.thrift.protocol.TType.I64, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new UpdateShippingInfoReqStandardSchemeFactory());
    schemes.put(TupleScheme.class, new UpdateShippingInfoReqTupleSchemeFactory());
  }

  /**
   * 子订单编号 *
   */
  public String subOrderId; // optional
  /**
   * 物流公司编号 *
   */
  public String shippingCorpCode; // optional
  /**
   * 物流单号 *
   */
  public String shippingId; // optional
  /**
   * 上传时间 *
   */
  public long inputTime; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 子订单编号 *
     */
    SUB_ORDER_ID((short)1, "subOrderId"),
    /**
     * 物流公司编号 *
     */
    SHIPPING_CORP_CODE((short)2, "shippingCorpCode"),
    /**
     * 物流单号 *
     */
    SHIPPING_ID((short)3, "shippingId"),
    /**
     * 上传时间 *
     */
    INPUT_TIME((short)4, "inputTime");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SUB_ORDER_ID
          return SUB_ORDER_ID;
        case 2: // SHIPPING_CORP_CODE
          return SHIPPING_CORP_CODE;
        case 3: // SHIPPING_ID
          return SHIPPING_ID;
        case 4: // INPUT_TIME
          return INPUT_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __INPUTTIME_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.SUB_ORDER_ID,_Fields.SHIPPING_CORP_CODE,_Fields.SHIPPING_ID,_Fields.INPUT_TIME};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SUB_ORDER_ID, new org.apache.thrift.meta_data.FieldMetaData("subOrderId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SHIPPING_CORP_CODE, new org.apache.thrift.meta_data.FieldMetaData("shippingCorpCode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SHIPPING_ID, new org.apache.thrift.meta_data.FieldMetaData("shippingId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INPUT_TIME, new org.apache.thrift.meta_data.FieldMetaData("inputTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UpdateShippingInfoReq.class, metaDataMap);
  }

  public UpdateShippingInfoReq() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public UpdateShippingInfoReq(UpdateShippingInfoReq other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetSubOrderId()) {
      this.subOrderId = other.subOrderId;
    }
    if (other.isSetShippingCorpCode()) {
      this.shippingCorpCode = other.shippingCorpCode;
    }
    if (other.isSetShippingId()) {
      this.shippingId = other.shippingId;
    }
    this.inputTime = other.inputTime;
  }

  public UpdateShippingInfoReq deepCopy() {
    return new UpdateShippingInfoReq(this);
  }

  @Override
  public void clear() {
    this.subOrderId = null;
    this.shippingCorpCode = null;
    this.shippingId = null;
    setInputTimeIsSet(false);
    this.inputTime = 0;
  }

  /**
   * 子订单编号 *
   */
  public String getSubOrderId() {
    return this.subOrderId;
  }

  /**
   * 子订单编号 *
   */
  public UpdateShippingInfoReq setSubOrderId(String subOrderId) {
    this.subOrderId = subOrderId;
    return this;
  }

  public void unsetSubOrderId() {
    this.subOrderId = null;
  }

  /** Returns true if field subOrderId is set (has been assigned a value) and false otherwise */
  public boolean isSetSubOrderId() {
    return this.subOrderId != null;
  }

  public void setSubOrderIdIsSet(boolean value) {
    if (!value) {
      this.subOrderId = null;
    }
  }

  /**
   * 物流公司编号 *
   */
  public String getShippingCorpCode() {
    return this.shippingCorpCode;
  }

  /**
   * 物流公司编号 *
   */
  public UpdateShippingInfoReq setShippingCorpCode(String shippingCorpCode) {
    this.shippingCorpCode = shippingCorpCode;
    return this;
  }

  public void unsetShippingCorpCode() {
    this.shippingCorpCode = null;
  }

  /** Returns true if field shippingCorpCode is set (has been assigned a value) and false otherwise */
  public boolean isSetShippingCorpCode() {
    return this.shippingCorpCode != null;
  }

  public void setShippingCorpCodeIsSet(boolean value) {
    if (!value) {
      this.shippingCorpCode = null;
    }
  }

  /**
   * 物流单号 *
   */
  public String getShippingId() {
    return this.shippingId;
  }

  /**
   * 物流单号 *
   */
  public UpdateShippingInfoReq setShippingId(String shippingId) {
    this.shippingId = shippingId;
    return this;
  }

  public void unsetShippingId() {
    this.shippingId = null;
  }

  /** Returns true if field shippingId is set (has been assigned a value) and false otherwise */
  public boolean isSetShippingId() {
    return this.shippingId != null;
  }

  public void setShippingIdIsSet(boolean value) {
    if (!value) {
      this.shippingId = null;
    }
  }

  /**
   * 上传时间 *
   */
  public long getInputTime() {
    return this.inputTime;
  }

  /**
   * 上传时间 *
   */
  public UpdateShippingInfoReq setInputTime(long inputTime) {
    this.inputTime = inputTime;
    setInputTimeIsSet(true);
    return this;
  }

  public void unsetInputTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INPUTTIME_ISSET_ID);
  }

  /** Returns true if field inputTime is set (has been assigned a value) and false otherwise */
  public boolean isSetInputTime() {
    return EncodingUtils.testBit(__isset_bitfield, __INPUTTIME_ISSET_ID);
  }

  public void setInputTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INPUTTIME_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SUB_ORDER_ID:
      if (value == null) {
        unsetSubOrderId();
      } else {
        setSubOrderId((String)value);
      }
      break;

    case SHIPPING_CORP_CODE:
      if (value == null) {
        unsetShippingCorpCode();
      } else {
        setShippingCorpCode((String)value);
      }
      break;

    case SHIPPING_ID:
      if (value == null) {
        unsetShippingId();
      } else {
        setShippingId((String)value);
      }
      break;

    case INPUT_TIME:
      if (value == null) {
        unsetInputTime();
      } else {
        setInputTime((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SUB_ORDER_ID:
      return getSubOrderId();

    case SHIPPING_CORP_CODE:
      return getShippingCorpCode();

    case SHIPPING_ID:
      return getShippingId();

    case INPUT_TIME:
      return Long.valueOf(getInputTime());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SUB_ORDER_ID:
      return isSetSubOrderId();
    case SHIPPING_CORP_CODE:
      return isSetShippingCorpCode();
    case SHIPPING_ID:
      return isSetShippingId();
    case INPUT_TIME:
      return isSetInputTime();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof UpdateShippingInfoReq)
      return this.equals((UpdateShippingInfoReq)that);
    return false;
  }

  public boolean equals(UpdateShippingInfoReq that) {
    if (that == null)
      return false;

    boolean this_present_subOrderId = true && this.isSetSubOrderId();
    boolean that_present_subOrderId = true && that.isSetSubOrderId();
    if (this_present_subOrderId || that_present_subOrderId) {
      if (!(this_present_subOrderId && that_present_subOrderId))
        return false;
      if (!this.subOrderId.equals(that.subOrderId))
        return false;
    }

    boolean this_present_shippingCorpCode = true && this.isSetShippingCorpCode();
    boolean that_present_shippingCorpCode = true && that.isSetShippingCorpCode();
    if (this_present_shippingCorpCode || that_present_shippingCorpCode) {
      if (!(this_present_shippingCorpCode && that_present_shippingCorpCode))
        return false;
      if (!this.shippingCorpCode.equals(that.shippingCorpCode))
        return false;
    }

    boolean this_present_shippingId = true && this.isSetShippingId();
    boolean that_present_shippingId = true && that.isSetShippingId();
    if (this_present_shippingId || that_present_shippingId) {
      if (!(this_present_shippingId && that_present_shippingId))
        return false;
      if (!this.shippingId.equals(that.shippingId))
        return false;
    }

    boolean this_present_inputTime = true && this.isSetInputTime();
    boolean that_present_inputTime = true && that.isSetInputTime();
    if (this_present_inputTime || that_present_inputTime) {
      if (!(this_present_inputTime && that_present_inputTime))
        return false;
      if (this.inputTime != that.inputTime)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_subOrderId = true && (isSetSubOrderId());
    list.add(present_subOrderId);
    if (present_subOrderId)
      list.add(subOrderId);

    boolean present_shippingCorpCode = true && (isSetShippingCorpCode());
    list.add(present_shippingCorpCode);
    if (present_shippingCorpCode)
      list.add(shippingCorpCode);

    boolean present_shippingId = true && (isSetShippingId());
    list.add(present_shippingId);
    if (present_shippingId)
      list.add(shippingId);

    boolean present_inputTime = true && (isSetInputTime());
    list.add(present_inputTime);
    if (present_inputTime)
      list.add(inputTime);

    return list.hashCode();
  }

  @Override
  public int compareTo(UpdateShippingInfoReq other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSubOrderId()).compareTo(other.isSetSubOrderId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubOrderId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subOrderId, other.subOrderId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShippingCorpCode()).compareTo(other.isSetShippingCorpCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShippingCorpCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shippingCorpCode, other.shippingCorpCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShippingId()).compareTo(other.isSetShippingId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShippingId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shippingId, other.shippingId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInputTime()).compareTo(other.isSetInputTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInputTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inputTime, other.inputTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("UpdateShippingInfoReq(");
    boolean first = true;

    if (isSetSubOrderId()) {
      sb.append("subOrderId:");
      if (this.subOrderId == null) {
        sb.append("null");
      } else {
        sb.append(this.subOrderId);
      }
      first = false;
    }
    if (isSetShippingCorpCode()) {
      if (!first) sb.append(", ");
      sb.append("shippingCorpCode:");
      if (this.shippingCorpCode == null) {
        sb.append("null");
      } else {
        sb.append(this.shippingCorpCode);
      }
      first = false;
    }
    if (isSetShippingId()) {
      if (!first) sb.append(", ");
      sb.append("shippingId:");
      if (this.shippingId == null) {
        sb.append("null");
      } else {
        sb.append(this.shippingId);
      }
      first = false;
    }
    if (isSetInputTime()) {
      if (!first) sb.append(", ");
      sb.append("inputTime:");
      sb.append(this.inputTime);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class UpdateShippingInfoReqStandardSchemeFactory implements SchemeFactory {
    public UpdateShippingInfoReqStandardScheme getScheme() {
      return new UpdateShippingInfoReqStandardScheme();
    }
  }

  private static class UpdateShippingInfoReqStandardScheme extends StandardScheme<UpdateShippingInfoReq> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, UpdateShippingInfoReq struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SUB_ORDER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.subOrderId = iprot.readString();
              struct.setSubOrderIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SHIPPING_CORP_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.shippingCorpCode = iprot.readString();
              struct.setShippingCorpCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SHIPPING_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.shippingId = iprot.readString();
              struct.setShippingIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // INPUT_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.inputTime = iprot.readI64();
              struct.setInputTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, UpdateShippingInfoReq struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.subOrderId != null) {
        if (struct.isSetSubOrderId()) {
          oprot.writeFieldBegin(SUB_ORDER_ID_FIELD_DESC);
          oprot.writeString(struct.subOrderId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.shippingCorpCode != null) {
        if (struct.isSetShippingCorpCode()) {
          oprot.writeFieldBegin(SHIPPING_CORP_CODE_FIELD_DESC);
          oprot.writeString(struct.shippingCorpCode);
          oprot.writeFieldEnd();
        }
      }
      if (struct.shippingId != null) {
        if (struct.isSetShippingId()) {
          oprot.writeFieldBegin(SHIPPING_ID_FIELD_DESC);
          oprot.writeString(struct.shippingId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetInputTime()) {
        oprot.writeFieldBegin(INPUT_TIME_FIELD_DESC);
        oprot.writeI64(struct.inputTime);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class UpdateShippingInfoReqTupleSchemeFactory implements SchemeFactory {
    public UpdateShippingInfoReqTupleScheme getScheme() {
      return new UpdateShippingInfoReqTupleScheme();
    }
  }

  private static class UpdateShippingInfoReqTupleScheme extends TupleScheme<UpdateShippingInfoReq> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, UpdateShippingInfoReq struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetSubOrderId()) {
        optionals.set(0);
      }
      if (struct.isSetShippingCorpCode()) {
        optionals.set(1);
      }
      if (struct.isSetShippingId()) {
        optionals.set(2);
      }
      if (struct.isSetInputTime()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetSubOrderId()) {
        oprot.writeString(struct.subOrderId);
      }
      if (struct.isSetShippingCorpCode()) {
        oprot.writeString(struct.shippingCorpCode);
      }
      if (struct.isSetShippingId()) {
        oprot.writeString(struct.shippingId);
      }
      if (struct.isSetInputTime()) {
        oprot.writeI64(struct.inputTime);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, UpdateShippingInfoReq struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.subOrderId = iprot.readString();
        struct.setSubOrderIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.shippingCorpCode = iprot.readString();
        struct.setShippingCorpCodeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.shippingId = iprot.readString();
        struct.setShippingIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.inputTime = iprot.readI64();
        struct.setInputTimeIsSet(true);
      }
    }
  }

}

