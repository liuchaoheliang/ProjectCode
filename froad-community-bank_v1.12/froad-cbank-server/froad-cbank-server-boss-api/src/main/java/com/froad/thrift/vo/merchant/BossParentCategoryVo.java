/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.vo.merchant;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-11-3")
public class BossParentCategoryVo implements org.apache.thrift.TBase<BossParentCategoryVo, BossParentCategoryVo._Fields>, java.io.Serializable, Cloneable, Comparable<BossParentCategoryVo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BossParentCategoryVo");

  private static final org.apache.thrift.protocol.TField CATEGORY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("categoryId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TREE_PAHT_FIELD_DESC = new org.apache.thrift.protocol.TField("treePaht", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField IS_DELETE_FIELD_DESC = new org.apache.thrift.protocol.TField("isDelete", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new BossParentCategoryVoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new BossParentCategoryVoTupleSchemeFactory());
  }

  /**
   * 分类id
   */
  public String categoryId; // required
  /**
   * 分类名称
   */
  public String name; // required
  /**
   * tree path
   */
  public String treePaht; // required
  /**
   * 是否禁用:1:禁用；0：启用
   */
  public String isDelete; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 分类id
     */
    CATEGORY_ID((short)1, "categoryId"),
    /**
     * 分类名称
     */
    NAME((short)2, "name"),
    /**
     * tree path
     */
    TREE_PAHT((short)3, "treePaht"),
    /**
     * 是否禁用:1:禁用；0：启用
     */
    IS_DELETE((short)4, "isDelete");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CATEGORY_ID
          return CATEGORY_ID;
        case 2: // NAME
          return NAME;
        case 3: // TREE_PAHT
          return TREE_PAHT;
        case 4: // IS_DELETE
          return IS_DELETE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CATEGORY_ID, new org.apache.thrift.meta_data.FieldMetaData("categoryId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TREE_PAHT, new org.apache.thrift.meta_data.FieldMetaData("treePaht", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_DELETE, new org.apache.thrift.meta_data.FieldMetaData("isDelete", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BossParentCategoryVo.class, metaDataMap);
  }

  public BossParentCategoryVo() {
  }

  public BossParentCategoryVo(
    String categoryId,
    String name,
    String treePaht,
    String isDelete)
  {
    this();
    this.categoryId = categoryId;
    this.name = name;
    this.treePaht = treePaht;
    this.isDelete = isDelete;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BossParentCategoryVo(BossParentCategoryVo other) {
    if (other.isSetCategoryId()) {
      this.categoryId = other.categoryId;
    }
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetTreePaht()) {
      this.treePaht = other.treePaht;
    }
    if (other.isSetIsDelete()) {
      this.isDelete = other.isDelete;
    }
  }

  public BossParentCategoryVo deepCopy() {
    return new BossParentCategoryVo(this);
  }

  @Override
  public void clear() {
    this.categoryId = null;
    this.name = null;
    this.treePaht = null;
    this.isDelete = null;
  }

  /**
   * 分类id
   */
  public String getCategoryId() {
    return this.categoryId;
  }

  /**
   * 分类id
   */
  public BossParentCategoryVo setCategoryId(String categoryId) {
    this.categoryId = categoryId;
    return this;
  }

  public void unsetCategoryId() {
    this.categoryId = null;
  }

  /** Returns true if field categoryId is set (has been assigned a value) and false otherwise */
  public boolean isSetCategoryId() {
    return this.categoryId != null;
  }

  public void setCategoryIdIsSet(boolean value) {
    if (!value) {
      this.categoryId = null;
    }
  }

  /**
   * 分类名称
   */
  public String getName() {
    return this.name;
  }

  /**
   * 分类名称
   */
  public BossParentCategoryVo setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  /**
   * tree path
   */
  public String getTreePaht() {
    return this.treePaht;
  }

  /**
   * tree path
   */
  public BossParentCategoryVo setTreePaht(String treePaht) {
    this.treePaht = treePaht;
    return this;
  }

  public void unsetTreePaht() {
    this.treePaht = null;
  }

  /** Returns true if field treePaht is set (has been assigned a value) and false otherwise */
  public boolean isSetTreePaht() {
    return this.treePaht != null;
  }

  public void setTreePahtIsSet(boolean value) {
    if (!value) {
      this.treePaht = null;
    }
  }

  /**
   * 是否禁用:1:禁用；0：启用
   */
  public String getIsDelete() {
    return this.isDelete;
  }

  /**
   * 是否禁用:1:禁用；0：启用
   */
  public BossParentCategoryVo setIsDelete(String isDelete) {
    this.isDelete = isDelete;
    return this;
  }

  public void unsetIsDelete() {
    this.isDelete = null;
  }

  /** Returns true if field isDelete is set (has been assigned a value) and false otherwise */
  public boolean isSetIsDelete() {
    return this.isDelete != null;
  }

  public void setIsDeleteIsSet(boolean value) {
    if (!value) {
      this.isDelete = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CATEGORY_ID:
      if (value == null) {
        unsetCategoryId();
      } else {
        setCategoryId((String)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case TREE_PAHT:
      if (value == null) {
        unsetTreePaht();
      } else {
        setTreePaht((String)value);
      }
      break;

    case IS_DELETE:
      if (value == null) {
        unsetIsDelete();
      } else {
        setIsDelete((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CATEGORY_ID:
      return getCategoryId();

    case NAME:
      return getName();

    case TREE_PAHT:
      return getTreePaht();

    case IS_DELETE:
      return getIsDelete();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CATEGORY_ID:
      return isSetCategoryId();
    case NAME:
      return isSetName();
    case TREE_PAHT:
      return isSetTreePaht();
    case IS_DELETE:
      return isSetIsDelete();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BossParentCategoryVo)
      return this.equals((BossParentCategoryVo)that);
    return false;
  }

  public boolean equals(BossParentCategoryVo that) {
    if (that == null)
      return false;

    boolean this_present_categoryId = true && this.isSetCategoryId();
    boolean that_present_categoryId = true && that.isSetCategoryId();
    if (this_present_categoryId || that_present_categoryId) {
      if (!(this_present_categoryId && that_present_categoryId))
        return false;
      if (!this.categoryId.equals(that.categoryId))
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_treePaht = true && this.isSetTreePaht();
    boolean that_present_treePaht = true && that.isSetTreePaht();
    if (this_present_treePaht || that_present_treePaht) {
      if (!(this_present_treePaht && that_present_treePaht))
        return false;
      if (!this.treePaht.equals(that.treePaht))
        return false;
    }

    boolean this_present_isDelete = true && this.isSetIsDelete();
    boolean that_present_isDelete = true && that.isSetIsDelete();
    if (this_present_isDelete || that_present_isDelete) {
      if (!(this_present_isDelete && that_present_isDelete))
        return false;
      if (!this.isDelete.equals(that.isDelete))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_categoryId = true && (isSetCategoryId());
    list.add(present_categoryId);
    if (present_categoryId)
      list.add(categoryId);

    boolean present_name = true && (isSetName());
    list.add(present_name);
    if (present_name)
      list.add(name);

    boolean present_treePaht = true && (isSetTreePaht());
    list.add(present_treePaht);
    if (present_treePaht)
      list.add(treePaht);

    boolean present_isDelete = true && (isSetIsDelete());
    list.add(present_isDelete);
    if (present_isDelete)
      list.add(isDelete);

    return list.hashCode();
  }

  @Override
  public int compareTo(BossParentCategoryVo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetCategoryId()).compareTo(other.isSetCategoryId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCategoryId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.categoryId, other.categoryId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTreePaht()).compareTo(other.isSetTreePaht());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTreePaht()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.treePaht, other.treePaht);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsDelete()).compareTo(other.isSetIsDelete());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsDelete()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isDelete, other.isDelete);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("BossParentCategoryVo(");
    boolean first = true;

    sb.append("categoryId:");
    if (this.categoryId == null) {
      sb.append("null");
    } else {
      sb.append(this.categoryId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("treePaht:");
    if (this.treePaht == null) {
      sb.append("null");
    } else {
      sb.append(this.treePaht);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isDelete:");
    if (this.isDelete == null) {
      sb.append("null");
    } else {
      sb.append(this.isDelete);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BossParentCategoryVoStandardSchemeFactory implements SchemeFactory {
    public BossParentCategoryVoStandardScheme getScheme() {
      return new BossParentCategoryVoStandardScheme();
    }
  }

  private static class BossParentCategoryVoStandardScheme extends StandardScheme<BossParentCategoryVo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BossParentCategoryVo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CATEGORY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.categoryId = iprot.readString();
              struct.setCategoryIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TREE_PAHT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.treePaht = iprot.readString();
              struct.setTreePahtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // IS_DELETE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.isDelete = iprot.readString();
              struct.setIsDeleteIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BossParentCategoryVo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.categoryId != null) {
        oprot.writeFieldBegin(CATEGORY_ID_FIELD_DESC);
        oprot.writeString(struct.categoryId);
        oprot.writeFieldEnd();
      }
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.treePaht != null) {
        oprot.writeFieldBegin(TREE_PAHT_FIELD_DESC);
        oprot.writeString(struct.treePaht);
        oprot.writeFieldEnd();
      }
      if (struct.isDelete != null) {
        oprot.writeFieldBegin(IS_DELETE_FIELD_DESC);
        oprot.writeString(struct.isDelete);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BossParentCategoryVoTupleSchemeFactory implements SchemeFactory {
    public BossParentCategoryVoTupleScheme getScheme() {
      return new BossParentCategoryVoTupleScheme();
    }
  }

  private static class BossParentCategoryVoTupleScheme extends TupleScheme<BossParentCategoryVo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BossParentCategoryVo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetCategoryId()) {
        optionals.set(0);
      }
      if (struct.isSetName()) {
        optionals.set(1);
      }
      if (struct.isSetTreePaht()) {
        optionals.set(2);
      }
      if (struct.isSetIsDelete()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetCategoryId()) {
        oprot.writeString(struct.categoryId);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetTreePaht()) {
        oprot.writeString(struct.treePaht);
      }
      if (struct.isSetIsDelete()) {
        oprot.writeString(struct.isDelete);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BossParentCategoryVo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.categoryId = iprot.readString();
        struct.setCategoryIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.treePaht = iprot.readString();
        struct.setTreePahtIsSet(true);
      }
      if (incoming.get(3)) {
        struct.isDelete = iprot.readString();
        struct.setIsDeleteIsSet(true);
      }
    }
  }

}

