/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.vo.payment;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-10-20")
public class BossOrderVo implements org.apache.thrift.TBase<BossOrderVo, BossOrderVo._Fields>, java.io.Serializable, Cloneable, Comparable<BossOrderVo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BossOrderVo");

  private static final org.apache.thrift.protocol.TField ORDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("orderId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField MEMBER_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("memberCode", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField MEMBER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("memberName", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField MERCHANT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("merchantId", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField MERCHANT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("merchantName", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField OUTLET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("outletId", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField CREATE_SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("createSource", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField PAYMENT_METHOD_FIELD_DESC = new org.apache.thrift.protocol.TField("paymentMethod", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField ORDER_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("orderStatus", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField PAYMENT_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("paymentTime", org.apache.thrift.protocol.TType.I64, (short)12);
  private static final org.apache.thrift.protocol.TField TOTAL_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("totalPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)13);
  private static final org.apache.thrift.protocol.TField FFT_POINTS_FIELD_DESC = new org.apache.thrift.protocol.TField("fftPoints", org.apache.thrift.protocol.TType.DOUBLE, (short)14);
  private static final org.apache.thrift.protocol.TField BANK_POINTS_FIELD_DESC = new org.apache.thrift.protocol.TField("bankPoints", org.apache.thrift.protocol.TType.DOUBLE, (short)15);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new BossOrderVoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new BossOrderVoTupleSchemeFactory());
  }

  /**
   * 订单号
   */
  public String orderId; // required
  /**
   * 客户端ID
   */
  public String clientId; // required
  /**
   * 创建时间
   */
  public long createTime; // required
  /**
   * 会员ID
   */
  public long memberCode; // required
  /**
   * 客户名称
   */
  public String memberName; // required
  /**
   * 商户ID
   */
  public String merchantId; // required
  /**
   * 商户名称
   */
  public String merchantName; // required
  /**
   * 门店ID
   */
  public String outletId; // required
  /**
   * 订单来源
   */
  public String createSource; // required
  /**
   * 支付方式
   */
  public String paymentMethod; // required
  /**
   * 订单状态
   */
  public String orderStatus; // required
  /**
   * 支付时间
   */
  public long paymentTime; // required
  /**
   * 总货币值
   */
  public double totalPrice; // required
  /**
   * 方付通积分
   */
  public double fftPoints; // required
  /**
   * 银行积分
   */
  public double bankPoints; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 订单号
     */
    ORDER_ID((short)1, "orderId"),
    /**
     * 客户端ID
     */
    CLIENT_ID((short)2, "clientId"),
    /**
     * 创建时间
     */
    CREATE_TIME((short)3, "createTime"),
    /**
     * 会员ID
     */
    MEMBER_CODE((short)4, "memberCode"),
    /**
     * 客户名称
     */
    MEMBER_NAME((short)5, "memberName"),
    /**
     * 商户ID
     */
    MERCHANT_ID((short)6, "merchantId"),
    /**
     * 商户名称
     */
    MERCHANT_NAME((short)7, "merchantName"),
    /**
     * 门店ID
     */
    OUTLET_ID((short)8, "outletId"),
    /**
     * 订单来源
     */
    CREATE_SOURCE((short)9, "createSource"),
    /**
     * 支付方式
     */
    PAYMENT_METHOD((short)10, "paymentMethod"),
    /**
     * 订单状态
     */
    ORDER_STATUS((short)11, "orderStatus"),
    /**
     * 支付时间
     */
    PAYMENT_TIME((short)12, "paymentTime"),
    /**
     * 总货币值
     */
    TOTAL_PRICE((short)13, "totalPrice"),
    /**
     * 方付通积分
     */
    FFT_POINTS((short)14, "fftPoints"),
    /**
     * 银行积分
     */
    BANK_POINTS((short)15, "bankPoints");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ORDER_ID
          return ORDER_ID;
        case 2: // CLIENT_ID
          return CLIENT_ID;
        case 3: // CREATE_TIME
          return CREATE_TIME;
        case 4: // MEMBER_CODE
          return MEMBER_CODE;
        case 5: // MEMBER_NAME
          return MEMBER_NAME;
        case 6: // MERCHANT_ID
          return MERCHANT_ID;
        case 7: // MERCHANT_NAME
          return MERCHANT_NAME;
        case 8: // OUTLET_ID
          return OUTLET_ID;
        case 9: // CREATE_SOURCE
          return CREATE_SOURCE;
        case 10: // PAYMENT_METHOD
          return PAYMENT_METHOD;
        case 11: // ORDER_STATUS
          return ORDER_STATUS;
        case 12: // PAYMENT_TIME
          return PAYMENT_TIME;
        case 13: // TOTAL_PRICE
          return TOTAL_PRICE;
        case 14: // FFT_POINTS
          return FFT_POINTS;
        case 15: // BANK_POINTS
          return BANK_POINTS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CREATETIME_ISSET_ID = 0;
  private static final int __MEMBERCODE_ISSET_ID = 1;
  private static final int __PAYMENTTIME_ISSET_ID = 2;
  private static final int __TOTALPRICE_ISSET_ID = 3;
  private static final int __FFTPOINTS_ISSET_ID = 4;
  private static final int __BANKPOINTS_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ORDER_ID, new org.apache.thrift.meta_data.FieldMetaData("orderId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MEMBER_CODE, new org.apache.thrift.meta_data.FieldMetaData("memberCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MEMBER_NAME, new org.apache.thrift.meta_data.FieldMetaData("memberName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MERCHANT_ID, new org.apache.thrift.meta_data.FieldMetaData("merchantId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MERCHANT_NAME, new org.apache.thrift.meta_data.FieldMetaData("merchantName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OUTLET_ID, new org.apache.thrift.meta_data.FieldMetaData("outletId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_SOURCE, new org.apache.thrift.meta_data.FieldMetaData("createSource", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAYMENT_METHOD, new org.apache.thrift.meta_data.FieldMetaData("paymentMethod", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORDER_STATUS, new org.apache.thrift.meta_data.FieldMetaData("orderStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAYMENT_TIME, new org.apache.thrift.meta_data.FieldMetaData("paymentTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TOTAL_PRICE, new org.apache.thrift.meta_data.FieldMetaData("totalPrice", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.FFT_POINTS, new org.apache.thrift.meta_data.FieldMetaData("fftPoints", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.BANK_POINTS, new org.apache.thrift.meta_data.FieldMetaData("bankPoints", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BossOrderVo.class, metaDataMap);
  }

  public BossOrderVo() {
  }

  public BossOrderVo(
    String orderId,
    String clientId,
    long createTime,
    long memberCode,
    String memberName,
    String merchantId,
    String merchantName,
    String outletId,
    String createSource,
    String paymentMethod,
    String orderStatus,
    long paymentTime,
    double totalPrice,
    double fftPoints,
    double bankPoints)
  {
    this();
    this.orderId = orderId;
    this.clientId = clientId;
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    this.memberCode = memberCode;
    setMemberCodeIsSet(true);
    this.memberName = memberName;
    this.merchantId = merchantId;
    this.merchantName = merchantName;
    this.outletId = outletId;
    this.createSource = createSource;
    this.paymentMethod = paymentMethod;
    this.orderStatus = orderStatus;
    this.paymentTime = paymentTime;
    setPaymentTimeIsSet(true);
    this.totalPrice = totalPrice;
    setTotalPriceIsSet(true);
    this.fftPoints = fftPoints;
    setFftPointsIsSet(true);
    this.bankPoints = bankPoints;
    setBankPointsIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BossOrderVo(BossOrderVo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetOrderId()) {
      this.orderId = other.orderId;
    }
    if (other.isSetClientId()) {
      this.clientId = other.clientId;
    }
    this.createTime = other.createTime;
    this.memberCode = other.memberCode;
    if (other.isSetMemberName()) {
      this.memberName = other.memberName;
    }
    if (other.isSetMerchantId()) {
      this.merchantId = other.merchantId;
    }
    if (other.isSetMerchantName()) {
      this.merchantName = other.merchantName;
    }
    if (other.isSetOutletId()) {
      this.outletId = other.outletId;
    }
    if (other.isSetCreateSource()) {
      this.createSource = other.createSource;
    }
    if (other.isSetPaymentMethod()) {
      this.paymentMethod = other.paymentMethod;
    }
    if (other.isSetOrderStatus()) {
      this.orderStatus = other.orderStatus;
    }
    this.paymentTime = other.paymentTime;
    this.totalPrice = other.totalPrice;
    this.fftPoints = other.fftPoints;
    this.bankPoints = other.bankPoints;
  }

  public BossOrderVo deepCopy() {
    return new BossOrderVo(this);
  }

  @Override
  public void clear() {
    this.orderId = null;
    this.clientId = null;
    setCreateTimeIsSet(false);
    this.createTime = 0;
    setMemberCodeIsSet(false);
    this.memberCode = 0;
    this.memberName = null;
    this.merchantId = null;
    this.merchantName = null;
    this.outletId = null;
    this.createSource = null;
    this.paymentMethod = null;
    this.orderStatus = null;
    setPaymentTimeIsSet(false);
    this.paymentTime = 0;
    setTotalPriceIsSet(false);
    this.totalPrice = 0.0;
    setFftPointsIsSet(false);
    this.fftPoints = 0.0;
    setBankPointsIsSet(false);
    this.bankPoints = 0.0;
  }

  /**
   * 订单号
   */
  public String getOrderId() {
    return this.orderId;
  }

  /**
   * 订单号
   */
  public BossOrderVo setOrderId(String orderId) {
    this.orderId = orderId;
    return this;
  }

  public void unsetOrderId() {
    this.orderId = null;
  }

  /** Returns true if field orderId is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderId() {
    return this.orderId != null;
  }

  public void setOrderIdIsSet(boolean value) {
    if (!value) {
      this.orderId = null;
    }
  }

  /**
   * 客户端ID
   */
  public String getClientId() {
    return this.clientId;
  }

  /**
   * 客户端ID
   */
  public BossOrderVo setClientId(String clientId) {
    this.clientId = clientId;
    return this;
  }

  public void unsetClientId() {
    this.clientId = null;
  }

  /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
  public boolean isSetClientId() {
    return this.clientId != null;
  }

  public void setClientIdIsSet(boolean value) {
    if (!value) {
      this.clientId = null;
    }
  }

  /**
   * 创建时间
   */
  public long getCreateTime() {
    return this.createTime;
  }

  /**
   * 创建时间
   */
  public BossOrderVo setCreateTime(long createTime) {
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    return this;
  }

  public void unsetCreateTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  public void setCreateTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATETIME_ISSET_ID, value);
  }

  /**
   * 会员ID
   */
  public long getMemberCode() {
    return this.memberCode;
  }

  /**
   * 会员ID
   */
  public BossOrderVo setMemberCode(long memberCode) {
    this.memberCode = memberCode;
    setMemberCodeIsSet(true);
    return this;
  }

  public void unsetMemberCode() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MEMBERCODE_ISSET_ID);
  }

  /** Returns true if field memberCode is set (has been assigned a value) and false otherwise */
  public boolean isSetMemberCode() {
    return EncodingUtils.testBit(__isset_bitfield, __MEMBERCODE_ISSET_ID);
  }

  public void setMemberCodeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MEMBERCODE_ISSET_ID, value);
  }

  /**
   * 客户名称
   */
  public String getMemberName() {
    return this.memberName;
  }

  /**
   * 客户名称
   */
  public BossOrderVo setMemberName(String memberName) {
    this.memberName = memberName;
    return this;
  }

  public void unsetMemberName() {
    this.memberName = null;
  }

  /** Returns true if field memberName is set (has been assigned a value) and false otherwise */
  public boolean isSetMemberName() {
    return this.memberName != null;
  }

  public void setMemberNameIsSet(boolean value) {
    if (!value) {
      this.memberName = null;
    }
  }

  /**
   * 商户ID
   */
  public String getMerchantId() {
    return this.merchantId;
  }

  /**
   * 商户ID
   */
  public BossOrderVo setMerchantId(String merchantId) {
    this.merchantId = merchantId;
    return this;
  }

  public void unsetMerchantId() {
    this.merchantId = null;
  }

  /** Returns true if field merchantId is set (has been assigned a value) and false otherwise */
  public boolean isSetMerchantId() {
    return this.merchantId != null;
  }

  public void setMerchantIdIsSet(boolean value) {
    if (!value) {
      this.merchantId = null;
    }
  }

  /**
   * 商户名称
   */
  public String getMerchantName() {
    return this.merchantName;
  }

  /**
   * 商户名称
   */
  public BossOrderVo setMerchantName(String merchantName) {
    this.merchantName = merchantName;
    return this;
  }

  public void unsetMerchantName() {
    this.merchantName = null;
  }

  /** Returns true if field merchantName is set (has been assigned a value) and false otherwise */
  public boolean isSetMerchantName() {
    return this.merchantName != null;
  }

  public void setMerchantNameIsSet(boolean value) {
    if (!value) {
      this.merchantName = null;
    }
  }

  /**
   * 门店ID
   */
  public String getOutletId() {
    return this.outletId;
  }

  /**
   * 门店ID
   */
  public BossOrderVo setOutletId(String outletId) {
    this.outletId = outletId;
    return this;
  }

  public void unsetOutletId() {
    this.outletId = null;
  }

  /** Returns true if field outletId is set (has been assigned a value) and false otherwise */
  public boolean isSetOutletId() {
    return this.outletId != null;
  }

  public void setOutletIdIsSet(boolean value) {
    if (!value) {
      this.outletId = null;
    }
  }

  /**
   * 订单来源
   */
  public String getCreateSource() {
    return this.createSource;
  }

  /**
   * 订单来源
   */
  public BossOrderVo setCreateSource(String createSource) {
    this.createSource = createSource;
    return this;
  }

  public void unsetCreateSource() {
    this.createSource = null;
  }

  /** Returns true if field createSource is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateSource() {
    return this.createSource != null;
  }

  public void setCreateSourceIsSet(boolean value) {
    if (!value) {
      this.createSource = null;
    }
  }

  /**
   * 支付方式
   */
  public String getPaymentMethod() {
    return this.paymentMethod;
  }

  /**
   * 支付方式
   */
  public BossOrderVo setPaymentMethod(String paymentMethod) {
    this.paymentMethod = paymentMethod;
    return this;
  }

  public void unsetPaymentMethod() {
    this.paymentMethod = null;
  }

  /** Returns true if field paymentMethod is set (has been assigned a value) and false otherwise */
  public boolean isSetPaymentMethod() {
    return this.paymentMethod != null;
  }

  public void setPaymentMethodIsSet(boolean value) {
    if (!value) {
      this.paymentMethod = null;
    }
  }

  /**
   * 订单状态
   */
  public String getOrderStatus() {
    return this.orderStatus;
  }

  /**
   * 订单状态
   */
  public BossOrderVo setOrderStatus(String orderStatus) {
    this.orderStatus = orderStatus;
    return this;
  }

  public void unsetOrderStatus() {
    this.orderStatus = null;
  }

  /** Returns true if field orderStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderStatus() {
    return this.orderStatus != null;
  }

  public void setOrderStatusIsSet(boolean value) {
    if (!value) {
      this.orderStatus = null;
    }
  }

  /**
   * 支付时间
   */
  public long getPaymentTime() {
    return this.paymentTime;
  }

  /**
   * 支付时间
   */
  public BossOrderVo setPaymentTime(long paymentTime) {
    this.paymentTime = paymentTime;
    setPaymentTimeIsSet(true);
    return this;
  }

  public void unsetPaymentTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAYMENTTIME_ISSET_ID);
  }

  /** Returns true if field paymentTime is set (has been assigned a value) and false otherwise */
  public boolean isSetPaymentTime() {
    return EncodingUtils.testBit(__isset_bitfield, __PAYMENTTIME_ISSET_ID);
  }

  public void setPaymentTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAYMENTTIME_ISSET_ID, value);
  }

  /**
   * 总货币值
   */
  public double getTotalPrice() {
    return this.totalPrice;
  }

  /**
   * 总货币值
   */
  public BossOrderVo setTotalPrice(double totalPrice) {
    this.totalPrice = totalPrice;
    setTotalPriceIsSet(true);
    return this;
  }

  public void unsetTotalPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALPRICE_ISSET_ID);
  }

  /** Returns true if field totalPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALPRICE_ISSET_ID);
  }

  public void setTotalPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALPRICE_ISSET_ID, value);
  }

  /**
   * 方付通积分
   */
  public double getFftPoints() {
    return this.fftPoints;
  }

  /**
   * 方付通积分
   */
  public BossOrderVo setFftPoints(double fftPoints) {
    this.fftPoints = fftPoints;
    setFftPointsIsSet(true);
    return this;
  }

  public void unsetFftPoints() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FFTPOINTS_ISSET_ID);
  }

  /** Returns true if field fftPoints is set (has been assigned a value) and false otherwise */
  public boolean isSetFftPoints() {
    return EncodingUtils.testBit(__isset_bitfield, __FFTPOINTS_ISSET_ID);
  }

  public void setFftPointsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FFTPOINTS_ISSET_ID, value);
  }

  /**
   * 银行积分
   */
  public double getBankPoints() {
    return this.bankPoints;
  }

  /**
   * 银行积分
   */
  public BossOrderVo setBankPoints(double bankPoints) {
    this.bankPoints = bankPoints;
    setBankPointsIsSet(true);
    return this;
  }

  public void unsetBankPoints() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BANKPOINTS_ISSET_ID);
  }

  /** Returns true if field bankPoints is set (has been assigned a value) and false otherwise */
  public boolean isSetBankPoints() {
    return EncodingUtils.testBit(__isset_bitfield, __BANKPOINTS_ISSET_ID);
  }

  public void setBankPointsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BANKPOINTS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ORDER_ID:
      if (value == null) {
        unsetOrderId();
      } else {
        setOrderId((String)value);
      }
      break;

    case CLIENT_ID:
      if (value == null) {
        unsetClientId();
      } else {
        setClientId((String)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((Long)value);
      }
      break;

    case MEMBER_CODE:
      if (value == null) {
        unsetMemberCode();
      } else {
        setMemberCode((Long)value);
      }
      break;

    case MEMBER_NAME:
      if (value == null) {
        unsetMemberName();
      } else {
        setMemberName((String)value);
      }
      break;

    case MERCHANT_ID:
      if (value == null) {
        unsetMerchantId();
      } else {
        setMerchantId((String)value);
      }
      break;

    case MERCHANT_NAME:
      if (value == null) {
        unsetMerchantName();
      } else {
        setMerchantName((String)value);
      }
      break;

    case OUTLET_ID:
      if (value == null) {
        unsetOutletId();
      } else {
        setOutletId((String)value);
      }
      break;

    case CREATE_SOURCE:
      if (value == null) {
        unsetCreateSource();
      } else {
        setCreateSource((String)value);
      }
      break;

    case PAYMENT_METHOD:
      if (value == null) {
        unsetPaymentMethod();
      } else {
        setPaymentMethod((String)value);
      }
      break;

    case ORDER_STATUS:
      if (value == null) {
        unsetOrderStatus();
      } else {
        setOrderStatus((String)value);
      }
      break;

    case PAYMENT_TIME:
      if (value == null) {
        unsetPaymentTime();
      } else {
        setPaymentTime((Long)value);
      }
      break;

    case TOTAL_PRICE:
      if (value == null) {
        unsetTotalPrice();
      } else {
        setTotalPrice((Double)value);
      }
      break;

    case FFT_POINTS:
      if (value == null) {
        unsetFftPoints();
      } else {
        setFftPoints((Double)value);
      }
      break;

    case BANK_POINTS:
      if (value == null) {
        unsetBankPoints();
      } else {
        setBankPoints((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ORDER_ID:
      return getOrderId();

    case CLIENT_ID:
      return getClientId();

    case CREATE_TIME:
      return Long.valueOf(getCreateTime());

    case MEMBER_CODE:
      return Long.valueOf(getMemberCode());

    case MEMBER_NAME:
      return getMemberName();

    case MERCHANT_ID:
      return getMerchantId();

    case MERCHANT_NAME:
      return getMerchantName();

    case OUTLET_ID:
      return getOutletId();

    case CREATE_SOURCE:
      return getCreateSource();

    case PAYMENT_METHOD:
      return getPaymentMethod();

    case ORDER_STATUS:
      return getOrderStatus();

    case PAYMENT_TIME:
      return Long.valueOf(getPaymentTime());

    case TOTAL_PRICE:
      return Double.valueOf(getTotalPrice());

    case FFT_POINTS:
      return Double.valueOf(getFftPoints());

    case BANK_POINTS:
      return Double.valueOf(getBankPoints());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ORDER_ID:
      return isSetOrderId();
    case CLIENT_ID:
      return isSetClientId();
    case CREATE_TIME:
      return isSetCreateTime();
    case MEMBER_CODE:
      return isSetMemberCode();
    case MEMBER_NAME:
      return isSetMemberName();
    case MERCHANT_ID:
      return isSetMerchantId();
    case MERCHANT_NAME:
      return isSetMerchantName();
    case OUTLET_ID:
      return isSetOutletId();
    case CREATE_SOURCE:
      return isSetCreateSource();
    case PAYMENT_METHOD:
      return isSetPaymentMethod();
    case ORDER_STATUS:
      return isSetOrderStatus();
    case PAYMENT_TIME:
      return isSetPaymentTime();
    case TOTAL_PRICE:
      return isSetTotalPrice();
    case FFT_POINTS:
      return isSetFftPoints();
    case BANK_POINTS:
      return isSetBankPoints();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BossOrderVo)
      return this.equals((BossOrderVo)that);
    return false;
  }

  public boolean equals(BossOrderVo that) {
    if (that == null)
      return false;

    boolean this_present_orderId = true && this.isSetOrderId();
    boolean that_present_orderId = true && that.isSetOrderId();
    if (this_present_orderId || that_present_orderId) {
      if (!(this_present_orderId && that_present_orderId))
        return false;
      if (!this.orderId.equals(that.orderId))
        return false;
    }

    boolean this_present_clientId = true && this.isSetClientId();
    boolean that_present_clientId = true && that.isSetClientId();
    if (this_present_clientId || that_present_clientId) {
      if (!(this_present_clientId && that_present_clientId))
        return false;
      if (!this.clientId.equals(that.clientId))
        return false;
    }

    boolean this_present_createTime = true;
    boolean that_present_createTime = true;
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (this.createTime != that.createTime)
        return false;
    }

    boolean this_present_memberCode = true;
    boolean that_present_memberCode = true;
    if (this_present_memberCode || that_present_memberCode) {
      if (!(this_present_memberCode && that_present_memberCode))
        return false;
      if (this.memberCode != that.memberCode)
        return false;
    }

    boolean this_present_memberName = true && this.isSetMemberName();
    boolean that_present_memberName = true && that.isSetMemberName();
    if (this_present_memberName || that_present_memberName) {
      if (!(this_present_memberName && that_present_memberName))
        return false;
      if (!this.memberName.equals(that.memberName))
        return false;
    }

    boolean this_present_merchantId = true && this.isSetMerchantId();
    boolean that_present_merchantId = true && that.isSetMerchantId();
    if (this_present_merchantId || that_present_merchantId) {
      if (!(this_present_merchantId && that_present_merchantId))
        return false;
      if (!this.merchantId.equals(that.merchantId))
        return false;
    }

    boolean this_present_merchantName = true && this.isSetMerchantName();
    boolean that_present_merchantName = true && that.isSetMerchantName();
    if (this_present_merchantName || that_present_merchantName) {
      if (!(this_present_merchantName && that_present_merchantName))
        return false;
      if (!this.merchantName.equals(that.merchantName))
        return false;
    }

    boolean this_present_outletId = true && this.isSetOutletId();
    boolean that_present_outletId = true && that.isSetOutletId();
    if (this_present_outletId || that_present_outletId) {
      if (!(this_present_outletId && that_present_outletId))
        return false;
      if (!this.outletId.equals(that.outletId))
        return false;
    }

    boolean this_present_createSource = true && this.isSetCreateSource();
    boolean that_present_createSource = true && that.isSetCreateSource();
    if (this_present_createSource || that_present_createSource) {
      if (!(this_present_createSource && that_present_createSource))
        return false;
      if (!this.createSource.equals(that.createSource))
        return false;
    }

    boolean this_present_paymentMethod = true && this.isSetPaymentMethod();
    boolean that_present_paymentMethod = true && that.isSetPaymentMethod();
    if (this_present_paymentMethod || that_present_paymentMethod) {
      if (!(this_present_paymentMethod && that_present_paymentMethod))
        return false;
      if (!this.paymentMethod.equals(that.paymentMethod))
        return false;
    }

    boolean this_present_orderStatus = true && this.isSetOrderStatus();
    boolean that_present_orderStatus = true && that.isSetOrderStatus();
    if (this_present_orderStatus || that_present_orderStatus) {
      if (!(this_present_orderStatus && that_present_orderStatus))
        return false;
      if (!this.orderStatus.equals(that.orderStatus))
        return false;
    }

    boolean this_present_paymentTime = true;
    boolean that_present_paymentTime = true;
    if (this_present_paymentTime || that_present_paymentTime) {
      if (!(this_present_paymentTime && that_present_paymentTime))
        return false;
      if (this.paymentTime != that.paymentTime)
        return false;
    }

    boolean this_present_totalPrice = true;
    boolean that_present_totalPrice = true;
    if (this_present_totalPrice || that_present_totalPrice) {
      if (!(this_present_totalPrice && that_present_totalPrice))
        return false;
      if (this.totalPrice != that.totalPrice)
        return false;
    }

    boolean this_present_fftPoints = true;
    boolean that_present_fftPoints = true;
    if (this_present_fftPoints || that_present_fftPoints) {
      if (!(this_present_fftPoints && that_present_fftPoints))
        return false;
      if (this.fftPoints != that.fftPoints)
        return false;
    }

    boolean this_present_bankPoints = true;
    boolean that_present_bankPoints = true;
    if (this_present_bankPoints || that_present_bankPoints) {
      if (!(this_present_bankPoints && that_present_bankPoints))
        return false;
      if (this.bankPoints != that.bankPoints)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_orderId = true && (isSetOrderId());
    list.add(present_orderId);
    if (present_orderId)
      list.add(orderId);

    boolean present_clientId = true && (isSetClientId());
    list.add(present_clientId);
    if (present_clientId)
      list.add(clientId);

    boolean present_createTime = true;
    list.add(present_createTime);
    if (present_createTime)
      list.add(createTime);

    boolean present_memberCode = true;
    list.add(present_memberCode);
    if (present_memberCode)
      list.add(memberCode);

    boolean present_memberName = true && (isSetMemberName());
    list.add(present_memberName);
    if (present_memberName)
      list.add(memberName);

    boolean present_merchantId = true && (isSetMerchantId());
    list.add(present_merchantId);
    if (present_merchantId)
      list.add(merchantId);

    boolean present_merchantName = true && (isSetMerchantName());
    list.add(present_merchantName);
    if (present_merchantName)
      list.add(merchantName);

    boolean present_outletId = true && (isSetOutletId());
    list.add(present_outletId);
    if (present_outletId)
      list.add(outletId);

    boolean present_createSource = true && (isSetCreateSource());
    list.add(present_createSource);
    if (present_createSource)
      list.add(createSource);

    boolean present_paymentMethod = true && (isSetPaymentMethod());
    list.add(present_paymentMethod);
    if (present_paymentMethod)
      list.add(paymentMethod);

    boolean present_orderStatus = true && (isSetOrderStatus());
    list.add(present_orderStatus);
    if (present_orderStatus)
      list.add(orderStatus);

    boolean present_paymentTime = true;
    list.add(present_paymentTime);
    if (present_paymentTime)
      list.add(paymentTime);

    boolean present_totalPrice = true;
    list.add(present_totalPrice);
    if (present_totalPrice)
      list.add(totalPrice);

    boolean present_fftPoints = true;
    list.add(present_fftPoints);
    if (present_fftPoints)
      list.add(fftPoints);

    boolean present_bankPoints = true;
    list.add(present_bankPoints);
    if (present_bankPoints)
      list.add(bankPoints);

    return list.hashCode();
  }

  @Override
  public int compareTo(BossOrderVo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetOrderId()).compareTo(other.isSetOrderId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderId, other.orderId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClientId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMemberCode()).compareTo(other.isSetMemberCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMemberCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.memberCode, other.memberCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMemberName()).compareTo(other.isSetMemberName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMemberName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.memberName, other.memberName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMerchantId()).compareTo(other.isSetMerchantId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMerchantId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchantId, other.merchantId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMerchantName()).compareTo(other.isSetMerchantName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMerchantName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchantName, other.merchantName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOutletId()).compareTo(other.isSetOutletId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOutletId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outletId, other.outletId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateSource()).compareTo(other.isSetCreateSource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateSource()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createSource, other.createSource);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPaymentMethod()).compareTo(other.isSetPaymentMethod());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPaymentMethod()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paymentMethod, other.paymentMethod);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderStatus()).compareTo(other.isSetOrderStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderStatus, other.orderStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPaymentTime()).compareTo(other.isSetPaymentTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPaymentTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paymentTime, other.paymentTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalPrice()).compareTo(other.isSetTotalPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalPrice, other.totalPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFftPoints()).compareTo(other.isSetFftPoints());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFftPoints()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fftPoints, other.fftPoints);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBankPoints()).compareTo(other.isSetBankPoints());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBankPoints()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankPoints, other.bankPoints);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("BossOrderVo(");
    boolean first = true;

    sb.append("orderId:");
    if (this.orderId == null) {
      sb.append("null");
    } else {
      sb.append(this.orderId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("clientId:");
    if (this.clientId == null) {
      sb.append("null");
    } else {
      sb.append(this.clientId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTime:");
    sb.append(this.createTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("memberCode:");
    sb.append(this.memberCode);
    first = false;
    if (!first) sb.append(", ");
    sb.append("memberName:");
    if (this.memberName == null) {
      sb.append("null");
    } else {
      sb.append(this.memberName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("merchantId:");
    if (this.merchantId == null) {
      sb.append("null");
    } else {
      sb.append(this.merchantId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("merchantName:");
    if (this.merchantName == null) {
      sb.append("null");
    } else {
      sb.append(this.merchantName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("outletId:");
    if (this.outletId == null) {
      sb.append("null");
    } else {
      sb.append(this.outletId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createSource:");
    if (this.createSource == null) {
      sb.append("null");
    } else {
      sb.append(this.createSource);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("paymentMethod:");
    if (this.paymentMethod == null) {
      sb.append("null");
    } else {
      sb.append(this.paymentMethod);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("orderStatus:");
    if (this.orderStatus == null) {
      sb.append("null");
    } else {
      sb.append(this.orderStatus);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("paymentTime:");
    sb.append(this.paymentTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalPrice:");
    sb.append(this.totalPrice);
    first = false;
    if (!first) sb.append(", ");
    sb.append("fftPoints:");
    sb.append(this.fftPoints);
    first = false;
    if (!first) sb.append(", ");
    sb.append("bankPoints:");
    sb.append(this.bankPoints);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BossOrderVoStandardSchemeFactory implements SchemeFactory {
    public BossOrderVoStandardScheme getScheme() {
      return new BossOrderVoStandardScheme();
    }
  }

  private static class BossOrderVoStandardScheme extends StandardScheme<BossOrderVo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BossOrderVo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ORDER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orderId = iprot.readString();
              struct.setOrderIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CLIENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clientId = iprot.readString();
              struct.setClientIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createTime = iprot.readI64();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MEMBER_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.memberCode = iprot.readI64();
              struct.setMemberCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // MEMBER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.memberName = iprot.readString();
              struct.setMemberNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // MERCHANT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.merchantId = iprot.readString();
              struct.setMerchantIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // MERCHANT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.merchantName = iprot.readString();
              struct.setMerchantNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // OUTLET_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.outletId = iprot.readString();
              struct.setOutletIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // CREATE_SOURCE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createSource = iprot.readString();
              struct.setCreateSourceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // PAYMENT_METHOD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.paymentMethod = iprot.readString();
              struct.setPaymentMethodIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // ORDER_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orderStatus = iprot.readString();
              struct.setOrderStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // PAYMENT_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.paymentTime = iprot.readI64();
              struct.setPaymentTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // TOTAL_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.totalPrice = iprot.readDouble();
              struct.setTotalPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // FFT_POINTS
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.fftPoints = iprot.readDouble();
              struct.setFftPointsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // BANK_POINTS
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.bankPoints = iprot.readDouble();
              struct.setBankPointsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BossOrderVo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.orderId != null) {
        oprot.writeFieldBegin(ORDER_ID_FIELD_DESC);
        oprot.writeString(struct.orderId);
        oprot.writeFieldEnd();
      }
      if (struct.clientId != null) {
        oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
        oprot.writeString(struct.clientId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
      oprot.writeI64(struct.createTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MEMBER_CODE_FIELD_DESC);
      oprot.writeI64(struct.memberCode);
      oprot.writeFieldEnd();
      if (struct.memberName != null) {
        oprot.writeFieldBegin(MEMBER_NAME_FIELD_DESC);
        oprot.writeString(struct.memberName);
        oprot.writeFieldEnd();
      }
      if (struct.merchantId != null) {
        oprot.writeFieldBegin(MERCHANT_ID_FIELD_DESC);
        oprot.writeString(struct.merchantId);
        oprot.writeFieldEnd();
      }
      if (struct.merchantName != null) {
        oprot.writeFieldBegin(MERCHANT_NAME_FIELD_DESC);
        oprot.writeString(struct.merchantName);
        oprot.writeFieldEnd();
      }
      if (struct.outletId != null) {
        oprot.writeFieldBegin(OUTLET_ID_FIELD_DESC);
        oprot.writeString(struct.outletId);
        oprot.writeFieldEnd();
      }
      if (struct.createSource != null) {
        oprot.writeFieldBegin(CREATE_SOURCE_FIELD_DESC);
        oprot.writeString(struct.createSource);
        oprot.writeFieldEnd();
      }
      if (struct.paymentMethod != null) {
        oprot.writeFieldBegin(PAYMENT_METHOD_FIELD_DESC);
        oprot.writeString(struct.paymentMethod);
        oprot.writeFieldEnd();
      }
      if (struct.orderStatus != null) {
        oprot.writeFieldBegin(ORDER_STATUS_FIELD_DESC);
        oprot.writeString(struct.orderStatus);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PAYMENT_TIME_FIELD_DESC);
      oprot.writeI64(struct.paymentTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_PRICE_FIELD_DESC);
      oprot.writeDouble(struct.totalPrice);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FFT_POINTS_FIELD_DESC);
      oprot.writeDouble(struct.fftPoints);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BANK_POINTS_FIELD_DESC);
      oprot.writeDouble(struct.bankPoints);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BossOrderVoTupleSchemeFactory implements SchemeFactory {
    public BossOrderVoTupleScheme getScheme() {
      return new BossOrderVoTupleScheme();
    }
  }

  private static class BossOrderVoTupleScheme extends TupleScheme<BossOrderVo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BossOrderVo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetOrderId()) {
        optionals.set(0);
      }
      if (struct.isSetClientId()) {
        optionals.set(1);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(2);
      }
      if (struct.isSetMemberCode()) {
        optionals.set(3);
      }
      if (struct.isSetMemberName()) {
        optionals.set(4);
      }
      if (struct.isSetMerchantId()) {
        optionals.set(5);
      }
      if (struct.isSetMerchantName()) {
        optionals.set(6);
      }
      if (struct.isSetOutletId()) {
        optionals.set(7);
      }
      if (struct.isSetCreateSource()) {
        optionals.set(8);
      }
      if (struct.isSetPaymentMethod()) {
        optionals.set(9);
      }
      if (struct.isSetOrderStatus()) {
        optionals.set(10);
      }
      if (struct.isSetPaymentTime()) {
        optionals.set(11);
      }
      if (struct.isSetTotalPrice()) {
        optionals.set(12);
      }
      if (struct.isSetFftPoints()) {
        optionals.set(13);
      }
      if (struct.isSetBankPoints()) {
        optionals.set(14);
      }
      oprot.writeBitSet(optionals, 15);
      if (struct.isSetOrderId()) {
        oprot.writeString(struct.orderId);
      }
      if (struct.isSetClientId()) {
        oprot.writeString(struct.clientId);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeI64(struct.createTime);
      }
      if (struct.isSetMemberCode()) {
        oprot.writeI64(struct.memberCode);
      }
      if (struct.isSetMemberName()) {
        oprot.writeString(struct.memberName);
      }
      if (struct.isSetMerchantId()) {
        oprot.writeString(struct.merchantId);
      }
      if (struct.isSetMerchantName()) {
        oprot.writeString(struct.merchantName);
      }
      if (struct.isSetOutletId()) {
        oprot.writeString(struct.outletId);
      }
      if (struct.isSetCreateSource()) {
        oprot.writeString(struct.createSource);
      }
      if (struct.isSetPaymentMethod()) {
        oprot.writeString(struct.paymentMethod);
      }
      if (struct.isSetOrderStatus()) {
        oprot.writeString(struct.orderStatus);
      }
      if (struct.isSetPaymentTime()) {
        oprot.writeI64(struct.paymentTime);
      }
      if (struct.isSetTotalPrice()) {
        oprot.writeDouble(struct.totalPrice);
      }
      if (struct.isSetFftPoints()) {
        oprot.writeDouble(struct.fftPoints);
      }
      if (struct.isSetBankPoints()) {
        oprot.writeDouble(struct.bankPoints);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BossOrderVo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(15);
      if (incoming.get(0)) {
        struct.orderId = iprot.readString();
        struct.setOrderIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.clientId = iprot.readString();
        struct.setClientIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.createTime = iprot.readI64();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.memberCode = iprot.readI64();
        struct.setMemberCodeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.memberName = iprot.readString();
        struct.setMemberNameIsSet(true);
      }
      if (incoming.get(5)) {
        struct.merchantId = iprot.readString();
        struct.setMerchantIdIsSet(true);
      }
      if (incoming.get(6)) {
        struct.merchantName = iprot.readString();
        struct.setMerchantNameIsSet(true);
      }
      if (incoming.get(7)) {
        struct.outletId = iprot.readString();
        struct.setOutletIdIsSet(true);
      }
      if (incoming.get(8)) {
        struct.createSource = iprot.readString();
        struct.setCreateSourceIsSet(true);
      }
      if (incoming.get(9)) {
        struct.paymentMethod = iprot.readString();
        struct.setPaymentMethodIsSet(true);
      }
      if (incoming.get(10)) {
        struct.orderStatus = iprot.readString();
        struct.setOrderStatusIsSet(true);
      }
      if (incoming.get(11)) {
        struct.paymentTime = iprot.readI64();
        struct.setPaymentTimeIsSet(true);
      }
      if (incoming.get(12)) {
        struct.totalPrice = iprot.readDouble();
        struct.setTotalPriceIsSet(true);
      }
      if (incoming.get(13)) {
        struct.fftPoints = iprot.readDouble();
        struct.setFftPointsIsSet(true);
      }
      if (incoming.get(14)) {
        struct.bankPoints = iprot.readDouble();
        struct.setBankPointsIsSet(true);
      }
    }
  }

}

