/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import com.froad.thrift.vo.AddProductVoRes;
import com.froad.thrift.vo.BossAuditProcessVo;
import com.froad.thrift.vo.BossProductDetailVo;
import com.froad.thrift.vo.BossProductFilterVo;
import com.froad.thrift.vo.BossProductInfoVo;
import com.froad.thrift.vo.BossProductListPageVo;
import com.froad.thrift.vo.BossProductStatusVoReq;
import com.froad.thrift.vo.OriginVo;
import com.froad.thrift.vo.PageVo;
import com.froad.thrift.vo.ResultVo;
import com.froad.thrift.vo.VipProductVo;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-7-30")
public class BossProductService {

  /**
   * BossProductService boss管理平台的商品service
   */
  public interface Iface extends com.froad.thrift.monitor.service.BizMonitorService.Iface {

    /**
     * boss商品管理平台分页查询商品列表
     * @param BossProductFilterVo
     * @param pageVo
     * @return BossProductListPageVo
     * 
     * @param productFilterVo
     * @param pageVo
     */
    public BossProductListPageVo findProductsByPage(BossProductFilterVo productFilterVo, PageVo pageVo) throws org.apache.thrift.TException;

    /**
     * boss商品管理平台新增商品
     * @param OriginVo
     * @param BossProductInfoVo
     * @return AddProductVoRes
     * 
     * @param originVo
     * @param productInfoVo
     */
    public AddProductVoRes addProduct(OriginVo originVo, BossProductInfoVo productInfoVo) throws org.apache.thrift.TException;

    /**
     * boss商品管理平台修改商品
     * @param OriginVo
     * @param ProductInfoVo
     * @return ResultVo
     * 
     * @param originVo
     * @param productInfoVo
     */
    public ResultVo updateProduct(OriginVo originVo, BossProductInfoVo productInfoVo) throws org.apache.thrift.TException;

    /**
     * boss商品管理平台查询商品详情修改商品之前查询用到
     * @param string
     * @return BossProductDetailVo
     * 
     * @param productId
     */
    public BossProductDetailVo getBossProductDetail(String productId) throws org.apache.thrift.TException;

    /**
     * boss商品审核
     * @param BossAuditProcessVo
     * @return ResultVo
     * 
     * @param originVo
     * @param processVo
     */
    public ResultVo auditProduct(OriginVo originVo, BossAuditProcessVo processVo) throws org.apache.thrift.TException;

    /**
     * boss查询待审核商品
     * @param BossProductFilterVo
     * @param pageVo
     * @return BossProductListPageVo
     * 
     * @param productFilterVo
     * @param pageVo
     */
    public BossProductListPageVo findAuditProductsByPage(BossProductFilterVo productFilterVo, PageVo pageVo) throws org.apache.thrift.TException;

    /**
     * boss管理平台删除boss平台新加的商品
     * @param OriginVo
     * @param string
     * @return ResultVo
     * 
     * @param originVo
     * @param productId
     */
    public ResultVo deleteProduct(OriginVo originVo, String productId) throws org.apache.thrift.TException;

    /**
     * boss管理平台上下架商品
     * @param BossProductStatusVoReq
     * @return boolean
     * 
     * @param originVo
     * @param productStatusVoReq
     */
    public ResultVo updateProductStatus(OriginVo originVo, BossProductStatusVoReq productStatusVoReq) throws org.apache.thrift.TException;

    /**
     * 查询vip规则列表
     * @param clientId
     * @return list<VipProductVo>
     * 
     * @param clientId
     */
    public List<VipProductVo> getVipProducts(String clientId) throws org.apache.thrift.TException;

  }

  public interface AsyncIface extends com.froad.thrift.monitor.service.BizMonitorService .AsyncIface {

    public void findProductsByPage(BossProductFilterVo productFilterVo, PageVo pageVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addProduct(OriginVo originVo, BossProductInfoVo productInfoVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateProduct(OriginVo originVo, BossProductInfoVo productInfoVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getBossProductDetail(String productId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void auditProduct(OriginVo originVo, BossAuditProcessVo processVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void findAuditProductsByPage(BossProductFilterVo productFilterVo, PageVo pageVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteProduct(OriginVo originVo, String productId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateProductStatus(OriginVo originVo, BossProductStatusVoReq productStatusVoReq, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getVipProducts(String clientId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends com.froad.thrift.monitor.service.BizMonitorService.Client implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public BossProductListPageVo findProductsByPage(BossProductFilterVo productFilterVo, PageVo pageVo) throws org.apache.thrift.TException
    {
      send_findProductsByPage(productFilterVo, pageVo);
      return recv_findProductsByPage();
    }

    public void send_findProductsByPage(BossProductFilterVo productFilterVo, PageVo pageVo) throws org.apache.thrift.TException
    {
      findProductsByPage_args args = new findProductsByPage_args();
      args.setProductFilterVo(productFilterVo);
      args.setPageVo(pageVo);
      sendBase("findProductsByPage", args);
    }

    public BossProductListPageVo recv_findProductsByPage() throws org.apache.thrift.TException
    {
      findProductsByPage_result result = new findProductsByPage_result();
      receiveBase(result, "findProductsByPage");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findProductsByPage failed: unknown result");
    }

    public AddProductVoRes addProduct(OriginVo originVo, BossProductInfoVo productInfoVo) throws org.apache.thrift.TException
    {
      send_addProduct(originVo, productInfoVo);
      return recv_addProduct();
    }

    public void send_addProduct(OriginVo originVo, BossProductInfoVo productInfoVo) throws org.apache.thrift.TException
    {
      addProduct_args args = new addProduct_args();
      args.setOriginVo(originVo);
      args.setProductInfoVo(productInfoVo);
      sendBase("addProduct", args);
    }

    public AddProductVoRes recv_addProduct() throws org.apache.thrift.TException
    {
      addProduct_result result = new addProduct_result();
      receiveBase(result, "addProduct");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addProduct failed: unknown result");
    }

    public ResultVo updateProduct(OriginVo originVo, BossProductInfoVo productInfoVo) throws org.apache.thrift.TException
    {
      send_updateProduct(originVo, productInfoVo);
      return recv_updateProduct();
    }

    public void send_updateProduct(OriginVo originVo, BossProductInfoVo productInfoVo) throws org.apache.thrift.TException
    {
      updateProduct_args args = new updateProduct_args();
      args.setOriginVo(originVo);
      args.setProductInfoVo(productInfoVo);
      sendBase("updateProduct", args);
    }

    public ResultVo recv_updateProduct() throws org.apache.thrift.TException
    {
      updateProduct_result result = new updateProduct_result();
      receiveBase(result, "updateProduct");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateProduct failed: unknown result");
    }

    public BossProductDetailVo getBossProductDetail(String productId) throws org.apache.thrift.TException
    {
      send_getBossProductDetail(productId);
      return recv_getBossProductDetail();
    }

    public void send_getBossProductDetail(String productId) throws org.apache.thrift.TException
    {
      getBossProductDetail_args args = new getBossProductDetail_args();
      args.setProductId(productId);
      sendBase("getBossProductDetail", args);
    }

    public BossProductDetailVo recv_getBossProductDetail() throws org.apache.thrift.TException
    {
      getBossProductDetail_result result = new getBossProductDetail_result();
      receiveBase(result, "getBossProductDetail");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getBossProductDetail failed: unknown result");
    }

    public ResultVo auditProduct(OriginVo originVo, BossAuditProcessVo processVo) throws org.apache.thrift.TException
    {
      send_auditProduct(originVo, processVo);
      return recv_auditProduct();
    }

    public void send_auditProduct(OriginVo originVo, BossAuditProcessVo processVo) throws org.apache.thrift.TException
    {
      auditProduct_args args = new auditProduct_args();
      args.setOriginVo(originVo);
      args.setProcessVo(processVo);
      sendBase("auditProduct", args);
    }

    public ResultVo recv_auditProduct() throws org.apache.thrift.TException
    {
      auditProduct_result result = new auditProduct_result();
      receiveBase(result, "auditProduct");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "auditProduct failed: unknown result");
    }

    public BossProductListPageVo findAuditProductsByPage(BossProductFilterVo productFilterVo, PageVo pageVo) throws org.apache.thrift.TException
    {
      send_findAuditProductsByPage(productFilterVo, pageVo);
      return recv_findAuditProductsByPage();
    }

    public void send_findAuditProductsByPage(BossProductFilterVo productFilterVo, PageVo pageVo) throws org.apache.thrift.TException
    {
      findAuditProductsByPage_args args = new findAuditProductsByPage_args();
      args.setProductFilterVo(productFilterVo);
      args.setPageVo(pageVo);
      sendBase("findAuditProductsByPage", args);
    }

    public BossProductListPageVo recv_findAuditProductsByPage() throws org.apache.thrift.TException
    {
      findAuditProductsByPage_result result = new findAuditProductsByPage_result();
      receiveBase(result, "findAuditProductsByPage");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findAuditProductsByPage failed: unknown result");
    }

    public ResultVo deleteProduct(OriginVo originVo, String productId) throws org.apache.thrift.TException
    {
      send_deleteProduct(originVo, productId);
      return recv_deleteProduct();
    }

    public void send_deleteProduct(OriginVo originVo, String productId) throws org.apache.thrift.TException
    {
      deleteProduct_args args = new deleteProduct_args();
      args.setOriginVo(originVo);
      args.setProductId(productId);
      sendBase("deleteProduct", args);
    }

    public ResultVo recv_deleteProduct() throws org.apache.thrift.TException
    {
      deleteProduct_result result = new deleteProduct_result();
      receiveBase(result, "deleteProduct");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteProduct failed: unknown result");
    }

    public ResultVo updateProductStatus(OriginVo originVo, BossProductStatusVoReq productStatusVoReq) throws org.apache.thrift.TException
    {
      send_updateProductStatus(originVo, productStatusVoReq);
      return recv_updateProductStatus();
    }

    public void send_updateProductStatus(OriginVo originVo, BossProductStatusVoReq productStatusVoReq) throws org.apache.thrift.TException
    {
      updateProductStatus_args args = new updateProductStatus_args();
      args.setOriginVo(originVo);
      args.setProductStatusVoReq(productStatusVoReq);
      sendBase("updateProductStatus", args);
    }

    public ResultVo recv_updateProductStatus() throws org.apache.thrift.TException
    {
      updateProductStatus_result result = new updateProductStatus_result();
      receiveBase(result, "updateProductStatus");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateProductStatus failed: unknown result");
    }

    public List<VipProductVo> getVipProducts(String clientId) throws org.apache.thrift.TException
    {
      send_getVipProducts(clientId);
      return recv_getVipProducts();
    }

    public void send_getVipProducts(String clientId) throws org.apache.thrift.TException
    {
      getVipProducts_args args = new getVipProducts_args();
      args.setClientId(clientId);
      sendBase("getVipProducts", args);
    }

    public List<VipProductVo> recv_getVipProducts() throws org.apache.thrift.TException
    {
      getVipProducts_result result = new getVipProducts_result();
      receiveBase(result, "getVipProducts");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getVipProducts failed: unknown result");
    }

  }
  public static class AsyncClient extends com.froad.thrift.monitor.service.BizMonitorService.AsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void findProductsByPage(BossProductFilterVo productFilterVo, PageVo pageVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findProductsByPage_call method_call = new findProductsByPage_call(productFilterVo, pageVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findProductsByPage_call extends org.apache.thrift.async.TAsyncMethodCall {
      private BossProductFilterVo productFilterVo;
      private PageVo pageVo;
      public findProductsByPage_call(BossProductFilterVo productFilterVo, PageVo pageVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.productFilterVo = productFilterVo;
        this.pageVo = pageVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findProductsByPage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findProductsByPage_args args = new findProductsByPage_args();
        args.setProductFilterVo(productFilterVo);
        args.setPageVo(pageVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public BossProductListPageVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findProductsByPage();
      }
    }

    public void addProduct(OriginVo originVo, BossProductInfoVo productInfoVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addProduct_call method_call = new addProduct_call(originVo, productInfoVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addProduct_call extends org.apache.thrift.async.TAsyncMethodCall {
      private OriginVo originVo;
      private BossProductInfoVo productInfoVo;
      public addProduct_call(OriginVo originVo, BossProductInfoVo productInfoVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.originVo = originVo;
        this.productInfoVo = productInfoVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addProduct", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addProduct_args args = new addProduct_args();
        args.setOriginVo(originVo);
        args.setProductInfoVo(productInfoVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public AddProductVoRes getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addProduct();
      }
    }

    public void updateProduct(OriginVo originVo, BossProductInfoVo productInfoVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateProduct_call method_call = new updateProduct_call(originVo, productInfoVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateProduct_call extends org.apache.thrift.async.TAsyncMethodCall {
      private OriginVo originVo;
      private BossProductInfoVo productInfoVo;
      public updateProduct_call(OriginVo originVo, BossProductInfoVo productInfoVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.originVo = originVo;
        this.productInfoVo = productInfoVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateProduct", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateProduct_args args = new updateProduct_args();
        args.setOriginVo(originVo);
        args.setProductInfoVo(productInfoVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateProduct();
      }
    }

    public void getBossProductDetail(String productId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getBossProductDetail_call method_call = new getBossProductDetail_call(productId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getBossProductDetail_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String productId;
      public getBossProductDetail_call(String productId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.productId = productId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getBossProductDetail", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getBossProductDetail_args args = new getBossProductDetail_args();
        args.setProductId(productId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public BossProductDetailVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getBossProductDetail();
      }
    }

    public void auditProduct(OriginVo originVo, BossAuditProcessVo processVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      auditProduct_call method_call = new auditProduct_call(originVo, processVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class auditProduct_call extends org.apache.thrift.async.TAsyncMethodCall {
      private OriginVo originVo;
      private BossAuditProcessVo processVo;
      public auditProduct_call(OriginVo originVo, BossAuditProcessVo processVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.originVo = originVo;
        this.processVo = processVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("auditProduct", org.apache.thrift.protocol.TMessageType.CALL, 0));
        auditProduct_args args = new auditProduct_args();
        args.setOriginVo(originVo);
        args.setProcessVo(processVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_auditProduct();
      }
    }

    public void findAuditProductsByPage(BossProductFilterVo productFilterVo, PageVo pageVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findAuditProductsByPage_call method_call = new findAuditProductsByPage_call(productFilterVo, pageVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findAuditProductsByPage_call extends org.apache.thrift.async.TAsyncMethodCall {
      private BossProductFilterVo productFilterVo;
      private PageVo pageVo;
      public findAuditProductsByPage_call(BossProductFilterVo productFilterVo, PageVo pageVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.productFilterVo = productFilterVo;
        this.pageVo = pageVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findAuditProductsByPage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findAuditProductsByPage_args args = new findAuditProductsByPage_args();
        args.setProductFilterVo(productFilterVo);
        args.setPageVo(pageVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public BossProductListPageVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findAuditProductsByPage();
      }
    }

    public void deleteProduct(OriginVo originVo, String productId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteProduct_call method_call = new deleteProduct_call(originVo, productId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteProduct_call extends org.apache.thrift.async.TAsyncMethodCall {
      private OriginVo originVo;
      private String productId;
      public deleteProduct_call(OriginVo originVo, String productId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.originVo = originVo;
        this.productId = productId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteProduct", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteProduct_args args = new deleteProduct_args();
        args.setOriginVo(originVo);
        args.setProductId(productId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteProduct();
      }
    }

    public void updateProductStatus(OriginVo originVo, BossProductStatusVoReq productStatusVoReq, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateProductStatus_call method_call = new updateProductStatus_call(originVo, productStatusVoReq, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateProductStatus_call extends org.apache.thrift.async.TAsyncMethodCall {
      private OriginVo originVo;
      private BossProductStatusVoReq productStatusVoReq;
      public updateProductStatus_call(OriginVo originVo, BossProductStatusVoReq productStatusVoReq, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.originVo = originVo;
        this.productStatusVoReq = productStatusVoReq;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateProductStatus", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateProductStatus_args args = new updateProductStatus_args();
        args.setOriginVo(originVo);
        args.setProductStatusVoReq(productStatusVoReq);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateProductStatus();
      }
    }

    public void getVipProducts(String clientId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getVipProducts_call method_call = new getVipProducts_call(clientId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getVipProducts_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String clientId;
      public getVipProducts_call(String clientId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.clientId = clientId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getVipProducts", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getVipProducts_args args = new getVipProducts_args();
        args.setClientId(clientId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<VipProductVo> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getVipProducts();
      }
    }

  }

  public static class Processor<I extends Iface> extends com.froad.thrift.monitor.service.BizMonitorService.Processor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("findProductsByPage", new findProductsByPage());
      processMap.put("addProduct", new addProduct());
      processMap.put("updateProduct", new updateProduct());
      processMap.put("getBossProductDetail", new getBossProductDetail());
      processMap.put("auditProduct", new auditProduct());
      processMap.put("findAuditProductsByPage", new findAuditProductsByPage());
      processMap.put("deleteProduct", new deleteProduct());
      processMap.put("updateProductStatus", new updateProductStatus());
      processMap.put("getVipProducts", new getVipProducts());
      return processMap;
    }

    public static class findProductsByPage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findProductsByPage_args> {
      public findProductsByPage() {
        super("findProductsByPage");
      }

      public findProductsByPage_args getEmptyArgsInstance() {
        return new findProductsByPage_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findProductsByPage_result getResult(I iface, findProductsByPage_args args) throws org.apache.thrift.TException {
        findProductsByPage_result result = new findProductsByPage_result();
        result.success = iface.findProductsByPage(args.productFilterVo, args.pageVo);
        return result;
      }
    }

    public static class addProduct<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addProduct_args> {
      public addProduct() {
        super("addProduct");
      }

      public addProduct_args getEmptyArgsInstance() {
        return new addProduct_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addProduct_result getResult(I iface, addProduct_args args) throws org.apache.thrift.TException {
        addProduct_result result = new addProduct_result();
        result.success = iface.addProduct(args.originVo, args.productInfoVo);
        return result;
      }
    }

    public static class updateProduct<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateProduct_args> {
      public updateProduct() {
        super("updateProduct");
      }

      public updateProduct_args getEmptyArgsInstance() {
        return new updateProduct_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateProduct_result getResult(I iface, updateProduct_args args) throws org.apache.thrift.TException {
        updateProduct_result result = new updateProduct_result();
        result.success = iface.updateProduct(args.originVo, args.productInfoVo);
        return result;
      }
    }

    public static class getBossProductDetail<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getBossProductDetail_args> {
      public getBossProductDetail() {
        super("getBossProductDetail");
      }

      public getBossProductDetail_args getEmptyArgsInstance() {
        return new getBossProductDetail_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getBossProductDetail_result getResult(I iface, getBossProductDetail_args args) throws org.apache.thrift.TException {
        getBossProductDetail_result result = new getBossProductDetail_result();
        result.success = iface.getBossProductDetail(args.productId);
        return result;
      }
    }

    public static class auditProduct<I extends Iface> extends org.apache.thrift.ProcessFunction<I, auditProduct_args> {
      public auditProduct() {
        super("auditProduct");
      }

      public auditProduct_args getEmptyArgsInstance() {
        return new auditProduct_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public auditProduct_result getResult(I iface, auditProduct_args args) throws org.apache.thrift.TException {
        auditProduct_result result = new auditProduct_result();
        result.success = iface.auditProduct(args.originVo, args.processVo);
        return result;
      }
    }

    public static class findAuditProductsByPage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findAuditProductsByPage_args> {
      public findAuditProductsByPage() {
        super("findAuditProductsByPage");
      }

      public findAuditProductsByPage_args getEmptyArgsInstance() {
        return new findAuditProductsByPage_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findAuditProductsByPage_result getResult(I iface, findAuditProductsByPage_args args) throws org.apache.thrift.TException {
        findAuditProductsByPage_result result = new findAuditProductsByPage_result();
        result.success = iface.findAuditProductsByPage(args.productFilterVo, args.pageVo);
        return result;
      }
    }

    public static class deleteProduct<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteProduct_args> {
      public deleteProduct() {
        super("deleteProduct");
      }

      public deleteProduct_args getEmptyArgsInstance() {
        return new deleteProduct_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteProduct_result getResult(I iface, deleteProduct_args args) throws org.apache.thrift.TException {
        deleteProduct_result result = new deleteProduct_result();
        result.success = iface.deleteProduct(args.originVo, args.productId);
        return result;
      }
    }

    public static class updateProductStatus<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateProductStatus_args> {
      public updateProductStatus() {
        super("updateProductStatus");
      }

      public updateProductStatus_args getEmptyArgsInstance() {
        return new updateProductStatus_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateProductStatus_result getResult(I iface, updateProductStatus_args args) throws org.apache.thrift.TException {
        updateProductStatus_result result = new updateProductStatus_result();
        result.success = iface.updateProductStatus(args.originVo, args.productStatusVoReq);
        return result;
      }
    }

    public static class getVipProducts<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getVipProducts_args> {
      public getVipProducts() {
        super("getVipProducts");
      }

      public getVipProducts_args getEmptyArgsInstance() {
        return new getVipProducts_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getVipProducts_result getResult(I iface, getVipProducts_args args) throws org.apache.thrift.TException {
        getVipProducts_result result = new getVipProducts_result();
        result.success = iface.getVipProducts(args.clientId);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends com.froad.thrift.monitor.service.BizMonitorService.AsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("findProductsByPage", new findProductsByPage());
      processMap.put("addProduct", new addProduct());
      processMap.put("updateProduct", new updateProduct());
      processMap.put("getBossProductDetail", new getBossProductDetail());
      processMap.put("auditProduct", new auditProduct());
      processMap.put("findAuditProductsByPage", new findAuditProductsByPage());
      processMap.put("deleteProduct", new deleteProduct());
      processMap.put("updateProductStatus", new updateProductStatus());
      processMap.put("getVipProducts", new getVipProducts());
      return processMap;
    }

    public static class findProductsByPage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findProductsByPage_args, BossProductListPageVo> {
      public findProductsByPage() {
        super("findProductsByPage");
      }

      public findProductsByPage_args getEmptyArgsInstance() {
        return new findProductsByPage_args();
      }

      public AsyncMethodCallback<BossProductListPageVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<BossProductListPageVo>() { 
          public void onComplete(BossProductListPageVo o) {
            findProductsByPage_result result = new findProductsByPage_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            findProductsByPage_result result = new findProductsByPage_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findProductsByPage_args args, org.apache.thrift.async.AsyncMethodCallback<BossProductListPageVo> resultHandler) throws TException {
        iface.findProductsByPage(args.productFilterVo, args.pageVo,resultHandler);
      }
    }

    public static class addProduct<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addProduct_args, AddProductVoRes> {
      public addProduct() {
        super("addProduct");
      }

      public addProduct_args getEmptyArgsInstance() {
        return new addProduct_args();
      }

      public AsyncMethodCallback<AddProductVoRes> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<AddProductVoRes>() { 
          public void onComplete(AddProductVoRes o) {
            addProduct_result result = new addProduct_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addProduct_result result = new addProduct_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addProduct_args args, org.apache.thrift.async.AsyncMethodCallback<AddProductVoRes> resultHandler) throws TException {
        iface.addProduct(args.originVo, args.productInfoVo,resultHandler);
      }
    }

    public static class updateProduct<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateProduct_args, ResultVo> {
      public updateProduct() {
        super("updateProduct");
      }

      public updateProduct_args getEmptyArgsInstance() {
        return new updateProduct_args();
      }

      public AsyncMethodCallback<ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ResultVo>() { 
          public void onComplete(ResultVo o) {
            updateProduct_result result = new updateProduct_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateProduct_result result = new updateProduct_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateProduct_args args, org.apache.thrift.async.AsyncMethodCallback<ResultVo> resultHandler) throws TException {
        iface.updateProduct(args.originVo, args.productInfoVo,resultHandler);
      }
    }

    public static class getBossProductDetail<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getBossProductDetail_args, BossProductDetailVo> {
      public getBossProductDetail() {
        super("getBossProductDetail");
      }

      public getBossProductDetail_args getEmptyArgsInstance() {
        return new getBossProductDetail_args();
      }

      public AsyncMethodCallback<BossProductDetailVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<BossProductDetailVo>() { 
          public void onComplete(BossProductDetailVo o) {
            getBossProductDetail_result result = new getBossProductDetail_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getBossProductDetail_result result = new getBossProductDetail_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getBossProductDetail_args args, org.apache.thrift.async.AsyncMethodCallback<BossProductDetailVo> resultHandler) throws TException {
        iface.getBossProductDetail(args.productId,resultHandler);
      }
    }

    public static class auditProduct<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, auditProduct_args, ResultVo> {
      public auditProduct() {
        super("auditProduct");
      }

      public auditProduct_args getEmptyArgsInstance() {
        return new auditProduct_args();
      }

      public AsyncMethodCallback<ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ResultVo>() { 
          public void onComplete(ResultVo o) {
            auditProduct_result result = new auditProduct_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            auditProduct_result result = new auditProduct_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, auditProduct_args args, org.apache.thrift.async.AsyncMethodCallback<ResultVo> resultHandler) throws TException {
        iface.auditProduct(args.originVo, args.processVo,resultHandler);
      }
    }

    public static class findAuditProductsByPage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findAuditProductsByPage_args, BossProductListPageVo> {
      public findAuditProductsByPage() {
        super("findAuditProductsByPage");
      }

      public findAuditProductsByPage_args getEmptyArgsInstance() {
        return new findAuditProductsByPage_args();
      }

      public AsyncMethodCallback<BossProductListPageVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<BossProductListPageVo>() { 
          public void onComplete(BossProductListPageVo o) {
            findAuditProductsByPage_result result = new findAuditProductsByPage_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            findAuditProductsByPage_result result = new findAuditProductsByPage_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findAuditProductsByPage_args args, org.apache.thrift.async.AsyncMethodCallback<BossProductListPageVo> resultHandler) throws TException {
        iface.findAuditProductsByPage(args.productFilterVo, args.pageVo,resultHandler);
      }
    }

    public static class deleteProduct<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteProduct_args, ResultVo> {
      public deleteProduct() {
        super("deleteProduct");
      }

      public deleteProduct_args getEmptyArgsInstance() {
        return new deleteProduct_args();
      }

      public AsyncMethodCallback<ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ResultVo>() { 
          public void onComplete(ResultVo o) {
            deleteProduct_result result = new deleteProduct_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteProduct_result result = new deleteProduct_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteProduct_args args, org.apache.thrift.async.AsyncMethodCallback<ResultVo> resultHandler) throws TException {
        iface.deleteProduct(args.originVo, args.productId,resultHandler);
      }
    }

    public static class updateProductStatus<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateProductStatus_args, ResultVo> {
      public updateProductStatus() {
        super("updateProductStatus");
      }

      public updateProductStatus_args getEmptyArgsInstance() {
        return new updateProductStatus_args();
      }

      public AsyncMethodCallback<ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ResultVo>() { 
          public void onComplete(ResultVo o) {
            updateProductStatus_result result = new updateProductStatus_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateProductStatus_result result = new updateProductStatus_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateProductStatus_args args, org.apache.thrift.async.AsyncMethodCallback<ResultVo> resultHandler) throws TException {
        iface.updateProductStatus(args.originVo, args.productStatusVoReq,resultHandler);
      }
    }

    public static class getVipProducts<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getVipProducts_args, List<VipProductVo>> {
      public getVipProducts() {
        super("getVipProducts");
      }

      public getVipProducts_args getEmptyArgsInstance() {
        return new getVipProducts_args();
      }

      public AsyncMethodCallback<List<VipProductVo>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<VipProductVo>>() { 
          public void onComplete(List<VipProductVo> o) {
            getVipProducts_result result = new getVipProducts_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getVipProducts_result result = new getVipProducts_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getVipProducts_args args, org.apache.thrift.async.AsyncMethodCallback<List<VipProductVo>> resultHandler) throws TException {
        iface.getVipProducts(args.clientId,resultHandler);
      }
    }

  }

  public static class findProductsByPage_args implements org.apache.thrift.TBase<findProductsByPage_args, findProductsByPage_args._Fields>, java.io.Serializable, Cloneable, Comparable<findProductsByPage_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findProductsByPage_args");

    private static final org.apache.thrift.protocol.TField PRODUCT_FILTER_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("productFilterVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PAGE_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("pageVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findProductsByPage_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findProductsByPage_argsTupleSchemeFactory());
    }

    public BossProductFilterVo productFilterVo; // required
    public PageVo pageVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PRODUCT_FILTER_VO((short)1, "productFilterVo"),
      PAGE_VO((short)2, "pageVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PRODUCT_FILTER_VO
            return PRODUCT_FILTER_VO;
          case 2: // PAGE_VO
            return PAGE_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PRODUCT_FILTER_VO, new org.apache.thrift.meta_data.FieldMetaData("productFilterVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BossProductFilterVo.class)));
      tmpMap.put(_Fields.PAGE_VO, new org.apache.thrift.meta_data.FieldMetaData("pageVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PageVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findProductsByPage_args.class, metaDataMap);
    }

    public findProductsByPage_args() {
    }

    public findProductsByPage_args(
      BossProductFilterVo productFilterVo,
      PageVo pageVo)
    {
      this();
      this.productFilterVo = productFilterVo;
      this.pageVo = pageVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findProductsByPage_args(findProductsByPage_args other) {
      if (other.isSetProductFilterVo()) {
        this.productFilterVo = new BossProductFilterVo(other.productFilterVo);
      }
      if (other.isSetPageVo()) {
        this.pageVo = new PageVo(other.pageVo);
      }
    }

    public findProductsByPage_args deepCopy() {
      return new findProductsByPage_args(this);
    }

    @Override
    public void clear() {
      this.productFilterVo = null;
      this.pageVo = null;
    }

    public BossProductFilterVo getProductFilterVo() {
      return this.productFilterVo;
    }

    public findProductsByPage_args setProductFilterVo(BossProductFilterVo productFilterVo) {
      this.productFilterVo = productFilterVo;
      return this;
    }

    public void unsetProductFilterVo() {
      this.productFilterVo = null;
    }

    /** Returns true if field productFilterVo is set (has been assigned a value) and false otherwise */
    public boolean isSetProductFilterVo() {
      return this.productFilterVo != null;
    }

    public void setProductFilterVoIsSet(boolean value) {
      if (!value) {
        this.productFilterVo = null;
      }
    }

    public PageVo getPageVo() {
      return this.pageVo;
    }

    public findProductsByPage_args setPageVo(PageVo pageVo) {
      this.pageVo = pageVo;
      return this;
    }

    public void unsetPageVo() {
      this.pageVo = null;
    }

    /** Returns true if field pageVo is set (has been assigned a value) and false otherwise */
    public boolean isSetPageVo() {
      return this.pageVo != null;
    }

    public void setPageVoIsSet(boolean value) {
      if (!value) {
        this.pageVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PRODUCT_FILTER_VO:
        if (value == null) {
          unsetProductFilterVo();
        } else {
          setProductFilterVo((BossProductFilterVo)value);
        }
        break;

      case PAGE_VO:
        if (value == null) {
          unsetPageVo();
        } else {
          setPageVo((PageVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PRODUCT_FILTER_VO:
        return getProductFilterVo();

      case PAGE_VO:
        return getPageVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PRODUCT_FILTER_VO:
        return isSetProductFilterVo();
      case PAGE_VO:
        return isSetPageVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findProductsByPage_args)
        return this.equals((findProductsByPage_args)that);
      return false;
    }

    public boolean equals(findProductsByPage_args that) {
      if (that == null)
        return false;

      boolean this_present_productFilterVo = true && this.isSetProductFilterVo();
      boolean that_present_productFilterVo = true && that.isSetProductFilterVo();
      if (this_present_productFilterVo || that_present_productFilterVo) {
        if (!(this_present_productFilterVo && that_present_productFilterVo))
          return false;
        if (!this.productFilterVo.equals(that.productFilterVo))
          return false;
      }

      boolean this_present_pageVo = true && this.isSetPageVo();
      boolean that_present_pageVo = true && that.isSetPageVo();
      if (this_present_pageVo || that_present_pageVo) {
        if (!(this_present_pageVo && that_present_pageVo))
          return false;
        if (!this.pageVo.equals(that.pageVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_productFilterVo = true && (isSetProductFilterVo());
      list.add(present_productFilterVo);
      if (present_productFilterVo)
        list.add(productFilterVo);

      boolean present_pageVo = true && (isSetPageVo());
      list.add(present_pageVo);
      if (present_pageVo)
        list.add(pageVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(findProductsByPage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProductFilterVo()).compareTo(other.isSetProductFilterVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProductFilterVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productFilterVo, other.productFilterVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageVo()).compareTo(other.isSetPageVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageVo, other.pageVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findProductsByPage_args(");
      boolean first = true;

      sb.append("productFilterVo:");
      if (this.productFilterVo == null) {
        sb.append("null");
      } else {
        sb.append(this.productFilterVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageVo:");
      if (this.pageVo == null) {
        sb.append("null");
      } else {
        sb.append(this.pageVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (productFilterVo != null) {
        productFilterVo.validate();
      }
      if (pageVo != null) {
        pageVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findProductsByPage_argsStandardSchemeFactory implements SchemeFactory {
      public findProductsByPage_argsStandardScheme getScheme() {
        return new findProductsByPage_argsStandardScheme();
      }
    }

    private static class findProductsByPage_argsStandardScheme extends StandardScheme<findProductsByPage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findProductsByPage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PRODUCT_FILTER_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.productFilterVo = new BossProductFilterVo();
                struct.productFilterVo.read(iprot);
                struct.setProductFilterVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PAGE_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.pageVo = new PageVo();
                struct.pageVo.read(iprot);
                struct.setPageVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findProductsByPage_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.productFilterVo != null) {
          oprot.writeFieldBegin(PRODUCT_FILTER_VO_FIELD_DESC);
          struct.productFilterVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.pageVo != null) {
          oprot.writeFieldBegin(PAGE_VO_FIELD_DESC);
          struct.pageVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findProductsByPage_argsTupleSchemeFactory implements SchemeFactory {
      public findProductsByPage_argsTupleScheme getScheme() {
        return new findProductsByPage_argsTupleScheme();
      }
    }

    private static class findProductsByPage_argsTupleScheme extends TupleScheme<findProductsByPage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findProductsByPage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProductFilterVo()) {
          optionals.set(0);
        }
        if (struct.isSetPageVo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetProductFilterVo()) {
          struct.productFilterVo.write(oprot);
        }
        if (struct.isSetPageVo()) {
          struct.pageVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findProductsByPage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.productFilterVo = new BossProductFilterVo();
          struct.productFilterVo.read(iprot);
          struct.setProductFilterVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.pageVo = new PageVo();
          struct.pageVo.read(iprot);
          struct.setPageVoIsSet(true);
        }
      }
    }

  }

  public static class findProductsByPage_result implements org.apache.thrift.TBase<findProductsByPage_result, findProductsByPage_result._Fields>, java.io.Serializable, Cloneable, Comparable<findProductsByPage_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findProductsByPage_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findProductsByPage_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findProductsByPage_resultTupleSchemeFactory());
    }

    public BossProductListPageVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BossProductListPageVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findProductsByPage_result.class, metaDataMap);
    }

    public findProductsByPage_result() {
    }

    public findProductsByPage_result(
      BossProductListPageVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findProductsByPage_result(findProductsByPage_result other) {
      if (other.isSetSuccess()) {
        this.success = new BossProductListPageVo(other.success);
      }
    }

    public findProductsByPage_result deepCopy() {
      return new findProductsByPage_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public BossProductListPageVo getSuccess() {
      return this.success;
    }

    public findProductsByPage_result setSuccess(BossProductListPageVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((BossProductListPageVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findProductsByPage_result)
        return this.equals((findProductsByPage_result)that);
      return false;
    }

    public boolean equals(findProductsByPage_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(findProductsByPage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findProductsByPage_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findProductsByPage_resultStandardSchemeFactory implements SchemeFactory {
      public findProductsByPage_resultStandardScheme getScheme() {
        return new findProductsByPage_resultStandardScheme();
      }
    }

    private static class findProductsByPage_resultStandardScheme extends StandardScheme<findProductsByPage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findProductsByPage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new BossProductListPageVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findProductsByPage_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findProductsByPage_resultTupleSchemeFactory implements SchemeFactory {
      public findProductsByPage_resultTupleScheme getScheme() {
        return new findProductsByPage_resultTupleScheme();
      }
    }

    private static class findProductsByPage_resultTupleScheme extends TupleScheme<findProductsByPage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findProductsByPage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findProductsByPage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new BossProductListPageVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class addProduct_args implements org.apache.thrift.TBase<addProduct_args, addProduct_args._Fields>, java.io.Serializable, Cloneable, Comparable<addProduct_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addProduct_args");

    private static final org.apache.thrift.protocol.TField ORIGIN_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("originVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PRODUCT_INFO_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("productInfoVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addProduct_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addProduct_argsTupleSchemeFactory());
    }

    public OriginVo originVo; // required
    public BossProductInfoVo productInfoVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORIGIN_VO((short)1, "originVo"),
      PRODUCT_INFO_VO((short)2, "productInfoVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORIGIN_VO
            return ORIGIN_VO;
          case 2: // PRODUCT_INFO_VO
            return PRODUCT_INFO_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORIGIN_VO, new org.apache.thrift.meta_data.FieldMetaData("originVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, OriginVo.class)));
      tmpMap.put(_Fields.PRODUCT_INFO_VO, new org.apache.thrift.meta_data.FieldMetaData("productInfoVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BossProductInfoVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addProduct_args.class, metaDataMap);
    }

    public addProduct_args() {
    }

    public addProduct_args(
      OriginVo originVo,
      BossProductInfoVo productInfoVo)
    {
      this();
      this.originVo = originVo;
      this.productInfoVo = productInfoVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addProduct_args(addProduct_args other) {
      if (other.isSetOriginVo()) {
        this.originVo = new OriginVo(other.originVo);
      }
      if (other.isSetProductInfoVo()) {
        this.productInfoVo = new BossProductInfoVo(other.productInfoVo);
      }
    }

    public addProduct_args deepCopy() {
      return new addProduct_args(this);
    }

    @Override
    public void clear() {
      this.originVo = null;
      this.productInfoVo = null;
    }

    public OriginVo getOriginVo() {
      return this.originVo;
    }

    public addProduct_args setOriginVo(OriginVo originVo) {
      this.originVo = originVo;
      return this;
    }

    public void unsetOriginVo() {
      this.originVo = null;
    }

    /** Returns true if field originVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginVo() {
      return this.originVo != null;
    }

    public void setOriginVoIsSet(boolean value) {
      if (!value) {
        this.originVo = null;
      }
    }

    public BossProductInfoVo getProductInfoVo() {
      return this.productInfoVo;
    }

    public addProduct_args setProductInfoVo(BossProductInfoVo productInfoVo) {
      this.productInfoVo = productInfoVo;
      return this;
    }

    public void unsetProductInfoVo() {
      this.productInfoVo = null;
    }

    /** Returns true if field productInfoVo is set (has been assigned a value) and false otherwise */
    public boolean isSetProductInfoVo() {
      return this.productInfoVo != null;
    }

    public void setProductInfoVoIsSet(boolean value) {
      if (!value) {
        this.productInfoVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORIGIN_VO:
        if (value == null) {
          unsetOriginVo();
        } else {
          setOriginVo((OriginVo)value);
        }
        break;

      case PRODUCT_INFO_VO:
        if (value == null) {
          unsetProductInfoVo();
        } else {
          setProductInfoVo((BossProductInfoVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORIGIN_VO:
        return getOriginVo();

      case PRODUCT_INFO_VO:
        return getProductInfoVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORIGIN_VO:
        return isSetOriginVo();
      case PRODUCT_INFO_VO:
        return isSetProductInfoVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addProduct_args)
        return this.equals((addProduct_args)that);
      return false;
    }

    public boolean equals(addProduct_args that) {
      if (that == null)
        return false;

      boolean this_present_originVo = true && this.isSetOriginVo();
      boolean that_present_originVo = true && that.isSetOriginVo();
      if (this_present_originVo || that_present_originVo) {
        if (!(this_present_originVo && that_present_originVo))
          return false;
        if (!this.originVo.equals(that.originVo))
          return false;
      }

      boolean this_present_productInfoVo = true && this.isSetProductInfoVo();
      boolean that_present_productInfoVo = true && that.isSetProductInfoVo();
      if (this_present_productInfoVo || that_present_productInfoVo) {
        if (!(this_present_productInfoVo && that_present_productInfoVo))
          return false;
        if (!this.productInfoVo.equals(that.productInfoVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_originVo = true && (isSetOriginVo());
      list.add(present_originVo);
      if (present_originVo)
        list.add(originVo);

      boolean present_productInfoVo = true && (isSetProductInfoVo());
      list.add(present_productInfoVo);
      if (present_productInfoVo)
        list.add(productInfoVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(addProduct_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOriginVo()).compareTo(other.isSetOriginVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originVo, other.originVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetProductInfoVo()).compareTo(other.isSetProductInfoVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProductInfoVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productInfoVo, other.productInfoVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addProduct_args(");
      boolean first = true;

      sb.append("originVo:");
      if (this.originVo == null) {
        sb.append("null");
      } else {
        sb.append(this.originVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("productInfoVo:");
      if (this.productInfoVo == null) {
        sb.append("null");
      } else {
        sb.append(this.productInfoVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (originVo != null) {
        originVo.validate();
      }
      if (productInfoVo != null) {
        productInfoVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addProduct_argsStandardSchemeFactory implements SchemeFactory {
      public addProduct_argsStandardScheme getScheme() {
        return new addProduct_argsStandardScheme();
      }
    }

    private static class addProduct_argsStandardScheme extends StandardScheme<addProduct_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addProduct_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORIGIN_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.originVo = new OriginVo();
                struct.originVo.read(iprot);
                struct.setOriginVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PRODUCT_INFO_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.productInfoVo = new BossProductInfoVo();
                struct.productInfoVo.read(iprot);
                struct.setProductInfoVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addProduct_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.originVo != null) {
          oprot.writeFieldBegin(ORIGIN_VO_FIELD_DESC);
          struct.originVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.productInfoVo != null) {
          oprot.writeFieldBegin(PRODUCT_INFO_VO_FIELD_DESC);
          struct.productInfoVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addProduct_argsTupleSchemeFactory implements SchemeFactory {
      public addProduct_argsTupleScheme getScheme() {
        return new addProduct_argsTupleScheme();
      }
    }

    private static class addProduct_argsTupleScheme extends TupleScheme<addProduct_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addProduct_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOriginVo()) {
          optionals.set(0);
        }
        if (struct.isSetProductInfoVo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOriginVo()) {
          struct.originVo.write(oprot);
        }
        if (struct.isSetProductInfoVo()) {
          struct.productInfoVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addProduct_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.originVo = new OriginVo();
          struct.originVo.read(iprot);
          struct.setOriginVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.productInfoVo = new BossProductInfoVo();
          struct.productInfoVo.read(iprot);
          struct.setProductInfoVoIsSet(true);
        }
      }
    }

  }

  public static class addProduct_result implements org.apache.thrift.TBase<addProduct_result, addProduct_result._Fields>, java.io.Serializable, Cloneable, Comparable<addProduct_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addProduct_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addProduct_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addProduct_resultTupleSchemeFactory());
    }

    public AddProductVoRes success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AddProductVoRes.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addProduct_result.class, metaDataMap);
    }

    public addProduct_result() {
    }

    public addProduct_result(
      AddProductVoRes success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addProduct_result(addProduct_result other) {
      if (other.isSetSuccess()) {
        this.success = new AddProductVoRes(other.success);
      }
    }

    public addProduct_result deepCopy() {
      return new addProduct_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public AddProductVoRes getSuccess() {
      return this.success;
    }

    public addProduct_result setSuccess(AddProductVoRes success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((AddProductVoRes)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addProduct_result)
        return this.equals((addProduct_result)that);
      return false;
    }

    public boolean equals(addProduct_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(addProduct_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addProduct_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addProduct_resultStandardSchemeFactory implements SchemeFactory {
      public addProduct_resultStandardScheme getScheme() {
        return new addProduct_resultStandardScheme();
      }
    }

    private static class addProduct_resultStandardScheme extends StandardScheme<addProduct_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addProduct_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new AddProductVoRes();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addProduct_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addProduct_resultTupleSchemeFactory implements SchemeFactory {
      public addProduct_resultTupleScheme getScheme() {
        return new addProduct_resultTupleScheme();
      }
    }

    private static class addProduct_resultTupleScheme extends TupleScheme<addProduct_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addProduct_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addProduct_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new AddProductVoRes();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateProduct_args implements org.apache.thrift.TBase<updateProduct_args, updateProduct_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateProduct_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateProduct_args");

    private static final org.apache.thrift.protocol.TField ORIGIN_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("originVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PRODUCT_INFO_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("productInfoVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateProduct_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateProduct_argsTupleSchemeFactory());
    }

    public OriginVo originVo; // required
    public BossProductInfoVo productInfoVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORIGIN_VO((short)1, "originVo"),
      PRODUCT_INFO_VO((short)2, "productInfoVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORIGIN_VO
            return ORIGIN_VO;
          case 2: // PRODUCT_INFO_VO
            return PRODUCT_INFO_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORIGIN_VO, new org.apache.thrift.meta_data.FieldMetaData("originVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, OriginVo.class)));
      tmpMap.put(_Fields.PRODUCT_INFO_VO, new org.apache.thrift.meta_data.FieldMetaData("productInfoVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BossProductInfoVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateProduct_args.class, metaDataMap);
    }

    public updateProduct_args() {
    }

    public updateProduct_args(
      OriginVo originVo,
      BossProductInfoVo productInfoVo)
    {
      this();
      this.originVo = originVo;
      this.productInfoVo = productInfoVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateProduct_args(updateProduct_args other) {
      if (other.isSetOriginVo()) {
        this.originVo = new OriginVo(other.originVo);
      }
      if (other.isSetProductInfoVo()) {
        this.productInfoVo = new BossProductInfoVo(other.productInfoVo);
      }
    }

    public updateProduct_args deepCopy() {
      return new updateProduct_args(this);
    }

    @Override
    public void clear() {
      this.originVo = null;
      this.productInfoVo = null;
    }

    public OriginVo getOriginVo() {
      return this.originVo;
    }

    public updateProduct_args setOriginVo(OriginVo originVo) {
      this.originVo = originVo;
      return this;
    }

    public void unsetOriginVo() {
      this.originVo = null;
    }

    /** Returns true if field originVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginVo() {
      return this.originVo != null;
    }

    public void setOriginVoIsSet(boolean value) {
      if (!value) {
        this.originVo = null;
      }
    }

    public BossProductInfoVo getProductInfoVo() {
      return this.productInfoVo;
    }

    public updateProduct_args setProductInfoVo(BossProductInfoVo productInfoVo) {
      this.productInfoVo = productInfoVo;
      return this;
    }

    public void unsetProductInfoVo() {
      this.productInfoVo = null;
    }

    /** Returns true if field productInfoVo is set (has been assigned a value) and false otherwise */
    public boolean isSetProductInfoVo() {
      return this.productInfoVo != null;
    }

    public void setProductInfoVoIsSet(boolean value) {
      if (!value) {
        this.productInfoVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORIGIN_VO:
        if (value == null) {
          unsetOriginVo();
        } else {
          setOriginVo((OriginVo)value);
        }
        break;

      case PRODUCT_INFO_VO:
        if (value == null) {
          unsetProductInfoVo();
        } else {
          setProductInfoVo((BossProductInfoVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORIGIN_VO:
        return getOriginVo();

      case PRODUCT_INFO_VO:
        return getProductInfoVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORIGIN_VO:
        return isSetOriginVo();
      case PRODUCT_INFO_VO:
        return isSetProductInfoVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateProduct_args)
        return this.equals((updateProduct_args)that);
      return false;
    }

    public boolean equals(updateProduct_args that) {
      if (that == null)
        return false;

      boolean this_present_originVo = true && this.isSetOriginVo();
      boolean that_present_originVo = true && that.isSetOriginVo();
      if (this_present_originVo || that_present_originVo) {
        if (!(this_present_originVo && that_present_originVo))
          return false;
        if (!this.originVo.equals(that.originVo))
          return false;
      }

      boolean this_present_productInfoVo = true && this.isSetProductInfoVo();
      boolean that_present_productInfoVo = true && that.isSetProductInfoVo();
      if (this_present_productInfoVo || that_present_productInfoVo) {
        if (!(this_present_productInfoVo && that_present_productInfoVo))
          return false;
        if (!this.productInfoVo.equals(that.productInfoVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_originVo = true && (isSetOriginVo());
      list.add(present_originVo);
      if (present_originVo)
        list.add(originVo);

      boolean present_productInfoVo = true && (isSetProductInfoVo());
      list.add(present_productInfoVo);
      if (present_productInfoVo)
        list.add(productInfoVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateProduct_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOriginVo()).compareTo(other.isSetOriginVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originVo, other.originVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetProductInfoVo()).compareTo(other.isSetProductInfoVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProductInfoVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productInfoVo, other.productInfoVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateProduct_args(");
      boolean first = true;

      sb.append("originVo:");
      if (this.originVo == null) {
        sb.append("null");
      } else {
        sb.append(this.originVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("productInfoVo:");
      if (this.productInfoVo == null) {
        sb.append("null");
      } else {
        sb.append(this.productInfoVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (originVo != null) {
        originVo.validate();
      }
      if (productInfoVo != null) {
        productInfoVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateProduct_argsStandardSchemeFactory implements SchemeFactory {
      public updateProduct_argsStandardScheme getScheme() {
        return new updateProduct_argsStandardScheme();
      }
    }

    private static class updateProduct_argsStandardScheme extends StandardScheme<updateProduct_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateProduct_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORIGIN_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.originVo = new OriginVo();
                struct.originVo.read(iprot);
                struct.setOriginVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PRODUCT_INFO_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.productInfoVo = new BossProductInfoVo();
                struct.productInfoVo.read(iprot);
                struct.setProductInfoVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateProduct_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.originVo != null) {
          oprot.writeFieldBegin(ORIGIN_VO_FIELD_DESC);
          struct.originVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.productInfoVo != null) {
          oprot.writeFieldBegin(PRODUCT_INFO_VO_FIELD_DESC);
          struct.productInfoVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateProduct_argsTupleSchemeFactory implements SchemeFactory {
      public updateProduct_argsTupleScheme getScheme() {
        return new updateProduct_argsTupleScheme();
      }
    }

    private static class updateProduct_argsTupleScheme extends TupleScheme<updateProduct_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateProduct_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOriginVo()) {
          optionals.set(0);
        }
        if (struct.isSetProductInfoVo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOriginVo()) {
          struct.originVo.write(oprot);
        }
        if (struct.isSetProductInfoVo()) {
          struct.productInfoVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateProduct_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.originVo = new OriginVo();
          struct.originVo.read(iprot);
          struct.setOriginVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.productInfoVo = new BossProductInfoVo();
          struct.productInfoVo.read(iprot);
          struct.setProductInfoVoIsSet(true);
        }
      }
    }

  }

  public static class updateProduct_result implements org.apache.thrift.TBase<updateProduct_result, updateProduct_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateProduct_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateProduct_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateProduct_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateProduct_resultTupleSchemeFactory());
    }

    public ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateProduct_result.class, metaDataMap);
    }

    public updateProduct_result() {
    }

    public updateProduct_result(
      ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateProduct_result(updateProduct_result other) {
      if (other.isSetSuccess()) {
        this.success = new ResultVo(other.success);
      }
    }

    public updateProduct_result deepCopy() {
      return new updateProduct_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ResultVo getSuccess() {
      return this.success;
    }

    public updateProduct_result setSuccess(ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateProduct_result)
        return this.equals((updateProduct_result)that);
      return false;
    }

    public boolean equals(updateProduct_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateProduct_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateProduct_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateProduct_resultStandardSchemeFactory implements SchemeFactory {
      public updateProduct_resultStandardScheme getScheme() {
        return new updateProduct_resultStandardScheme();
      }
    }

    private static class updateProduct_resultStandardScheme extends StandardScheme<updateProduct_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateProduct_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateProduct_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateProduct_resultTupleSchemeFactory implements SchemeFactory {
      public updateProduct_resultTupleScheme getScheme() {
        return new updateProduct_resultTupleScheme();
      }
    }

    private static class updateProduct_resultTupleScheme extends TupleScheme<updateProduct_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateProduct_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateProduct_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getBossProductDetail_args implements org.apache.thrift.TBase<getBossProductDetail_args, getBossProductDetail_args._Fields>, java.io.Serializable, Cloneable, Comparable<getBossProductDetail_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBossProductDetail_args");

    private static final org.apache.thrift.protocol.TField PRODUCT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("productId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getBossProductDetail_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getBossProductDetail_argsTupleSchemeFactory());
    }

    public String productId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PRODUCT_ID((short)1, "productId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PRODUCT_ID
            return PRODUCT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PRODUCT_ID, new org.apache.thrift.meta_data.FieldMetaData("productId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBossProductDetail_args.class, metaDataMap);
    }

    public getBossProductDetail_args() {
    }

    public getBossProductDetail_args(
      String productId)
    {
      this();
      this.productId = productId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBossProductDetail_args(getBossProductDetail_args other) {
      if (other.isSetProductId()) {
        this.productId = other.productId;
      }
    }

    public getBossProductDetail_args deepCopy() {
      return new getBossProductDetail_args(this);
    }

    @Override
    public void clear() {
      this.productId = null;
    }

    public String getProductId() {
      return this.productId;
    }

    public getBossProductDetail_args setProductId(String productId) {
      this.productId = productId;
      return this;
    }

    public void unsetProductId() {
      this.productId = null;
    }

    /** Returns true if field productId is set (has been assigned a value) and false otherwise */
    public boolean isSetProductId() {
      return this.productId != null;
    }

    public void setProductIdIsSet(boolean value) {
      if (!value) {
        this.productId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PRODUCT_ID:
        if (value == null) {
          unsetProductId();
        } else {
          setProductId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PRODUCT_ID:
        return getProductId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PRODUCT_ID:
        return isSetProductId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBossProductDetail_args)
        return this.equals((getBossProductDetail_args)that);
      return false;
    }

    public boolean equals(getBossProductDetail_args that) {
      if (that == null)
        return false;

      boolean this_present_productId = true && this.isSetProductId();
      boolean that_present_productId = true && that.isSetProductId();
      if (this_present_productId || that_present_productId) {
        if (!(this_present_productId && that_present_productId))
          return false;
        if (!this.productId.equals(that.productId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_productId = true && (isSetProductId());
      list.add(present_productId);
      if (present_productId)
        list.add(productId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getBossProductDetail_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProductId()).compareTo(other.isSetProductId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProductId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productId, other.productId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getBossProductDetail_args(");
      boolean first = true;

      sb.append("productId:");
      if (this.productId == null) {
        sb.append("null");
      } else {
        sb.append(this.productId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getBossProductDetail_argsStandardSchemeFactory implements SchemeFactory {
      public getBossProductDetail_argsStandardScheme getScheme() {
        return new getBossProductDetail_argsStandardScheme();
      }
    }

    private static class getBossProductDetail_argsStandardScheme extends StandardScheme<getBossProductDetail_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getBossProductDetail_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PRODUCT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.productId = iprot.readString();
                struct.setProductIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getBossProductDetail_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.productId != null) {
          oprot.writeFieldBegin(PRODUCT_ID_FIELD_DESC);
          oprot.writeString(struct.productId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getBossProductDetail_argsTupleSchemeFactory implements SchemeFactory {
      public getBossProductDetail_argsTupleScheme getScheme() {
        return new getBossProductDetail_argsTupleScheme();
      }
    }

    private static class getBossProductDetail_argsTupleScheme extends TupleScheme<getBossProductDetail_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getBossProductDetail_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProductId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetProductId()) {
          oprot.writeString(struct.productId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getBossProductDetail_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.productId = iprot.readString();
          struct.setProductIdIsSet(true);
        }
      }
    }

  }

  public static class getBossProductDetail_result implements org.apache.thrift.TBase<getBossProductDetail_result, getBossProductDetail_result._Fields>, java.io.Serializable, Cloneable, Comparable<getBossProductDetail_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBossProductDetail_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getBossProductDetail_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getBossProductDetail_resultTupleSchemeFactory());
    }

    public BossProductDetailVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BossProductDetailVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBossProductDetail_result.class, metaDataMap);
    }

    public getBossProductDetail_result() {
    }

    public getBossProductDetail_result(
      BossProductDetailVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBossProductDetail_result(getBossProductDetail_result other) {
      if (other.isSetSuccess()) {
        this.success = new BossProductDetailVo(other.success);
      }
    }

    public getBossProductDetail_result deepCopy() {
      return new getBossProductDetail_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public BossProductDetailVo getSuccess() {
      return this.success;
    }

    public getBossProductDetail_result setSuccess(BossProductDetailVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((BossProductDetailVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBossProductDetail_result)
        return this.equals((getBossProductDetail_result)that);
      return false;
    }

    public boolean equals(getBossProductDetail_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getBossProductDetail_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getBossProductDetail_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getBossProductDetail_resultStandardSchemeFactory implements SchemeFactory {
      public getBossProductDetail_resultStandardScheme getScheme() {
        return new getBossProductDetail_resultStandardScheme();
      }
    }

    private static class getBossProductDetail_resultStandardScheme extends StandardScheme<getBossProductDetail_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getBossProductDetail_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new BossProductDetailVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getBossProductDetail_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getBossProductDetail_resultTupleSchemeFactory implements SchemeFactory {
      public getBossProductDetail_resultTupleScheme getScheme() {
        return new getBossProductDetail_resultTupleScheme();
      }
    }

    private static class getBossProductDetail_resultTupleScheme extends TupleScheme<getBossProductDetail_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getBossProductDetail_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getBossProductDetail_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new BossProductDetailVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class auditProduct_args implements org.apache.thrift.TBase<auditProduct_args, auditProduct_args._Fields>, java.io.Serializable, Cloneable, Comparable<auditProduct_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("auditProduct_args");

    private static final org.apache.thrift.protocol.TField ORIGIN_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("originVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PROCESS_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("processVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new auditProduct_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new auditProduct_argsTupleSchemeFactory());
    }

    public OriginVo originVo; // required
    public BossAuditProcessVo processVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORIGIN_VO((short)1, "originVo"),
      PROCESS_VO((short)2, "processVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORIGIN_VO
            return ORIGIN_VO;
          case 2: // PROCESS_VO
            return PROCESS_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORIGIN_VO, new org.apache.thrift.meta_data.FieldMetaData("originVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, OriginVo.class)));
      tmpMap.put(_Fields.PROCESS_VO, new org.apache.thrift.meta_data.FieldMetaData("processVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BossAuditProcessVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(auditProduct_args.class, metaDataMap);
    }

    public auditProduct_args() {
    }

    public auditProduct_args(
      OriginVo originVo,
      BossAuditProcessVo processVo)
    {
      this();
      this.originVo = originVo;
      this.processVo = processVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public auditProduct_args(auditProduct_args other) {
      if (other.isSetOriginVo()) {
        this.originVo = new OriginVo(other.originVo);
      }
      if (other.isSetProcessVo()) {
        this.processVo = new BossAuditProcessVo(other.processVo);
      }
    }

    public auditProduct_args deepCopy() {
      return new auditProduct_args(this);
    }

    @Override
    public void clear() {
      this.originVo = null;
      this.processVo = null;
    }

    public OriginVo getOriginVo() {
      return this.originVo;
    }

    public auditProduct_args setOriginVo(OriginVo originVo) {
      this.originVo = originVo;
      return this;
    }

    public void unsetOriginVo() {
      this.originVo = null;
    }

    /** Returns true if field originVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginVo() {
      return this.originVo != null;
    }

    public void setOriginVoIsSet(boolean value) {
      if (!value) {
        this.originVo = null;
      }
    }

    public BossAuditProcessVo getProcessVo() {
      return this.processVo;
    }

    public auditProduct_args setProcessVo(BossAuditProcessVo processVo) {
      this.processVo = processVo;
      return this;
    }

    public void unsetProcessVo() {
      this.processVo = null;
    }

    /** Returns true if field processVo is set (has been assigned a value) and false otherwise */
    public boolean isSetProcessVo() {
      return this.processVo != null;
    }

    public void setProcessVoIsSet(boolean value) {
      if (!value) {
        this.processVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORIGIN_VO:
        if (value == null) {
          unsetOriginVo();
        } else {
          setOriginVo((OriginVo)value);
        }
        break;

      case PROCESS_VO:
        if (value == null) {
          unsetProcessVo();
        } else {
          setProcessVo((BossAuditProcessVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORIGIN_VO:
        return getOriginVo();

      case PROCESS_VO:
        return getProcessVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORIGIN_VO:
        return isSetOriginVo();
      case PROCESS_VO:
        return isSetProcessVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof auditProduct_args)
        return this.equals((auditProduct_args)that);
      return false;
    }

    public boolean equals(auditProduct_args that) {
      if (that == null)
        return false;

      boolean this_present_originVo = true && this.isSetOriginVo();
      boolean that_present_originVo = true && that.isSetOriginVo();
      if (this_present_originVo || that_present_originVo) {
        if (!(this_present_originVo && that_present_originVo))
          return false;
        if (!this.originVo.equals(that.originVo))
          return false;
      }

      boolean this_present_processVo = true && this.isSetProcessVo();
      boolean that_present_processVo = true && that.isSetProcessVo();
      if (this_present_processVo || that_present_processVo) {
        if (!(this_present_processVo && that_present_processVo))
          return false;
        if (!this.processVo.equals(that.processVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_originVo = true && (isSetOriginVo());
      list.add(present_originVo);
      if (present_originVo)
        list.add(originVo);

      boolean present_processVo = true && (isSetProcessVo());
      list.add(present_processVo);
      if (present_processVo)
        list.add(processVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(auditProduct_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOriginVo()).compareTo(other.isSetOriginVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originVo, other.originVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetProcessVo()).compareTo(other.isSetProcessVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProcessVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.processVo, other.processVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("auditProduct_args(");
      boolean first = true;

      sb.append("originVo:");
      if (this.originVo == null) {
        sb.append("null");
      } else {
        sb.append(this.originVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("processVo:");
      if (this.processVo == null) {
        sb.append("null");
      } else {
        sb.append(this.processVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (originVo != null) {
        originVo.validate();
      }
      if (processVo != null) {
        processVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class auditProduct_argsStandardSchemeFactory implements SchemeFactory {
      public auditProduct_argsStandardScheme getScheme() {
        return new auditProduct_argsStandardScheme();
      }
    }

    private static class auditProduct_argsStandardScheme extends StandardScheme<auditProduct_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, auditProduct_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORIGIN_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.originVo = new OriginVo();
                struct.originVo.read(iprot);
                struct.setOriginVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PROCESS_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.processVo = new BossAuditProcessVo();
                struct.processVo.read(iprot);
                struct.setProcessVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, auditProduct_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.originVo != null) {
          oprot.writeFieldBegin(ORIGIN_VO_FIELD_DESC);
          struct.originVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.processVo != null) {
          oprot.writeFieldBegin(PROCESS_VO_FIELD_DESC);
          struct.processVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class auditProduct_argsTupleSchemeFactory implements SchemeFactory {
      public auditProduct_argsTupleScheme getScheme() {
        return new auditProduct_argsTupleScheme();
      }
    }

    private static class auditProduct_argsTupleScheme extends TupleScheme<auditProduct_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, auditProduct_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOriginVo()) {
          optionals.set(0);
        }
        if (struct.isSetProcessVo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOriginVo()) {
          struct.originVo.write(oprot);
        }
        if (struct.isSetProcessVo()) {
          struct.processVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, auditProduct_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.originVo = new OriginVo();
          struct.originVo.read(iprot);
          struct.setOriginVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.processVo = new BossAuditProcessVo();
          struct.processVo.read(iprot);
          struct.setProcessVoIsSet(true);
        }
      }
    }

  }

  public static class auditProduct_result implements org.apache.thrift.TBase<auditProduct_result, auditProduct_result._Fields>, java.io.Serializable, Cloneable, Comparable<auditProduct_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("auditProduct_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new auditProduct_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new auditProduct_resultTupleSchemeFactory());
    }

    public ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(auditProduct_result.class, metaDataMap);
    }

    public auditProduct_result() {
    }

    public auditProduct_result(
      ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public auditProduct_result(auditProduct_result other) {
      if (other.isSetSuccess()) {
        this.success = new ResultVo(other.success);
      }
    }

    public auditProduct_result deepCopy() {
      return new auditProduct_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ResultVo getSuccess() {
      return this.success;
    }

    public auditProduct_result setSuccess(ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof auditProduct_result)
        return this.equals((auditProduct_result)that);
      return false;
    }

    public boolean equals(auditProduct_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(auditProduct_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("auditProduct_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class auditProduct_resultStandardSchemeFactory implements SchemeFactory {
      public auditProduct_resultStandardScheme getScheme() {
        return new auditProduct_resultStandardScheme();
      }
    }

    private static class auditProduct_resultStandardScheme extends StandardScheme<auditProduct_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, auditProduct_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, auditProduct_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class auditProduct_resultTupleSchemeFactory implements SchemeFactory {
      public auditProduct_resultTupleScheme getScheme() {
        return new auditProduct_resultTupleScheme();
      }
    }

    private static class auditProduct_resultTupleScheme extends TupleScheme<auditProduct_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, auditProduct_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, auditProduct_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class findAuditProductsByPage_args implements org.apache.thrift.TBase<findAuditProductsByPage_args, findAuditProductsByPage_args._Fields>, java.io.Serializable, Cloneable, Comparable<findAuditProductsByPage_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findAuditProductsByPage_args");

    private static final org.apache.thrift.protocol.TField PRODUCT_FILTER_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("productFilterVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PAGE_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("pageVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findAuditProductsByPage_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findAuditProductsByPage_argsTupleSchemeFactory());
    }

    public BossProductFilterVo productFilterVo; // required
    public PageVo pageVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PRODUCT_FILTER_VO((short)1, "productFilterVo"),
      PAGE_VO((short)2, "pageVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PRODUCT_FILTER_VO
            return PRODUCT_FILTER_VO;
          case 2: // PAGE_VO
            return PAGE_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PRODUCT_FILTER_VO, new org.apache.thrift.meta_data.FieldMetaData("productFilterVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BossProductFilterVo.class)));
      tmpMap.put(_Fields.PAGE_VO, new org.apache.thrift.meta_data.FieldMetaData("pageVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PageVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findAuditProductsByPage_args.class, metaDataMap);
    }

    public findAuditProductsByPage_args() {
    }

    public findAuditProductsByPage_args(
      BossProductFilterVo productFilterVo,
      PageVo pageVo)
    {
      this();
      this.productFilterVo = productFilterVo;
      this.pageVo = pageVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findAuditProductsByPage_args(findAuditProductsByPage_args other) {
      if (other.isSetProductFilterVo()) {
        this.productFilterVo = new BossProductFilterVo(other.productFilterVo);
      }
      if (other.isSetPageVo()) {
        this.pageVo = new PageVo(other.pageVo);
      }
    }

    public findAuditProductsByPage_args deepCopy() {
      return new findAuditProductsByPage_args(this);
    }

    @Override
    public void clear() {
      this.productFilterVo = null;
      this.pageVo = null;
    }

    public BossProductFilterVo getProductFilterVo() {
      return this.productFilterVo;
    }

    public findAuditProductsByPage_args setProductFilterVo(BossProductFilterVo productFilterVo) {
      this.productFilterVo = productFilterVo;
      return this;
    }

    public void unsetProductFilterVo() {
      this.productFilterVo = null;
    }

    /** Returns true if field productFilterVo is set (has been assigned a value) and false otherwise */
    public boolean isSetProductFilterVo() {
      return this.productFilterVo != null;
    }

    public void setProductFilterVoIsSet(boolean value) {
      if (!value) {
        this.productFilterVo = null;
      }
    }

    public PageVo getPageVo() {
      return this.pageVo;
    }

    public findAuditProductsByPage_args setPageVo(PageVo pageVo) {
      this.pageVo = pageVo;
      return this;
    }

    public void unsetPageVo() {
      this.pageVo = null;
    }

    /** Returns true if field pageVo is set (has been assigned a value) and false otherwise */
    public boolean isSetPageVo() {
      return this.pageVo != null;
    }

    public void setPageVoIsSet(boolean value) {
      if (!value) {
        this.pageVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PRODUCT_FILTER_VO:
        if (value == null) {
          unsetProductFilterVo();
        } else {
          setProductFilterVo((BossProductFilterVo)value);
        }
        break;

      case PAGE_VO:
        if (value == null) {
          unsetPageVo();
        } else {
          setPageVo((PageVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PRODUCT_FILTER_VO:
        return getProductFilterVo();

      case PAGE_VO:
        return getPageVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PRODUCT_FILTER_VO:
        return isSetProductFilterVo();
      case PAGE_VO:
        return isSetPageVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findAuditProductsByPage_args)
        return this.equals((findAuditProductsByPage_args)that);
      return false;
    }

    public boolean equals(findAuditProductsByPage_args that) {
      if (that == null)
        return false;

      boolean this_present_productFilterVo = true && this.isSetProductFilterVo();
      boolean that_present_productFilterVo = true && that.isSetProductFilterVo();
      if (this_present_productFilterVo || that_present_productFilterVo) {
        if (!(this_present_productFilterVo && that_present_productFilterVo))
          return false;
        if (!this.productFilterVo.equals(that.productFilterVo))
          return false;
      }

      boolean this_present_pageVo = true && this.isSetPageVo();
      boolean that_present_pageVo = true && that.isSetPageVo();
      if (this_present_pageVo || that_present_pageVo) {
        if (!(this_present_pageVo && that_present_pageVo))
          return false;
        if (!this.pageVo.equals(that.pageVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_productFilterVo = true && (isSetProductFilterVo());
      list.add(present_productFilterVo);
      if (present_productFilterVo)
        list.add(productFilterVo);

      boolean present_pageVo = true && (isSetPageVo());
      list.add(present_pageVo);
      if (present_pageVo)
        list.add(pageVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(findAuditProductsByPage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProductFilterVo()).compareTo(other.isSetProductFilterVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProductFilterVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productFilterVo, other.productFilterVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageVo()).compareTo(other.isSetPageVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageVo, other.pageVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findAuditProductsByPage_args(");
      boolean first = true;

      sb.append("productFilterVo:");
      if (this.productFilterVo == null) {
        sb.append("null");
      } else {
        sb.append(this.productFilterVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageVo:");
      if (this.pageVo == null) {
        sb.append("null");
      } else {
        sb.append(this.pageVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (productFilterVo != null) {
        productFilterVo.validate();
      }
      if (pageVo != null) {
        pageVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findAuditProductsByPage_argsStandardSchemeFactory implements SchemeFactory {
      public findAuditProductsByPage_argsStandardScheme getScheme() {
        return new findAuditProductsByPage_argsStandardScheme();
      }
    }

    private static class findAuditProductsByPage_argsStandardScheme extends StandardScheme<findAuditProductsByPage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findAuditProductsByPage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PRODUCT_FILTER_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.productFilterVo = new BossProductFilterVo();
                struct.productFilterVo.read(iprot);
                struct.setProductFilterVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PAGE_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.pageVo = new PageVo();
                struct.pageVo.read(iprot);
                struct.setPageVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findAuditProductsByPage_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.productFilterVo != null) {
          oprot.writeFieldBegin(PRODUCT_FILTER_VO_FIELD_DESC);
          struct.productFilterVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.pageVo != null) {
          oprot.writeFieldBegin(PAGE_VO_FIELD_DESC);
          struct.pageVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findAuditProductsByPage_argsTupleSchemeFactory implements SchemeFactory {
      public findAuditProductsByPage_argsTupleScheme getScheme() {
        return new findAuditProductsByPage_argsTupleScheme();
      }
    }

    private static class findAuditProductsByPage_argsTupleScheme extends TupleScheme<findAuditProductsByPage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findAuditProductsByPage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProductFilterVo()) {
          optionals.set(0);
        }
        if (struct.isSetPageVo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetProductFilterVo()) {
          struct.productFilterVo.write(oprot);
        }
        if (struct.isSetPageVo()) {
          struct.pageVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findAuditProductsByPage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.productFilterVo = new BossProductFilterVo();
          struct.productFilterVo.read(iprot);
          struct.setProductFilterVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.pageVo = new PageVo();
          struct.pageVo.read(iprot);
          struct.setPageVoIsSet(true);
        }
      }
    }

  }

  public static class findAuditProductsByPage_result implements org.apache.thrift.TBase<findAuditProductsByPage_result, findAuditProductsByPage_result._Fields>, java.io.Serializable, Cloneable, Comparable<findAuditProductsByPage_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findAuditProductsByPage_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findAuditProductsByPage_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findAuditProductsByPage_resultTupleSchemeFactory());
    }

    public BossProductListPageVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BossProductListPageVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findAuditProductsByPage_result.class, metaDataMap);
    }

    public findAuditProductsByPage_result() {
    }

    public findAuditProductsByPage_result(
      BossProductListPageVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findAuditProductsByPage_result(findAuditProductsByPage_result other) {
      if (other.isSetSuccess()) {
        this.success = new BossProductListPageVo(other.success);
      }
    }

    public findAuditProductsByPage_result deepCopy() {
      return new findAuditProductsByPage_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public BossProductListPageVo getSuccess() {
      return this.success;
    }

    public findAuditProductsByPage_result setSuccess(BossProductListPageVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((BossProductListPageVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findAuditProductsByPage_result)
        return this.equals((findAuditProductsByPage_result)that);
      return false;
    }

    public boolean equals(findAuditProductsByPage_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(findAuditProductsByPage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findAuditProductsByPage_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findAuditProductsByPage_resultStandardSchemeFactory implements SchemeFactory {
      public findAuditProductsByPage_resultStandardScheme getScheme() {
        return new findAuditProductsByPage_resultStandardScheme();
      }
    }

    private static class findAuditProductsByPage_resultStandardScheme extends StandardScheme<findAuditProductsByPage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findAuditProductsByPage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new BossProductListPageVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findAuditProductsByPage_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findAuditProductsByPage_resultTupleSchemeFactory implements SchemeFactory {
      public findAuditProductsByPage_resultTupleScheme getScheme() {
        return new findAuditProductsByPage_resultTupleScheme();
      }
    }

    private static class findAuditProductsByPage_resultTupleScheme extends TupleScheme<findAuditProductsByPage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findAuditProductsByPage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findAuditProductsByPage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new BossProductListPageVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class deleteProduct_args implements org.apache.thrift.TBase<deleteProduct_args, deleteProduct_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteProduct_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteProduct_args");

    private static final org.apache.thrift.protocol.TField ORIGIN_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("originVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PRODUCT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("productId", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteProduct_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteProduct_argsTupleSchemeFactory());
    }

    public OriginVo originVo; // required
    public String productId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORIGIN_VO((short)1, "originVo"),
      PRODUCT_ID((short)2, "productId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORIGIN_VO
            return ORIGIN_VO;
          case 2: // PRODUCT_ID
            return PRODUCT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORIGIN_VO, new org.apache.thrift.meta_data.FieldMetaData("originVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, OriginVo.class)));
      tmpMap.put(_Fields.PRODUCT_ID, new org.apache.thrift.meta_data.FieldMetaData("productId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteProduct_args.class, metaDataMap);
    }

    public deleteProduct_args() {
    }

    public deleteProduct_args(
      OriginVo originVo,
      String productId)
    {
      this();
      this.originVo = originVo;
      this.productId = productId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteProduct_args(deleteProduct_args other) {
      if (other.isSetOriginVo()) {
        this.originVo = new OriginVo(other.originVo);
      }
      if (other.isSetProductId()) {
        this.productId = other.productId;
      }
    }

    public deleteProduct_args deepCopy() {
      return new deleteProduct_args(this);
    }

    @Override
    public void clear() {
      this.originVo = null;
      this.productId = null;
    }

    public OriginVo getOriginVo() {
      return this.originVo;
    }

    public deleteProduct_args setOriginVo(OriginVo originVo) {
      this.originVo = originVo;
      return this;
    }

    public void unsetOriginVo() {
      this.originVo = null;
    }

    /** Returns true if field originVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginVo() {
      return this.originVo != null;
    }

    public void setOriginVoIsSet(boolean value) {
      if (!value) {
        this.originVo = null;
      }
    }

    public String getProductId() {
      return this.productId;
    }

    public deleteProduct_args setProductId(String productId) {
      this.productId = productId;
      return this;
    }

    public void unsetProductId() {
      this.productId = null;
    }

    /** Returns true if field productId is set (has been assigned a value) and false otherwise */
    public boolean isSetProductId() {
      return this.productId != null;
    }

    public void setProductIdIsSet(boolean value) {
      if (!value) {
        this.productId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORIGIN_VO:
        if (value == null) {
          unsetOriginVo();
        } else {
          setOriginVo((OriginVo)value);
        }
        break;

      case PRODUCT_ID:
        if (value == null) {
          unsetProductId();
        } else {
          setProductId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORIGIN_VO:
        return getOriginVo();

      case PRODUCT_ID:
        return getProductId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORIGIN_VO:
        return isSetOriginVo();
      case PRODUCT_ID:
        return isSetProductId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteProduct_args)
        return this.equals((deleteProduct_args)that);
      return false;
    }

    public boolean equals(deleteProduct_args that) {
      if (that == null)
        return false;

      boolean this_present_originVo = true && this.isSetOriginVo();
      boolean that_present_originVo = true && that.isSetOriginVo();
      if (this_present_originVo || that_present_originVo) {
        if (!(this_present_originVo && that_present_originVo))
          return false;
        if (!this.originVo.equals(that.originVo))
          return false;
      }

      boolean this_present_productId = true && this.isSetProductId();
      boolean that_present_productId = true && that.isSetProductId();
      if (this_present_productId || that_present_productId) {
        if (!(this_present_productId && that_present_productId))
          return false;
        if (!this.productId.equals(that.productId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_originVo = true && (isSetOriginVo());
      list.add(present_originVo);
      if (present_originVo)
        list.add(originVo);

      boolean present_productId = true && (isSetProductId());
      list.add(present_productId);
      if (present_productId)
        list.add(productId);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteProduct_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOriginVo()).compareTo(other.isSetOriginVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originVo, other.originVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetProductId()).compareTo(other.isSetProductId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProductId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productId, other.productId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteProduct_args(");
      boolean first = true;

      sb.append("originVo:");
      if (this.originVo == null) {
        sb.append("null");
      } else {
        sb.append(this.originVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("productId:");
      if (this.productId == null) {
        sb.append("null");
      } else {
        sb.append(this.productId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (originVo != null) {
        originVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteProduct_argsStandardSchemeFactory implements SchemeFactory {
      public deleteProduct_argsStandardScheme getScheme() {
        return new deleteProduct_argsStandardScheme();
      }
    }

    private static class deleteProduct_argsStandardScheme extends StandardScheme<deleteProduct_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteProduct_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORIGIN_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.originVo = new OriginVo();
                struct.originVo.read(iprot);
                struct.setOriginVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PRODUCT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.productId = iprot.readString();
                struct.setProductIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteProduct_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.originVo != null) {
          oprot.writeFieldBegin(ORIGIN_VO_FIELD_DESC);
          struct.originVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.productId != null) {
          oprot.writeFieldBegin(PRODUCT_ID_FIELD_DESC);
          oprot.writeString(struct.productId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteProduct_argsTupleSchemeFactory implements SchemeFactory {
      public deleteProduct_argsTupleScheme getScheme() {
        return new deleteProduct_argsTupleScheme();
      }
    }

    private static class deleteProduct_argsTupleScheme extends TupleScheme<deleteProduct_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteProduct_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOriginVo()) {
          optionals.set(0);
        }
        if (struct.isSetProductId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOriginVo()) {
          struct.originVo.write(oprot);
        }
        if (struct.isSetProductId()) {
          oprot.writeString(struct.productId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteProduct_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.originVo = new OriginVo();
          struct.originVo.read(iprot);
          struct.setOriginVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.productId = iprot.readString();
          struct.setProductIdIsSet(true);
        }
      }
    }

  }

  public static class deleteProduct_result implements org.apache.thrift.TBase<deleteProduct_result, deleteProduct_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteProduct_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteProduct_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteProduct_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteProduct_resultTupleSchemeFactory());
    }

    public ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteProduct_result.class, metaDataMap);
    }

    public deleteProduct_result() {
    }

    public deleteProduct_result(
      ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteProduct_result(deleteProduct_result other) {
      if (other.isSetSuccess()) {
        this.success = new ResultVo(other.success);
      }
    }

    public deleteProduct_result deepCopy() {
      return new deleteProduct_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ResultVo getSuccess() {
      return this.success;
    }

    public deleteProduct_result setSuccess(ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteProduct_result)
        return this.equals((deleteProduct_result)that);
      return false;
    }

    public boolean equals(deleteProduct_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteProduct_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteProduct_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteProduct_resultStandardSchemeFactory implements SchemeFactory {
      public deleteProduct_resultStandardScheme getScheme() {
        return new deleteProduct_resultStandardScheme();
      }
    }

    private static class deleteProduct_resultStandardScheme extends StandardScheme<deleteProduct_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteProduct_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteProduct_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteProduct_resultTupleSchemeFactory implements SchemeFactory {
      public deleteProduct_resultTupleScheme getScheme() {
        return new deleteProduct_resultTupleScheme();
      }
    }

    private static class deleteProduct_resultTupleScheme extends TupleScheme<deleteProduct_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteProduct_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteProduct_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateProductStatus_args implements org.apache.thrift.TBase<updateProductStatus_args, updateProductStatus_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateProductStatus_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateProductStatus_args");

    private static final org.apache.thrift.protocol.TField ORIGIN_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("originVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PRODUCT_STATUS_VO_REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("productStatusVoReq", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateProductStatus_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateProductStatus_argsTupleSchemeFactory());
    }

    public OriginVo originVo; // required
    public BossProductStatusVoReq productStatusVoReq; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORIGIN_VO((short)1, "originVo"),
      PRODUCT_STATUS_VO_REQ((short)2, "productStatusVoReq");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORIGIN_VO
            return ORIGIN_VO;
          case 2: // PRODUCT_STATUS_VO_REQ
            return PRODUCT_STATUS_VO_REQ;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORIGIN_VO, new org.apache.thrift.meta_data.FieldMetaData("originVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, OriginVo.class)));
      tmpMap.put(_Fields.PRODUCT_STATUS_VO_REQ, new org.apache.thrift.meta_data.FieldMetaData("productStatusVoReq", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BossProductStatusVoReq.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateProductStatus_args.class, metaDataMap);
    }

    public updateProductStatus_args() {
    }

    public updateProductStatus_args(
      OriginVo originVo,
      BossProductStatusVoReq productStatusVoReq)
    {
      this();
      this.originVo = originVo;
      this.productStatusVoReq = productStatusVoReq;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateProductStatus_args(updateProductStatus_args other) {
      if (other.isSetOriginVo()) {
        this.originVo = new OriginVo(other.originVo);
      }
      if (other.isSetProductStatusVoReq()) {
        this.productStatusVoReq = new BossProductStatusVoReq(other.productStatusVoReq);
      }
    }

    public updateProductStatus_args deepCopy() {
      return new updateProductStatus_args(this);
    }

    @Override
    public void clear() {
      this.originVo = null;
      this.productStatusVoReq = null;
    }

    public OriginVo getOriginVo() {
      return this.originVo;
    }

    public updateProductStatus_args setOriginVo(OriginVo originVo) {
      this.originVo = originVo;
      return this;
    }

    public void unsetOriginVo() {
      this.originVo = null;
    }

    /** Returns true if field originVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginVo() {
      return this.originVo != null;
    }

    public void setOriginVoIsSet(boolean value) {
      if (!value) {
        this.originVo = null;
      }
    }

    public BossProductStatusVoReq getProductStatusVoReq() {
      return this.productStatusVoReq;
    }

    public updateProductStatus_args setProductStatusVoReq(BossProductStatusVoReq productStatusVoReq) {
      this.productStatusVoReq = productStatusVoReq;
      return this;
    }

    public void unsetProductStatusVoReq() {
      this.productStatusVoReq = null;
    }

    /** Returns true if field productStatusVoReq is set (has been assigned a value) and false otherwise */
    public boolean isSetProductStatusVoReq() {
      return this.productStatusVoReq != null;
    }

    public void setProductStatusVoReqIsSet(boolean value) {
      if (!value) {
        this.productStatusVoReq = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORIGIN_VO:
        if (value == null) {
          unsetOriginVo();
        } else {
          setOriginVo((OriginVo)value);
        }
        break;

      case PRODUCT_STATUS_VO_REQ:
        if (value == null) {
          unsetProductStatusVoReq();
        } else {
          setProductStatusVoReq((BossProductStatusVoReq)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORIGIN_VO:
        return getOriginVo();

      case PRODUCT_STATUS_VO_REQ:
        return getProductStatusVoReq();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORIGIN_VO:
        return isSetOriginVo();
      case PRODUCT_STATUS_VO_REQ:
        return isSetProductStatusVoReq();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateProductStatus_args)
        return this.equals((updateProductStatus_args)that);
      return false;
    }

    public boolean equals(updateProductStatus_args that) {
      if (that == null)
        return false;

      boolean this_present_originVo = true && this.isSetOriginVo();
      boolean that_present_originVo = true && that.isSetOriginVo();
      if (this_present_originVo || that_present_originVo) {
        if (!(this_present_originVo && that_present_originVo))
          return false;
        if (!this.originVo.equals(that.originVo))
          return false;
      }

      boolean this_present_productStatusVoReq = true && this.isSetProductStatusVoReq();
      boolean that_present_productStatusVoReq = true && that.isSetProductStatusVoReq();
      if (this_present_productStatusVoReq || that_present_productStatusVoReq) {
        if (!(this_present_productStatusVoReq && that_present_productStatusVoReq))
          return false;
        if (!this.productStatusVoReq.equals(that.productStatusVoReq))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_originVo = true && (isSetOriginVo());
      list.add(present_originVo);
      if (present_originVo)
        list.add(originVo);

      boolean present_productStatusVoReq = true && (isSetProductStatusVoReq());
      list.add(present_productStatusVoReq);
      if (present_productStatusVoReq)
        list.add(productStatusVoReq);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateProductStatus_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOriginVo()).compareTo(other.isSetOriginVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originVo, other.originVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetProductStatusVoReq()).compareTo(other.isSetProductStatusVoReq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProductStatusVoReq()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productStatusVoReq, other.productStatusVoReq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateProductStatus_args(");
      boolean first = true;

      sb.append("originVo:");
      if (this.originVo == null) {
        sb.append("null");
      } else {
        sb.append(this.originVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("productStatusVoReq:");
      if (this.productStatusVoReq == null) {
        sb.append("null");
      } else {
        sb.append(this.productStatusVoReq);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (originVo != null) {
        originVo.validate();
      }
      if (productStatusVoReq != null) {
        productStatusVoReq.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateProductStatus_argsStandardSchemeFactory implements SchemeFactory {
      public updateProductStatus_argsStandardScheme getScheme() {
        return new updateProductStatus_argsStandardScheme();
      }
    }

    private static class updateProductStatus_argsStandardScheme extends StandardScheme<updateProductStatus_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateProductStatus_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORIGIN_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.originVo = new OriginVo();
                struct.originVo.read(iprot);
                struct.setOriginVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PRODUCT_STATUS_VO_REQ
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.productStatusVoReq = new BossProductStatusVoReq();
                struct.productStatusVoReq.read(iprot);
                struct.setProductStatusVoReqIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateProductStatus_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.originVo != null) {
          oprot.writeFieldBegin(ORIGIN_VO_FIELD_DESC);
          struct.originVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.productStatusVoReq != null) {
          oprot.writeFieldBegin(PRODUCT_STATUS_VO_REQ_FIELD_DESC);
          struct.productStatusVoReq.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateProductStatus_argsTupleSchemeFactory implements SchemeFactory {
      public updateProductStatus_argsTupleScheme getScheme() {
        return new updateProductStatus_argsTupleScheme();
      }
    }

    private static class updateProductStatus_argsTupleScheme extends TupleScheme<updateProductStatus_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateProductStatus_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOriginVo()) {
          optionals.set(0);
        }
        if (struct.isSetProductStatusVoReq()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOriginVo()) {
          struct.originVo.write(oprot);
        }
        if (struct.isSetProductStatusVoReq()) {
          struct.productStatusVoReq.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateProductStatus_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.originVo = new OriginVo();
          struct.originVo.read(iprot);
          struct.setOriginVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.productStatusVoReq = new BossProductStatusVoReq();
          struct.productStatusVoReq.read(iprot);
          struct.setProductStatusVoReqIsSet(true);
        }
      }
    }

  }

  public static class updateProductStatus_result implements org.apache.thrift.TBase<updateProductStatus_result, updateProductStatus_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateProductStatus_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateProductStatus_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateProductStatus_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateProductStatus_resultTupleSchemeFactory());
    }

    public ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateProductStatus_result.class, metaDataMap);
    }

    public updateProductStatus_result() {
    }

    public updateProductStatus_result(
      ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateProductStatus_result(updateProductStatus_result other) {
      if (other.isSetSuccess()) {
        this.success = new ResultVo(other.success);
      }
    }

    public updateProductStatus_result deepCopy() {
      return new updateProductStatus_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ResultVo getSuccess() {
      return this.success;
    }

    public updateProductStatus_result setSuccess(ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateProductStatus_result)
        return this.equals((updateProductStatus_result)that);
      return false;
    }

    public boolean equals(updateProductStatus_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateProductStatus_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateProductStatus_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateProductStatus_resultStandardSchemeFactory implements SchemeFactory {
      public updateProductStatus_resultStandardScheme getScheme() {
        return new updateProductStatus_resultStandardScheme();
      }
    }

    private static class updateProductStatus_resultStandardScheme extends StandardScheme<updateProductStatus_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateProductStatus_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateProductStatus_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateProductStatus_resultTupleSchemeFactory implements SchemeFactory {
      public updateProductStatus_resultTupleScheme getScheme() {
        return new updateProductStatus_resultTupleScheme();
      }
    }

    private static class updateProductStatus_resultTupleScheme extends TupleScheme<updateProductStatus_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateProductStatus_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateProductStatus_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getVipProducts_args implements org.apache.thrift.TBase<getVipProducts_args, getVipProducts_args._Fields>, java.io.Serializable, Cloneable, Comparable<getVipProducts_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getVipProducts_args");

    private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getVipProducts_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getVipProducts_argsTupleSchemeFactory());
    }

    public String clientId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CLIENT_ID((short)1, "clientId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CLIENT_ID
            return CLIENT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getVipProducts_args.class, metaDataMap);
    }

    public getVipProducts_args() {
    }

    public getVipProducts_args(
      String clientId)
    {
      this();
      this.clientId = clientId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getVipProducts_args(getVipProducts_args other) {
      if (other.isSetClientId()) {
        this.clientId = other.clientId;
      }
    }

    public getVipProducts_args deepCopy() {
      return new getVipProducts_args(this);
    }

    @Override
    public void clear() {
      this.clientId = null;
    }

    public String getClientId() {
      return this.clientId;
    }

    public getVipProducts_args setClientId(String clientId) {
      this.clientId = clientId;
      return this;
    }

    public void unsetClientId() {
      this.clientId = null;
    }

    /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
    public boolean isSetClientId() {
      return this.clientId != null;
    }

    public void setClientIdIsSet(boolean value) {
      if (!value) {
        this.clientId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CLIENT_ID:
        if (value == null) {
          unsetClientId();
        } else {
          setClientId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CLIENT_ID:
        return getClientId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CLIENT_ID:
        return isSetClientId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getVipProducts_args)
        return this.equals((getVipProducts_args)that);
      return false;
    }

    public boolean equals(getVipProducts_args that) {
      if (that == null)
        return false;

      boolean this_present_clientId = true && this.isSetClientId();
      boolean that_present_clientId = true && that.isSetClientId();
      if (this_present_clientId || that_present_clientId) {
        if (!(this_present_clientId && that_present_clientId))
          return false;
        if (!this.clientId.equals(that.clientId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_clientId = true && (isSetClientId());
      list.add(present_clientId);
      if (present_clientId)
        list.add(clientId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getVipProducts_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getVipProducts_args(");
      boolean first = true;

      sb.append("clientId:");
      if (this.clientId == null) {
        sb.append("null");
      } else {
        sb.append(this.clientId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getVipProducts_argsStandardSchemeFactory implements SchemeFactory {
      public getVipProducts_argsStandardScheme getScheme() {
        return new getVipProducts_argsStandardScheme();
      }
    }

    private static class getVipProducts_argsStandardScheme extends StandardScheme<getVipProducts_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getVipProducts_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CLIENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clientId = iprot.readString();
                struct.setClientIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getVipProducts_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.clientId != null) {
          oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
          oprot.writeString(struct.clientId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getVipProducts_argsTupleSchemeFactory implements SchemeFactory {
      public getVipProducts_argsTupleScheme getScheme() {
        return new getVipProducts_argsTupleScheme();
      }
    }

    private static class getVipProducts_argsTupleScheme extends TupleScheme<getVipProducts_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getVipProducts_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetClientId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetClientId()) {
          oprot.writeString(struct.clientId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getVipProducts_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.clientId = iprot.readString();
          struct.setClientIdIsSet(true);
        }
      }
    }

  }

  public static class getVipProducts_result implements org.apache.thrift.TBase<getVipProducts_result, getVipProducts_result._Fields>, java.io.Serializable, Cloneable, Comparable<getVipProducts_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getVipProducts_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getVipProducts_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getVipProducts_resultTupleSchemeFactory());
    }

    public List<VipProductVo> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, VipProductVo.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getVipProducts_result.class, metaDataMap);
    }

    public getVipProducts_result() {
    }

    public getVipProducts_result(
      List<VipProductVo> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getVipProducts_result(getVipProducts_result other) {
      if (other.isSetSuccess()) {
        List<VipProductVo> __this__success = new ArrayList<VipProductVo>(other.success.size());
        for (VipProductVo other_element : other.success) {
          __this__success.add(new VipProductVo(other_element));
        }
        this.success = __this__success;
      }
    }

    public getVipProducts_result deepCopy() {
      return new getVipProducts_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<VipProductVo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(VipProductVo elem) {
      if (this.success == null) {
        this.success = new ArrayList<VipProductVo>();
      }
      this.success.add(elem);
    }

    public List<VipProductVo> getSuccess() {
      return this.success;
    }

    public getVipProducts_result setSuccess(List<VipProductVo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<VipProductVo>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getVipProducts_result)
        return this.equals((getVipProducts_result)that);
      return false;
    }

    public boolean equals(getVipProducts_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getVipProducts_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getVipProducts_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getVipProducts_resultStandardSchemeFactory implements SchemeFactory {
      public getVipProducts_resultStandardScheme getScheme() {
        return new getVipProducts_resultStandardScheme();
      }
    }

    private static class getVipProducts_resultStandardScheme extends StandardScheme<getVipProducts_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getVipProducts_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list56 = iprot.readListBegin();
                  struct.success = new ArrayList<VipProductVo>(_list56.size);
                  VipProductVo _elem57;
                  for (int _i58 = 0; _i58 < _list56.size; ++_i58)
                  {
                    _elem57 = new VipProductVo();
                    _elem57.read(iprot);
                    struct.success.add(_elem57);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getVipProducts_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (VipProductVo _iter59 : struct.success)
            {
              _iter59.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getVipProducts_resultTupleSchemeFactory implements SchemeFactory {
      public getVipProducts_resultTupleScheme getScheme() {
        return new getVipProducts_resultTupleScheme();
      }
    }

    private static class getVipProducts_resultTupleScheme extends TupleScheme<getVipProducts_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getVipProducts_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (VipProductVo _iter60 : struct.success)
            {
              _iter60.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getVipProducts_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list61 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<VipProductVo>(_list61.size);
            VipProductVo _elem62;
            for (int _i63 = 0; _i63 < _list61.size; ++_i63)
            {
              _elem62 = new VipProductVo();
              _elem62.read(iprot);
              struct.success.add(_elem62);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
