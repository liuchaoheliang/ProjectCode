/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.vo;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-3-27")
public class UserVo implements org.apache.thrift.TBase<UserVo, UserVo._Fields>, java.io.Serializable, Cloneable, Comparable<UserVo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UserVo");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField AGE_FIELD_DESC = new org.apache.thrift.protocol.TField("age", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField SEX_FIELD_DESC = new org.apache.thrift.protocol.TField("sex", org.apache.thrift.protocol.TType.BOOL, (short)4);
  private static final org.apache.thrift.protocol.TField SUB_NODE_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("subNodeList", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField SUB_NODE_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("subNodeSet", org.apache.thrift.protocol.TType.SET, (short)6);
  private static final org.apache.thrift.protocol.TField SUB_NODE_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("subNodeMap", org.apache.thrift.protocol.TType.MAP, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new UserVoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new UserVoTupleSchemeFactory());
  }

  public int id; // required
  public String name; // required
  public int age; // required
  public boolean sex; // required
  public List<String> subNodeList; // required
  public Set<Integer> subNodeSet; // required
  public Map<Integer,String> subNodeMap; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    NAME((short)2, "name"),
    AGE((short)3, "age"),
    SEX((short)4, "sex"),
    SUB_NODE_LIST((short)5, "subNodeList"),
    SUB_NODE_SET((short)6, "subNodeSet"),
    SUB_NODE_MAP((short)7, "subNodeMap");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // NAME
          return NAME;
        case 3: // AGE
          return AGE;
        case 4: // SEX
          return SEX;
        case 5: // SUB_NODE_LIST
          return SUB_NODE_LIST;
        case 6: // SUB_NODE_SET
          return SUB_NODE_SET;
        case 7: // SUB_NODE_MAP
          return SUB_NODE_MAP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __AGE_ISSET_ID = 1;
  private static final int __SEX_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AGE, new org.apache.thrift.meta_data.FieldMetaData("age", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SEX, new org.apache.thrift.meta_data.FieldMetaData("sex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.SUB_NODE_LIST, new org.apache.thrift.meta_data.FieldMetaData("subNodeList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.SUB_NODE_SET, new org.apache.thrift.meta_data.FieldMetaData("subNodeSet", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.SUB_NODE_MAP, new org.apache.thrift.meta_data.FieldMetaData("subNodeMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UserVo.class, metaDataMap);
  }

  public UserVo() {
  }

  public UserVo(
    int id,
    String name,
    int age,
    boolean sex,
    List<String> subNodeList,
    Set<Integer> subNodeSet,
    Map<Integer,String> subNodeMap)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.name = name;
    this.age = age;
    setAgeIsSet(true);
    this.sex = sex;
    setSexIsSet(true);
    this.subNodeList = subNodeList;
    this.subNodeSet = subNodeSet;
    this.subNodeMap = subNodeMap;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public UserVo(UserVo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetName()) {
      this.name = other.name;
    }
    this.age = other.age;
    this.sex = other.sex;
    if (other.isSetSubNodeList()) {
      List<String> __this__subNodeList = new ArrayList<String>(other.subNodeList);
      this.subNodeList = __this__subNodeList;
    }
    if (other.isSetSubNodeSet()) {
      Set<Integer> __this__subNodeSet = new HashSet<Integer>(other.subNodeSet);
      this.subNodeSet = __this__subNodeSet;
    }
    if (other.isSetSubNodeMap()) {
      Map<Integer,String> __this__subNodeMap = new HashMap<Integer,String>(other.subNodeMap);
      this.subNodeMap = __this__subNodeMap;
    }
  }

  public UserVo deepCopy() {
    return new UserVo(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.name = null;
    setAgeIsSet(false);
    this.age = 0;
    setSexIsSet(false);
    this.sex = false;
    this.subNodeList = null;
    this.subNodeSet = null;
    this.subNodeMap = null;
  }

  public int getId() {
    return this.id;
  }

  public UserVo setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public String getName() {
    return this.name;
  }

  public UserVo setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public int getAge() {
    return this.age;
  }

  public UserVo setAge(int age) {
    this.age = age;
    setAgeIsSet(true);
    return this;
  }

  public void unsetAge() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AGE_ISSET_ID);
  }

  /** Returns true if field age is set (has been assigned a value) and false otherwise */
  public boolean isSetAge() {
    return EncodingUtils.testBit(__isset_bitfield, __AGE_ISSET_ID);
  }

  public void setAgeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AGE_ISSET_ID, value);
  }

  public boolean isSex() {
    return this.sex;
  }

  public UserVo setSex(boolean sex) {
    this.sex = sex;
    setSexIsSet(true);
    return this;
  }

  public void unsetSex() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SEX_ISSET_ID);
  }

  /** Returns true if field sex is set (has been assigned a value) and false otherwise */
  public boolean isSetSex() {
    return EncodingUtils.testBit(__isset_bitfield, __SEX_ISSET_ID);
  }

  public void setSexIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SEX_ISSET_ID, value);
  }

  public int getSubNodeListSize() {
    return (this.subNodeList == null) ? 0 : this.subNodeList.size();
  }

  public java.util.Iterator<String> getSubNodeListIterator() {
    return (this.subNodeList == null) ? null : this.subNodeList.iterator();
  }

  public void addToSubNodeList(String elem) {
    if (this.subNodeList == null) {
      this.subNodeList = new ArrayList<String>();
    }
    this.subNodeList.add(elem);
  }

  public List<String> getSubNodeList() {
    return this.subNodeList;
  }

  public UserVo setSubNodeList(List<String> subNodeList) {
    this.subNodeList = subNodeList;
    return this;
  }

  public void unsetSubNodeList() {
    this.subNodeList = null;
  }

  /** Returns true if field subNodeList is set (has been assigned a value) and false otherwise */
  public boolean isSetSubNodeList() {
    return this.subNodeList != null;
  }

  public void setSubNodeListIsSet(boolean value) {
    if (!value) {
      this.subNodeList = null;
    }
  }

  public int getSubNodeSetSize() {
    return (this.subNodeSet == null) ? 0 : this.subNodeSet.size();
  }

  public java.util.Iterator<Integer> getSubNodeSetIterator() {
    return (this.subNodeSet == null) ? null : this.subNodeSet.iterator();
  }

  public void addToSubNodeSet(int elem) {
    if (this.subNodeSet == null) {
      this.subNodeSet = new HashSet<Integer>();
    }
    this.subNodeSet.add(elem);
  }

  public Set<Integer> getSubNodeSet() {
    return this.subNodeSet;
  }

  public UserVo setSubNodeSet(Set<Integer> subNodeSet) {
    this.subNodeSet = subNodeSet;
    return this;
  }

  public void unsetSubNodeSet() {
    this.subNodeSet = null;
  }

  /** Returns true if field subNodeSet is set (has been assigned a value) and false otherwise */
  public boolean isSetSubNodeSet() {
    return this.subNodeSet != null;
  }

  public void setSubNodeSetIsSet(boolean value) {
    if (!value) {
      this.subNodeSet = null;
    }
  }

  public int getSubNodeMapSize() {
    return (this.subNodeMap == null) ? 0 : this.subNodeMap.size();
  }

  public void putToSubNodeMap(int key, String val) {
    if (this.subNodeMap == null) {
      this.subNodeMap = new HashMap<Integer,String>();
    }
    this.subNodeMap.put(key, val);
  }

  public Map<Integer,String> getSubNodeMap() {
    return this.subNodeMap;
  }

  public UserVo setSubNodeMap(Map<Integer,String> subNodeMap) {
    this.subNodeMap = subNodeMap;
    return this;
  }

  public void unsetSubNodeMap() {
    this.subNodeMap = null;
  }

  /** Returns true if field subNodeMap is set (has been assigned a value) and false otherwise */
  public boolean isSetSubNodeMap() {
    return this.subNodeMap != null;
  }

  public void setSubNodeMapIsSet(boolean value) {
    if (!value) {
      this.subNodeMap = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case AGE:
      if (value == null) {
        unsetAge();
      } else {
        setAge((Integer)value);
      }
      break;

    case SEX:
      if (value == null) {
        unsetSex();
      } else {
        setSex((Boolean)value);
      }
      break;

    case SUB_NODE_LIST:
      if (value == null) {
        unsetSubNodeList();
      } else {
        setSubNodeList((List<String>)value);
      }
      break;

    case SUB_NODE_SET:
      if (value == null) {
        unsetSubNodeSet();
      } else {
        setSubNodeSet((Set<Integer>)value);
      }
      break;

    case SUB_NODE_MAP:
      if (value == null) {
        unsetSubNodeMap();
      } else {
        setSubNodeMap((Map<Integer,String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Integer.valueOf(getId());

    case NAME:
      return getName();

    case AGE:
      return Integer.valueOf(getAge());

    case SEX:
      return Boolean.valueOf(isSex());

    case SUB_NODE_LIST:
      return getSubNodeList();

    case SUB_NODE_SET:
      return getSubNodeSet();

    case SUB_NODE_MAP:
      return getSubNodeMap();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case NAME:
      return isSetName();
    case AGE:
      return isSetAge();
    case SEX:
      return isSetSex();
    case SUB_NODE_LIST:
      return isSetSubNodeList();
    case SUB_NODE_SET:
      return isSetSubNodeSet();
    case SUB_NODE_MAP:
      return isSetSubNodeMap();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof UserVo)
      return this.equals((UserVo)that);
    return false;
  }

  public boolean equals(UserVo that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_age = true;
    boolean that_present_age = true;
    if (this_present_age || that_present_age) {
      if (!(this_present_age && that_present_age))
        return false;
      if (this.age != that.age)
        return false;
    }

    boolean this_present_sex = true;
    boolean that_present_sex = true;
    if (this_present_sex || that_present_sex) {
      if (!(this_present_sex && that_present_sex))
        return false;
      if (this.sex != that.sex)
        return false;
    }

    boolean this_present_subNodeList = true && this.isSetSubNodeList();
    boolean that_present_subNodeList = true && that.isSetSubNodeList();
    if (this_present_subNodeList || that_present_subNodeList) {
      if (!(this_present_subNodeList && that_present_subNodeList))
        return false;
      if (!this.subNodeList.equals(that.subNodeList))
        return false;
    }

    boolean this_present_subNodeSet = true && this.isSetSubNodeSet();
    boolean that_present_subNodeSet = true && that.isSetSubNodeSet();
    if (this_present_subNodeSet || that_present_subNodeSet) {
      if (!(this_present_subNodeSet && that_present_subNodeSet))
        return false;
      if (!this.subNodeSet.equals(that.subNodeSet))
        return false;
    }

    boolean this_present_subNodeMap = true && this.isSetSubNodeMap();
    boolean that_present_subNodeMap = true && that.isSetSubNodeMap();
    if (this_present_subNodeMap || that_present_subNodeMap) {
      if (!(this_present_subNodeMap && that_present_subNodeMap))
        return false;
      if (!this.subNodeMap.equals(that.subNodeMap))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true;
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_name = true && (isSetName());
    list.add(present_name);
    if (present_name)
      list.add(name);

    boolean present_age = true;
    list.add(present_age);
    if (present_age)
      list.add(age);

    boolean present_sex = true;
    list.add(present_sex);
    if (present_sex)
      list.add(sex);

    boolean present_subNodeList = true && (isSetSubNodeList());
    list.add(present_subNodeList);
    if (present_subNodeList)
      list.add(subNodeList);

    boolean present_subNodeSet = true && (isSetSubNodeSet());
    list.add(present_subNodeSet);
    if (present_subNodeSet)
      list.add(subNodeSet);

    boolean present_subNodeMap = true && (isSetSubNodeMap());
    list.add(present_subNodeMap);
    if (present_subNodeMap)
      list.add(subNodeMap);

    return list.hashCode();
  }

  @Override
  public int compareTo(UserVo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAge()).compareTo(other.isSetAge());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAge()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.age, other.age);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSex()).compareTo(other.isSetSex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSex()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sex, other.sex);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubNodeList()).compareTo(other.isSetSubNodeList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubNodeList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subNodeList, other.subNodeList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubNodeSet()).compareTo(other.isSetSubNodeSet());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubNodeSet()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subNodeSet, other.subNodeSet);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubNodeMap()).compareTo(other.isSetSubNodeMap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubNodeMap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subNodeMap, other.subNodeMap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("UserVo(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("age:");
    sb.append(this.age);
    first = false;
    if (!first) sb.append(", ");
    sb.append("sex:");
    sb.append(this.sex);
    first = false;
    if (!first) sb.append(", ");
    sb.append("subNodeList:");
    if (this.subNodeList == null) {
      sb.append("null");
    } else {
      sb.append(this.subNodeList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("subNodeSet:");
    if (this.subNodeSet == null) {
      sb.append("null");
    } else {
      sb.append(this.subNodeSet);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("subNodeMap:");
    if (this.subNodeMap == null) {
      sb.append("null");
    } else {
      sb.append(this.subNodeMap);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class UserVoStandardSchemeFactory implements SchemeFactory {
    public UserVoStandardScheme getScheme() {
      return new UserVoStandardScheme();
    }
  }

  private static class UserVoStandardScheme extends StandardScheme<UserVo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, UserVo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // AGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.age = iprot.readI32();
              struct.setAgeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SEX
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.sex = iprot.readBool();
              struct.setSexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SUB_NODE_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.subNodeList = new ArrayList<String>(_list0.size);
                String _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = iprot.readString();
                  struct.subNodeList.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setSubNodeListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SUB_NODE_SET
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set3 = iprot.readSetBegin();
                struct.subNodeSet = new HashSet<Integer>(2*_set3.size);
                int _elem4;
                for (int _i5 = 0; _i5 < _set3.size; ++_i5)
                {
                  _elem4 = iprot.readI32();
                  struct.subNodeSet.add(_elem4);
                }
                iprot.readSetEnd();
              }
              struct.setSubNodeSetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SUB_NODE_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map6 = iprot.readMapBegin();
                struct.subNodeMap = new HashMap<Integer,String>(2*_map6.size);
                int _key7;
                String _val8;
                for (int _i9 = 0; _i9 < _map6.size; ++_i9)
                {
                  _key7 = iprot.readI32();
                  _val8 = iprot.readString();
                  struct.subNodeMap.put(_key7, _val8);
                }
                iprot.readMapEnd();
              }
              struct.setSubNodeMapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, UserVo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.id);
      oprot.writeFieldEnd();
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(AGE_FIELD_DESC);
      oprot.writeI32(struct.age);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SEX_FIELD_DESC);
      oprot.writeBool(struct.sex);
      oprot.writeFieldEnd();
      if (struct.subNodeList != null) {
        oprot.writeFieldBegin(SUB_NODE_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.subNodeList.size()));
          for (String _iter10 : struct.subNodeList)
          {
            oprot.writeString(_iter10);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.subNodeSet != null) {
        oprot.writeFieldBegin(SUB_NODE_SET_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, struct.subNodeSet.size()));
          for (int _iter11 : struct.subNodeSet)
          {
            oprot.writeI32(_iter11);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.subNodeMap != null) {
        oprot.writeFieldBegin(SUB_NODE_MAP_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRING, struct.subNodeMap.size()));
          for (Map.Entry<Integer, String> _iter12 : struct.subNodeMap.entrySet())
          {
            oprot.writeI32(_iter12.getKey());
            oprot.writeString(_iter12.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class UserVoTupleSchemeFactory implements SchemeFactory {
    public UserVoTupleScheme getScheme() {
      return new UserVoTupleScheme();
    }
  }

  private static class UserVoTupleScheme extends TupleScheme<UserVo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, UserVo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetName()) {
        optionals.set(1);
      }
      if (struct.isSetAge()) {
        optionals.set(2);
      }
      if (struct.isSetSex()) {
        optionals.set(3);
      }
      if (struct.isSetSubNodeList()) {
        optionals.set(4);
      }
      if (struct.isSetSubNodeSet()) {
        optionals.set(5);
      }
      if (struct.isSetSubNodeMap()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetAge()) {
        oprot.writeI32(struct.age);
      }
      if (struct.isSetSex()) {
        oprot.writeBool(struct.sex);
      }
      if (struct.isSetSubNodeList()) {
        {
          oprot.writeI32(struct.subNodeList.size());
          for (String _iter13 : struct.subNodeList)
          {
            oprot.writeString(_iter13);
          }
        }
      }
      if (struct.isSetSubNodeSet()) {
        {
          oprot.writeI32(struct.subNodeSet.size());
          for (int _iter14 : struct.subNodeSet)
          {
            oprot.writeI32(_iter14);
          }
        }
      }
      if (struct.isSetSubNodeMap()) {
        {
          oprot.writeI32(struct.subNodeMap.size());
          for (Map.Entry<Integer, String> _iter15 : struct.subNodeMap.entrySet())
          {
            oprot.writeI32(_iter15.getKey());
            oprot.writeString(_iter15.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, UserVo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.age = iprot.readI32();
        struct.setAgeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.sex = iprot.readBool();
        struct.setSexIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list16 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.subNodeList = new ArrayList<String>(_list16.size);
          String _elem17;
          for (int _i18 = 0; _i18 < _list16.size; ++_i18)
          {
            _elem17 = iprot.readString();
            struct.subNodeList.add(_elem17);
          }
        }
        struct.setSubNodeListIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TSet _set19 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.subNodeSet = new HashSet<Integer>(2*_set19.size);
          int _elem20;
          for (int _i21 = 0; _i21 < _set19.size; ++_i21)
          {
            _elem20 = iprot.readI32();
            struct.subNodeSet.add(_elem20);
          }
        }
        struct.setSubNodeSetIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TMap _map22 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.subNodeMap = new HashMap<Integer,String>(2*_map22.size);
          int _key23;
          String _val24;
          for (int _i25 = 0; _i25 < _map22.size; ++_i25)
          {
            _key23 = iprot.readI32();
            _val24 = iprot.readString();
            struct.subNodeMap.put(_key23, _val24);
          }
        }
        struct.setSubNodeMapIsSet(true);
      }
    }
  }

}

