/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.vo.coremodule;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 商户指标信息
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-12-25")
public class MerchantInfoRespVo implements org.apache.thrift.TBase<MerchantInfoRespVo, MerchantInfoRespVo._Fields>, java.io.Serializable, Cloneable, Comparable<MerchantInfoRespVo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MerchantInfoRespVo");

  private static final org.apache.thrift.protocol.TField MERCHANT_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("merchantCount", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField MERCHANT_CANCEL_CONTRACT_FIELD_DESC = new org.apache.thrift.protocol.TField("merchantCancelContract", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField MERCHANT_CUMULATION_FIELD_DESC = new org.apache.thrift.protocol.TField("merchantCumulation", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField OUTLET_SUM_FIELD_DESC = new org.apache.thrift.protocol.TField("outletSum", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField OUTLET_CUMULATION_FIELD_DESC = new org.apache.thrift.protocol.TField("outletCumulation", org.apache.thrift.protocol.TType.I32, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new MerchantInfoRespVoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new MerchantInfoRespVoTupleSchemeFactory());
  }

  /**
   * 商户数量*
   */
  public int merchantCount; // optional
  /**
   * 解约商户数*
   */
  public int merchantCancelContract; // optional
  /**
   * 累计商户数*
   */
  public int merchantCumulation; // optional
  /**
   * 门店数*
   */
  public int outletSum; // optional
  /**
   * 累计门店数*
   */
  public int outletCumulation; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 商户数量*
     */
    MERCHANT_COUNT((short)1, "merchantCount"),
    /**
     * 解约商户数*
     */
    MERCHANT_CANCEL_CONTRACT((short)2, "merchantCancelContract"),
    /**
     * 累计商户数*
     */
    MERCHANT_CUMULATION((short)3, "merchantCumulation"),
    /**
     * 门店数*
     */
    OUTLET_SUM((short)4, "outletSum"),
    /**
     * 累计门店数*
     */
    OUTLET_CUMULATION((short)5, "outletCumulation");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MERCHANT_COUNT
          return MERCHANT_COUNT;
        case 2: // MERCHANT_CANCEL_CONTRACT
          return MERCHANT_CANCEL_CONTRACT;
        case 3: // MERCHANT_CUMULATION
          return MERCHANT_CUMULATION;
        case 4: // OUTLET_SUM
          return OUTLET_SUM;
        case 5: // OUTLET_CUMULATION
          return OUTLET_CUMULATION;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MERCHANTCOUNT_ISSET_ID = 0;
  private static final int __MERCHANTCANCELCONTRACT_ISSET_ID = 1;
  private static final int __MERCHANTCUMULATION_ISSET_ID = 2;
  private static final int __OUTLETSUM_ISSET_ID = 3;
  private static final int __OUTLETCUMULATION_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.MERCHANT_COUNT,_Fields.MERCHANT_CANCEL_CONTRACT,_Fields.MERCHANT_CUMULATION,_Fields.OUTLET_SUM,_Fields.OUTLET_CUMULATION};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MERCHANT_COUNT, new org.apache.thrift.meta_data.FieldMetaData("merchantCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MERCHANT_CANCEL_CONTRACT, new org.apache.thrift.meta_data.FieldMetaData("merchantCancelContract", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MERCHANT_CUMULATION, new org.apache.thrift.meta_data.FieldMetaData("merchantCumulation", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OUTLET_SUM, new org.apache.thrift.meta_data.FieldMetaData("outletSum", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OUTLET_CUMULATION, new org.apache.thrift.meta_data.FieldMetaData("outletCumulation", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MerchantInfoRespVo.class, metaDataMap);
  }

  public MerchantInfoRespVo() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MerchantInfoRespVo(MerchantInfoRespVo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.merchantCount = other.merchantCount;
    this.merchantCancelContract = other.merchantCancelContract;
    this.merchantCumulation = other.merchantCumulation;
    this.outletSum = other.outletSum;
    this.outletCumulation = other.outletCumulation;
  }

  public MerchantInfoRespVo deepCopy() {
    return new MerchantInfoRespVo(this);
  }

  @Override
  public void clear() {
    setMerchantCountIsSet(false);
    this.merchantCount = 0;
    setMerchantCancelContractIsSet(false);
    this.merchantCancelContract = 0;
    setMerchantCumulationIsSet(false);
    this.merchantCumulation = 0;
    setOutletSumIsSet(false);
    this.outletSum = 0;
    setOutletCumulationIsSet(false);
    this.outletCumulation = 0;
  }

  /**
   * 商户数量*
   */
  public int getMerchantCount() {
    return this.merchantCount;
  }

  /**
   * 商户数量*
   */
  public MerchantInfoRespVo setMerchantCount(int merchantCount) {
    this.merchantCount = merchantCount;
    setMerchantCountIsSet(true);
    return this;
  }

  public void unsetMerchantCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MERCHANTCOUNT_ISSET_ID);
  }

  /** Returns true if field merchantCount is set (has been assigned a value) and false otherwise */
  public boolean isSetMerchantCount() {
    return EncodingUtils.testBit(__isset_bitfield, __MERCHANTCOUNT_ISSET_ID);
  }

  public void setMerchantCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MERCHANTCOUNT_ISSET_ID, value);
  }

  /**
   * 解约商户数*
   */
  public int getMerchantCancelContract() {
    return this.merchantCancelContract;
  }

  /**
   * 解约商户数*
   */
  public MerchantInfoRespVo setMerchantCancelContract(int merchantCancelContract) {
    this.merchantCancelContract = merchantCancelContract;
    setMerchantCancelContractIsSet(true);
    return this;
  }

  public void unsetMerchantCancelContract() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MERCHANTCANCELCONTRACT_ISSET_ID);
  }

  /** Returns true if field merchantCancelContract is set (has been assigned a value) and false otherwise */
  public boolean isSetMerchantCancelContract() {
    return EncodingUtils.testBit(__isset_bitfield, __MERCHANTCANCELCONTRACT_ISSET_ID);
  }

  public void setMerchantCancelContractIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MERCHANTCANCELCONTRACT_ISSET_ID, value);
  }

  /**
   * 累计商户数*
   */
  public int getMerchantCumulation() {
    return this.merchantCumulation;
  }

  /**
   * 累计商户数*
   */
  public MerchantInfoRespVo setMerchantCumulation(int merchantCumulation) {
    this.merchantCumulation = merchantCumulation;
    setMerchantCumulationIsSet(true);
    return this;
  }

  public void unsetMerchantCumulation() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MERCHANTCUMULATION_ISSET_ID);
  }

  /** Returns true if field merchantCumulation is set (has been assigned a value) and false otherwise */
  public boolean isSetMerchantCumulation() {
    return EncodingUtils.testBit(__isset_bitfield, __MERCHANTCUMULATION_ISSET_ID);
  }

  public void setMerchantCumulationIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MERCHANTCUMULATION_ISSET_ID, value);
  }

  /**
   * 门店数*
   */
  public int getOutletSum() {
    return this.outletSum;
  }

  /**
   * 门店数*
   */
  public MerchantInfoRespVo setOutletSum(int outletSum) {
    this.outletSum = outletSum;
    setOutletSumIsSet(true);
    return this;
  }

  public void unsetOutletSum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OUTLETSUM_ISSET_ID);
  }

  /** Returns true if field outletSum is set (has been assigned a value) and false otherwise */
  public boolean isSetOutletSum() {
    return EncodingUtils.testBit(__isset_bitfield, __OUTLETSUM_ISSET_ID);
  }

  public void setOutletSumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OUTLETSUM_ISSET_ID, value);
  }

  /**
   * 累计门店数*
   */
  public int getOutletCumulation() {
    return this.outletCumulation;
  }

  /**
   * 累计门店数*
   */
  public MerchantInfoRespVo setOutletCumulation(int outletCumulation) {
    this.outletCumulation = outletCumulation;
    setOutletCumulationIsSet(true);
    return this;
  }

  public void unsetOutletCumulation() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OUTLETCUMULATION_ISSET_ID);
  }

  /** Returns true if field outletCumulation is set (has been assigned a value) and false otherwise */
  public boolean isSetOutletCumulation() {
    return EncodingUtils.testBit(__isset_bitfield, __OUTLETCUMULATION_ISSET_ID);
  }

  public void setOutletCumulationIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OUTLETCUMULATION_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MERCHANT_COUNT:
      if (value == null) {
        unsetMerchantCount();
      } else {
        setMerchantCount((Integer)value);
      }
      break;

    case MERCHANT_CANCEL_CONTRACT:
      if (value == null) {
        unsetMerchantCancelContract();
      } else {
        setMerchantCancelContract((Integer)value);
      }
      break;

    case MERCHANT_CUMULATION:
      if (value == null) {
        unsetMerchantCumulation();
      } else {
        setMerchantCumulation((Integer)value);
      }
      break;

    case OUTLET_SUM:
      if (value == null) {
        unsetOutletSum();
      } else {
        setOutletSum((Integer)value);
      }
      break;

    case OUTLET_CUMULATION:
      if (value == null) {
        unsetOutletCumulation();
      } else {
        setOutletCumulation((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MERCHANT_COUNT:
      return Integer.valueOf(getMerchantCount());

    case MERCHANT_CANCEL_CONTRACT:
      return Integer.valueOf(getMerchantCancelContract());

    case MERCHANT_CUMULATION:
      return Integer.valueOf(getMerchantCumulation());

    case OUTLET_SUM:
      return Integer.valueOf(getOutletSum());

    case OUTLET_CUMULATION:
      return Integer.valueOf(getOutletCumulation());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MERCHANT_COUNT:
      return isSetMerchantCount();
    case MERCHANT_CANCEL_CONTRACT:
      return isSetMerchantCancelContract();
    case MERCHANT_CUMULATION:
      return isSetMerchantCumulation();
    case OUTLET_SUM:
      return isSetOutletSum();
    case OUTLET_CUMULATION:
      return isSetOutletCumulation();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof MerchantInfoRespVo)
      return this.equals((MerchantInfoRespVo)that);
    return false;
  }

  public boolean equals(MerchantInfoRespVo that) {
    if (that == null)
      return false;

    boolean this_present_merchantCount = true && this.isSetMerchantCount();
    boolean that_present_merchantCount = true && that.isSetMerchantCount();
    if (this_present_merchantCount || that_present_merchantCount) {
      if (!(this_present_merchantCount && that_present_merchantCount))
        return false;
      if (this.merchantCount != that.merchantCount)
        return false;
    }

    boolean this_present_merchantCancelContract = true && this.isSetMerchantCancelContract();
    boolean that_present_merchantCancelContract = true && that.isSetMerchantCancelContract();
    if (this_present_merchantCancelContract || that_present_merchantCancelContract) {
      if (!(this_present_merchantCancelContract && that_present_merchantCancelContract))
        return false;
      if (this.merchantCancelContract != that.merchantCancelContract)
        return false;
    }

    boolean this_present_merchantCumulation = true && this.isSetMerchantCumulation();
    boolean that_present_merchantCumulation = true && that.isSetMerchantCumulation();
    if (this_present_merchantCumulation || that_present_merchantCumulation) {
      if (!(this_present_merchantCumulation && that_present_merchantCumulation))
        return false;
      if (this.merchantCumulation != that.merchantCumulation)
        return false;
    }

    boolean this_present_outletSum = true && this.isSetOutletSum();
    boolean that_present_outletSum = true && that.isSetOutletSum();
    if (this_present_outletSum || that_present_outletSum) {
      if (!(this_present_outletSum && that_present_outletSum))
        return false;
      if (this.outletSum != that.outletSum)
        return false;
    }

    boolean this_present_outletCumulation = true && this.isSetOutletCumulation();
    boolean that_present_outletCumulation = true && that.isSetOutletCumulation();
    if (this_present_outletCumulation || that_present_outletCumulation) {
      if (!(this_present_outletCumulation && that_present_outletCumulation))
        return false;
      if (this.outletCumulation != that.outletCumulation)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_merchantCount = true && (isSetMerchantCount());
    list.add(present_merchantCount);
    if (present_merchantCount)
      list.add(merchantCount);

    boolean present_merchantCancelContract = true && (isSetMerchantCancelContract());
    list.add(present_merchantCancelContract);
    if (present_merchantCancelContract)
      list.add(merchantCancelContract);

    boolean present_merchantCumulation = true && (isSetMerchantCumulation());
    list.add(present_merchantCumulation);
    if (present_merchantCumulation)
      list.add(merchantCumulation);

    boolean present_outletSum = true && (isSetOutletSum());
    list.add(present_outletSum);
    if (present_outletSum)
      list.add(outletSum);

    boolean present_outletCumulation = true && (isSetOutletCumulation());
    list.add(present_outletCumulation);
    if (present_outletCumulation)
      list.add(outletCumulation);

    return list.hashCode();
  }

  @Override
  public int compareTo(MerchantInfoRespVo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetMerchantCount()).compareTo(other.isSetMerchantCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMerchantCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchantCount, other.merchantCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMerchantCancelContract()).compareTo(other.isSetMerchantCancelContract());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMerchantCancelContract()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchantCancelContract, other.merchantCancelContract);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMerchantCumulation()).compareTo(other.isSetMerchantCumulation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMerchantCumulation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchantCumulation, other.merchantCumulation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOutletSum()).compareTo(other.isSetOutletSum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOutletSum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outletSum, other.outletSum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOutletCumulation()).compareTo(other.isSetOutletCumulation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOutletCumulation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outletCumulation, other.outletCumulation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("MerchantInfoRespVo(");
    boolean first = true;

    if (isSetMerchantCount()) {
      sb.append("merchantCount:");
      sb.append(this.merchantCount);
      first = false;
    }
    if (isSetMerchantCancelContract()) {
      if (!first) sb.append(", ");
      sb.append("merchantCancelContract:");
      sb.append(this.merchantCancelContract);
      first = false;
    }
    if (isSetMerchantCumulation()) {
      if (!first) sb.append(", ");
      sb.append("merchantCumulation:");
      sb.append(this.merchantCumulation);
      first = false;
    }
    if (isSetOutletSum()) {
      if (!first) sb.append(", ");
      sb.append("outletSum:");
      sb.append(this.outletSum);
      first = false;
    }
    if (isSetOutletCumulation()) {
      if (!first) sb.append(", ");
      sb.append("outletCumulation:");
      sb.append(this.outletCumulation);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MerchantInfoRespVoStandardSchemeFactory implements SchemeFactory {
    public MerchantInfoRespVoStandardScheme getScheme() {
      return new MerchantInfoRespVoStandardScheme();
    }
  }

  private static class MerchantInfoRespVoStandardScheme extends StandardScheme<MerchantInfoRespVo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MerchantInfoRespVo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MERCHANT_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.merchantCount = iprot.readI32();
              struct.setMerchantCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MERCHANT_CANCEL_CONTRACT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.merchantCancelContract = iprot.readI32();
              struct.setMerchantCancelContractIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MERCHANT_CUMULATION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.merchantCumulation = iprot.readI32();
              struct.setMerchantCumulationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // OUTLET_SUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.outletSum = iprot.readI32();
              struct.setOutletSumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // OUTLET_CUMULATION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.outletCumulation = iprot.readI32();
              struct.setOutletCumulationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MerchantInfoRespVo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetMerchantCount()) {
        oprot.writeFieldBegin(MERCHANT_COUNT_FIELD_DESC);
        oprot.writeI32(struct.merchantCount);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMerchantCancelContract()) {
        oprot.writeFieldBegin(MERCHANT_CANCEL_CONTRACT_FIELD_DESC);
        oprot.writeI32(struct.merchantCancelContract);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMerchantCumulation()) {
        oprot.writeFieldBegin(MERCHANT_CUMULATION_FIELD_DESC);
        oprot.writeI32(struct.merchantCumulation);
        oprot.writeFieldEnd();
      }
      if (struct.isSetOutletSum()) {
        oprot.writeFieldBegin(OUTLET_SUM_FIELD_DESC);
        oprot.writeI32(struct.outletSum);
        oprot.writeFieldEnd();
      }
      if (struct.isSetOutletCumulation()) {
        oprot.writeFieldBegin(OUTLET_CUMULATION_FIELD_DESC);
        oprot.writeI32(struct.outletCumulation);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MerchantInfoRespVoTupleSchemeFactory implements SchemeFactory {
    public MerchantInfoRespVoTupleScheme getScheme() {
      return new MerchantInfoRespVoTupleScheme();
    }
  }

  private static class MerchantInfoRespVoTupleScheme extends TupleScheme<MerchantInfoRespVo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MerchantInfoRespVo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetMerchantCount()) {
        optionals.set(0);
      }
      if (struct.isSetMerchantCancelContract()) {
        optionals.set(1);
      }
      if (struct.isSetMerchantCumulation()) {
        optionals.set(2);
      }
      if (struct.isSetOutletSum()) {
        optionals.set(3);
      }
      if (struct.isSetOutletCumulation()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetMerchantCount()) {
        oprot.writeI32(struct.merchantCount);
      }
      if (struct.isSetMerchantCancelContract()) {
        oprot.writeI32(struct.merchantCancelContract);
      }
      if (struct.isSetMerchantCumulation()) {
        oprot.writeI32(struct.merchantCumulation);
      }
      if (struct.isSetOutletSum()) {
        oprot.writeI32(struct.outletSum);
      }
      if (struct.isSetOutletCumulation()) {
        oprot.writeI32(struct.outletCumulation);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MerchantInfoRespVo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.merchantCount = iprot.readI32();
        struct.setMerchantCountIsSet(true);
      }
      if (incoming.get(1)) {
        struct.merchantCancelContract = iprot.readI32();
        struct.setMerchantCancelContractIsSet(true);
      }
      if (incoming.get(2)) {
        struct.merchantCumulation = iprot.readI32();
        struct.setMerchantCumulationIsSet(true);
      }
      if (incoming.get(3)) {
        struct.outletSum = iprot.readI32();
        struct.setOutletSumIsSet(true);
      }
      if (incoming.get(4)) {
        struct.outletCumulation = iprot.readI32();
        struct.setOutletCumulationIsSet(true);
      }
    }
  }

}

