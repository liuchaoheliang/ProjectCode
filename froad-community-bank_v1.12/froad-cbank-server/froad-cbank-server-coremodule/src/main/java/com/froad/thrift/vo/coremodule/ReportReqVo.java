/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.vo.coremodule;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 报表基础请求
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-12-25")
public class ReportReqVo implements org.apache.thrift.TBase<ReportReqVo, ReportReqVo._Fields>, java.io.Serializable, Cloneable, Comparable<ReportReqVo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ReportReqVo");

  private static final org.apache.thrift.protocol.TField LATITUDE_TUPE_FIELD_DESC = new org.apache.thrift.protocol.TField("latitudeTupe", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField COUNT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("countType", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField START_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("startDate", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField END_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("endDate", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField PLATFORM_FIELD_DESC = new org.apache.thrift.protocol.TField("platform", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField ORG_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("orgCode", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField ORG_LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("orgLevel", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField CHECKED_MERCHANT_FIELD_DESC = new org.apache.thrift.protocol.TField("checkedMerchant", org.apache.thrift.protocol.TType.BOOL, (short)9);
  private static final org.apache.thrift.protocol.TField CHECKED_MERCHANT_CATEGORY_FIELD_DESC = new org.apache.thrift.protocol.TField("checkedMerchantCategory", org.apache.thrift.protocol.TType.BOOL, (short)10);
  private static final org.apache.thrift.protocol.TField ORDER_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("orderType", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField PAY_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("payType", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField CHECKED_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("checkedAmount", org.apache.thrift.protocol.TType.BOOL, (short)13);
  private static final org.apache.thrift.protocol.TField CHECKED_AMOUNT_CUMULATION_FIELD_DESC = new org.apache.thrift.protocol.TField("checkedAmountCumulation", org.apache.thrift.protocol.TType.BOOL, (short)14);
  private static final org.apache.thrift.protocol.TField CHECKED_AMOUNT_REFUND_FIELD_DESC = new org.apache.thrift.protocol.TField("checkedAmountRefund", org.apache.thrift.protocol.TType.BOOL, (short)15);
  private static final org.apache.thrift.protocol.TField CHECKED_AMOUNT_TURNOVER_FIELD_DESC = new org.apache.thrift.protocol.TField("checkedAmountTurnover", org.apache.thrift.protocol.TType.BOOL, (short)16);
  private static final org.apache.thrift.protocol.TField CHECKED_AMOUNT_CUMULATION_TURNOVER_FIELD_DESC = new org.apache.thrift.protocol.TField("checkedAmountCumulationTurnover", org.apache.thrift.protocol.TType.BOOL, (short)17);
  private static final org.apache.thrift.protocol.TField CHECKED_ORDER_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("checkedOrderCount", org.apache.thrift.protocol.TType.BOOL, (short)18);
  private static final org.apache.thrift.protocol.TField CHECKED_ORDER_CUMULATION_FIELD_DESC = new org.apache.thrift.protocol.TField("checkedOrderCumulation", org.apache.thrift.protocol.TType.BOOL, (short)19);
  private static final org.apache.thrift.protocol.TField CHECKED_ORDER_REFUND_FIELD_DESC = new org.apache.thrift.protocol.TField("checkedOrderRefund", org.apache.thrift.protocol.TType.BOOL, (short)20);
  private static final org.apache.thrift.protocol.TField CHECKED_ORDER_TURNOVER_FIELD_DESC = new org.apache.thrift.protocol.TField("checkedOrderTurnover", org.apache.thrift.protocol.TType.BOOL, (short)21);
  private static final org.apache.thrift.protocol.TField CHECKED_ORDER_CUMULATION_TURNOVER_FIELD_DESC = new org.apache.thrift.protocol.TField("checkedOrderCumulationTurnover", org.apache.thrift.protocol.TType.BOOL, (short)22);
  private static final org.apache.thrift.protocol.TField CHECKED_MERCHANT_SUM_FIELD_DESC = new org.apache.thrift.protocol.TField("checkedMerchantSum", org.apache.thrift.protocol.TType.BOOL, (short)23);
  private static final org.apache.thrift.protocol.TField CHECKED_MERCHANT_CANCEL_CONTRACT_FIELD_DESC = new org.apache.thrift.protocol.TField("checkedMerchantCancelContract", org.apache.thrift.protocol.TType.BOOL, (short)24);
  private static final org.apache.thrift.protocol.TField CHECKED_MERCHANT_CUMULATION_FIELD_DESC = new org.apache.thrift.protocol.TField("checkedMerchantCumulation", org.apache.thrift.protocol.TType.BOOL, (short)25);
  private static final org.apache.thrift.protocol.TField CHECKED_OUTLET_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("checkedOutletCount", org.apache.thrift.protocol.TType.BOOL, (short)26);
  private static final org.apache.thrift.protocol.TField CHECKED_OUTLET_CUMULATION_FIELD_DESC = new org.apache.thrift.protocol.TField("checkedOutletCumulation", org.apache.thrift.protocol.TType.BOOL, (short)27);
  private static final org.apache.thrift.protocol.TField CHECKED_PRODUCT_SUM_FIELD_DESC = new org.apache.thrift.protocol.TField("checkedProductSum", org.apache.thrift.protocol.TType.BOOL, (short)28);
  private static final org.apache.thrift.protocol.TField CHECKED_PRODUCT_CUMULATION_FIELD_DESC = new org.apache.thrift.protocol.TField("checkedProductCumulation", org.apache.thrift.protocol.TType.BOOL, (short)29);
  private static final org.apache.thrift.protocol.TField CHECKED_PRODUCT_DOWN_SUM_FIELD_DESC = new org.apache.thrift.protocol.TField("checkedProductDownSum", org.apache.thrift.protocol.TType.BOOL, (short)30);
  private static final org.apache.thrift.protocol.TField CHECKED_PRODUCT_DOWN_COMULATION_FIELD_DESC = new org.apache.thrift.protocol.TField("checkedProductDownComulation", org.apache.thrift.protocol.TType.BOOL, (short)31);
  private static final org.apache.thrift.protocol.TField CHECKED_MEMBER_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("checkedMemberCount", org.apache.thrift.protocol.TType.BOOL, (short)32);
  private static final org.apache.thrift.protocol.TField CHECKED_MEMBER_COMULATION_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("checkedMemberComulationCount", org.apache.thrift.protocol.TType.BOOL, (short)33);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.STRING, (short)34);
  private static final org.apache.thrift.protocol.TField START_YEAR_FIELD_DESC = new org.apache.thrift.protocol.TField("startYear", org.apache.thrift.protocol.TType.STRING, (short)35);
  private static final org.apache.thrift.protocol.TField END_YEAR_FIELD_DESC = new org.apache.thrift.protocol.TField("endYear", org.apache.thrift.protocol.TType.STRING, (short)36);
  private static final org.apache.thrift.protocol.TField START_MONTH_FIELD_DESC = new org.apache.thrift.protocol.TField("startMonth", org.apache.thrift.protocol.TType.STRING, (short)37);
  private static final org.apache.thrift.protocol.TField END_MONTH_FIELD_DESC = new org.apache.thrift.protocol.TField("endMonth", org.apache.thrift.protocol.TType.STRING, (short)38);
  private static final org.apache.thrift.protocol.TField START_WEEK_FIELD_DESC = new org.apache.thrift.protocol.TField("startWeek", org.apache.thrift.protocol.TType.STRING, (short)39);
  private static final org.apache.thrift.protocol.TField END_WEEK_FIELD_DESC = new org.apache.thrift.protocol.TField("endWeek", org.apache.thrift.protocol.TType.STRING, (short)40);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ReportReqVoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ReportReqVoTupleSchemeFactory());
  }

  /**
   * 查询纬度类型：amountLat 金额纬度;orderLat 订单纬度;merchantLat 商户纬度;productLat 商品纬度;memberLat 用户纬度;不传则所有*
   */
  public String latitudeTupe; // optional
  /**
   * 统计类型：day：按天;week：按周;month：按月;diy：自定义*
   */
  public String countType; // optional
  /**
   * 筛选开始日期*
   */
  public String startDate; // optional
  /**
   * 筛选结束日期*
   */
  public String endDate; // optional
  /**
   * 银行*
   */
  public String clientId; // optional
  /**
   * 业务平台*
   */
  public String platform; // optional
  /**
   * 机构号*
   */
  public String orgCode; // optional
  /**
   * 机构等级*
   */
  public int orgLevel; // optional
  /**
   * 是否选中商户维度*
   */
  public boolean checkedMerchant; // optional
  /**
   * 是否选中商户类目纬度*
   */
  public boolean checkedMerchantCategory; // optional
  /**
   * 业务类型*
   */
  public String orderType; // optional
  /**
   * 支付方式*
   */
  public String payType; // optional
  /**
   * 金额指标—金额是否选中*
   */
  public boolean checkedAmount; // optional
  /**
   * 金额指标—累积金额否选中*
   */
  public boolean checkedAmountCumulation; // optional
  /**
   * 金额指标—退款金额否选中*
   */
  public boolean checkedAmountRefund; // optional
  /**
   * 金额指标—成交金额否选中*
   */
  public boolean checkedAmountTurnover; // optional
  /**
   * 金额指标-累积成交金额否选中*
   */
  public boolean checkedAmountCumulationTurnover; // optional
  /**
   * 订单指标-订单否选中*
   */
  public boolean checkedOrderCount; // optional
  /**
   * 订单指标-累积订单否选中*
   */
  public boolean checkedOrderCumulation; // optional
  /**
   * 订单指标-退款订单否选中*
   */
  public boolean checkedOrderRefund; // optional
  /**
   * 订单指标-成交订单否选中*
   */
  public boolean checkedOrderTurnover; // optional
  /**
   * 订单指标-累积成交订单否选中*
   */
  public boolean checkedOrderCumulationTurnover; // optional
  /**
   * 商户指标--商户数 否选中*
   */
  public boolean checkedMerchantSum; // optional
  /**
   * 商户指标--解约商户数 否选中*
   */
  public boolean checkedMerchantCancelContract; // optional
  /**
   * 商户指标--累积商户数 否选中*
   */
  public boolean checkedMerchantCumulation; // optional
  /**
   * 商户指标--门店数 否选中*
   */
  public boolean checkedOutletCount; // optional
  /**
   * 商户指标--累积门店数 否选中*
   */
  public boolean checkedOutletCumulation; // optional
  /**
   * 商品指标—商品数量 否选中*
   */
  public boolean checkedProductSum; // optional
  /**
   * 商品指数—累积商品数量 否选中*
   */
  public boolean checkedProductCumulation; // optional
  /**
   * 商品指数—下架商品数量 否选中*
   */
  public boolean checkedProductDownSum; // optional
  /**
   * 商品只是—累积下架商品数量 否选中*
   */
  public boolean checkedProductDownComulation; // optional
  /**
   * 用户指数-消费用户数 否选中*
   */
  public boolean checkedMemberCount; // optional
  /**
   * 用户指数—累积消费用户数 否选中*
   */
  public boolean checkedMemberComulationCount; // optional
  /**
   * 指标类型
   */
  public String type; // optional
  /**
   * 用户指标查询    起始年
   */
  public String startYear; // optional
  /**
   * 用户指标查询    结束年
   */
  public String endYear; // optional
  /**
   * 用户指标查询    起始月
   */
  public String startMonth; // optional
  /**
   * 用户指标查询    结束月
   */
  public String endMonth; // optional
  /**
   * 用户指标查询    起始周
   */
  public String startWeek; // optional
  /**
   * 用户指标查询    结束周
   */
  public String endWeek; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 查询纬度类型：amountLat 金额纬度;orderLat 订单纬度;merchantLat 商户纬度;productLat 商品纬度;memberLat 用户纬度;不传则所有*
     */
    LATITUDE_TUPE((short)1, "latitudeTupe"),
    /**
     * 统计类型：day：按天;week：按周;month：按月;diy：自定义*
     */
    COUNT_TYPE((short)2, "countType"),
    /**
     * 筛选开始日期*
     */
    START_DATE((short)3, "startDate"),
    /**
     * 筛选结束日期*
     */
    END_DATE((short)4, "endDate"),
    /**
     * 银行*
     */
    CLIENT_ID((short)5, "clientId"),
    /**
     * 业务平台*
     */
    PLATFORM((short)6, "platform"),
    /**
     * 机构号*
     */
    ORG_CODE((short)7, "orgCode"),
    /**
     * 机构等级*
     */
    ORG_LEVEL((short)8, "orgLevel"),
    /**
     * 是否选中商户维度*
     */
    CHECKED_MERCHANT((short)9, "checkedMerchant"),
    /**
     * 是否选中商户类目纬度*
     */
    CHECKED_MERCHANT_CATEGORY((short)10, "checkedMerchantCategory"),
    /**
     * 业务类型*
     */
    ORDER_TYPE((short)11, "orderType"),
    /**
     * 支付方式*
     */
    PAY_TYPE((short)12, "payType"),
    /**
     * 金额指标—金额是否选中*
     */
    CHECKED_AMOUNT((short)13, "checkedAmount"),
    /**
     * 金额指标—累积金额否选中*
     */
    CHECKED_AMOUNT_CUMULATION((short)14, "checkedAmountCumulation"),
    /**
     * 金额指标—退款金额否选中*
     */
    CHECKED_AMOUNT_REFUND((short)15, "checkedAmountRefund"),
    /**
     * 金额指标—成交金额否选中*
     */
    CHECKED_AMOUNT_TURNOVER((short)16, "checkedAmountTurnover"),
    /**
     * 金额指标-累积成交金额否选中*
     */
    CHECKED_AMOUNT_CUMULATION_TURNOVER((short)17, "checkedAmountCumulationTurnover"),
    /**
     * 订单指标-订单否选中*
     */
    CHECKED_ORDER_COUNT((short)18, "checkedOrderCount"),
    /**
     * 订单指标-累积订单否选中*
     */
    CHECKED_ORDER_CUMULATION((short)19, "checkedOrderCumulation"),
    /**
     * 订单指标-退款订单否选中*
     */
    CHECKED_ORDER_REFUND((short)20, "checkedOrderRefund"),
    /**
     * 订单指标-成交订单否选中*
     */
    CHECKED_ORDER_TURNOVER((short)21, "checkedOrderTurnover"),
    /**
     * 订单指标-累积成交订单否选中*
     */
    CHECKED_ORDER_CUMULATION_TURNOVER((short)22, "checkedOrderCumulationTurnover"),
    /**
     * 商户指标--商户数 否选中*
     */
    CHECKED_MERCHANT_SUM((short)23, "checkedMerchantSum"),
    /**
     * 商户指标--解约商户数 否选中*
     */
    CHECKED_MERCHANT_CANCEL_CONTRACT((short)24, "checkedMerchantCancelContract"),
    /**
     * 商户指标--累积商户数 否选中*
     */
    CHECKED_MERCHANT_CUMULATION((short)25, "checkedMerchantCumulation"),
    /**
     * 商户指标--门店数 否选中*
     */
    CHECKED_OUTLET_COUNT((short)26, "checkedOutletCount"),
    /**
     * 商户指标--累积门店数 否选中*
     */
    CHECKED_OUTLET_CUMULATION((short)27, "checkedOutletCumulation"),
    /**
     * 商品指标—商品数量 否选中*
     */
    CHECKED_PRODUCT_SUM((short)28, "checkedProductSum"),
    /**
     * 商品指数—累积商品数量 否选中*
     */
    CHECKED_PRODUCT_CUMULATION((short)29, "checkedProductCumulation"),
    /**
     * 商品指数—下架商品数量 否选中*
     */
    CHECKED_PRODUCT_DOWN_SUM((short)30, "checkedProductDownSum"),
    /**
     * 商品只是—累积下架商品数量 否选中*
     */
    CHECKED_PRODUCT_DOWN_COMULATION((short)31, "checkedProductDownComulation"),
    /**
     * 用户指数-消费用户数 否选中*
     */
    CHECKED_MEMBER_COUNT((short)32, "checkedMemberCount"),
    /**
     * 用户指数—累积消费用户数 否选中*
     */
    CHECKED_MEMBER_COMULATION_COUNT((short)33, "checkedMemberComulationCount"),
    /**
     * 指标类型
     */
    TYPE((short)34, "type"),
    /**
     * 用户指标查询    起始年
     */
    START_YEAR((short)35, "startYear"),
    /**
     * 用户指标查询    结束年
     */
    END_YEAR((short)36, "endYear"),
    /**
     * 用户指标查询    起始月
     */
    START_MONTH((short)37, "startMonth"),
    /**
     * 用户指标查询    结束月
     */
    END_MONTH((short)38, "endMonth"),
    /**
     * 用户指标查询    起始周
     */
    START_WEEK((short)39, "startWeek"),
    /**
     * 用户指标查询    结束周
     */
    END_WEEK((short)40, "endWeek");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // LATITUDE_TUPE
          return LATITUDE_TUPE;
        case 2: // COUNT_TYPE
          return COUNT_TYPE;
        case 3: // START_DATE
          return START_DATE;
        case 4: // END_DATE
          return END_DATE;
        case 5: // CLIENT_ID
          return CLIENT_ID;
        case 6: // PLATFORM
          return PLATFORM;
        case 7: // ORG_CODE
          return ORG_CODE;
        case 8: // ORG_LEVEL
          return ORG_LEVEL;
        case 9: // CHECKED_MERCHANT
          return CHECKED_MERCHANT;
        case 10: // CHECKED_MERCHANT_CATEGORY
          return CHECKED_MERCHANT_CATEGORY;
        case 11: // ORDER_TYPE
          return ORDER_TYPE;
        case 12: // PAY_TYPE
          return PAY_TYPE;
        case 13: // CHECKED_AMOUNT
          return CHECKED_AMOUNT;
        case 14: // CHECKED_AMOUNT_CUMULATION
          return CHECKED_AMOUNT_CUMULATION;
        case 15: // CHECKED_AMOUNT_REFUND
          return CHECKED_AMOUNT_REFUND;
        case 16: // CHECKED_AMOUNT_TURNOVER
          return CHECKED_AMOUNT_TURNOVER;
        case 17: // CHECKED_AMOUNT_CUMULATION_TURNOVER
          return CHECKED_AMOUNT_CUMULATION_TURNOVER;
        case 18: // CHECKED_ORDER_COUNT
          return CHECKED_ORDER_COUNT;
        case 19: // CHECKED_ORDER_CUMULATION
          return CHECKED_ORDER_CUMULATION;
        case 20: // CHECKED_ORDER_REFUND
          return CHECKED_ORDER_REFUND;
        case 21: // CHECKED_ORDER_TURNOVER
          return CHECKED_ORDER_TURNOVER;
        case 22: // CHECKED_ORDER_CUMULATION_TURNOVER
          return CHECKED_ORDER_CUMULATION_TURNOVER;
        case 23: // CHECKED_MERCHANT_SUM
          return CHECKED_MERCHANT_SUM;
        case 24: // CHECKED_MERCHANT_CANCEL_CONTRACT
          return CHECKED_MERCHANT_CANCEL_CONTRACT;
        case 25: // CHECKED_MERCHANT_CUMULATION
          return CHECKED_MERCHANT_CUMULATION;
        case 26: // CHECKED_OUTLET_COUNT
          return CHECKED_OUTLET_COUNT;
        case 27: // CHECKED_OUTLET_CUMULATION
          return CHECKED_OUTLET_CUMULATION;
        case 28: // CHECKED_PRODUCT_SUM
          return CHECKED_PRODUCT_SUM;
        case 29: // CHECKED_PRODUCT_CUMULATION
          return CHECKED_PRODUCT_CUMULATION;
        case 30: // CHECKED_PRODUCT_DOWN_SUM
          return CHECKED_PRODUCT_DOWN_SUM;
        case 31: // CHECKED_PRODUCT_DOWN_COMULATION
          return CHECKED_PRODUCT_DOWN_COMULATION;
        case 32: // CHECKED_MEMBER_COUNT
          return CHECKED_MEMBER_COUNT;
        case 33: // CHECKED_MEMBER_COMULATION_COUNT
          return CHECKED_MEMBER_COMULATION_COUNT;
        case 34: // TYPE
          return TYPE;
        case 35: // START_YEAR
          return START_YEAR;
        case 36: // END_YEAR
          return END_YEAR;
        case 37: // START_MONTH
          return START_MONTH;
        case 38: // END_MONTH
          return END_MONTH;
        case 39: // START_WEEK
          return START_WEEK;
        case 40: // END_WEEK
          return END_WEEK;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ORGLEVEL_ISSET_ID = 0;
  private static final int __CHECKEDMERCHANT_ISSET_ID = 1;
  private static final int __CHECKEDMERCHANTCATEGORY_ISSET_ID = 2;
  private static final int __CHECKEDAMOUNT_ISSET_ID = 3;
  private static final int __CHECKEDAMOUNTCUMULATION_ISSET_ID = 4;
  private static final int __CHECKEDAMOUNTREFUND_ISSET_ID = 5;
  private static final int __CHECKEDAMOUNTTURNOVER_ISSET_ID = 6;
  private static final int __CHECKEDAMOUNTCUMULATIONTURNOVER_ISSET_ID = 7;
  private static final int __CHECKEDORDERCOUNT_ISSET_ID = 8;
  private static final int __CHECKEDORDERCUMULATION_ISSET_ID = 9;
  private static final int __CHECKEDORDERREFUND_ISSET_ID = 10;
  private static final int __CHECKEDORDERTURNOVER_ISSET_ID = 11;
  private static final int __CHECKEDORDERCUMULATIONTURNOVER_ISSET_ID = 12;
  private static final int __CHECKEDMERCHANTSUM_ISSET_ID = 13;
  private static final int __CHECKEDMERCHANTCANCELCONTRACT_ISSET_ID = 14;
  private static final int __CHECKEDMERCHANTCUMULATION_ISSET_ID = 15;
  private static final int __CHECKEDOUTLETCOUNT_ISSET_ID = 16;
  private static final int __CHECKEDOUTLETCUMULATION_ISSET_ID = 17;
  private static final int __CHECKEDPRODUCTSUM_ISSET_ID = 18;
  private static final int __CHECKEDPRODUCTCUMULATION_ISSET_ID = 19;
  private static final int __CHECKEDPRODUCTDOWNSUM_ISSET_ID = 20;
  private static final int __CHECKEDPRODUCTDOWNCOMULATION_ISSET_ID = 21;
  private static final int __CHECKEDMEMBERCOUNT_ISSET_ID = 22;
  private static final int __CHECKEDMEMBERCOMULATIONCOUNT_ISSET_ID = 23;
  private int __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.LATITUDE_TUPE,_Fields.COUNT_TYPE,_Fields.START_DATE,_Fields.END_DATE,_Fields.CLIENT_ID,_Fields.PLATFORM,_Fields.ORG_CODE,_Fields.ORG_LEVEL,_Fields.CHECKED_MERCHANT,_Fields.CHECKED_MERCHANT_CATEGORY,_Fields.ORDER_TYPE,_Fields.PAY_TYPE,_Fields.CHECKED_AMOUNT,_Fields.CHECKED_AMOUNT_CUMULATION,_Fields.CHECKED_AMOUNT_REFUND,_Fields.CHECKED_AMOUNT_TURNOVER,_Fields.CHECKED_AMOUNT_CUMULATION_TURNOVER,_Fields.CHECKED_ORDER_COUNT,_Fields.CHECKED_ORDER_CUMULATION,_Fields.CHECKED_ORDER_REFUND,_Fields.CHECKED_ORDER_TURNOVER,_Fields.CHECKED_ORDER_CUMULATION_TURNOVER,_Fields.CHECKED_MERCHANT_SUM,_Fields.CHECKED_MERCHANT_CANCEL_CONTRACT,_Fields.CHECKED_MERCHANT_CUMULATION,_Fields.CHECKED_OUTLET_COUNT,_Fields.CHECKED_OUTLET_CUMULATION,_Fields.CHECKED_PRODUCT_SUM,_Fields.CHECKED_PRODUCT_CUMULATION,_Fields.CHECKED_PRODUCT_DOWN_SUM,_Fields.CHECKED_PRODUCT_DOWN_COMULATION,_Fields.CHECKED_MEMBER_COUNT,_Fields.CHECKED_MEMBER_COMULATION_COUNT,_Fields.TYPE,_Fields.START_YEAR,_Fields.END_YEAR,_Fields.START_MONTH,_Fields.END_MONTH,_Fields.START_WEEK,_Fields.END_WEEK};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.LATITUDE_TUPE, new org.apache.thrift.meta_data.FieldMetaData("latitudeTupe", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COUNT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("countType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.START_DATE, new org.apache.thrift.meta_data.FieldMetaData("startDate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.END_DATE, new org.apache.thrift.meta_data.FieldMetaData("endDate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PLATFORM, new org.apache.thrift.meta_data.FieldMetaData("platform", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORG_CODE, new org.apache.thrift.meta_data.FieldMetaData("orgCode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORG_LEVEL, new org.apache.thrift.meta_data.FieldMetaData("orgLevel", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CHECKED_MERCHANT, new org.apache.thrift.meta_data.FieldMetaData("checkedMerchant", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.CHECKED_MERCHANT_CATEGORY, new org.apache.thrift.meta_data.FieldMetaData("checkedMerchantCategory", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.ORDER_TYPE, new org.apache.thrift.meta_data.FieldMetaData("orderType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAY_TYPE, new org.apache.thrift.meta_data.FieldMetaData("payType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHECKED_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("checkedAmount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.CHECKED_AMOUNT_CUMULATION, new org.apache.thrift.meta_data.FieldMetaData("checkedAmountCumulation", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.CHECKED_AMOUNT_REFUND, new org.apache.thrift.meta_data.FieldMetaData("checkedAmountRefund", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.CHECKED_AMOUNT_TURNOVER, new org.apache.thrift.meta_data.FieldMetaData("checkedAmountTurnover", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.CHECKED_AMOUNT_CUMULATION_TURNOVER, new org.apache.thrift.meta_data.FieldMetaData("checkedAmountCumulationTurnover", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.CHECKED_ORDER_COUNT, new org.apache.thrift.meta_data.FieldMetaData("checkedOrderCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.CHECKED_ORDER_CUMULATION, new org.apache.thrift.meta_data.FieldMetaData("checkedOrderCumulation", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.CHECKED_ORDER_REFUND, new org.apache.thrift.meta_data.FieldMetaData("checkedOrderRefund", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.CHECKED_ORDER_TURNOVER, new org.apache.thrift.meta_data.FieldMetaData("checkedOrderTurnover", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.CHECKED_ORDER_CUMULATION_TURNOVER, new org.apache.thrift.meta_data.FieldMetaData("checkedOrderCumulationTurnover", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.CHECKED_MERCHANT_SUM, new org.apache.thrift.meta_data.FieldMetaData("checkedMerchantSum", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.CHECKED_MERCHANT_CANCEL_CONTRACT, new org.apache.thrift.meta_data.FieldMetaData("checkedMerchantCancelContract", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.CHECKED_MERCHANT_CUMULATION, new org.apache.thrift.meta_data.FieldMetaData("checkedMerchantCumulation", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.CHECKED_OUTLET_COUNT, new org.apache.thrift.meta_data.FieldMetaData("checkedOutletCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.CHECKED_OUTLET_CUMULATION, new org.apache.thrift.meta_data.FieldMetaData("checkedOutletCumulation", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.CHECKED_PRODUCT_SUM, new org.apache.thrift.meta_data.FieldMetaData("checkedProductSum", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.CHECKED_PRODUCT_CUMULATION, new org.apache.thrift.meta_data.FieldMetaData("checkedProductCumulation", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.CHECKED_PRODUCT_DOWN_SUM, new org.apache.thrift.meta_data.FieldMetaData("checkedProductDownSum", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.CHECKED_PRODUCT_DOWN_COMULATION, new org.apache.thrift.meta_data.FieldMetaData("checkedProductDownComulation", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.CHECKED_MEMBER_COUNT, new org.apache.thrift.meta_data.FieldMetaData("checkedMemberCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.CHECKED_MEMBER_COMULATION_COUNT, new org.apache.thrift.meta_data.FieldMetaData("checkedMemberComulationCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.START_YEAR, new org.apache.thrift.meta_data.FieldMetaData("startYear", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.END_YEAR, new org.apache.thrift.meta_data.FieldMetaData("endYear", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.START_MONTH, new org.apache.thrift.meta_data.FieldMetaData("startMonth", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.END_MONTH, new org.apache.thrift.meta_data.FieldMetaData("endMonth", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.START_WEEK, new org.apache.thrift.meta_data.FieldMetaData("startWeek", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.END_WEEK, new org.apache.thrift.meta_data.FieldMetaData("endWeek", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ReportReqVo.class, metaDataMap);
  }

  public ReportReqVo() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ReportReqVo(ReportReqVo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetLatitudeTupe()) {
      this.latitudeTupe = other.latitudeTupe;
    }
    if (other.isSetCountType()) {
      this.countType = other.countType;
    }
    if (other.isSetStartDate()) {
      this.startDate = other.startDate;
    }
    if (other.isSetEndDate()) {
      this.endDate = other.endDate;
    }
    if (other.isSetClientId()) {
      this.clientId = other.clientId;
    }
    if (other.isSetPlatform()) {
      this.platform = other.platform;
    }
    if (other.isSetOrgCode()) {
      this.orgCode = other.orgCode;
    }
    this.orgLevel = other.orgLevel;
    this.checkedMerchant = other.checkedMerchant;
    this.checkedMerchantCategory = other.checkedMerchantCategory;
    if (other.isSetOrderType()) {
      this.orderType = other.orderType;
    }
    if (other.isSetPayType()) {
      this.payType = other.payType;
    }
    this.checkedAmount = other.checkedAmount;
    this.checkedAmountCumulation = other.checkedAmountCumulation;
    this.checkedAmountRefund = other.checkedAmountRefund;
    this.checkedAmountTurnover = other.checkedAmountTurnover;
    this.checkedAmountCumulationTurnover = other.checkedAmountCumulationTurnover;
    this.checkedOrderCount = other.checkedOrderCount;
    this.checkedOrderCumulation = other.checkedOrderCumulation;
    this.checkedOrderRefund = other.checkedOrderRefund;
    this.checkedOrderTurnover = other.checkedOrderTurnover;
    this.checkedOrderCumulationTurnover = other.checkedOrderCumulationTurnover;
    this.checkedMerchantSum = other.checkedMerchantSum;
    this.checkedMerchantCancelContract = other.checkedMerchantCancelContract;
    this.checkedMerchantCumulation = other.checkedMerchantCumulation;
    this.checkedOutletCount = other.checkedOutletCount;
    this.checkedOutletCumulation = other.checkedOutletCumulation;
    this.checkedProductSum = other.checkedProductSum;
    this.checkedProductCumulation = other.checkedProductCumulation;
    this.checkedProductDownSum = other.checkedProductDownSum;
    this.checkedProductDownComulation = other.checkedProductDownComulation;
    this.checkedMemberCount = other.checkedMemberCount;
    this.checkedMemberComulationCount = other.checkedMemberComulationCount;
    if (other.isSetType()) {
      this.type = other.type;
    }
    if (other.isSetStartYear()) {
      this.startYear = other.startYear;
    }
    if (other.isSetEndYear()) {
      this.endYear = other.endYear;
    }
    if (other.isSetStartMonth()) {
      this.startMonth = other.startMonth;
    }
    if (other.isSetEndMonth()) {
      this.endMonth = other.endMonth;
    }
    if (other.isSetStartWeek()) {
      this.startWeek = other.startWeek;
    }
    if (other.isSetEndWeek()) {
      this.endWeek = other.endWeek;
    }
  }

  public ReportReqVo deepCopy() {
    return new ReportReqVo(this);
  }

  @Override
  public void clear() {
    this.latitudeTupe = null;
    this.countType = null;
    this.startDate = null;
    this.endDate = null;
    this.clientId = null;
    this.platform = null;
    this.orgCode = null;
    setOrgLevelIsSet(false);
    this.orgLevel = 0;
    setCheckedMerchantIsSet(false);
    this.checkedMerchant = false;
    setCheckedMerchantCategoryIsSet(false);
    this.checkedMerchantCategory = false;
    this.orderType = null;
    this.payType = null;
    setCheckedAmountIsSet(false);
    this.checkedAmount = false;
    setCheckedAmountCumulationIsSet(false);
    this.checkedAmountCumulation = false;
    setCheckedAmountRefundIsSet(false);
    this.checkedAmountRefund = false;
    setCheckedAmountTurnoverIsSet(false);
    this.checkedAmountTurnover = false;
    setCheckedAmountCumulationTurnoverIsSet(false);
    this.checkedAmountCumulationTurnover = false;
    setCheckedOrderCountIsSet(false);
    this.checkedOrderCount = false;
    setCheckedOrderCumulationIsSet(false);
    this.checkedOrderCumulation = false;
    setCheckedOrderRefundIsSet(false);
    this.checkedOrderRefund = false;
    setCheckedOrderTurnoverIsSet(false);
    this.checkedOrderTurnover = false;
    setCheckedOrderCumulationTurnoverIsSet(false);
    this.checkedOrderCumulationTurnover = false;
    setCheckedMerchantSumIsSet(false);
    this.checkedMerchantSum = false;
    setCheckedMerchantCancelContractIsSet(false);
    this.checkedMerchantCancelContract = false;
    setCheckedMerchantCumulationIsSet(false);
    this.checkedMerchantCumulation = false;
    setCheckedOutletCountIsSet(false);
    this.checkedOutletCount = false;
    setCheckedOutletCumulationIsSet(false);
    this.checkedOutletCumulation = false;
    setCheckedProductSumIsSet(false);
    this.checkedProductSum = false;
    setCheckedProductCumulationIsSet(false);
    this.checkedProductCumulation = false;
    setCheckedProductDownSumIsSet(false);
    this.checkedProductDownSum = false;
    setCheckedProductDownComulationIsSet(false);
    this.checkedProductDownComulation = false;
    setCheckedMemberCountIsSet(false);
    this.checkedMemberCount = false;
    setCheckedMemberComulationCountIsSet(false);
    this.checkedMemberComulationCount = false;
    this.type = null;
    this.startYear = null;
    this.endYear = null;
    this.startMonth = null;
    this.endMonth = null;
    this.startWeek = null;
    this.endWeek = null;
  }

  /**
   * 查询纬度类型：amountLat 金额纬度;orderLat 订单纬度;merchantLat 商户纬度;productLat 商品纬度;memberLat 用户纬度;不传则所有*
   */
  public String getLatitudeTupe() {
    return this.latitudeTupe;
  }

  /**
   * 查询纬度类型：amountLat 金额纬度;orderLat 订单纬度;merchantLat 商户纬度;productLat 商品纬度;memberLat 用户纬度;不传则所有*
   */
  public ReportReqVo setLatitudeTupe(String latitudeTupe) {
    this.latitudeTupe = latitudeTupe;
    return this;
  }

  public void unsetLatitudeTupe() {
    this.latitudeTupe = null;
  }

  /** Returns true if field latitudeTupe is set (has been assigned a value) and false otherwise */
  public boolean isSetLatitudeTupe() {
    return this.latitudeTupe != null;
  }

  public void setLatitudeTupeIsSet(boolean value) {
    if (!value) {
      this.latitudeTupe = null;
    }
  }

  /**
   * 统计类型：day：按天;week：按周;month：按月;diy：自定义*
   */
  public String getCountType() {
    return this.countType;
  }

  /**
   * 统计类型：day：按天;week：按周;month：按月;diy：自定义*
   */
  public ReportReqVo setCountType(String countType) {
    this.countType = countType;
    return this;
  }

  public void unsetCountType() {
    this.countType = null;
  }

  /** Returns true if field countType is set (has been assigned a value) and false otherwise */
  public boolean isSetCountType() {
    return this.countType != null;
  }

  public void setCountTypeIsSet(boolean value) {
    if (!value) {
      this.countType = null;
    }
  }

  /**
   * 筛选开始日期*
   */
  public String getStartDate() {
    return this.startDate;
  }

  /**
   * 筛选开始日期*
   */
  public ReportReqVo setStartDate(String startDate) {
    this.startDate = startDate;
    return this;
  }

  public void unsetStartDate() {
    this.startDate = null;
  }

  /** Returns true if field startDate is set (has been assigned a value) and false otherwise */
  public boolean isSetStartDate() {
    return this.startDate != null;
  }

  public void setStartDateIsSet(boolean value) {
    if (!value) {
      this.startDate = null;
    }
  }

  /**
   * 筛选结束日期*
   */
  public String getEndDate() {
    return this.endDate;
  }

  /**
   * 筛选结束日期*
   */
  public ReportReqVo setEndDate(String endDate) {
    this.endDate = endDate;
    return this;
  }

  public void unsetEndDate() {
    this.endDate = null;
  }

  /** Returns true if field endDate is set (has been assigned a value) and false otherwise */
  public boolean isSetEndDate() {
    return this.endDate != null;
  }

  public void setEndDateIsSet(boolean value) {
    if (!value) {
      this.endDate = null;
    }
  }

  /**
   * 银行*
   */
  public String getClientId() {
    return this.clientId;
  }

  /**
   * 银行*
   */
  public ReportReqVo setClientId(String clientId) {
    this.clientId = clientId;
    return this;
  }

  public void unsetClientId() {
    this.clientId = null;
  }

  /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
  public boolean isSetClientId() {
    return this.clientId != null;
  }

  public void setClientIdIsSet(boolean value) {
    if (!value) {
      this.clientId = null;
    }
  }

  /**
   * 业务平台*
   */
  public String getPlatform() {
    return this.platform;
  }

  /**
   * 业务平台*
   */
  public ReportReqVo setPlatform(String platform) {
    this.platform = platform;
    return this;
  }

  public void unsetPlatform() {
    this.platform = null;
  }

  /** Returns true if field platform is set (has been assigned a value) and false otherwise */
  public boolean isSetPlatform() {
    return this.platform != null;
  }

  public void setPlatformIsSet(boolean value) {
    if (!value) {
      this.platform = null;
    }
  }

  /**
   * 机构号*
   */
  public String getOrgCode() {
    return this.orgCode;
  }

  /**
   * 机构号*
   */
  public ReportReqVo setOrgCode(String orgCode) {
    this.orgCode = orgCode;
    return this;
  }

  public void unsetOrgCode() {
    this.orgCode = null;
  }

  /** Returns true if field orgCode is set (has been assigned a value) and false otherwise */
  public boolean isSetOrgCode() {
    return this.orgCode != null;
  }

  public void setOrgCodeIsSet(boolean value) {
    if (!value) {
      this.orgCode = null;
    }
  }

  /**
   * 机构等级*
   */
  public int getOrgLevel() {
    return this.orgLevel;
  }

  /**
   * 机构等级*
   */
  public ReportReqVo setOrgLevel(int orgLevel) {
    this.orgLevel = orgLevel;
    setOrgLevelIsSet(true);
    return this;
  }

  public void unsetOrgLevel() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ORGLEVEL_ISSET_ID);
  }

  /** Returns true if field orgLevel is set (has been assigned a value) and false otherwise */
  public boolean isSetOrgLevel() {
    return EncodingUtils.testBit(__isset_bitfield, __ORGLEVEL_ISSET_ID);
  }

  public void setOrgLevelIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ORGLEVEL_ISSET_ID, value);
  }

  /**
   * 是否选中商户维度*
   */
  public boolean isCheckedMerchant() {
    return this.checkedMerchant;
  }

  /**
   * 是否选中商户维度*
   */
  public ReportReqVo setCheckedMerchant(boolean checkedMerchant) {
    this.checkedMerchant = checkedMerchant;
    setCheckedMerchantIsSet(true);
    return this;
  }

  public void unsetCheckedMerchant() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CHECKEDMERCHANT_ISSET_ID);
  }

  /** Returns true if field checkedMerchant is set (has been assigned a value) and false otherwise */
  public boolean isSetCheckedMerchant() {
    return EncodingUtils.testBit(__isset_bitfield, __CHECKEDMERCHANT_ISSET_ID);
  }

  public void setCheckedMerchantIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CHECKEDMERCHANT_ISSET_ID, value);
  }

  /**
   * 是否选中商户类目纬度*
   */
  public boolean isCheckedMerchantCategory() {
    return this.checkedMerchantCategory;
  }

  /**
   * 是否选中商户类目纬度*
   */
  public ReportReqVo setCheckedMerchantCategory(boolean checkedMerchantCategory) {
    this.checkedMerchantCategory = checkedMerchantCategory;
    setCheckedMerchantCategoryIsSet(true);
    return this;
  }

  public void unsetCheckedMerchantCategory() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CHECKEDMERCHANTCATEGORY_ISSET_ID);
  }

  /** Returns true if field checkedMerchantCategory is set (has been assigned a value) and false otherwise */
  public boolean isSetCheckedMerchantCategory() {
    return EncodingUtils.testBit(__isset_bitfield, __CHECKEDMERCHANTCATEGORY_ISSET_ID);
  }

  public void setCheckedMerchantCategoryIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CHECKEDMERCHANTCATEGORY_ISSET_ID, value);
  }

  /**
   * 业务类型*
   */
  public String getOrderType() {
    return this.orderType;
  }

  /**
   * 业务类型*
   */
  public ReportReqVo setOrderType(String orderType) {
    this.orderType = orderType;
    return this;
  }

  public void unsetOrderType() {
    this.orderType = null;
  }

  /** Returns true if field orderType is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderType() {
    return this.orderType != null;
  }

  public void setOrderTypeIsSet(boolean value) {
    if (!value) {
      this.orderType = null;
    }
  }

  /**
   * 支付方式*
   */
  public String getPayType() {
    return this.payType;
  }

  /**
   * 支付方式*
   */
  public ReportReqVo setPayType(String payType) {
    this.payType = payType;
    return this;
  }

  public void unsetPayType() {
    this.payType = null;
  }

  /** Returns true if field payType is set (has been assigned a value) and false otherwise */
  public boolean isSetPayType() {
    return this.payType != null;
  }

  public void setPayTypeIsSet(boolean value) {
    if (!value) {
      this.payType = null;
    }
  }

  /**
   * 金额指标—金额是否选中*
   */
  public boolean isCheckedAmount() {
    return this.checkedAmount;
  }

  /**
   * 金额指标—金额是否选中*
   */
  public ReportReqVo setCheckedAmount(boolean checkedAmount) {
    this.checkedAmount = checkedAmount;
    setCheckedAmountIsSet(true);
    return this;
  }

  public void unsetCheckedAmount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CHECKEDAMOUNT_ISSET_ID);
  }

  /** Returns true if field checkedAmount is set (has been assigned a value) and false otherwise */
  public boolean isSetCheckedAmount() {
    return EncodingUtils.testBit(__isset_bitfield, __CHECKEDAMOUNT_ISSET_ID);
  }

  public void setCheckedAmountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CHECKEDAMOUNT_ISSET_ID, value);
  }

  /**
   * 金额指标—累积金额否选中*
   */
  public boolean isCheckedAmountCumulation() {
    return this.checkedAmountCumulation;
  }

  /**
   * 金额指标—累积金额否选中*
   */
  public ReportReqVo setCheckedAmountCumulation(boolean checkedAmountCumulation) {
    this.checkedAmountCumulation = checkedAmountCumulation;
    setCheckedAmountCumulationIsSet(true);
    return this;
  }

  public void unsetCheckedAmountCumulation() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CHECKEDAMOUNTCUMULATION_ISSET_ID);
  }

  /** Returns true if field checkedAmountCumulation is set (has been assigned a value) and false otherwise */
  public boolean isSetCheckedAmountCumulation() {
    return EncodingUtils.testBit(__isset_bitfield, __CHECKEDAMOUNTCUMULATION_ISSET_ID);
  }

  public void setCheckedAmountCumulationIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CHECKEDAMOUNTCUMULATION_ISSET_ID, value);
  }

  /**
   * 金额指标—退款金额否选中*
   */
  public boolean isCheckedAmountRefund() {
    return this.checkedAmountRefund;
  }

  /**
   * 金额指标—退款金额否选中*
   */
  public ReportReqVo setCheckedAmountRefund(boolean checkedAmountRefund) {
    this.checkedAmountRefund = checkedAmountRefund;
    setCheckedAmountRefundIsSet(true);
    return this;
  }

  public void unsetCheckedAmountRefund() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CHECKEDAMOUNTREFUND_ISSET_ID);
  }

  /** Returns true if field checkedAmountRefund is set (has been assigned a value) and false otherwise */
  public boolean isSetCheckedAmountRefund() {
    return EncodingUtils.testBit(__isset_bitfield, __CHECKEDAMOUNTREFUND_ISSET_ID);
  }

  public void setCheckedAmountRefundIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CHECKEDAMOUNTREFUND_ISSET_ID, value);
  }

  /**
   * 金额指标—成交金额否选中*
   */
  public boolean isCheckedAmountTurnover() {
    return this.checkedAmountTurnover;
  }

  /**
   * 金额指标—成交金额否选中*
   */
  public ReportReqVo setCheckedAmountTurnover(boolean checkedAmountTurnover) {
    this.checkedAmountTurnover = checkedAmountTurnover;
    setCheckedAmountTurnoverIsSet(true);
    return this;
  }

  public void unsetCheckedAmountTurnover() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CHECKEDAMOUNTTURNOVER_ISSET_ID);
  }

  /** Returns true if field checkedAmountTurnover is set (has been assigned a value) and false otherwise */
  public boolean isSetCheckedAmountTurnover() {
    return EncodingUtils.testBit(__isset_bitfield, __CHECKEDAMOUNTTURNOVER_ISSET_ID);
  }

  public void setCheckedAmountTurnoverIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CHECKEDAMOUNTTURNOVER_ISSET_ID, value);
  }

  /**
   * 金额指标-累积成交金额否选中*
   */
  public boolean isCheckedAmountCumulationTurnover() {
    return this.checkedAmountCumulationTurnover;
  }

  /**
   * 金额指标-累积成交金额否选中*
   */
  public ReportReqVo setCheckedAmountCumulationTurnover(boolean checkedAmountCumulationTurnover) {
    this.checkedAmountCumulationTurnover = checkedAmountCumulationTurnover;
    setCheckedAmountCumulationTurnoverIsSet(true);
    return this;
  }

  public void unsetCheckedAmountCumulationTurnover() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CHECKEDAMOUNTCUMULATIONTURNOVER_ISSET_ID);
  }

  /** Returns true if field checkedAmountCumulationTurnover is set (has been assigned a value) and false otherwise */
  public boolean isSetCheckedAmountCumulationTurnover() {
    return EncodingUtils.testBit(__isset_bitfield, __CHECKEDAMOUNTCUMULATIONTURNOVER_ISSET_ID);
  }

  public void setCheckedAmountCumulationTurnoverIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CHECKEDAMOUNTCUMULATIONTURNOVER_ISSET_ID, value);
  }

  /**
   * 订单指标-订单否选中*
   */
  public boolean isCheckedOrderCount() {
    return this.checkedOrderCount;
  }

  /**
   * 订单指标-订单否选中*
   */
  public ReportReqVo setCheckedOrderCount(boolean checkedOrderCount) {
    this.checkedOrderCount = checkedOrderCount;
    setCheckedOrderCountIsSet(true);
    return this;
  }

  public void unsetCheckedOrderCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CHECKEDORDERCOUNT_ISSET_ID);
  }

  /** Returns true if field checkedOrderCount is set (has been assigned a value) and false otherwise */
  public boolean isSetCheckedOrderCount() {
    return EncodingUtils.testBit(__isset_bitfield, __CHECKEDORDERCOUNT_ISSET_ID);
  }

  public void setCheckedOrderCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CHECKEDORDERCOUNT_ISSET_ID, value);
  }

  /**
   * 订单指标-累积订单否选中*
   */
  public boolean isCheckedOrderCumulation() {
    return this.checkedOrderCumulation;
  }

  /**
   * 订单指标-累积订单否选中*
   */
  public ReportReqVo setCheckedOrderCumulation(boolean checkedOrderCumulation) {
    this.checkedOrderCumulation = checkedOrderCumulation;
    setCheckedOrderCumulationIsSet(true);
    return this;
  }

  public void unsetCheckedOrderCumulation() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CHECKEDORDERCUMULATION_ISSET_ID);
  }

  /** Returns true if field checkedOrderCumulation is set (has been assigned a value) and false otherwise */
  public boolean isSetCheckedOrderCumulation() {
    return EncodingUtils.testBit(__isset_bitfield, __CHECKEDORDERCUMULATION_ISSET_ID);
  }

  public void setCheckedOrderCumulationIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CHECKEDORDERCUMULATION_ISSET_ID, value);
  }

  /**
   * 订单指标-退款订单否选中*
   */
  public boolean isCheckedOrderRefund() {
    return this.checkedOrderRefund;
  }

  /**
   * 订单指标-退款订单否选中*
   */
  public ReportReqVo setCheckedOrderRefund(boolean checkedOrderRefund) {
    this.checkedOrderRefund = checkedOrderRefund;
    setCheckedOrderRefundIsSet(true);
    return this;
  }

  public void unsetCheckedOrderRefund() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CHECKEDORDERREFUND_ISSET_ID);
  }

  /** Returns true if field checkedOrderRefund is set (has been assigned a value) and false otherwise */
  public boolean isSetCheckedOrderRefund() {
    return EncodingUtils.testBit(__isset_bitfield, __CHECKEDORDERREFUND_ISSET_ID);
  }

  public void setCheckedOrderRefundIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CHECKEDORDERREFUND_ISSET_ID, value);
  }

  /**
   * 订单指标-成交订单否选中*
   */
  public boolean isCheckedOrderTurnover() {
    return this.checkedOrderTurnover;
  }

  /**
   * 订单指标-成交订单否选中*
   */
  public ReportReqVo setCheckedOrderTurnover(boolean checkedOrderTurnover) {
    this.checkedOrderTurnover = checkedOrderTurnover;
    setCheckedOrderTurnoverIsSet(true);
    return this;
  }

  public void unsetCheckedOrderTurnover() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CHECKEDORDERTURNOVER_ISSET_ID);
  }

  /** Returns true if field checkedOrderTurnover is set (has been assigned a value) and false otherwise */
  public boolean isSetCheckedOrderTurnover() {
    return EncodingUtils.testBit(__isset_bitfield, __CHECKEDORDERTURNOVER_ISSET_ID);
  }

  public void setCheckedOrderTurnoverIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CHECKEDORDERTURNOVER_ISSET_ID, value);
  }

  /**
   * 订单指标-累积成交订单否选中*
   */
  public boolean isCheckedOrderCumulationTurnover() {
    return this.checkedOrderCumulationTurnover;
  }

  /**
   * 订单指标-累积成交订单否选中*
   */
  public ReportReqVo setCheckedOrderCumulationTurnover(boolean checkedOrderCumulationTurnover) {
    this.checkedOrderCumulationTurnover = checkedOrderCumulationTurnover;
    setCheckedOrderCumulationTurnoverIsSet(true);
    return this;
  }

  public void unsetCheckedOrderCumulationTurnover() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CHECKEDORDERCUMULATIONTURNOVER_ISSET_ID);
  }

  /** Returns true if field checkedOrderCumulationTurnover is set (has been assigned a value) and false otherwise */
  public boolean isSetCheckedOrderCumulationTurnover() {
    return EncodingUtils.testBit(__isset_bitfield, __CHECKEDORDERCUMULATIONTURNOVER_ISSET_ID);
  }

  public void setCheckedOrderCumulationTurnoverIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CHECKEDORDERCUMULATIONTURNOVER_ISSET_ID, value);
  }

  /**
   * 商户指标--商户数 否选中*
   */
  public boolean isCheckedMerchantSum() {
    return this.checkedMerchantSum;
  }

  /**
   * 商户指标--商户数 否选中*
   */
  public ReportReqVo setCheckedMerchantSum(boolean checkedMerchantSum) {
    this.checkedMerchantSum = checkedMerchantSum;
    setCheckedMerchantSumIsSet(true);
    return this;
  }

  public void unsetCheckedMerchantSum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CHECKEDMERCHANTSUM_ISSET_ID);
  }

  /** Returns true if field checkedMerchantSum is set (has been assigned a value) and false otherwise */
  public boolean isSetCheckedMerchantSum() {
    return EncodingUtils.testBit(__isset_bitfield, __CHECKEDMERCHANTSUM_ISSET_ID);
  }

  public void setCheckedMerchantSumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CHECKEDMERCHANTSUM_ISSET_ID, value);
  }

  /**
   * 商户指标--解约商户数 否选中*
   */
  public boolean isCheckedMerchantCancelContract() {
    return this.checkedMerchantCancelContract;
  }

  /**
   * 商户指标--解约商户数 否选中*
   */
  public ReportReqVo setCheckedMerchantCancelContract(boolean checkedMerchantCancelContract) {
    this.checkedMerchantCancelContract = checkedMerchantCancelContract;
    setCheckedMerchantCancelContractIsSet(true);
    return this;
  }

  public void unsetCheckedMerchantCancelContract() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CHECKEDMERCHANTCANCELCONTRACT_ISSET_ID);
  }

  /** Returns true if field checkedMerchantCancelContract is set (has been assigned a value) and false otherwise */
  public boolean isSetCheckedMerchantCancelContract() {
    return EncodingUtils.testBit(__isset_bitfield, __CHECKEDMERCHANTCANCELCONTRACT_ISSET_ID);
  }

  public void setCheckedMerchantCancelContractIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CHECKEDMERCHANTCANCELCONTRACT_ISSET_ID, value);
  }

  /**
   * 商户指标--累积商户数 否选中*
   */
  public boolean isCheckedMerchantCumulation() {
    return this.checkedMerchantCumulation;
  }

  /**
   * 商户指标--累积商户数 否选中*
   */
  public ReportReqVo setCheckedMerchantCumulation(boolean checkedMerchantCumulation) {
    this.checkedMerchantCumulation = checkedMerchantCumulation;
    setCheckedMerchantCumulationIsSet(true);
    return this;
  }

  public void unsetCheckedMerchantCumulation() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CHECKEDMERCHANTCUMULATION_ISSET_ID);
  }

  /** Returns true if field checkedMerchantCumulation is set (has been assigned a value) and false otherwise */
  public boolean isSetCheckedMerchantCumulation() {
    return EncodingUtils.testBit(__isset_bitfield, __CHECKEDMERCHANTCUMULATION_ISSET_ID);
  }

  public void setCheckedMerchantCumulationIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CHECKEDMERCHANTCUMULATION_ISSET_ID, value);
  }

  /**
   * 商户指标--门店数 否选中*
   */
  public boolean isCheckedOutletCount() {
    return this.checkedOutletCount;
  }

  /**
   * 商户指标--门店数 否选中*
   */
  public ReportReqVo setCheckedOutletCount(boolean checkedOutletCount) {
    this.checkedOutletCount = checkedOutletCount;
    setCheckedOutletCountIsSet(true);
    return this;
  }

  public void unsetCheckedOutletCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CHECKEDOUTLETCOUNT_ISSET_ID);
  }

  /** Returns true if field checkedOutletCount is set (has been assigned a value) and false otherwise */
  public boolean isSetCheckedOutletCount() {
    return EncodingUtils.testBit(__isset_bitfield, __CHECKEDOUTLETCOUNT_ISSET_ID);
  }

  public void setCheckedOutletCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CHECKEDOUTLETCOUNT_ISSET_ID, value);
  }

  /**
   * 商户指标--累积门店数 否选中*
   */
  public boolean isCheckedOutletCumulation() {
    return this.checkedOutletCumulation;
  }

  /**
   * 商户指标--累积门店数 否选中*
   */
  public ReportReqVo setCheckedOutletCumulation(boolean checkedOutletCumulation) {
    this.checkedOutletCumulation = checkedOutletCumulation;
    setCheckedOutletCumulationIsSet(true);
    return this;
  }

  public void unsetCheckedOutletCumulation() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CHECKEDOUTLETCUMULATION_ISSET_ID);
  }

  /** Returns true if field checkedOutletCumulation is set (has been assigned a value) and false otherwise */
  public boolean isSetCheckedOutletCumulation() {
    return EncodingUtils.testBit(__isset_bitfield, __CHECKEDOUTLETCUMULATION_ISSET_ID);
  }

  public void setCheckedOutletCumulationIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CHECKEDOUTLETCUMULATION_ISSET_ID, value);
  }

  /**
   * 商品指标—商品数量 否选中*
   */
  public boolean isCheckedProductSum() {
    return this.checkedProductSum;
  }

  /**
   * 商品指标—商品数量 否选中*
   */
  public ReportReqVo setCheckedProductSum(boolean checkedProductSum) {
    this.checkedProductSum = checkedProductSum;
    setCheckedProductSumIsSet(true);
    return this;
  }

  public void unsetCheckedProductSum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CHECKEDPRODUCTSUM_ISSET_ID);
  }

  /** Returns true if field checkedProductSum is set (has been assigned a value) and false otherwise */
  public boolean isSetCheckedProductSum() {
    return EncodingUtils.testBit(__isset_bitfield, __CHECKEDPRODUCTSUM_ISSET_ID);
  }

  public void setCheckedProductSumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CHECKEDPRODUCTSUM_ISSET_ID, value);
  }

  /**
   * 商品指数—累积商品数量 否选中*
   */
  public boolean isCheckedProductCumulation() {
    return this.checkedProductCumulation;
  }

  /**
   * 商品指数—累积商品数量 否选中*
   */
  public ReportReqVo setCheckedProductCumulation(boolean checkedProductCumulation) {
    this.checkedProductCumulation = checkedProductCumulation;
    setCheckedProductCumulationIsSet(true);
    return this;
  }

  public void unsetCheckedProductCumulation() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CHECKEDPRODUCTCUMULATION_ISSET_ID);
  }

  /** Returns true if field checkedProductCumulation is set (has been assigned a value) and false otherwise */
  public boolean isSetCheckedProductCumulation() {
    return EncodingUtils.testBit(__isset_bitfield, __CHECKEDPRODUCTCUMULATION_ISSET_ID);
  }

  public void setCheckedProductCumulationIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CHECKEDPRODUCTCUMULATION_ISSET_ID, value);
  }

  /**
   * 商品指数—下架商品数量 否选中*
   */
  public boolean isCheckedProductDownSum() {
    return this.checkedProductDownSum;
  }

  /**
   * 商品指数—下架商品数量 否选中*
   */
  public ReportReqVo setCheckedProductDownSum(boolean checkedProductDownSum) {
    this.checkedProductDownSum = checkedProductDownSum;
    setCheckedProductDownSumIsSet(true);
    return this;
  }

  public void unsetCheckedProductDownSum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CHECKEDPRODUCTDOWNSUM_ISSET_ID);
  }

  /** Returns true if field checkedProductDownSum is set (has been assigned a value) and false otherwise */
  public boolean isSetCheckedProductDownSum() {
    return EncodingUtils.testBit(__isset_bitfield, __CHECKEDPRODUCTDOWNSUM_ISSET_ID);
  }

  public void setCheckedProductDownSumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CHECKEDPRODUCTDOWNSUM_ISSET_ID, value);
  }

  /**
   * 商品只是—累积下架商品数量 否选中*
   */
  public boolean isCheckedProductDownComulation() {
    return this.checkedProductDownComulation;
  }

  /**
   * 商品只是—累积下架商品数量 否选中*
   */
  public ReportReqVo setCheckedProductDownComulation(boolean checkedProductDownComulation) {
    this.checkedProductDownComulation = checkedProductDownComulation;
    setCheckedProductDownComulationIsSet(true);
    return this;
  }

  public void unsetCheckedProductDownComulation() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CHECKEDPRODUCTDOWNCOMULATION_ISSET_ID);
  }

  /** Returns true if field checkedProductDownComulation is set (has been assigned a value) and false otherwise */
  public boolean isSetCheckedProductDownComulation() {
    return EncodingUtils.testBit(__isset_bitfield, __CHECKEDPRODUCTDOWNCOMULATION_ISSET_ID);
  }

  public void setCheckedProductDownComulationIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CHECKEDPRODUCTDOWNCOMULATION_ISSET_ID, value);
  }

  /**
   * 用户指数-消费用户数 否选中*
   */
  public boolean isCheckedMemberCount() {
    return this.checkedMemberCount;
  }

  /**
   * 用户指数-消费用户数 否选中*
   */
  public ReportReqVo setCheckedMemberCount(boolean checkedMemberCount) {
    this.checkedMemberCount = checkedMemberCount;
    setCheckedMemberCountIsSet(true);
    return this;
  }

  public void unsetCheckedMemberCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CHECKEDMEMBERCOUNT_ISSET_ID);
  }

  /** Returns true if field checkedMemberCount is set (has been assigned a value) and false otherwise */
  public boolean isSetCheckedMemberCount() {
    return EncodingUtils.testBit(__isset_bitfield, __CHECKEDMEMBERCOUNT_ISSET_ID);
  }

  public void setCheckedMemberCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CHECKEDMEMBERCOUNT_ISSET_ID, value);
  }

  /**
   * 用户指数—累积消费用户数 否选中*
   */
  public boolean isCheckedMemberComulationCount() {
    return this.checkedMemberComulationCount;
  }

  /**
   * 用户指数—累积消费用户数 否选中*
   */
  public ReportReqVo setCheckedMemberComulationCount(boolean checkedMemberComulationCount) {
    this.checkedMemberComulationCount = checkedMemberComulationCount;
    setCheckedMemberComulationCountIsSet(true);
    return this;
  }

  public void unsetCheckedMemberComulationCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CHECKEDMEMBERCOMULATIONCOUNT_ISSET_ID);
  }

  /** Returns true if field checkedMemberComulationCount is set (has been assigned a value) and false otherwise */
  public boolean isSetCheckedMemberComulationCount() {
    return EncodingUtils.testBit(__isset_bitfield, __CHECKEDMEMBERCOMULATIONCOUNT_ISSET_ID);
  }

  public void setCheckedMemberComulationCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CHECKEDMEMBERCOMULATIONCOUNT_ISSET_ID, value);
  }

  /**
   * 指标类型
   */
  public String getType() {
    return this.type;
  }

  /**
   * 指标类型
   */
  public ReportReqVo setType(String type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  /**
   * 用户指标查询    起始年
   */
  public String getStartYear() {
    return this.startYear;
  }

  /**
   * 用户指标查询    起始年
   */
  public ReportReqVo setStartYear(String startYear) {
    this.startYear = startYear;
    return this;
  }

  public void unsetStartYear() {
    this.startYear = null;
  }

  /** Returns true if field startYear is set (has been assigned a value) and false otherwise */
  public boolean isSetStartYear() {
    return this.startYear != null;
  }

  public void setStartYearIsSet(boolean value) {
    if (!value) {
      this.startYear = null;
    }
  }

  /**
   * 用户指标查询    结束年
   */
  public String getEndYear() {
    return this.endYear;
  }

  /**
   * 用户指标查询    结束年
   */
  public ReportReqVo setEndYear(String endYear) {
    this.endYear = endYear;
    return this;
  }

  public void unsetEndYear() {
    this.endYear = null;
  }

  /** Returns true if field endYear is set (has been assigned a value) and false otherwise */
  public boolean isSetEndYear() {
    return this.endYear != null;
  }

  public void setEndYearIsSet(boolean value) {
    if (!value) {
      this.endYear = null;
    }
  }

  /**
   * 用户指标查询    起始月
   */
  public String getStartMonth() {
    return this.startMonth;
  }

  /**
   * 用户指标查询    起始月
   */
  public ReportReqVo setStartMonth(String startMonth) {
    this.startMonth = startMonth;
    return this;
  }

  public void unsetStartMonth() {
    this.startMonth = null;
  }

  /** Returns true if field startMonth is set (has been assigned a value) and false otherwise */
  public boolean isSetStartMonth() {
    return this.startMonth != null;
  }

  public void setStartMonthIsSet(boolean value) {
    if (!value) {
      this.startMonth = null;
    }
  }

  /**
   * 用户指标查询    结束月
   */
  public String getEndMonth() {
    return this.endMonth;
  }

  /**
   * 用户指标查询    结束月
   */
  public ReportReqVo setEndMonth(String endMonth) {
    this.endMonth = endMonth;
    return this;
  }

  public void unsetEndMonth() {
    this.endMonth = null;
  }

  /** Returns true if field endMonth is set (has been assigned a value) and false otherwise */
  public boolean isSetEndMonth() {
    return this.endMonth != null;
  }

  public void setEndMonthIsSet(boolean value) {
    if (!value) {
      this.endMonth = null;
    }
  }

  /**
   * 用户指标查询    起始周
   */
  public String getStartWeek() {
    return this.startWeek;
  }

  /**
   * 用户指标查询    起始周
   */
  public ReportReqVo setStartWeek(String startWeek) {
    this.startWeek = startWeek;
    return this;
  }

  public void unsetStartWeek() {
    this.startWeek = null;
  }

  /** Returns true if field startWeek is set (has been assigned a value) and false otherwise */
  public boolean isSetStartWeek() {
    return this.startWeek != null;
  }

  public void setStartWeekIsSet(boolean value) {
    if (!value) {
      this.startWeek = null;
    }
  }

  /**
   * 用户指标查询    结束周
   */
  public String getEndWeek() {
    return this.endWeek;
  }

  /**
   * 用户指标查询    结束周
   */
  public ReportReqVo setEndWeek(String endWeek) {
    this.endWeek = endWeek;
    return this;
  }

  public void unsetEndWeek() {
    this.endWeek = null;
  }

  /** Returns true if field endWeek is set (has been assigned a value) and false otherwise */
  public boolean isSetEndWeek() {
    return this.endWeek != null;
  }

  public void setEndWeekIsSet(boolean value) {
    if (!value) {
      this.endWeek = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case LATITUDE_TUPE:
      if (value == null) {
        unsetLatitudeTupe();
      } else {
        setLatitudeTupe((String)value);
      }
      break;

    case COUNT_TYPE:
      if (value == null) {
        unsetCountType();
      } else {
        setCountType((String)value);
      }
      break;

    case START_DATE:
      if (value == null) {
        unsetStartDate();
      } else {
        setStartDate((String)value);
      }
      break;

    case END_DATE:
      if (value == null) {
        unsetEndDate();
      } else {
        setEndDate((String)value);
      }
      break;

    case CLIENT_ID:
      if (value == null) {
        unsetClientId();
      } else {
        setClientId((String)value);
      }
      break;

    case PLATFORM:
      if (value == null) {
        unsetPlatform();
      } else {
        setPlatform((String)value);
      }
      break;

    case ORG_CODE:
      if (value == null) {
        unsetOrgCode();
      } else {
        setOrgCode((String)value);
      }
      break;

    case ORG_LEVEL:
      if (value == null) {
        unsetOrgLevel();
      } else {
        setOrgLevel((Integer)value);
      }
      break;

    case CHECKED_MERCHANT:
      if (value == null) {
        unsetCheckedMerchant();
      } else {
        setCheckedMerchant((Boolean)value);
      }
      break;

    case CHECKED_MERCHANT_CATEGORY:
      if (value == null) {
        unsetCheckedMerchantCategory();
      } else {
        setCheckedMerchantCategory((Boolean)value);
      }
      break;

    case ORDER_TYPE:
      if (value == null) {
        unsetOrderType();
      } else {
        setOrderType((String)value);
      }
      break;

    case PAY_TYPE:
      if (value == null) {
        unsetPayType();
      } else {
        setPayType((String)value);
      }
      break;

    case CHECKED_AMOUNT:
      if (value == null) {
        unsetCheckedAmount();
      } else {
        setCheckedAmount((Boolean)value);
      }
      break;

    case CHECKED_AMOUNT_CUMULATION:
      if (value == null) {
        unsetCheckedAmountCumulation();
      } else {
        setCheckedAmountCumulation((Boolean)value);
      }
      break;

    case CHECKED_AMOUNT_REFUND:
      if (value == null) {
        unsetCheckedAmountRefund();
      } else {
        setCheckedAmountRefund((Boolean)value);
      }
      break;

    case CHECKED_AMOUNT_TURNOVER:
      if (value == null) {
        unsetCheckedAmountTurnover();
      } else {
        setCheckedAmountTurnover((Boolean)value);
      }
      break;

    case CHECKED_AMOUNT_CUMULATION_TURNOVER:
      if (value == null) {
        unsetCheckedAmountCumulationTurnover();
      } else {
        setCheckedAmountCumulationTurnover((Boolean)value);
      }
      break;

    case CHECKED_ORDER_COUNT:
      if (value == null) {
        unsetCheckedOrderCount();
      } else {
        setCheckedOrderCount((Boolean)value);
      }
      break;

    case CHECKED_ORDER_CUMULATION:
      if (value == null) {
        unsetCheckedOrderCumulation();
      } else {
        setCheckedOrderCumulation((Boolean)value);
      }
      break;

    case CHECKED_ORDER_REFUND:
      if (value == null) {
        unsetCheckedOrderRefund();
      } else {
        setCheckedOrderRefund((Boolean)value);
      }
      break;

    case CHECKED_ORDER_TURNOVER:
      if (value == null) {
        unsetCheckedOrderTurnover();
      } else {
        setCheckedOrderTurnover((Boolean)value);
      }
      break;

    case CHECKED_ORDER_CUMULATION_TURNOVER:
      if (value == null) {
        unsetCheckedOrderCumulationTurnover();
      } else {
        setCheckedOrderCumulationTurnover((Boolean)value);
      }
      break;

    case CHECKED_MERCHANT_SUM:
      if (value == null) {
        unsetCheckedMerchantSum();
      } else {
        setCheckedMerchantSum((Boolean)value);
      }
      break;

    case CHECKED_MERCHANT_CANCEL_CONTRACT:
      if (value == null) {
        unsetCheckedMerchantCancelContract();
      } else {
        setCheckedMerchantCancelContract((Boolean)value);
      }
      break;

    case CHECKED_MERCHANT_CUMULATION:
      if (value == null) {
        unsetCheckedMerchantCumulation();
      } else {
        setCheckedMerchantCumulation((Boolean)value);
      }
      break;

    case CHECKED_OUTLET_COUNT:
      if (value == null) {
        unsetCheckedOutletCount();
      } else {
        setCheckedOutletCount((Boolean)value);
      }
      break;

    case CHECKED_OUTLET_CUMULATION:
      if (value == null) {
        unsetCheckedOutletCumulation();
      } else {
        setCheckedOutletCumulation((Boolean)value);
      }
      break;

    case CHECKED_PRODUCT_SUM:
      if (value == null) {
        unsetCheckedProductSum();
      } else {
        setCheckedProductSum((Boolean)value);
      }
      break;

    case CHECKED_PRODUCT_CUMULATION:
      if (value == null) {
        unsetCheckedProductCumulation();
      } else {
        setCheckedProductCumulation((Boolean)value);
      }
      break;

    case CHECKED_PRODUCT_DOWN_SUM:
      if (value == null) {
        unsetCheckedProductDownSum();
      } else {
        setCheckedProductDownSum((Boolean)value);
      }
      break;

    case CHECKED_PRODUCT_DOWN_COMULATION:
      if (value == null) {
        unsetCheckedProductDownComulation();
      } else {
        setCheckedProductDownComulation((Boolean)value);
      }
      break;

    case CHECKED_MEMBER_COUNT:
      if (value == null) {
        unsetCheckedMemberCount();
      } else {
        setCheckedMemberCount((Boolean)value);
      }
      break;

    case CHECKED_MEMBER_COMULATION_COUNT:
      if (value == null) {
        unsetCheckedMemberComulationCount();
      } else {
        setCheckedMemberComulationCount((Boolean)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((String)value);
      }
      break;

    case START_YEAR:
      if (value == null) {
        unsetStartYear();
      } else {
        setStartYear((String)value);
      }
      break;

    case END_YEAR:
      if (value == null) {
        unsetEndYear();
      } else {
        setEndYear((String)value);
      }
      break;

    case START_MONTH:
      if (value == null) {
        unsetStartMonth();
      } else {
        setStartMonth((String)value);
      }
      break;

    case END_MONTH:
      if (value == null) {
        unsetEndMonth();
      } else {
        setEndMonth((String)value);
      }
      break;

    case START_WEEK:
      if (value == null) {
        unsetStartWeek();
      } else {
        setStartWeek((String)value);
      }
      break;

    case END_WEEK:
      if (value == null) {
        unsetEndWeek();
      } else {
        setEndWeek((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case LATITUDE_TUPE:
      return getLatitudeTupe();

    case COUNT_TYPE:
      return getCountType();

    case START_DATE:
      return getStartDate();

    case END_DATE:
      return getEndDate();

    case CLIENT_ID:
      return getClientId();

    case PLATFORM:
      return getPlatform();

    case ORG_CODE:
      return getOrgCode();

    case ORG_LEVEL:
      return Integer.valueOf(getOrgLevel());

    case CHECKED_MERCHANT:
      return Boolean.valueOf(isCheckedMerchant());

    case CHECKED_MERCHANT_CATEGORY:
      return Boolean.valueOf(isCheckedMerchantCategory());

    case ORDER_TYPE:
      return getOrderType();

    case PAY_TYPE:
      return getPayType();

    case CHECKED_AMOUNT:
      return Boolean.valueOf(isCheckedAmount());

    case CHECKED_AMOUNT_CUMULATION:
      return Boolean.valueOf(isCheckedAmountCumulation());

    case CHECKED_AMOUNT_REFUND:
      return Boolean.valueOf(isCheckedAmountRefund());

    case CHECKED_AMOUNT_TURNOVER:
      return Boolean.valueOf(isCheckedAmountTurnover());

    case CHECKED_AMOUNT_CUMULATION_TURNOVER:
      return Boolean.valueOf(isCheckedAmountCumulationTurnover());

    case CHECKED_ORDER_COUNT:
      return Boolean.valueOf(isCheckedOrderCount());

    case CHECKED_ORDER_CUMULATION:
      return Boolean.valueOf(isCheckedOrderCumulation());

    case CHECKED_ORDER_REFUND:
      return Boolean.valueOf(isCheckedOrderRefund());

    case CHECKED_ORDER_TURNOVER:
      return Boolean.valueOf(isCheckedOrderTurnover());

    case CHECKED_ORDER_CUMULATION_TURNOVER:
      return Boolean.valueOf(isCheckedOrderCumulationTurnover());

    case CHECKED_MERCHANT_SUM:
      return Boolean.valueOf(isCheckedMerchantSum());

    case CHECKED_MERCHANT_CANCEL_CONTRACT:
      return Boolean.valueOf(isCheckedMerchantCancelContract());

    case CHECKED_MERCHANT_CUMULATION:
      return Boolean.valueOf(isCheckedMerchantCumulation());

    case CHECKED_OUTLET_COUNT:
      return Boolean.valueOf(isCheckedOutletCount());

    case CHECKED_OUTLET_CUMULATION:
      return Boolean.valueOf(isCheckedOutletCumulation());

    case CHECKED_PRODUCT_SUM:
      return Boolean.valueOf(isCheckedProductSum());

    case CHECKED_PRODUCT_CUMULATION:
      return Boolean.valueOf(isCheckedProductCumulation());

    case CHECKED_PRODUCT_DOWN_SUM:
      return Boolean.valueOf(isCheckedProductDownSum());

    case CHECKED_PRODUCT_DOWN_COMULATION:
      return Boolean.valueOf(isCheckedProductDownComulation());

    case CHECKED_MEMBER_COUNT:
      return Boolean.valueOf(isCheckedMemberCount());

    case CHECKED_MEMBER_COMULATION_COUNT:
      return Boolean.valueOf(isCheckedMemberComulationCount());

    case TYPE:
      return getType();

    case START_YEAR:
      return getStartYear();

    case END_YEAR:
      return getEndYear();

    case START_MONTH:
      return getStartMonth();

    case END_MONTH:
      return getEndMonth();

    case START_WEEK:
      return getStartWeek();

    case END_WEEK:
      return getEndWeek();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case LATITUDE_TUPE:
      return isSetLatitudeTupe();
    case COUNT_TYPE:
      return isSetCountType();
    case START_DATE:
      return isSetStartDate();
    case END_DATE:
      return isSetEndDate();
    case CLIENT_ID:
      return isSetClientId();
    case PLATFORM:
      return isSetPlatform();
    case ORG_CODE:
      return isSetOrgCode();
    case ORG_LEVEL:
      return isSetOrgLevel();
    case CHECKED_MERCHANT:
      return isSetCheckedMerchant();
    case CHECKED_MERCHANT_CATEGORY:
      return isSetCheckedMerchantCategory();
    case ORDER_TYPE:
      return isSetOrderType();
    case PAY_TYPE:
      return isSetPayType();
    case CHECKED_AMOUNT:
      return isSetCheckedAmount();
    case CHECKED_AMOUNT_CUMULATION:
      return isSetCheckedAmountCumulation();
    case CHECKED_AMOUNT_REFUND:
      return isSetCheckedAmountRefund();
    case CHECKED_AMOUNT_TURNOVER:
      return isSetCheckedAmountTurnover();
    case CHECKED_AMOUNT_CUMULATION_TURNOVER:
      return isSetCheckedAmountCumulationTurnover();
    case CHECKED_ORDER_COUNT:
      return isSetCheckedOrderCount();
    case CHECKED_ORDER_CUMULATION:
      return isSetCheckedOrderCumulation();
    case CHECKED_ORDER_REFUND:
      return isSetCheckedOrderRefund();
    case CHECKED_ORDER_TURNOVER:
      return isSetCheckedOrderTurnover();
    case CHECKED_ORDER_CUMULATION_TURNOVER:
      return isSetCheckedOrderCumulationTurnover();
    case CHECKED_MERCHANT_SUM:
      return isSetCheckedMerchantSum();
    case CHECKED_MERCHANT_CANCEL_CONTRACT:
      return isSetCheckedMerchantCancelContract();
    case CHECKED_MERCHANT_CUMULATION:
      return isSetCheckedMerchantCumulation();
    case CHECKED_OUTLET_COUNT:
      return isSetCheckedOutletCount();
    case CHECKED_OUTLET_CUMULATION:
      return isSetCheckedOutletCumulation();
    case CHECKED_PRODUCT_SUM:
      return isSetCheckedProductSum();
    case CHECKED_PRODUCT_CUMULATION:
      return isSetCheckedProductCumulation();
    case CHECKED_PRODUCT_DOWN_SUM:
      return isSetCheckedProductDownSum();
    case CHECKED_PRODUCT_DOWN_COMULATION:
      return isSetCheckedProductDownComulation();
    case CHECKED_MEMBER_COUNT:
      return isSetCheckedMemberCount();
    case CHECKED_MEMBER_COMULATION_COUNT:
      return isSetCheckedMemberComulationCount();
    case TYPE:
      return isSetType();
    case START_YEAR:
      return isSetStartYear();
    case END_YEAR:
      return isSetEndYear();
    case START_MONTH:
      return isSetStartMonth();
    case END_MONTH:
      return isSetEndMonth();
    case START_WEEK:
      return isSetStartWeek();
    case END_WEEK:
      return isSetEndWeek();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ReportReqVo)
      return this.equals((ReportReqVo)that);
    return false;
  }

  public boolean equals(ReportReqVo that) {
    if (that == null)
      return false;

    boolean this_present_latitudeTupe = true && this.isSetLatitudeTupe();
    boolean that_present_latitudeTupe = true && that.isSetLatitudeTupe();
    if (this_present_latitudeTupe || that_present_latitudeTupe) {
      if (!(this_present_latitudeTupe && that_present_latitudeTupe))
        return false;
      if (!this.latitudeTupe.equals(that.latitudeTupe))
        return false;
    }

    boolean this_present_countType = true && this.isSetCountType();
    boolean that_present_countType = true && that.isSetCountType();
    if (this_present_countType || that_present_countType) {
      if (!(this_present_countType && that_present_countType))
        return false;
      if (!this.countType.equals(that.countType))
        return false;
    }

    boolean this_present_startDate = true && this.isSetStartDate();
    boolean that_present_startDate = true && that.isSetStartDate();
    if (this_present_startDate || that_present_startDate) {
      if (!(this_present_startDate && that_present_startDate))
        return false;
      if (!this.startDate.equals(that.startDate))
        return false;
    }

    boolean this_present_endDate = true && this.isSetEndDate();
    boolean that_present_endDate = true && that.isSetEndDate();
    if (this_present_endDate || that_present_endDate) {
      if (!(this_present_endDate && that_present_endDate))
        return false;
      if (!this.endDate.equals(that.endDate))
        return false;
    }

    boolean this_present_clientId = true && this.isSetClientId();
    boolean that_present_clientId = true && that.isSetClientId();
    if (this_present_clientId || that_present_clientId) {
      if (!(this_present_clientId && that_present_clientId))
        return false;
      if (!this.clientId.equals(that.clientId))
        return false;
    }

    boolean this_present_platform = true && this.isSetPlatform();
    boolean that_present_platform = true && that.isSetPlatform();
    if (this_present_platform || that_present_platform) {
      if (!(this_present_platform && that_present_platform))
        return false;
      if (!this.platform.equals(that.platform))
        return false;
    }

    boolean this_present_orgCode = true && this.isSetOrgCode();
    boolean that_present_orgCode = true && that.isSetOrgCode();
    if (this_present_orgCode || that_present_orgCode) {
      if (!(this_present_orgCode && that_present_orgCode))
        return false;
      if (!this.orgCode.equals(that.orgCode))
        return false;
    }

    boolean this_present_orgLevel = true && this.isSetOrgLevel();
    boolean that_present_orgLevel = true && that.isSetOrgLevel();
    if (this_present_orgLevel || that_present_orgLevel) {
      if (!(this_present_orgLevel && that_present_orgLevel))
        return false;
      if (this.orgLevel != that.orgLevel)
        return false;
    }

    boolean this_present_checkedMerchant = true && this.isSetCheckedMerchant();
    boolean that_present_checkedMerchant = true && that.isSetCheckedMerchant();
    if (this_present_checkedMerchant || that_present_checkedMerchant) {
      if (!(this_present_checkedMerchant && that_present_checkedMerchant))
        return false;
      if (this.checkedMerchant != that.checkedMerchant)
        return false;
    }

    boolean this_present_checkedMerchantCategory = true && this.isSetCheckedMerchantCategory();
    boolean that_present_checkedMerchantCategory = true && that.isSetCheckedMerchantCategory();
    if (this_present_checkedMerchantCategory || that_present_checkedMerchantCategory) {
      if (!(this_present_checkedMerchantCategory && that_present_checkedMerchantCategory))
        return false;
      if (this.checkedMerchantCategory != that.checkedMerchantCategory)
        return false;
    }

    boolean this_present_orderType = true && this.isSetOrderType();
    boolean that_present_orderType = true && that.isSetOrderType();
    if (this_present_orderType || that_present_orderType) {
      if (!(this_present_orderType && that_present_orderType))
        return false;
      if (!this.orderType.equals(that.orderType))
        return false;
    }

    boolean this_present_payType = true && this.isSetPayType();
    boolean that_present_payType = true && that.isSetPayType();
    if (this_present_payType || that_present_payType) {
      if (!(this_present_payType && that_present_payType))
        return false;
      if (!this.payType.equals(that.payType))
        return false;
    }

    boolean this_present_checkedAmount = true && this.isSetCheckedAmount();
    boolean that_present_checkedAmount = true && that.isSetCheckedAmount();
    if (this_present_checkedAmount || that_present_checkedAmount) {
      if (!(this_present_checkedAmount && that_present_checkedAmount))
        return false;
      if (this.checkedAmount != that.checkedAmount)
        return false;
    }

    boolean this_present_checkedAmountCumulation = true && this.isSetCheckedAmountCumulation();
    boolean that_present_checkedAmountCumulation = true && that.isSetCheckedAmountCumulation();
    if (this_present_checkedAmountCumulation || that_present_checkedAmountCumulation) {
      if (!(this_present_checkedAmountCumulation && that_present_checkedAmountCumulation))
        return false;
      if (this.checkedAmountCumulation != that.checkedAmountCumulation)
        return false;
    }

    boolean this_present_checkedAmountRefund = true && this.isSetCheckedAmountRefund();
    boolean that_present_checkedAmountRefund = true && that.isSetCheckedAmountRefund();
    if (this_present_checkedAmountRefund || that_present_checkedAmountRefund) {
      if (!(this_present_checkedAmountRefund && that_present_checkedAmountRefund))
        return false;
      if (this.checkedAmountRefund != that.checkedAmountRefund)
        return false;
    }

    boolean this_present_checkedAmountTurnover = true && this.isSetCheckedAmountTurnover();
    boolean that_present_checkedAmountTurnover = true && that.isSetCheckedAmountTurnover();
    if (this_present_checkedAmountTurnover || that_present_checkedAmountTurnover) {
      if (!(this_present_checkedAmountTurnover && that_present_checkedAmountTurnover))
        return false;
      if (this.checkedAmountTurnover != that.checkedAmountTurnover)
        return false;
    }

    boolean this_present_checkedAmountCumulationTurnover = true && this.isSetCheckedAmountCumulationTurnover();
    boolean that_present_checkedAmountCumulationTurnover = true && that.isSetCheckedAmountCumulationTurnover();
    if (this_present_checkedAmountCumulationTurnover || that_present_checkedAmountCumulationTurnover) {
      if (!(this_present_checkedAmountCumulationTurnover && that_present_checkedAmountCumulationTurnover))
        return false;
      if (this.checkedAmountCumulationTurnover != that.checkedAmountCumulationTurnover)
        return false;
    }

    boolean this_present_checkedOrderCount = true && this.isSetCheckedOrderCount();
    boolean that_present_checkedOrderCount = true && that.isSetCheckedOrderCount();
    if (this_present_checkedOrderCount || that_present_checkedOrderCount) {
      if (!(this_present_checkedOrderCount && that_present_checkedOrderCount))
        return false;
      if (this.checkedOrderCount != that.checkedOrderCount)
        return false;
    }

    boolean this_present_checkedOrderCumulation = true && this.isSetCheckedOrderCumulation();
    boolean that_present_checkedOrderCumulation = true && that.isSetCheckedOrderCumulation();
    if (this_present_checkedOrderCumulation || that_present_checkedOrderCumulation) {
      if (!(this_present_checkedOrderCumulation && that_present_checkedOrderCumulation))
        return false;
      if (this.checkedOrderCumulation != that.checkedOrderCumulation)
        return false;
    }

    boolean this_present_checkedOrderRefund = true && this.isSetCheckedOrderRefund();
    boolean that_present_checkedOrderRefund = true && that.isSetCheckedOrderRefund();
    if (this_present_checkedOrderRefund || that_present_checkedOrderRefund) {
      if (!(this_present_checkedOrderRefund && that_present_checkedOrderRefund))
        return false;
      if (this.checkedOrderRefund != that.checkedOrderRefund)
        return false;
    }

    boolean this_present_checkedOrderTurnover = true && this.isSetCheckedOrderTurnover();
    boolean that_present_checkedOrderTurnover = true && that.isSetCheckedOrderTurnover();
    if (this_present_checkedOrderTurnover || that_present_checkedOrderTurnover) {
      if (!(this_present_checkedOrderTurnover && that_present_checkedOrderTurnover))
        return false;
      if (this.checkedOrderTurnover != that.checkedOrderTurnover)
        return false;
    }

    boolean this_present_checkedOrderCumulationTurnover = true && this.isSetCheckedOrderCumulationTurnover();
    boolean that_present_checkedOrderCumulationTurnover = true && that.isSetCheckedOrderCumulationTurnover();
    if (this_present_checkedOrderCumulationTurnover || that_present_checkedOrderCumulationTurnover) {
      if (!(this_present_checkedOrderCumulationTurnover && that_present_checkedOrderCumulationTurnover))
        return false;
      if (this.checkedOrderCumulationTurnover != that.checkedOrderCumulationTurnover)
        return false;
    }

    boolean this_present_checkedMerchantSum = true && this.isSetCheckedMerchantSum();
    boolean that_present_checkedMerchantSum = true && that.isSetCheckedMerchantSum();
    if (this_present_checkedMerchantSum || that_present_checkedMerchantSum) {
      if (!(this_present_checkedMerchantSum && that_present_checkedMerchantSum))
        return false;
      if (this.checkedMerchantSum != that.checkedMerchantSum)
        return false;
    }

    boolean this_present_checkedMerchantCancelContract = true && this.isSetCheckedMerchantCancelContract();
    boolean that_present_checkedMerchantCancelContract = true && that.isSetCheckedMerchantCancelContract();
    if (this_present_checkedMerchantCancelContract || that_present_checkedMerchantCancelContract) {
      if (!(this_present_checkedMerchantCancelContract && that_present_checkedMerchantCancelContract))
        return false;
      if (this.checkedMerchantCancelContract != that.checkedMerchantCancelContract)
        return false;
    }

    boolean this_present_checkedMerchantCumulation = true && this.isSetCheckedMerchantCumulation();
    boolean that_present_checkedMerchantCumulation = true && that.isSetCheckedMerchantCumulation();
    if (this_present_checkedMerchantCumulation || that_present_checkedMerchantCumulation) {
      if (!(this_present_checkedMerchantCumulation && that_present_checkedMerchantCumulation))
        return false;
      if (this.checkedMerchantCumulation != that.checkedMerchantCumulation)
        return false;
    }

    boolean this_present_checkedOutletCount = true && this.isSetCheckedOutletCount();
    boolean that_present_checkedOutletCount = true && that.isSetCheckedOutletCount();
    if (this_present_checkedOutletCount || that_present_checkedOutletCount) {
      if (!(this_present_checkedOutletCount && that_present_checkedOutletCount))
        return false;
      if (this.checkedOutletCount != that.checkedOutletCount)
        return false;
    }

    boolean this_present_checkedOutletCumulation = true && this.isSetCheckedOutletCumulation();
    boolean that_present_checkedOutletCumulation = true && that.isSetCheckedOutletCumulation();
    if (this_present_checkedOutletCumulation || that_present_checkedOutletCumulation) {
      if (!(this_present_checkedOutletCumulation && that_present_checkedOutletCumulation))
        return false;
      if (this.checkedOutletCumulation != that.checkedOutletCumulation)
        return false;
    }

    boolean this_present_checkedProductSum = true && this.isSetCheckedProductSum();
    boolean that_present_checkedProductSum = true && that.isSetCheckedProductSum();
    if (this_present_checkedProductSum || that_present_checkedProductSum) {
      if (!(this_present_checkedProductSum && that_present_checkedProductSum))
        return false;
      if (this.checkedProductSum != that.checkedProductSum)
        return false;
    }

    boolean this_present_checkedProductCumulation = true && this.isSetCheckedProductCumulation();
    boolean that_present_checkedProductCumulation = true && that.isSetCheckedProductCumulation();
    if (this_present_checkedProductCumulation || that_present_checkedProductCumulation) {
      if (!(this_present_checkedProductCumulation && that_present_checkedProductCumulation))
        return false;
      if (this.checkedProductCumulation != that.checkedProductCumulation)
        return false;
    }

    boolean this_present_checkedProductDownSum = true && this.isSetCheckedProductDownSum();
    boolean that_present_checkedProductDownSum = true && that.isSetCheckedProductDownSum();
    if (this_present_checkedProductDownSum || that_present_checkedProductDownSum) {
      if (!(this_present_checkedProductDownSum && that_present_checkedProductDownSum))
        return false;
      if (this.checkedProductDownSum != that.checkedProductDownSum)
        return false;
    }

    boolean this_present_checkedProductDownComulation = true && this.isSetCheckedProductDownComulation();
    boolean that_present_checkedProductDownComulation = true && that.isSetCheckedProductDownComulation();
    if (this_present_checkedProductDownComulation || that_present_checkedProductDownComulation) {
      if (!(this_present_checkedProductDownComulation && that_present_checkedProductDownComulation))
        return false;
      if (this.checkedProductDownComulation != that.checkedProductDownComulation)
        return false;
    }

    boolean this_present_checkedMemberCount = true && this.isSetCheckedMemberCount();
    boolean that_present_checkedMemberCount = true && that.isSetCheckedMemberCount();
    if (this_present_checkedMemberCount || that_present_checkedMemberCount) {
      if (!(this_present_checkedMemberCount && that_present_checkedMemberCount))
        return false;
      if (this.checkedMemberCount != that.checkedMemberCount)
        return false;
    }

    boolean this_present_checkedMemberComulationCount = true && this.isSetCheckedMemberComulationCount();
    boolean that_present_checkedMemberComulationCount = true && that.isSetCheckedMemberComulationCount();
    if (this_present_checkedMemberComulationCount || that_present_checkedMemberComulationCount) {
      if (!(this_present_checkedMemberComulationCount && that_present_checkedMemberComulationCount))
        return false;
      if (this.checkedMemberComulationCount != that.checkedMemberComulationCount)
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_startYear = true && this.isSetStartYear();
    boolean that_present_startYear = true && that.isSetStartYear();
    if (this_present_startYear || that_present_startYear) {
      if (!(this_present_startYear && that_present_startYear))
        return false;
      if (!this.startYear.equals(that.startYear))
        return false;
    }

    boolean this_present_endYear = true && this.isSetEndYear();
    boolean that_present_endYear = true && that.isSetEndYear();
    if (this_present_endYear || that_present_endYear) {
      if (!(this_present_endYear && that_present_endYear))
        return false;
      if (!this.endYear.equals(that.endYear))
        return false;
    }

    boolean this_present_startMonth = true && this.isSetStartMonth();
    boolean that_present_startMonth = true && that.isSetStartMonth();
    if (this_present_startMonth || that_present_startMonth) {
      if (!(this_present_startMonth && that_present_startMonth))
        return false;
      if (!this.startMonth.equals(that.startMonth))
        return false;
    }

    boolean this_present_endMonth = true && this.isSetEndMonth();
    boolean that_present_endMonth = true && that.isSetEndMonth();
    if (this_present_endMonth || that_present_endMonth) {
      if (!(this_present_endMonth && that_present_endMonth))
        return false;
      if (!this.endMonth.equals(that.endMonth))
        return false;
    }

    boolean this_present_startWeek = true && this.isSetStartWeek();
    boolean that_present_startWeek = true && that.isSetStartWeek();
    if (this_present_startWeek || that_present_startWeek) {
      if (!(this_present_startWeek && that_present_startWeek))
        return false;
      if (!this.startWeek.equals(that.startWeek))
        return false;
    }

    boolean this_present_endWeek = true && this.isSetEndWeek();
    boolean that_present_endWeek = true && that.isSetEndWeek();
    if (this_present_endWeek || that_present_endWeek) {
      if (!(this_present_endWeek && that_present_endWeek))
        return false;
      if (!this.endWeek.equals(that.endWeek))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_latitudeTupe = true && (isSetLatitudeTupe());
    list.add(present_latitudeTupe);
    if (present_latitudeTupe)
      list.add(latitudeTupe);

    boolean present_countType = true && (isSetCountType());
    list.add(present_countType);
    if (present_countType)
      list.add(countType);

    boolean present_startDate = true && (isSetStartDate());
    list.add(present_startDate);
    if (present_startDate)
      list.add(startDate);

    boolean present_endDate = true && (isSetEndDate());
    list.add(present_endDate);
    if (present_endDate)
      list.add(endDate);

    boolean present_clientId = true && (isSetClientId());
    list.add(present_clientId);
    if (present_clientId)
      list.add(clientId);

    boolean present_platform = true && (isSetPlatform());
    list.add(present_platform);
    if (present_platform)
      list.add(platform);

    boolean present_orgCode = true && (isSetOrgCode());
    list.add(present_orgCode);
    if (present_orgCode)
      list.add(orgCode);

    boolean present_orgLevel = true && (isSetOrgLevel());
    list.add(present_orgLevel);
    if (present_orgLevel)
      list.add(orgLevel);

    boolean present_checkedMerchant = true && (isSetCheckedMerchant());
    list.add(present_checkedMerchant);
    if (present_checkedMerchant)
      list.add(checkedMerchant);

    boolean present_checkedMerchantCategory = true && (isSetCheckedMerchantCategory());
    list.add(present_checkedMerchantCategory);
    if (present_checkedMerchantCategory)
      list.add(checkedMerchantCategory);

    boolean present_orderType = true && (isSetOrderType());
    list.add(present_orderType);
    if (present_orderType)
      list.add(orderType);

    boolean present_payType = true && (isSetPayType());
    list.add(present_payType);
    if (present_payType)
      list.add(payType);

    boolean present_checkedAmount = true && (isSetCheckedAmount());
    list.add(present_checkedAmount);
    if (present_checkedAmount)
      list.add(checkedAmount);

    boolean present_checkedAmountCumulation = true && (isSetCheckedAmountCumulation());
    list.add(present_checkedAmountCumulation);
    if (present_checkedAmountCumulation)
      list.add(checkedAmountCumulation);

    boolean present_checkedAmountRefund = true && (isSetCheckedAmountRefund());
    list.add(present_checkedAmountRefund);
    if (present_checkedAmountRefund)
      list.add(checkedAmountRefund);

    boolean present_checkedAmountTurnover = true && (isSetCheckedAmountTurnover());
    list.add(present_checkedAmountTurnover);
    if (present_checkedAmountTurnover)
      list.add(checkedAmountTurnover);

    boolean present_checkedAmountCumulationTurnover = true && (isSetCheckedAmountCumulationTurnover());
    list.add(present_checkedAmountCumulationTurnover);
    if (present_checkedAmountCumulationTurnover)
      list.add(checkedAmountCumulationTurnover);

    boolean present_checkedOrderCount = true && (isSetCheckedOrderCount());
    list.add(present_checkedOrderCount);
    if (present_checkedOrderCount)
      list.add(checkedOrderCount);

    boolean present_checkedOrderCumulation = true && (isSetCheckedOrderCumulation());
    list.add(present_checkedOrderCumulation);
    if (present_checkedOrderCumulation)
      list.add(checkedOrderCumulation);

    boolean present_checkedOrderRefund = true && (isSetCheckedOrderRefund());
    list.add(present_checkedOrderRefund);
    if (present_checkedOrderRefund)
      list.add(checkedOrderRefund);

    boolean present_checkedOrderTurnover = true && (isSetCheckedOrderTurnover());
    list.add(present_checkedOrderTurnover);
    if (present_checkedOrderTurnover)
      list.add(checkedOrderTurnover);

    boolean present_checkedOrderCumulationTurnover = true && (isSetCheckedOrderCumulationTurnover());
    list.add(present_checkedOrderCumulationTurnover);
    if (present_checkedOrderCumulationTurnover)
      list.add(checkedOrderCumulationTurnover);

    boolean present_checkedMerchantSum = true && (isSetCheckedMerchantSum());
    list.add(present_checkedMerchantSum);
    if (present_checkedMerchantSum)
      list.add(checkedMerchantSum);

    boolean present_checkedMerchantCancelContract = true && (isSetCheckedMerchantCancelContract());
    list.add(present_checkedMerchantCancelContract);
    if (present_checkedMerchantCancelContract)
      list.add(checkedMerchantCancelContract);

    boolean present_checkedMerchantCumulation = true && (isSetCheckedMerchantCumulation());
    list.add(present_checkedMerchantCumulation);
    if (present_checkedMerchantCumulation)
      list.add(checkedMerchantCumulation);

    boolean present_checkedOutletCount = true && (isSetCheckedOutletCount());
    list.add(present_checkedOutletCount);
    if (present_checkedOutletCount)
      list.add(checkedOutletCount);

    boolean present_checkedOutletCumulation = true && (isSetCheckedOutletCumulation());
    list.add(present_checkedOutletCumulation);
    if (present_checkedOutletCumulation)
      list.add(checkedOutletCumulation);

    boolean present_checkedProductSum = true && (isSetCheckedProductSum());
    list.add(present_checkedProductSum);
    if (present_checkedProductSum)
      list.add(checkedProductSum);

    boolean present_checkedProductCumulation = true && (isSetCheckedProductCumulation());
    list.add(present_checkedProductCumulation);
    if (present_checkedProductCumulation)
      list.add(checkedProductCumulation);

    boolean present_checkedProductDownSum = true && (isSetCheckedProductDownSum());
    list.add(present_checkedProductDownSum);
    if (present_checkedProductDownSum)
      list.add(checkedProductDownSum);

    boolean present_checkedProductDownComulation = true && (isSetCheckedProductDownComulation());
    list.add(present_checkedProductDownComulation);
    if (present_checkedProductDownComulation)
      list.add(checkedProductDownComulation);

    boolean present_checkedMemberCount = true && (isSetCheckedMemberCount());
    list.add(present_checkedMemberCount);
    if (present_checkedMemberCount)
      list.add(checkedMemberCount);

    boolean present_checkedMemberComulationCount = true && (isSetCheckedMemberComulationCount());
    list.add(present_checkedMemberComulationCount);
    if (present_checkedMemberComulationCount)
      list.add(checkedMemberComulationCount);

    boolean present_type = true && (isSetType());
    list.add(present_type);
    if (present_type)
      list.add(type);

    boolean present_startYear = true && (isSetStartYear());
    list.add(present_startYear);
    if (present_startYear)
      list.add(startYear);

    boolean present_endYear = true && (isSetEndYear());
    list.add(present_endYear);
    if (present_endYear)
      list.add(endYear);

    boolean present_startMonth = true && (isSetStartMonth());
    list.add(present_startMonth);
    if (present_startMonth)
      list.add(startMonth);

    boolean present_endMonth = true && (isSetEndMonth());
    list.add(present_endMonth);
    if (present_endMonth)
      list.add(endMonth);

    boolean present_startWeek = true && (isSetStartWeek());
    list.add(present_startWeek);
    if (present_startWeek)
      list.add(startWeek);

    boolean present_endWeek = true && (isSetEndWeek());
    list.add(present_endWeek);
    if (present_endWeek)
      list.add(endWeek);

    return list.hashCode();
  }

  @Override
  public int compareTo(ReportReqVo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetLatitudeTupe()).compareTo(other.isSetLatitudeTupe());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLatitudeTupe()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.latitudeTupe, other.latitudeTupe);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCountType()).compareTo(other.isSetCountType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCountType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.countType, other.countType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartDate()).compareTo(other.isSetStartDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startDate, other.startDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndDate()).compareTo(other.isSetEndDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endDate, other.endDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClientId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlatform()).compareTo(other.isSetPlatform());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlatform()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platform, other.platform);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrgCode()).compareTo(other.isSetOrgCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrgCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orgCode, other.orgCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrgLevel()).compareTo(other.isSetOrgLevel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrgLevel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orgLevel, other.orgLevel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCheckedMerchant()).compareTo(other.isSetCheckedMerchant());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCheckedMerchant()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.checkedMerchant, other.checkedMerchant);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCheckedMerchantCategory()).compareTo(other.isSetCheckedMerchantCategory());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCheckedMerchantCategory()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.checkedMerchantCategory, other.checkedMerchantCategory);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderType()).compareTo(other.isSetOrderType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderType, other.orderType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPayType()).compareTo(other.isSetPayType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPayType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.payType, other.payType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCheckedAmount()).compareTo(other.isSetCheckedAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCheckedAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.checkedAmount, other.checkedAmount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCheckedAmountCumulation()).compareTo(other.isSetCheckedAmountCumulation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCheckedAmountCumulation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.checkedAmountCumulation, other.checkedAmountCumulation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCheckedAmountRefund()).compareTo(other.isSetCheckedAmountRefund());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCheckedAmountRefund()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.checkedAmountRefund, other.checkedAmountRefund);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCheckedAmountTurnover()).compareTo(other.isSetCheckedAmountTurnover());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCheckedAmountTurnover()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.checkedAmountTurnover, other.checkedAmountTurnover);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCheckedAmountCumulationTurnover()).compareTo(other.isSetCheckedAmountCumulationTurnover());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCheckedAmountCumulationTurnover()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.checkedAmountCumulationTurnover, other.checkedAmountCumulationTurnover);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCheckedOrderCount()).compareTo(other.isSetCheckedOrderCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCheckedOrderCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.checkedOrderCount, other.checkedOrderCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCheckedOrderCumulation()).compareTo(other.isSetCheckedOrderCumulation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCheckedOrderCumulation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.checkedOrderCumulation, other.checkedOrderCumulation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCheckedOrderRefund()).compareTo(other.isSetCheckedOrderRefund());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCheckedOrderRefund()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.checkedOrderRefund, other.checkedOrderRefund);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCheckedOrderTurnover()).compareTo(other.isSetCheckedOrderTurnover());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCheckedOrderTurnover()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.checkedOrderTurnover, other.checkedOrderTurnover);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCheckedOrderCumulationTurnover()).compareTo(other.isSetCheckedOrderCumulationTurnover());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCheckedOrderCumulationTurnover()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.checkedOrderCumulationTurnover, other.checkedOrderCumulationTurnover);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCheckedMerchantSum()).compareTo(other.isSetCheckedMerchantSum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCheckedMerchantSum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.checkedMerchantSum, other.checkedMerchantSum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCheckedMerchantCancelContract()).compareTo(other.isSetCheckedMerchantCancelContract());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCheckedMerchantCancelContract()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.checkedMerchantCancelContract, other.checkedMerchantCancelContract);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCheckedMerchantCumulation()).compareTo(other.isSetCheckedMerchantCumulation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCheckedMerchantCumulation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.checkedMerchantCumulation, other.checkedMerchantCumulation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCheckedOutletCount()).compareTo(other.isSetCheckedOutletCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCheckedOutletCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.checkedOutletCount, other.checkedOutletCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCheckedOutletCumulation()).compareTo(other.isSetCheckedOutletCumulation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCheckedOutletCumulation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.checkedOutletCumulation, other.checkedOutletCumulation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCheckedProductSum()).compareTo(other.isSetCheckedProductSum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCheckedProductSum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.checkedProductSum, other.checkedProductSum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCheckedProductCumulation()).compareTo(other.isSetCheckedProductCumulation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCheckedProductCumulation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.checkedProductCumulation, other.checkedProductCumulation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCheckedProductDownSum()).compareTo(other.isSetCheckedProductDownSum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCheckedProductDownSum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.checkedProductDownSum, other.checkedProductDownSum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCheckedProductDownComulation()).compareTo(other.isSetCheckedProductDownComulation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCheckedProductDownComulation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.checkedProductDownComulation, other.checkedProductDownComulation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCheckedMemberCount()).compareTo(other.isSetCheckedMemberCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCheckedMemberCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.checkedMemberCount, other.checkedMemberCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCheckedMemberComulationCount()).compareTo(other.isSetCheckedMemberComulationCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCheckedMemberComulationCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.checkedMemberComulationCount, other.checkedMemberComulationCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartYear()).compareTo(other.isSetStartYear());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartYear()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startYear, other.startYear);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndYear()).compareTo(other.isSetEndYear());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndYear()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endYear, other.endYear);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartMonth()).compareTo(other.isSetStartMonth());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartMonth()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startMonth, other.startMonth);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndMonth()).compareTo(other.isSetEndMonth());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndMonth()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endMonth, other.endMonth);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartWeek()).compareTo(other.isSetStartWeek());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartWeek()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startWeek, other.startWeek);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndWeek()).compareTo(other.isSetEndWeek());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndWeek()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endWeek, other.endWeek);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ReportReqVo(");
    boolean first = true;

    if (isSetLatitudeTupe()) {
      sb.append("latitudeTupe:");
      if (this.latitudeTupe == null) {
        sb.append("null");
      } else {
        sb.append(this.latitudeTupe);
      }
      first = false;
    }
    if (isSetCountType()) {
      if (!first) sb.append(", ");
      sb.append("countType:");
      if (this.countType == null) {
        sb.append("null");
      } else {
        sb.append(this.countType);
      }
      first = false;
    }
    if (isSetStartDate()) {
      if (!first) sb.append(", ");
      sb.append("startDate:");
      if (this.startDate == null) {
        sb.append("null");
      } else {
        sb.append(this.startDate);
      }
      first = false;
    }
    if (isSetEndDate()) {
      if (!first) sb.append(", ");
      sb.append("endDate:");
      if (this.endDate == null) {
        sb.append("null");
      } else {
        sb.append(this.endDate);
      }
      first = false;
    }
    if (isSetClientId()) {
      if (!first) sb.append(", ");
      sb.append("clientId:");
      if (this.clientId == null) {
        sb.append("null");
      } else {
        sb.append(this.clientId);
      }
      first = false;
    }
    if (isSetPlatform()) {
      if (!first) sb.append(", ");
      sb.append("platform:");
      if (this.platform == null) {
        sb.append("null");
      } else {
        sb.append(this.platform);
      }
      first = false;
    }
    if (isSetOrgCode()) {
      if (!first) sb.append(", ");
      sb.append("orgCode:");
      if (this.orgCode == null) {
        sb.append("null");
      } else {
        sb.append(this.orgCode);
      }
      first = false;
    }
    if (isSetOrgLevel()) {
      if (!first) sb.append(", ");
      sb.append("orgLevel:");
      sb.append(this.orgLevel);
      first = false;
    }
    if (isSetCheckedMerchant()) {
      if (!first) sb.append(", ");
      sb.append("checkedMerchant:");
      sb.append(this.checkedMerchant);
      first = false;
    }
    if (isSetCheckedMerchantCategory()) {
      if (!first) sb.append(", ");
      sb.append("checkedMerchantCategory:");
      sb.append(this.checkedMerchantCategory);
      first = false;
    }
    if (isSetOrderType()) {
      if (!first) sb.append(", ");
      sb.append("orderType:");
      if (this.orderType == null) {
        sb.append("null");
      } else {
        sb.append(this.orderType);
      }
      first = false;
    }
    if (isSetPayType()) {
      if (!first) sb.append(", ");
      sb.append("payType:");
      if (this.payType == null) {
        sb.append("null");
      } else {
        sb.append(this.payType);
      }
      first = false;
    }
    if (isSetCheckedAmount()) {
      if (!first) sb.append(", ");
      sb.append("checkedAmount:");
      sb.append(this.checkedAmount);
      first = false;
    }
    if (isSetCheckedAmountCumulation()) {
      if (!first) sb.append(", ");
      sb.append("checkedAmountCumulation:");
      sb.append(this.checkedAmountCumulation);
      first = false;
    }
    if (isSetCheckedAmountRefund()) {
      if (!first) sb.append(", ");
      sb.append("checkedAmountRefund:");
      sb.append(this.checkedAmountRefund);
      first = false;
    }
    if (isSetCheckedAmountTurnover()) {
      if (!first) sb.append(", ");
      sb.append("checkedAmountTurnover:");
      sb.append(this.checkedAmountTurnover);
      first = false;
    }
    if (isSetCheckedAmountCumulationTurnover()) {
      if (!first) sb.append(", ");
      sb.append("checkedAmountCumulationTurnover:");
      sb.append(this.checkedAmountCumulationTurnover);
      first = false;
    }
    if (isSetCheckedOrderCount()) {
      if (!first) sb.append(", ");
      sb.append("checkedOrderCount:");
      sb.append(this.checkedOrderCount);
      first = false;
    }
    if (isSetCheckedOrderCumulation()) {
      if (!first) sb.append(", ");
      sb.append("checkedOrderCumulation:");
      sb.append(this.checkedOrderCumulation);
      first = false;
    }
    if (isSetCheckedOrderRefund()) {
      if (!first) sb.append(", ");
      sb.append("checkedOrderRefund:");
      sb.append(this.checkedOrderRefund);
      first = false;
    }
    if (isSetCheckedOrderTurnover()) {
      if (!first) sb.append(", ");
      sb.append("checkedOrderTurnover:");
      sb.append(this.checkedOrderTurnover);
      first = false;
    }
    if (isSetCheckedOrderCumulationTurnover()) {
      if (!first) sb.append(", ");
      sb.append("checkedOrderCumulationTurnover:");
      sb.append(this.checkedOrderCumulationTurnover);
      first = false;
    }
    if (isSetCheckedMerchantSum()) {
      if (!first) sb.append(", ");
      sb.append("checkedMerchantSum:");
      sb.append(this.checkedMerchantSum);
      first = false;
    }
    if (isSetCheckedMerchantCancelContract()) {
      if (!first) sb.append(", ");
      sb.append("checkedMerchantCancelContract:");
      sb.append(this.checkedMerchantCancelContract);
      first = false;
    }
    if (isSetCheckedMerchantCumulation()) {
      if (!first) sb.append(", ");
      sb.append("checkedMerchantCumulation:");
      sb.append(this.checkedMerchantCumulation);
      first = false;
    }
    if (isSetCheckedOutletCount()) {
      if (!first) sb.append(", ");
      sb.append("checkedOutletCount:");
      sb.append(this.checkedOutletCount);
      first = false;
    }
    if (isSetCheckedOutletCumulation()) {
      if (!first) sb.append(", ");
      sb.append("checkedOutletCumulation:");
      sb.append(this.checkedOutletCumulation);
      first = false;
    }
    if (isSetCheckedProductSum()) {
      if (!first) sb.append(", ");
      sb.append("checkedProductSum:");
      sb.append(this.checkedProductSum);
      first = false;
    }
    if (isSetCheckedProductCumulation()) {
      if (!first) sb.append(", ");
      sb.append("checkedProductCumulation:");
      sb.append(this.checkedProductCumulation);
      first = false;
    }
    if (isSetCheckedProductDownSum()) {
      if (!first) sb.append(", ");
      sb.append("checkedProductDownSum:");
      sb.append(this.checkedProductDownSum);
      first = false;
    }
    if (isSetCheckedProductDownComulation()) {
      if (!first) sb.append(", ");
      sb.append("checkedProductDownComulation:");
      sb.append(this.checkedProductDownComulation);
      first = false;
    }
    if (isSetCheckedMemberCount()) {
      if (!first) sb.append(", ");
      sb.append("checkedMemberCount:");
      sb.append(this.checkedMemberCount);
      first = false;
    }
    if (isSetCheckedMemberComulationCount()) {
      if (!first) sb.append(", ");
      sb.append("checkedMemberComulationCount:");
      sb.append(this.checkedMemberComulationCount);
      first = false;
    }
    if (isSetType()) {
      if (!first) sb.append(", ");
      sb.append("type:");
      if (this.type == null) {
        sb.append("null");
      } else {
        sb.append(this.type);
      }
      first = false;
    }
    if (isSetStartYear()) {
      if (!first) sb.append(", ");
      sb.append("startYear:");
      if (this.startYear == null) {
        sb.append("null");
      } else {
        sb.append(this.startYear);
      }
      first = false;
    }
    if (isSetEndYear()) {
      if (!first) sb.append(", ");
      sb.append("endYear:");
      if (this.endYear == null) {
        sb.append("null");
      } else {
        sb.append(this.endYear);
      }
      first = false;
    }
    if (isSetStartMonth()) {
      if (!first) sb.append(", ");
      sb.append("startMonth:");
      if (this.startMonth == null) {
        sb.append("null");
      } else {
        sb.append(this.startMonth);
      }
      first = false;
    }
    if (isSetEndMonth()) {
      if (!first) sb.append(", ");
      sb.append("endMonth:");
      if (this.endMonth == null) {
        sb.append("null");
      } else {
        sb.append(this.endMonth);
      }
      first = false;
    }
    if (isSetStartWeek()) {
      if (!first) sb.append(", ");
      sb.append("startWeek:");
      if (this.startWeek == null) {
        sb.append("null");
      } else {
        sb.append(this.startWeek);
      }
      first = false;
    }
    if (isSetEndWeek()) {
      if (!first) sb.append(", ");
      sb.append("endWeek:");
      if (this.endWeek == null) {
        sb.append("null");
      } else {
        sb.append(this.endWeek);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ReportReqVoStandardSchemeFactory implements SchemeFactory {
    public ReportReqVoStandardScheme getScheme() {
      return new ReportReqVoStandardScheme();
    }
  }

  private static class ReportReqVoStandardScheme extends StandardScheme<ReportReqVo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ReportReqVo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // LATITUDE_TUPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.latitudeTupe = iprot.readString();
              struct.setLatitudeTupeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // COUNT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.countType = iprot.readString();
              struct.setCountTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // START_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.startDate = iprot.readString();
              struct.setStartDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // END_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.endDate = iprot.readString();
              struct.setEndDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CLIENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clientId = iprot.readString();
              struct.setClientIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PLATFORM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.platform = iprot.readString();
              struct.setPlatformIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ORG_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orgCode = iprot.readString();
              struct.setOrgCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ORG_LEVEL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.orgLevel = iprot.readI32();
              struct.setOrgLevelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // CHECKED_MERCHANT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.checkedMerchant = iprot.readBool();
              struct.setCheckedMerchantIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // CHECKED_MERCHANT_CATEGORY
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.checkedMerchantCategory = iprot.readBool();
              struct.setCheckedMerchantCategoryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // ORDER_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orderType = iprot.readString();
              struct.setOrderTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // PAY_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.payType = iprot.readString();
              struct.setPayTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // CHECKED_AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.checkedAmount = iprot.readBool();
              struct.setCheckedAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // CHECKED_AMOUNT_CUMULATION
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.checkedAmountCumulation = iprot.readBool();
              struct.setCheckedAmountCumulationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // CHECKED_AMOUNT_REFUND
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.checkedAmountRefund = iprot.readBool();
              struct.setCheckedAmountRefundIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // CHECKED_AMOUNT_TURNOVER
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.checkedAmountTurnover = iprot.readBool();
              struct.setCheckedAmountTurnoverIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // CHECKED_AMOUNT_CUMULATION_TURNOVER
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.checkedAmountCumulationTurnover = iprot.readBool();
              struct.setCheckedAmountCumulationTurnoverIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // CHECKED_ORDER_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.checkedOrderCount = iprot.readBool();
              struct.setCheckedOrderCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // CHECKED_ORDER_CUMULATION
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.checkedOrderCumulation = iprot.readBool();
              struct.setCheckedOrderCumulationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // CHECKED_ORDER_REFUND
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.checkedOrderRefund = iprot.readBool();
              struct.setCheckedOrderRefundIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // CHECKED_ORDER_TURNOVER
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.checkedOrderTurnover = iprot.readBool();
              struct.setCheckedOrderTurnoverIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // CHECKED_ORDER_CUMULATION_TURNOVER
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.checkedOrderCumulationTurnover = iprot.readBool();
              struct.setCheckedOrderCumulationTurnoverIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // CHECKED_MERCHANT_SUM
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.checkedMerchantSum = iprot.readBool();
              struct.setCheckedMerchantSumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // CHECKED_MERCHANT_CANCEL_CONTRACT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.checkedMerchantCancelContract = iprot.readBool();
              struct.setCheckedMerchantCancelContractIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // CHECKED_MERCHANT_CUMULATION
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.checkedMerchantCumulation = iprot.readBool();
              struct.setCheckedMerchantCumulationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // CHECKED_OUTLET_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.checkedOutletCount = iprot.readBool();
              struct.setCheckedOutletCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // CHECKED_OUTLET_CUMULATION
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.checkedOutletCumulation = iprot.readBool();
              struct.setCheckedOutletCumulationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // CHECKED_PRODUCT_SUM
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.checkedProductSum = iprot.readBool();
              struct.setCheckedProductSumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // CHECKED_PRODUCT_CUMULATION
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.checkedProductCumulation = iprot.readBool();
              struct.setCheckedProductCumulationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // CHECKED_PRODUCT_DOWN_SUM
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.checkedProductDownSum = iprot.readBool();
              struct.setCheckedProductDownSumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // CHECKED_PRODUCT_DOWN_COMULATION
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.checkedProductDownComulation = iprot.readBool();
              struct.setCheckedProductDownComulationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 32: // CHECKED_MEMBER_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.checkedMemberCount = iprot.readBool();
              struct.setCheckedMemberCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 33: // CHECKED_MEMBER_COMULATION_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.checkedMemberComulationCount = iprot.readBool();
              struct.setCheckedMemberComulationCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 34: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.type = iprot.readString();
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 35: // START_YEAR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.startYear = iprot.readString();
              struct.setStartYearIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 36: // END_YEAR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.endYear = iprot.readString();
              struct.setEndYearIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 37: // START_MONTH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.startMonth = iprot.readString();
              struct.setStartMonthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 38: // END_MONTH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.endMonth = iprot.readString();
              struct.setEndMonthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 39: // START_WEEK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.startWeek = iprot.readString();
              struct.setStartWeekIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 40: // END_WEEK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.endWeek = iprot.readString();
              struct.setEndWeekIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ReportReqVo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.latitudeTupe != null) {
        if (struct.isSetLatitudeTupe()) {
          oprot.writeFieldBegin(LATITUDE_TUPE_FIELD_DESC);
          oprot.writeString(struct.latitudeTupe);
          oprot.writeFieldEnd();
        }
      }
      if (struct.countType != null) {
        if (struct.isSetCountType()) {
          oprot.writeFieldBegin(COUNT_TYPE_FIELD_DESC);
          oprot.writeString(struct.countType);
          oprot.writeFieldEnd();
        }
      }
      if (struct.startDate != null) {
        if (struct.isSetStartDate()) {
          oprot.writeFieldBegin(START_DATE_FIELD_DESC);
          oprot.writeString(struct.startDate);
          oprot.writeFieldEnd();
        }
      }
      if (struct.endDate != null) {
        if (struct.isSetEndDate()) {
          oprot.writeFieldBegin(END_DATE_FIELD_DESC);
          oprot.writeString(struct.endDate);
          oprot.writeFieldEnd();
        }
      }
      if (struct.clientId != null) {
        if (struct.isSetClientId()) {
          oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
          oprot.writeString(struct.clientId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.platform != null) {
        if (struct.isSetPlatform()) {
          oprot.writeFieldBegin(PLATFORM_FIELD_DESC);
          oprot.writeString(struct.platform);
          oprot.writeFieldEnd();
        }
      }
      if (struct.orgCode != null) {
        if (struct.isSetOrgCode()) {
          oprot.writeFieldBegin(ORG_CODE_FIELD_DESC);
          oprot.writeString(struct.orgCode);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetOrgLevel()) {
        oprot.writeFieldBegin(ORG_LEVEL_FIELD_DESC);
        oprot.writeI32(struct.orgLevel);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCheckedMerchant()) {
        oprot.writeFieldBegin(CHECKED_MERCHANT_FIELD_DESC);
        oprot.writeBool(struct.checkedMerchant);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCheckedMerchantCategory()) {
        oprot.writeFieldBegin(CHECKED_MERCHANT_CATEGORY_FIELD_DESC);
        oprot.writeBool(struct.checkedMerchantCategory);
        oprot.writeFieldEnd();
      }
      if (struct.orderType != null) {
        if (struct.isSetOrderType()) {
          oprot.writeFieldBegin(ORDER_TYPE_FIELD_DESC);
          oprot.writeString(struct.orderType);
          oprot.writeFieldEnd();
        }
      }
      if (struct.payType != null) {
        if (struct.isSetPayType()) {
          oprot.writeFieldBegin(PAY_TYPE_FIELD_DESC);
          oprot.writeString(struct.payType);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetCheckedAmount()) {
        oprot.writeFieldBegin(CHECKED_AMOUNT_FIELD_DESC);
        oprot.writeBool(struct.checkedAmount);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCheckedAmountCumulation()) {
        oprot.writeFieldBegin(CHECKED_AMOUNT_CUMULATION_FIELD_DESC);
        oprot.writeBool(struct.checkedAmountCumulation);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCheckedAmountRefund()) {
        oprot.writeFieldBegin(CHECKED_AMOUNT_REFUND_FIELD_DESC);
        oprot.writeBool(struct.checkedAmountRefund);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCheckedAmountTurnover()) {
        oprot.writeFieldBegin(CHECKED_AMOUNT_TURNOVER_FIELD_DESC);
        oprot.writeBool(struct.checkedAmountTurnover);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCheckedAmountCumulationTurnover()) {
        oprot.writeFieldBegin(CHECKED_AMOUNT_CUMULATION_TURNOVER_FIELD_DESC);
        oprot.writeBool(struct.checkedAmountCumulationTurnover);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCheckedOrderCount()) {
        oprot.writeFieldBegin(CHECKED_ORDER_COUNT_FIELD_DESC);
        oprot.writeBool(struct.checkedOrderCount);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCheckedOrderCumulation()) {
        oprot.writeFieldBegin(CHECKED_ORDER_CUMULATION_FIELD_DESC);
        oprot.writeBool(struct.checkedOrderCumulation);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCheckedOrderRefund()) {
        oprot.writeFieldBegin(CHECKED_ORDER_REFUND_FIELD_DESC);
        oprot.writeBool(struct.checkedOrderRefund);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCheckedOrderTurnover()) {
        oprot.writeFieldBegin(CHECKED_ORDER_TURNOVER_FIELD_DESC);
        oprot.writeBool(struct.checkedOrderTurnover);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCheckedOrderCumulationTurnover()) {
        oprot.writeFieldBegin(CHECKED_ORDER_CUMULATION_TURNOVER_FIELD_DESC);
        oprot.writeBool(struct.checkedOrderCumulationTurnover);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCheckedMerchantSum()) {
        oprot.writeFieldBegin(CHECKED_MERCHANT_SUM_FIELD_DESC);
        oprot.writeBool(struct.checkedMerchantSum);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCheckedMerchantCancelContract()) {
        oprot.writeFieldBegin(CHECKED_MERCHANT_CANCEL_CONTRACT_FIELD_DESC);
        oprot.writeBool(struct.checkedMerchantCancelContract);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCheckedMerchantCumulation()) {
        oprot.writeFieldBegin(CHECKED_MERCHANT_CUMULATION_FIELD_DESC);
        oprot.writeBool(struct.checkedMerchantCumulation);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCheckedOutletCount()) {
        oprot.writeFieldBegin(CHECKED_OUTLET_COUNT_FIELD_DESC);
        oprot.writeBool(struct.checkedOutletCount);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCheckedOutletCumulation()) {
        oprot.writeFieldBegin(CHECKED_OUTLET_CUMULATION_FIELD_DESC);
        oprot.writeBool(struct.checkedOutletCumulation);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCheckedProductSum()) {
        oprot.writeFieldBegin(CHECKED_PRODUCT_SUM_FIELD_DESC);
        oprot.writeBool(struct.checkedProductSum);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCheckedProductCumulation()) {
        oprot.writeFieldBegin(CHECKED_PRODUCT_CUMULATION_FIELD_DESC);
        oprot.writeBool(struct.checkedProductCumulation);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCheckedProductDownSum()) {
        oprot.writeFieldBegin(CHECKED_PRODUCT_DOWN_SUM_FIELD_DESC);
        oprot.writeBool(struct.checkedProductDownSum);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCheckedProductDownComulation()) {
        oprot.writeFieldBegin(CHECKED_PRODUCT_DOWN_COMULATION_FIELD_DESC);
        oprot.writeBool(struct.checkedProductDownComulation);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCheckedMemberCount()) {
        oprot.writeFieldBegin(CHECKED_MEMBER_COUNT_FIELD_DESC);
        oprot.writeBool(struct.checkedMemberCount);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCheckedMemberComulationCount()) {
        oprot.writeFieldBegin(CHECKED_MEMBER_COMULATION_COUNT_FIELD_DESC);
        oprot.writeBool(struct.checkedMemberComulationCount);
        oprot.writeFieldEnd();
      }
      if (struct.type != null) {
        if (struct.isSetType()) {
          oprot.writeFieldBegin(TYPE_FIELD_DESC);
          oprot.writeString(struct.type);
          oprot.writeFieldEnd();
        }
      }
      if (struct.startYear != null) {
        if (struct.isSetStartYear()) {
          oprot.writeFieldBegin(START_YEAR_FIELD_DESC);
          oprot.writeString(struct.startYear);
          oprot.writeFieldEnd();
        }
      }
      if (struct.endYear != null) {
        if (struct.isSetEndYear()) {
          oprot.writeFieldBegin(END_YEAR_FIELD_DESC);
          oprot.writeString(struct.endYear);
          oprot.writeFieldEnd();
        }
      }
      if (struct.startMonth != null) {
        if (struct.isSetStartMonth()) {
          oprot.writeFieldBegin(START_MONTH_FIELD_DESC);
          oprot.writeString(struct.startMonth);
          oprot.writeFieldEnd();
        }
      }
      if (struct.endMonth != null) {
        if (struct.isSetEndMonth()) {
          oprot.writeFieldBegin(END_MONTH_FIELD_DESC);
          oprot.writeString(struct.endMonth);
          oprot.writeFieldEnd();
        }
      }
      if (struct.startWeek != null) {
        if (struct.isSetStartWeek()) {
          oprot.writeFieldBegin(START_WEEK_FIELD_DESC);
          oprot.writeString(struct.startWeek);
          oprot.writeFieldEnd();
        }
      }
      if (struct.endWeek != null) {
        if (struct.isSetEndWeek()) {
          oprot.writeFieldBegin(END_WEEK_FIELD_DESC);
          oprot.writeString(struct.endWeek);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ReportReqVoTupleSchemeFactory implements SchemeFactory {
    public ReportReqVoTupleScheme getScheme() {
      return new ReportReqVoTupleScheme();
    }
  }

  private static class ReportReqVoTupleScheme extends TupleScheme<ReportReqVo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ReportReqVo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetLatitudeTupe()) {
        optionals.set(0);
      }
      if (struct.isSetCountType()) {
        optionals.set(1);
      }
      if (struct.isSetStartDate()) {
        optionals.set(2);
      }
      if (struct.isSetEndDate()) {
        optionals.set(3);
      }
      if (struct.isSetClientId()) {
        optionals.set(4);
      }
      if (struct.isSetPlatform()) {
        optionals.set(5);
      }
      if (struct.isSetOrgCode()) {
        optionals.set(6);
      }
      if (struct.isSetOrgLevel()) {
        optionals.set(7);
      }
      if (struct.isSetCheckedMerchant()) {
        optionals.set(8);
      }
      if (struct.isSetCheckedMerchantCategory()) {
        optionals.set(9);
      }
      if (struct.isSetOrderType()) {
        optionals.set(10);
      }
      if (struct.isSetPayType()) {
        optionals.set(11);
      }
      if (struct.isSetCheckedAmount()) {
        optionals.set(12);
      }
      if (struct.isSetCheckedAmountCumulation()) {
        optionals.set(13);
      }
      if (struct.isSetCheckedAmountRefund()) {
        optionals.set(14);
      }
      if (struct.isSetCheckedAmountTurnover()) {
        optionals.set(15);
      }
      if (struct.isSetCheckedAmountCumulationTurnover()) {
        optionals.set(16);
      }
      if (struct.isSetCheckedOrderCount()) {
        optionals.set(17);
      }
      if (struct.isSetCheckedOrderCumulation()) {
        optionals.set(18);
      }
      if (struct.isSetCheckedOrderRefund()) {
        optionals.set(19);
      }
      if (struct.isSetCheckedOrderTurnover()) {
        optionals.set(20);
      }
      if (struct.isSetCheckedOrderCumulationTurnover()) {
        optionals.set(21);
      }
      if (struct.isSetCheckedMerchantSum()) {
        optionals.set(22);
      }
      if (struct.isSetCheckedMerchantCancelContract()) {
        optionals.set(23);
      }
      if (struct.isSetCheckedMerchantCumulation()) {
        optionals.set(24);
      }
      if (struct.isSetCheckedOutletCount()) {
        optionals.set(25);
      }
      if (struct.isSetCheckedOutletCumulation()) {
        optionals.set(26);
      }
      if (struct.isSetCheckedProductSum()) {
        optionals.set(27);
      }
      if (struct.isSetCheckedProductCumulation()) {
        optionals.set(28);
      }
      if (struct.isSetCheckedProductDownSum()) {
        optionals.set(29);
      }
      if (struct.isSetCheckedProductDownComulation()) {
        optionals.set(30);
      }
      if (struct.isSetCheckedMemberCount()) {
        optionals.set(31);
      }
      if (struct.isSetCheckedMemberComulationCount()) {
        optionals.set(32);
      }
      if (struct.isSetType()) {
        optionals.set(33);
      }
      if (struct.isSetStartYear()) {
        optionals.set(34);
      }
      if (struct.isSetEndYear()) {
        optionals.set(35);
      }
      if (struct.isSetStartMonth()) {
        optionals.set(36);
      }
      if (struct.isSetEndMonth()) {
        optionals.set(37);
      }
      if (struct.isSetStartWeek()) {
        optionals.set(38);
      }
      if (struct.isSetEndWeek()) {
        optionals.set(39);
      }
      oprot.writeBitSet(optionals, 40);
      if (struct.isSetLatitudeTupe()) {
        oprot.writeString(struct.latitudeTupe);
      }
      if (struct.isSetCountType()) {
        oprot.writeString(struct.countType);
      }
      if (struct.isSetStartDate()) {
        oprot.writeString(struct.startDate);
      }
      if (struct.isSetEndDate()) {
        oprot.writeString(struct.endDate);
      }
      if (struct.isSetClientId()) {
        oprot.writeString(struct.clientId);
      }
      if (struct.isSetPlatform()) {
        oprot.writeString(struct.platform);
      }
      if (struct.isSetOrgCode()) {
        oprot.writeString(struct.orgCode);
      }
      if (struct.isSetOrgLevel()) {
        oprot.writeI32(struct.orgLevel);
      }
      if (struct.isSetCheckedMerchant()) {
        oprot.writeBool(struct.checkedMerchant);
      }
      if (struct.isSetCheckedMerchantCategory()) {
        oprot.writeBool(struct.checkedMerchantCategory);
      }
      if (struct.isSetOrderType()) {
        oprot.writeString(struct.orderType);
      }
      if (struct.isSetPayType()) {
        oprot.writeString(struct.payType);
      }
      if (struct.isSetCheckedAmount()) {
        oprot.writeBool(struct.checkedAmount);
      }
      if (struct.isSetCheckedAmountCumulation()) {
        oprot.writeBool(struct.checkedAmountCumulation);
      }
      if (struct.isSetCheckedAmountRefund()) {
        oprot.writeBool(struct.checkedAmountRefund);
      }
      if (struct.isSetCheckedAmountTurnover()) {
        oprot.writeBool(struct.checkedAmountTurnover);
      }
      if (struct.isSetCheckedAmountCumulationTurnover()) {
        oprot.writeBool(struct.checkedAmountCumulationTurnover);
      }
      if (struct.isSetCheckedOrderCount()) {
        oprot.writeBool(struct.checkedOrderCount);
      }
      if (struct.isSetCheckedOrderCumulation()) {
        oprot.writeBool(struct.checkedOrderCumulation);
      }
      if (struct.isSetCheckedOrderRefund()) {
        oprot.writeBool(struct.checkedOrderRefund);
      }
      if (struct.isSetCheckedOrderTurnover()) {
        oprot.writeBool(struct.checkedOrderTurnover);
      }
      if (struct.isSetCheckedOrderCumulationTurnover()) {
        oprot.writeBool(struct.checkedOrderCumulationTurnover);
      }
      if (struct.isSetCheckedMerchantSum()) {
        oprot.writeBool(struct.checkedMerchantSum);
      }
      if (struct.isSetCheckedMerchantCancelContract()) {
        oprot.writeBool(struct.checkedMerchantCancelContract);
      }
      if (struct.isSetCheckedMerchantCumulation()) {
        oprot.writeBool(struct.checkedMerchantCumulation);
      }
      if (struct.isSetCheckedOutletCount()) {
        oprot.writeBool(struct.checkedOutletCount);
      }
      if (struct.isSetCheckedOutletCumulation()) {
        oprot.writeBool(struct.checkedOutletCumulation);
      }
      if (struct.isSetCheckedProductSum()) {
        oprot.writeBool(struct.checkedProductSum);
      }
      if (struct.isSetCheckedProductCumulation()) {
        oprot.writeBool(struct.checkedProductCumulation);
      }
      if (struct.isSetCheckedProductDownSum()) {
        oprot.writeBool(struct.checkedProductDownSum);
      }
      if (struct.isSetCheckedProductDownComulation()) {
        oprot.writeBool(struct.checkedProductDownComulation);
      }
      if (struct.isSetCheckedMemberCount()) {
        oprot.writeBool(struct.checkedMemberCount);
      }
      if (struct.isSetCheckedMemberComulationCount()) {
        oprot.writeBool(struct.checkedMemberComulationCount);
      }
      if (struct.isSetType()) {
        oprot.writeString(struct.type);
      }
      if (struct.isSetStartYear()) {
        oprot.writeString(struct.startYear);
      }
      if (struct.isSetEndYear()) {
        oprot.writeString(struct.endYear);
      }
      if (struct.isSetStartMonth()) {
        oprot.writeString(struct.startMonth);
      }
      if (struct.isSetEndMonth()) {
        oprot.writeString(struct.endMonth);
      }
      if (struct.isSetStartWeek()) {
        oprot.writeString(struct.startWeek);
      }
      if (struct.isSetEndWeek()) {
        oprot.writeString(struct.endWeek);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ReportReqVo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(40);
      if (incoming.get(0)) {
        struct.latitudeTupe = iprot.readString();
        struct.setLatitudeTupeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.countType = iprot.readString();
        struct.setCountTypeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.startDate = iprot.readString();
        struct.setStartDateIsSet(true);
      }
      if (incoming.get(3)) {
        struct.endDate = iprot.readString();
        struct.setEndDateIsSet(true);
      }
      if (incoming.get(4)) {
        struct.clientId = iprot.readString();
        struct.setClientIdIsSet(true);
      }
      if (incoming.get(5)) {
        struct.platform = iprot.readString();
        struct.setPlatformIsSet(true);
      }
      if (incoming.get(6)) {
        struct.orgCode = iprot.readString();
        struct.setOrgCodeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.orgLevel = iprot.readI32();
        struct.setOrgLevelIsSet(true);
      }
      if (incoming.get(8)) {
        struct.checkedMerchant = iprot.readBool();
        struct.setCheckedMerchantIsSet(true);
      }
      if (incoming.get(9)) {
        struct.checkedMerchantCategory = iprot.readBool();
        struct.setCheckedMerchantCategoryIsSet(true);
      }
      if (incoming.get(10)) {
        struct.orderType = iprot.readString();
        struct.setOrderTypeIsSet(true);
      }
      if (incoming.get(11)) {
        struct.payType = iprot.readString();
        struct.setPayTypeIsSet(true);
      }
      if (incoming.get(12)) {
        struct.checkedAmount = iprot.readBool();
        struct.setCheckedAmountIsSet(true);
      }
      if (incoming.get(13)) {
        struct.checkedAmountCumulation = iprot.readBool();
        struct.setCheckedAmountCumulationIsSet(true);
      }
      if (incoming.get(14)) {
        struct.checkedAmountRefund = iprot.readBool();
        struct.setCheckedAmountRefundIsSet(true);
      }
      if (incoming.get(15)) {
        struct.checkedAmountTurnover = iprot.readBool();
        struct.setCheckedAmountTurnoverIsSet(true);
      }
      if (incoming.get(16)) {
        struct.checkedAmountCumulationTurnover = iprot.readBool();
        struct.setCheckedAmountCumulationTurnoverIsSet(true);
      }
      if (incoming.get(17)) {
        struct.checkedOrderCount = iprot.readBool();
        struct.setCheckedOrderCountIsSet(true);
      }
      if (incoming.get(18)) {
        struct.checkedOrderCumulation = iprot.readBool();
        struct.setCheckedOrderCumulationIsSet(true);
      }
      if (incoming.get(19)) {
        struct.checkedOrderRefund = iprot.readBool();
        struct.setCheckedOrderRefundIsSet(true);
      }
      if (incoming.get(20)) {
        struct.checkedOrderTurnover = iprot.readBool();
        struct.setCheckedOrderTurnoverIsSet(true);
      }
      if (incoming.get(21)) {
        struct.checkedOrderCumulationTurnover = iprot.readBool();
        struct.setCheckedOrderCumulationTurnoverIsSet(true);
      }
      if (incoming.get(22)) {
        struct.checkedMerchantSum = iprot.readBool();
        struct.setCheckedMerchantSumIsSet(true);
      }
      if (incoming.get(23)) {
        struct.checkedMerchantCancelContract = iprot.readBool();
        struct.setCheckedMerchantCancelContractIsSet(true);
      }
      if (incoming.get(24)) {
        struct.checkedMerchantCumulation = iprot.readBool();
        struct.setCheckedMerchantCumulationIsSet(true);
      }
      if (incoming.get(25)) {
        struct.checkedOutletCount = iprot.readBool();
        struct.setCheckedOutletCountIsSet(true);
      }
      if (incoming.get(26)) {
        struct.checkedOutletCumulation = iprot.readBool();
        struct.setCheckedOutletCumulationIsSet(true);
      }
      if (incoming.get(27)) {
        struct.checkedProductSum = iprot.readBool();
        struct.setCheckedProductSumIsSet(true);
      }
      if (incoming.get(28)) {
        struct.checkedProductCumulation = iprot.readBool();
        struct.setCheckedProductCumulationIsSet(true);
      }
      if (incoming.get(29)) {
        struct.checkedProductDownSum = iprot.readBool();
        struct.setCheckedProductDownSumIsSet(true);
      }
      if (incoming.get(30)) {
        struct.checkedProductDownComulation = iprot.readBool();
        struct.setCheckedProductDownComulationIsSet(true);
      }
      if (incoming.get(31)) {
        struct.checkedMemberCount = iprot.readBool();
        struct.setCheckedMemberCountIsSet(true);
      }
      if (incoming.get(32)) {
        struct.checkedMemberComulationCount = iprot.readBool();
        struct.setCheckedMemberComulationCountIsSet(true);
      }
      if (incoming.get(33)) {
        struct.type = iprot.readString();
        struct.setTypeIsSet(true);
      }
      if (incoming.get(34)) {
        struct.startYear = iprot.readString();
        struct.setStartYearIsSet(true);
      }
      if (incoming.get(35)) {
        struct.endYear = iprot.readString();
        struct.setEndYearIsSet(true);
      }
      if (incoming.get(36)) {
        struct.startMonth = iprot.readString();
        struct.setStartMonthIsSet(true);
      }
      if (incoming.get(37)) {
        struct.endMonth = iprot.readString();
        struct.setEndMonthIsSet(true);
      }
      if (incoming.get(38)) {
        struct.startWeek = iprot.readString();
        struct.setStartWeekIsSet(true);
      }
      if (incoming.get(39)) {
        struct.endWeek = iprot.readString();
        struct.setEndWeekIsSet(true);
      }
    }
  }

}

